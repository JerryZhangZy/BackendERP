    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Bogus;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPApi
{
    /// <summary>
    /// Request and Response payload object for Add API
    /// </summary>
    [Serializable()]
    public class EventERPPayloadAdd
    {
        /// <summary>
        /// (Request Data) EventERP object to add.
        /// (Response Data) EventERP object which has been added.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) EventERP object to add.")]
        public EventERPDataDto EventERP { get; set; }
        
        public static EventERPPayloadAdd GetSampleData()
        {
            var data = new EventERPPayloadAdd();
            data.EventERP = new EventERPDataDto().GetFakerData();
            return data;
        }
    }


    /// <summary>
    /// Request and Response payload object for Patch API
    /// </summary>
    [Serializable()]
    public class EventERPPayloadUpdate
    {
        /// <summary>
        /// (Request Data) EventERP object to update.
        /// (Response Data) EventERP object which has been updated.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) EventERP object to update.")]
        public EventERPDataDto EventERP { get; set; }
    }



    ///// <summary>
    ///// Response payload object for GET single API
    ///// </summary>
    //[Serializable()]
    //public class EventERPPayloadGetSingle
    //{
    //    /// <summary>
    //    /// (Response Data) EventERP object.
    //    /// </summary>
    //    [OpenApiPropertyDescription("(Response) EventERP object to get.")]
    //    public EventERPDataDto EventERP { get; set; }
    //}


    ///// <summary>
    ///// Request and Response payload object for GET multiple API
    ///// </summary>
    //[Serializable()]
    //public class EventERPPayloadGetMultiple
    //{
    //    /// <summary>
    //    /// (Request) Array of uuid to get multiple EventERPs.
    //    /// </summary>
    //    [OpenApiPropertyDescription("(Request) Array of uuid to get multiple EventERPs.")]
    //    public IList<string> EventUuids { get; set; }

    //    /// <summary>
    //    /// (Response) Array of EventERP which get by uuid array.
    //    /// </summary>
    //    [OpenApiPropertyDescription("(Response) Array of EventERP which get by uuid array.")]
    //    public IList<EventERPDataDto> EventERPs { get; set; }
    //}


    ///// <summary>
    ///// Response payload object for DELETE API
    ///// </summary>
    //[Serializable()]
    //public class EventERPPayloadDelete
    //{
    //}


    /// <summary>
    /// Request Response payload for FIND API
    /// </summary>
    [Serializable()]
    public class EventERPPayloadFind : FilterPayloadBase<EventERPFilter>
    {
        /// <summary>
        /// (Response) List result which load by filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response) List result which load by filter and paging.")]
        public IList<Object> EventERPList { get; set; }

        /// <summary>
        /// (Response) List result count which load by filter and paging.
        /// </summary>
        public int EventERPListCount { get; set; }
        
        public static EventERPPayloadFind GetSampleData()
        {
            var data = new EventERPPayloadFind()
            {
                LoadAll = false,
                Skip = 0,
                Top = 100,
                SortBy = "",
                Filter = EventERPFilter.GetFaker().Generate()
            };
            return data;
        }
    }

    public class EventERPFilter
    {
        public string ActionDateFrom { get; set; }
        public string ActionDateTo { get; set; }
        public string ActionStatus { get; set; }
        public string ERPEventType { get; set; }

        public static Faker<EventERPFilter> GetFaker()
        {
            #region faker data rules
            return new Faker<EventERPFilter>()
                .RuleFor(u => u.ActionDateFrom, f => "")
                .RuleFor(u => u.ActionDateTo, f => "")
                .RuleFor(u => u.ActionStatus, f => "")
                .RuleFor(u => u.ERPEventType, f => "")
                ;
            #endregion faker data rules
        }
    }

}

