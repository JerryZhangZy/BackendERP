

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using Bogus;
using DigitBridge.Base.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using System;
using System.Collections.Generic;
using System.Text;

namespace DigitBridge.CommerceCentral.ERP.Integration.Api
{
    /// <summary>
    /// Request Response payload for FIND API
    /// </summary>
    [Serializable()]
    public class InvoiceUnprocessPayloadFind : FilterPayloadBase<InvoiceUnprocessPayloadFilter>
    {
        #region list service

        /// <summary>
        /// (Response Data) List result which load filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response Data) List result which load filter and paging.")]
        public IList<Object> InvoiceUnprocessListPayload { get; set; }

        /// <summary>
        /// (Response Data) List result count which load filter and paging.
        /// </summary>
        public int? InvoiceUnprocessListPayloadCount { get; set; }

        #endregion list service 

        public static InvoiceUnprocessPayloadFind GetSampleData()
        {
            var data = new InvoiceUnprocessPayloadFind()
            {
                LoadAll = false,
                Skip = 0,
                Top = 20,
                SortBy = "",
                Filter = InvoiceUnprocessPayloadFilter.GetFaker().Generate()
            };
            return data;
        }

    }

    public class InvoiceUnprocessPayloadFilter
    {
        public int? ChannelNum { get; set; }
        public int? ChannelAccountNum { get; set; }
        //public int EventProcessActionStatus { get; set; }

        public static Faker<InvoiceUnprocessPayloadFilter> GetFaker()
        {
            #region faker data rules
            return new Faker<InvoiceUnprocessPayloadFilter>()
                .RuleFor(u => u.ChannelNum, f => f.Random.Int(1, 100))
                .RuleFor(u => u.ChannelAccountNum, f => f.Random.Int(1, 100))
                //.RuleFor(u => u.EventProcessActionStatus, f => (int)EventProcessActionStatusEnum.Default)
                ;
            #endregion faker data rules
        }
    }
}

