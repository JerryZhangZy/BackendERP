              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.QuickBooks.Integration
{
    /// <summary>
    /// Represents a QuickBooksConnectionInfoData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class QuickBooksConnectionInfoData : StructureRepository<QuickBooksConnectionInfoData>
    {
        public QuickBooksConnectionInfoData() : base() {}
        public QuickBooksConnectionInfoData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => QuickBooksConnectionInfo.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => QuickBooksConnectionInfo.UniqueId;
        
			 [JsonIgnore, XmlIgnore] 
			public static string QuickBooksConnectionInfoTable ="QuickBooksConnectionInfo ";
			
        #region CRUD Methods

        public override bool Equals(QuickBooksConnectionInfoData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(QuickBooksConnectionInfoData other)
        {
			if (QuickBooksConnectionInfo == null && other.QuickBooksConnectionInfo != null || QuickBooksConnectionInfo != null && other.QuickBooksConnectionInfo == null) 
				return false; 
			if (QuickBooksConnectionInfo != null && other.QuickBooksConnectionInfo != null && !QuickBooksConnectionInfo.Equals(other.QuickBooksConnectionInfo)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override QuickBooksConnectionInfoData CheckIntegrity()
        {
			if (QuickBooksConnectionInfo is null) return this; 
			QuickBooksConnectionInfo.CheckIntegrity(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			QuickBooksConnectionInfo?.Clear(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			QuickBooksConnectionInfo = NewQuickBooksConnectionInfo(); 
            return;
        }

        public virtual void CopyFrom(QuickBooksConnectionInfoData data)
        {
			CopyQuickBooksConnectionInfoFrom(data); 
            CheckIntegrity();
            return;
        }

        public override QuickBooksConnectionInfoData Clone()
        {
			var newData = new QuickBooksConnectionInfoData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.QuickBooksConnectionInfo.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetQuickBooksConnectionInfo(RowNum); 
			if (obj is null) return false; 
			QuickBooksConnectionInfo = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string ConnectionUuid)
        {
			var obj = GetQuickBooksConnectionInfoByConnectionUuid(ConnectionUuid); 
			if (obj is null) return false; 
			QuickBooksConnectionInfo = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(QuickBooksConnectionInfo.ConnectionUuid)) return; 
        }

        public override bool Save()
        {
			if (QuickBooksConnectionInfo is null || string.IsNullOrEmpty(QuickBooksConnectionInfo.ConnectionUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(QuickBooksConnectionInfoTable))
			{
				QuickBooksConnectionInfo.SetDataBaseFactory(dbFactory);
				if (!QuickBooksConnectionInfo.Save()) return false;
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (QuickBooksConnectionInfo is null || string.IsNullOrEmpty(QuickBooksConnectionInfo.ConnectionUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(QuickBooksConnectionInfoTable))
			{
				QuickBooksConnectionInfo.SetDataBaseFactory(dbFactory); 
				if (QuickBooksConnectionInfo.Delete() <= 0) return false; 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetQuickBooksConnectionInfoAsync(RowNum); 
			if (obj is null) return false; 
			QuickBooksConnectionInfo = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string ConnectionUuid)
        {
			var obj = await GetQuickBooksConnectionInfoByConnectionUuidAsync(ConnectionUuid); 
			if (obj is null) return false; 
			QuickBooksConnectionInfo = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(QuickBooksConnectionInfo.ConnectionUuid)) return; 
        }

        public override async Task<bool> SaveAsync()
        {
			if (QuickBooksConnectionInfo is null || string.IsNullOrEmpty(QuickBooksConnectionInfo.ConnectionUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(QuickBooksConnectionInfoTable))
			{
				QuickBooksConnectionInfo.SetDataBaseFactory(dbFactory); 
				if (!(await QuickBooksConnectionInfo.SaveAsync())) return false; 
			}
			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (QuickBooksConnectionInfo is null || string.IsNullOrEmpty(QuickBooksConnectionInfo.ConnectionUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(QuickBooksConnectionInfoTable))
			{
			QuickBooksConnectionInfo.SetDataBaseFactory(dbFactory); 
			if ((await QuickBooksConnectionInfo.DeleteAsync()) <= 0) return false; 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region QuickBooksConnectionInfo - Generated 
    

        // one to one children
        protected QuickBooksConnectionInfo _QuickBooksConnectionInfo;

        public virtual QuickBooksConnectionInfo QuickBooksConnectionInfo 
        { 
            get => _QuickBooksConnectionInfo;
            set => _QuickBooksConnectionInfo = value?.SetParent(this); 
        }

        public virtual void CopyQuickBooksConnectionInfoFrom(QuickBooksConnectionInfoData data) => 
            QuickBooksConnectionInfo?.CopyFrom(data.QuickBooksConnectionInfo, new string[] {"ConnectionUuid"});

        public virtual QuickBooksConnectionInfo NewQuickBooksConnectionInfo() => new QuickBooksConnectionInfo(dbFactory).SetParent(this);

        public virtual QuickBooksConnectionInfo GetQuickBooksConnectionInfo(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<QuickBooksConnectionInfo>(RowNum);

        public virtual QuickBooksConnectionInfo GetQuickBooksConnectionInfoByConnectionUuid(string ConnectionUuid) =>
            (string.IsNullOrEmpty(ConnectionUuid)) ? null : dbFactory.GetById<QuickBooksConnectionInfo>(ConnectionUuid);

        public virtual bool SaveQuickBooksConnectionInfo(QuickBooksConnectionInfo data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteQuickBooksConnectionInfo(QuickBooksConnectionInfo data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<QuickBooksConnectionInfo> GetQuickBooksConnectionInfoAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<QuickBooksConnectionInfo>(RowNum);

        public virtual async Task<QuickBooksConnectionInfo> GetQuickBooksConnectionInfoByConnectionUuidAsync(string ConnectionUuid) =>
            (string.IsNullOrEmpty(ConnectionUuid)) ? null : await dbFactory.GetByIdAsync<QuickBooksConnectionInfo>(ConnectionUuid);

        public virtual async Task<bool> SaveQuickBooksConnectionInfoAsync(QuickBooksConnectionInfo data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteQuickBooksConnectionInfoAsync(QuickBooksConnectionInfo data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion QuickBooksConnectionInfo - Generated 


    }
}



