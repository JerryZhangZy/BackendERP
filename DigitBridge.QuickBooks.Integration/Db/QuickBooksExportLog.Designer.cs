

              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.QuickBooks.Integration
{
    /// <summary>
    /// Represents a QuickBooksExportLog.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("QuickBooksExportLog")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("QuickBooksExportLogUuid")]
    [DtoName("QuickBooksExportLogDto")]
    public partial class QuickBooksExportLog : TableRepository<QuickBooksExportLog, long>
    {

        public QuickBooksExportLog() : base() {}
        public QuickBooksExportLog(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("DatabaseNum",SqlDbType.Int,NotNull=true)]
        private int _databaseNum;

        [Column("MasterAccountNum",SqlDbType.Int,NotNull=true)]
        private int _masterAccountNum;

        [Column("ProfileNum",SqlDbType.Int,NotNull=true)]
        private int _profileNum;

        [Column("QuickBooksExportLogUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _quickBooksExportLogUuid;

        [Column("BatchNum",SqlDbType.BigInt,IsDefault=true)]
        private long? _batchNum;

        [Column("LogType",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _logType;

        [Column("LogUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _logUuid;

        [Column("DocNumber",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _docNumber;

        [Column("DocStatus",SqlDbType.Int,IsDefault=true)]
        private int? _docStatus;

        [Column("LogDate",SqlDbType.Date,NotNull=true)]
        private DateTime _logDate;

        [Column("LogTime",SqlDbType.Time,NotNull=true)]
        private TimeSpan _logTime;

        [Column("LogBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _logBy;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _enterBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => QuickBooksExportLogUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(QuickBooksExportLogUuid)) 
				QuickBooksExportLogUuid = Guid.NewGuid().ToString(); 
		}
		/// <summary>
		/// (Readonly) Database Number. <br> Display: false, Editable: false.
		/// </summary>
        public virtual int DatabaseNum
        {
            get
            {
				return _databaseNum; 
            }
            set
            {
				_databaseNum = value; 
				OnPropertyChanged("DatabaseNum", value);
            }
        }

		/// <summary>
		/// (Readonly) Login user account. <br> Display: false, Editable: false.
		/// </summary>
        public virtual int MasterAccountNum
        {
            get
            {
				return _masterAccountNum; 
            }
            set
            {
				_masterAccountNum = value; 
				OnPropertyChanged("MasterAccountNum", value);
            }
        }

		/// <summary>
		/// (Readonly) Login user profile. <br> Display: false, Editable: false.
		/// </summary>
        public virtual int ProfileNum
        {
            get
            {
				return _profileNum; 
            }
            set
            {
				_profileNum = value; 
				OnPropertyChanged("ProfileNum", value);
            }
        }

		/// <summary>
		/// (Readonly) QuickBooksExport log Line uuid. <br> Display: false, Editable: false
		/// </summary>
        public virtual string QuickBooksExportLogUuid
        {
            get
            {
				return _quickBooksExportLogUuid?.TrimEnd(); 
            }
            set
            {
				_quickBooksExportLogUuid = value.TruncateTo(50); 
				OnPropertyChanged("QuickBooksExportLogUuid", value);
            }
        }

		/// <summary>
		/// Batch number for log update. <br> Title: Batch Number, Display: true, Editable: false
		/// </summary>
        public virtual long? BatchNum
        {
            get
            {
				if (!AllowNull && _batchNum is null) 
					_batchNum = default(long); 
				return _batchNum; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_batchNum = value; 
					OnPropertyChanged("BatchNum", value);
				}
            }
        }

		/// <summary>
		/// Log type. Which transaction to update QuickBooksExport. For Example: Shippment, P/O Receive, Adjust. <br> Title: Type, Display: true, Editable: false
		/// </summary>
        public virtual string LogType
        {
            get
            {
				return _logType?.TrimEnd(); 
            }
            set
            {
				_logType = value.TruncateTo(50); 
				OnPropertyChanged("LogType", value);
            }
        }

		/// <summary>
		/// Transaction ID (for example: PO receive, Shhipment). <br> Display: false, Editable: false
		/// </summary>
        public virtual string LogUuid
        {
            get
            {
				return _logUuid?.TrimEnd(); 
            }
            set
            {
				_logUuid = value.TruncateTo(50); 
				OnPropertyChanged("LogUuid", value);
            }
        }

		/// <summary>
		/// Transaction Number (for example: PO receive number, Shhipment number). <br> Title: Number, Display: true, Editable: false
		/// </summary>
        public virtual string DocNumber
        {
            get
            {
				return _docNumber?.TrimEnd(); 
            }
            set
            {
				_docNumber = value.TruncateTo(100); 
				OnPropertyChanged("DocNumber", value);
            }
        }

		/// <summary>
		/// Log status. <br> Title: Status, Display: true, Editable: false
		/// </summary>
        public virtual int? DocStatus
        {
            get
            {
				if (!AllowNull && _docStatus is null) 
					_docStatus = default(int); 
				return _docStatus; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_docStatus = value; 
					OnPropertyChanged("DocStatus", value);
				}
            }
        }

		/// <summary>
		/// Log date. <br> Title: Date, Display: true, Editable: false
		/// </summary>
        public virtual DateTime LogDate
        {
            get
            {
				return _logDate; 
            }
            set
            {
				_logDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("LogDate", value);
            }
        }

		/// <summary>
		/// Log time. <br> Title: Time, Display: true, Editable: false
		/// </summary>
        public virtual TimeSpan LogTime
        {
            get
            {
				return _logTime; 
            }
            set
            {
				_logTime = value.ToSqlSafeValue(); 
				OnPropertyChanged("LogTime", value);
            }
        }

		/// <summary>
		/// Log create by. <br> Title: By, Display: true, Editable: false
		/// </summary>
        public virtual string LogBy
        {
            get
            {
				return _logBy?.TrimEnd(); 
            }
            set
            {
				_logBy = value.TruncateTo(100); 
				OnPropertyChanged("LogBy", value);
            }
        }

		/// <summary>
		/// (Readonly) User who created this transaction. <br> Title: Created By, Display: true, Editable: false
		/// </summary>
        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private QuickBooksExportLogData Parent { get; set; }
		public QuickBooksExportLogData GetParent() => Parent;
		public QuickBooksExportLog SetParent(QuickBooksExportLogData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			QuickBooksExportLogUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override QuickBooksExportLog Clear()
        {
            base.Clear();
			_databaseNum = default(int); 
			_masterAccountNum = default(int); 
			_profileNum = default(int); 
			_quickBooksExportLogUuid = String.Empty; 
			_batchNum = AllowNull ? (long?)null : default(long); 
			_logType = String.Empty; 
			_logUuid = String.Empty; 
			_docNumber = String.Empty; 
			_docStatus = AllowNull ? (int?)null : default(int); 
			_logDate = new DateTime().MinValueSql(); 
			_logTime = new TimeSpan().MinValueSql(); 
			_logBy = String.Empty; 
			_enterBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public override QuickBooksExportLog CheckIntegrity()
        {
            CheckUniqueId();
            CheckIntegrityOthers();
            return this;
        }

        public virtual QuickBooksExportLog ClearChildren()
        {
            return this;
        }

        public virtual QuickBooksExportLog NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(QuickBooksExportLog data)
        {
            if (data is null) return;
            return;
        }



        #endregion Methods - Generated 
    }
}



