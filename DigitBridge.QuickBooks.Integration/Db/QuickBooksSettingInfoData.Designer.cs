              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.QuickBooks.Integration
{
    /// <summary>
    /// Represents a QuickBooksSettingInfoData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class QuickBooksSettingInfoData : StructureRepository<QuickBooksSettingInfoData>
    {
        public QuickBooksSettingInfoData() : base() {}
        public QuickBooksSettingInfoData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => QuickBooksIntegrationSetting.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => QuickBooksIntegrationSetting.UniqueId;
        
		 [JsonIgnore, XmlIgnore] 
		public static string QuickBooksIntegrationSettingTable ="QuickBooksIntegrationSetting ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string QuickBooksChnlAccSettingTable ="QuickBooksChnlAccSetting ";
		
        #region CRUD Methods

        public override bool Equals(QuickBooksSettingInfoData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(QuickBooksSettingInfoData other)
        {
			if (QuickBooksIntegrationSetting == null && other.QuickBooksIntegrationSetting != null || QuickBooksIntegrationSetting != null && other.QuickBooksIntegrationSetting == null) 
				return false; 
			if (QuickBooksIntegrationSetting != null && other.QuickBooksIntegrationSetting != null && !QuickBooksIntegrationSetting.Equals(other.QuickBooksIntegrationSetting)) 
				return false; 
			if (QuickBooksChnlAccSetting == null && other.QuickBooksChnlAccSetting != null || QuickBooksChnlAccSetting != null && other.QuickBooksChnlAccSetting == null) 
				return false; 
			if (QuickBooksChnlAccSetting != null && other.QuickBooksChnlAccSetting != null && !QuickBooksChnlAccSetting.EqualsList(other.QuickBooksChnlAccSetting)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override QuickBooksSettingInfoData CheckIntegrity()
        {
			if (QuickBooksIntegrationSetting is null) return this; 
			QuickBooksIntegrationSetting.CheckIntegrity(); 
			CheckIntegrityQuickBooksChnlAccSetting(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			QuickBooksIntegrationSetting?.Clear(); 
			QuickBooksChnlAccSetting = new List<QuickBooksChnlAccSetting>(); 
			ClearQuickBooksChnlAccSettingDeleted(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			QuickBooksIntegrationSetting = NewQuickBooksIntegrationSetting(); 
			QuickBooksChnlAccSetting = new List<QuickBooksChnlAccSetting>(); 
			AddQuickBooksChnlAccSetting(NewQuickBooksChnlAccSetting()); 
			ClearQuickBooksChnlAccSettingDeleted(); 
            return;
        }

        public virtual void CopyFrom(QuickBooksSettingInfoData data)
        {
			CopyQuickBooksIntegrationSettingFrom(data); 
			CopyQuickBooksChnlAccSettingFrom(data); 
            CheckIntegrity();
            return;
        }

        public override QuickBooksSettingInfoData Clone()
        {
			var newData = new QuickBooksSettingInfoData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.QuickBooksIntegrationSetting.ClearMetaData(); 
			newData.QuickBooksChnlAccSetting.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetQuickBooksIntegrationSetting(RowNum); 
			if (obj is null) return false; 
			QuickBooksIntegrationSetting = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string SettingUuid)
        {
			var obj = GetQuickBooksIntegrationSettingBySettingUuid(SettingUuid); 
			if (obj is null) return false; 
			QuickBooksIntegrationSetting = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(QuickBooksIntegrationSetting.SettingUuid)) return; 
			QuickBooksChnlAccSetting = GetQuickBooksChnlAccSettingBySettingUuid(QuickBooksIntegrationSetting.SettingUuid); 
        }

        public override bool Save()
        {
			if (QuickBooksIntegrationSetting is null || string.IsNullOrEmpty(QuickBooksIntegrationSetting.SettingUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(QuickBooksIntegrationSettingTable))
			{
				QuickBooksIntegrationSetting.SetDataBaseFactory(dbFactory);
				if (!QuickBooksIntegrationSetting.Save()) return false;
			}

			 if (NeedSave(QuickBooksChnlAccSettingTable))
			{
				if (QuickBooksChnlAccSetting != null) 
					QuickBooksChnlAccSetting.SetDataBaseFactory(dbFactory)?.Save();
				var delQuickBooksChnlAccSetting = _QuickBooksChnlAccSettingDeleted;
				if (delQuickBooksChnlAccSetting != null)
					delQuickBooksChnlAccSetting.SetDataBaseFactory(dbFactory)?.Delete();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (QuickBooksIntegrationSetting is null || string.IsNullOrEmpty(QuickBooksIntegrationSetting.SettingUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(QuickBooksIntegrationSettingTable))
			{
				QuickBooksIntegrationSetting.SetDataBaseFactory(dbFactory); 
				if (QuickBooksIntegrationSetting.Delete() <= 0) return false; 
			}
			 if (NeedDelete(QuickBooksChnlAccSettingTable))
			{
				if (QuickBooksChnlAccSetting != null) 
					QuickBooksChnlAccSetting?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetQuickBooksIntegrationSettingAsync(RowNum); 
			if (obj is null) return false; 
			QuickBooksIntegrationSetting = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string SettingUuid)
        {
			var obj = await GetQuickBooksIntegrationSettingBySettingUuidAsync(SettingUuid); 
			if (obj is null) return false; 
			QuickBooksIntegrationSetting = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(QuickBooksIntegrationSetting.SettingUuid)) return; 
			QuickBooksChnlAccSetting = await GetQuickBooksChnlAccSettingBySettingUuidAsync(QuickBooksIntegrationSetting.SettingUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (QuickBooksIntegrationSetting is null || string.IsNullOrEmpty(QuickBooksIntegrationSetting.SettingUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(QuickBooksIntegrationSettingTable))
			{
				QuickBooksIntegrationSetting.SetDataBaseFactory(dbFactory); 
				if (!(await QuickBooksIntegrationSetting.SaveAsync())) return false; 
			}
			 if (NeedSave(QuickBooksChnlAccSettingTable))
			{
				if (QuickBooksChnlAccSetting != null) 
					await QuickBooksChnlAccSetting.SetDataBaseFactory(dbFactory).SaveAsync(); 
				var delQuickBooksChnlAccSetting = _QuickBooksChnlAccSettingDeleted;
				if (delQuickBooksChnlAccSetting != null)
					await delQuickBooksChnlAccSetting.SetDataBaseFactory(dbFactory).DeleteAsync();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (QuickBooksIntegrationSetting is null || string.IsNullOrEmpty(QuickBooksIntegrationSetting.SettingUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(QuickBooksIntegrationSettingTable))
			{
			QuickBooksIntegrationSetting.SetDataBaseFactory(dbFactory); 
			if ((await QuickBooksIntegrationSetting.DeleteAsync()) <= 0) return false; 
			}
			 if (NeedDelete(QuickBooksChnlAccSettingTable))
			{
				if (QuickBooksChnlAccSetting != null) 
					await QuickBooksChnlAccSetting.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region QuickBooksIntegrationSetting - Generated 
    

        // one to one children
        protected QuickBooksIntegrationSetting _QuickBooksIntegrationSetting;

        public virtual QuickBooksIntegrationSetting QuickBooksIntegrationSetting 
        { 
            get => _QuickBooksIntegrationSetting;
            set => _QuickBooksIntegrationSetting = value?.SetParent(this); 
        }

        public virtual void CopyQuickBooksIntegrationSettingFrom(QuickBooksSettingInfoData data) => 
            QuickBooksIntegrationSetting?.CopyFrom(data.QuickBooksIntegrationSetting, new string[] {"SettingUuid"});

        public virtual QuickBooksIntegrationSetting NewQuickBooksIntegrationSetting() => new QuickBooksIntegrationSetting(dbFactory).SetParent(this);

        public virtual QuickBooksIntegrationSetting GetQuickBooksIntegrationSetting(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<QuickBooksIntegrationSetting>(RowNum);

        public virtual QuickBooksIntegrationSetting GetQuickBooksIntegrationSettingBySettingUuid(string SettingUuid) =>
            (string.IsNullOrEmpty(SettingUuid)) ? null : dbFactory.GetById<QuickBooksIntegrationSetting>(SettingUuid);

        public virtual bool SaveQuickBooksIntegrationSetting(QuickBooksIntegrationSetting data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteQuickBooksIntegrationSetting(QuickBooksIntegrationSetting data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<QuickBooksIntegrationSetting> GetQuickBooksIntegrationSettingAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<QuickBooksIntegrationSetting>(RowNum);

        public virtual async Task<QuickBooksIntegrationSetting> GetQuickBooksIntegrationSettingBySettingUuidAsync(string SettingUuid) =>
            (string.IsNullOrEmpty(SettingUuid)) ? null : await dbFactory.GetByIdAsync<QuickBooksIntegrationSetting>(SettingUuid);

        public virtual async Task<bool> SaveQuickBooksIntegrationSettingAsync(QuickBooksIntegrationSetting data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteQuickBooksIntegrationSettingAsync(QuickBooksIntegrationSetting data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion QuickBooksIntegrationSetting - Generated 

        #region QuickBooksChnlAccSetting - Generated 
        // One to many children
        protected IList<QuickBooksChnlAccSetting> _QuickBooksChnlAccSettingDeleted;
        public virtual QuickBooksChnlAccSetting AddQuickBooksChnlAccSettingDeleted(QuickBooksChnlAccSetting del) 
        {
            if (_QuickBooksChnlAccSettingDeleted is null)
                _QuickBooksChnlAccSettingDeleted = new List<QuickBooksChnlAccSetting>();
            var lst = _QuickBooksChnlAccSettingDeleted.ToList();
            lst.Add(del);
            _QuickBooksChnlAccSettingDeleted = lst;
            return del;
        } 

        public virtual IList<QuickBooksChnlAccSetting> AddQuickBooksChnlAccSettingDeleted(IList<QuickBooksChnlAccSetting> del) 
        {
            if (_QuickBooksChnlAccSettingDeleted is null)
                _QuickBooksChnlAccSettingDeleted = new List<QuickBooksChnlAccSetting>();
            var lst = _QuickBooksChnlAccSettingDeleted.ToList();
            lst.AddRange(del);
            _QuickBooksChnlAccSettingDeleted = lst;
            return del;
        } 

        public virtual void SetQuickBooksChnlAccSettingDeleted(IList<QuickBooksChnlAccSetting> del) =>
            _QuickBooksChnlAccSettingDeleted = del;

        public virtual void ClearQuickBooksChnlAccSettingDeleted() =>
            _QuickBooksChnlAccSettingDeleted = null;


        protected IList<QuickBooksChnlAccSetting> _QuickBooksChnlAccSetting;

        public virtual IList<QuickBooksChnlAccSetting> QuickBooksChnlAccSetting 
        { 
            get 
            {
                if (_QuickBooksChnlAccSetting is null)
                    _QuickBooksChnlAccSetting = new List<QuickBooksChnlAccSetting>();
                return _QuickBooksChnlAccSetting;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _QuickBooksChnlAccSetting = valueList;
                }
                else
                    _QuickBooksChnlAccSetting = null;
            } 
        }

        public virtual void CopyQuickBooksChnlAccSettingFrom(QuickBooksSettingInfoData data) 
        {
            if  (data is null) return;
            var lstDeleted = QuickBooksChnlAccSetting?.CopyFrom(data.QuickBooksChnlAccSetting, new string[] {"SettingUuid"});
            SetQuickBooksChnlAccSettingDeleted(lstDeleted);
            foreach (var c in QuickBooksChnlAccSetting)
                c?.CopyChildrenFrom(data.QuickBooksChnlAccSetting?.FindByRowNum(c.RowNum));
        } 

        public virtual QuickBooksChnlAccSetting NewQuickBooksChnlAccSetting() => new QuickBooksChnlAccSetting(dbFactory);

        public virtual QuickBooksChnlAccSetting AddQuickBooksChnlAccSetting(QuickBooksChnlAccSetting obj) => 
            QuickBooksChnlAccSetting.AddOrReplace(obj.SetParent(this));

        public virtual QuickBooksChnlAccSetting RemoveQuickBooksChnlAccSetting(QuickBooksChnlAccSetting obj) => 
            AddQuickBooksChnlAccSettingDeleted(QuickBooksChnlAccSetting.RemoveObject(obj.SetParent(this)));

        public virtual IList<QuickBooksChnlAccSetting> GetQuickBooksChnlAccSettingBySettingUuid(string SettingUuid) =>
            (string.IsNullOrEmpty(SettingUuid)) 
                ? null 
                : dbFactory.Find<QuickBooksChnlAccSetting>("WHERE SettingUuid = @0 ORDER BY RowNum ", SettingUuid).ToList();

        public virtual bool SaveQuickBooksChnlAccSetting(IList<QuickBooksChnlAccSetting> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteQuickBooksChnlAccSetting(IList<QuickBooksChnlAccSetting> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<QuickBooksChnlAccSetting>> GetQuickBooksChnlAccSettingBySettingUuidAsync(string SettingUuid) =>
            (string.IsNullOrEmpty(SettingUuid)) 
                ? null
                : (await dbFactory.FindAsync<QuickBooksChnlAccSetting>("WHERE SettingUuid = @0 ORDER BY RowNum ", SettingUuid)).ToList();

        public virtual async Task<bool> SaveQuickBooksChnlAccSettingAsync(IList<QuickBooksChnlAccSetting> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteQuickBooksChnlAccSettingAsync(IList<QuickBooksChnlAccSetting> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<QuickBooksChnlAccSetting> CheckIntegrityQuickBooksChnlAccSetting()
        {
            if (QuickBooksChnlAccSetting is null || QuickBooksIntegrationSetting is null) 
                return QuickBooksChnlAccSetting;
            var seq = 0;
            QuickBooksChnlAccSetting.RemoveEmpty();
            var children = QuickBooksChnlAccSetting.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.SettingUuid != QuickBooksIntegrationSetting.SettingUuid)
                    child.SettingUuid = QuickBooksIntegrationSetting.SettingUuid;
                child.CheckIntegrity();
            }
            return children;
        }



        #endregion QuickBooksChnlAccSetting - Generated 


    }
}



