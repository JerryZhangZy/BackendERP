    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.QuickBooks.Integration
{
    /// <summary>
    /// Represents a QuickBooksExportLogDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class QuickBooksExportLogDataDtoMapperDefault : IDtoMapper<QuickBooksExportLogData, QuickBooksExportLogDataDto> 
    {
        #region read from dto to data

        public virtual QuickBooksExportLogData ReadDto(QuickBooksExportLogData data, QuickBooksExportLogDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new QuickBooksExportLogData();
                data.New();
            }

			if (dto.QuickBooksExportLog != null)
			{
				if (data.QuickBooksExportLog is null)
					data.QuickBooksExportLog = data.NewQuickBooksExportLog();
				ReadQuickBooksExportLog(data.QuickBooksExportLog, dto.QuickBooksExportLog);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadQuickBooksExportLog(QuickBooksExportLog data, QuickBooksExportLogDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasQuickBooksExportLogUuid) data.QuickBooksExportLogUuid = dto.QuickBooksExportLogUuid;
			if (dto.HasBatchNum) data.BatchNum = dto.BatchNum;
			if (dto.HasLogType) data.LogType = dto.LogType;
			if (dto.HasLogUuid) data.LogUuid = dto.LogUuid;
			if (dto.HasDocNumber) data.DocNumber = dto.DocNumber;
			if (dto.HasDocStatus) data.DocStatus = dto.DocStatus;
			if (dto.HasLogDate) data.LogDate = dto.LogDate.ToDateTime();
			if (dto.HasLogTime) data.LogTime = dto.LogTime.ToTimeSpan();
			if (dto.HasLogBy) data.LogBy = dto.LogBy;
			if (dto.HasTxnId) data.TxnId = dto.TxnId;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual QuickBooksExportLogDataDto WriteDto(QuickBooksExportLogData data, QuickBooksExportLogDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new QuickBooksExportLogDataDto();

            data.CheckIntegrity();

			if (data.QuickBooksExportLog != null)
			{
				dto.QuickBooksExportLog = new QuickBooksExportLogDto();
				WriteQuickBooksExportLog(data.QuickBooksExportLog, dto.QuickBooksExportLog);
			}
            return dto;
        }

		protected virtual void WriteQuickBooksExportLog(QuickBooksExportLog data, QuickBooksExportLogDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.QuickBooksExportLogUuid = data.QuickBooksExportLogUuid;
			dto.BatchNum = data.BatchNum;
			dto.LogType = data.LogType;
			dto.LogUuid = data.LogUuid;
			dto.DocNumber = data.DocNumber;
			dto.DocStatus = data.DocStatus;
			dto.LogDate = data.LogDate;
			dto.LogTime = data.LogTime.ToDateTime();
			dto.LogBy = data.LogBy;
			dto.TxnId = data.TxnId;
			dto.EnterBy = data.EnterBy;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}


        #endregion write to dto from data

    }
}



