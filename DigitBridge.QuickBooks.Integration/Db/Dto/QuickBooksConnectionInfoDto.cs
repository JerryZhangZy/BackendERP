

              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Enums;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;

using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.QuickBooks.Integration
{
    /// <summary>
    /// Represents a QuickBooksConnectionInfo Dto Class.
    /// NOTE: This class is generated from a T4 template Once - if you want re-generate it, you need delete cs file and generate again
    /// </summary>
    [Serializable()]
    public class QuickBooksConnectionInfoDto
    {
        public long? RowNum { get; set; }
        [JsonIgnore,XmlIgnore]
        public string UniqueId { get; set; }
        [JsonIgnore,XmlIgnore]
        public DateTime? EnterDateUtc { get; set; }
        [JsonIgnore,XmlIgnore]
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

		/// <summary>
		/// (Readonly) Record Number. Required, <br> Display: false, Editable: false.
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Record Number. Required, <br> Display: false, Editable: false.")]
        public long? ConnectionProfileNum { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasConnectionProfileNum => ConnectionProfileNum != null;

		/// <summary>
		/// (Readonly) Login user account. <br> Display: false, Editable: false.
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Login user account. <br> Display: false, Editable: false.")]
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        public int? MasterAccountNum { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasMasterAccountNum => MasterAccountNum != null;

		/// <summary>
		/// (Readonly) Login user profile. <br> Display: false, Editable: false.
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Login user profile. <br> Display: false, Editable: false.")]
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        public int? ProfileNum { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasProfileNum => ProfileNum != null;

		/// <summary>
		/// Encrypted,ClientId
		/// </summary>
		[OpenApiPropertyDescription("Encrypted,ClientId")]
        [StringLength(500, ErrorMessage = "The ClientId value cannot exceed 500 characters. ")]
        public string ClientId { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasClientId => ClientId != null;

		/// <summary>
		/// Encrypted,ClientSecret
		/// </summary>
		[OpenApiPropertyDescription("Encrypted,ClientSecret")]
        [StringLength(500, ErrorMessage = "The ClientSecret value cannot exceed 500 characters. ")]
        public string ClientSecret { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasClientSecret => ClientSecret != null;

		/// <summary>
		/// Encrypted,RealmId
		/// </summary>
		[OpenApiPropertyDescription("Encrypted,RealmId")]
        [StringLength(200, ErrorMessage = "The RealmId value cannot exceed 200 characters. ")]
        public string RealmId { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasRealmId => RealmId != null;

		/// <summary>
		/// Encrypted,AuthCode
		/// </summary>
		[OpenApiPropertyDescription("Encrypted,AuthCode")]
        [StringLength(200, ErrorMessage = "The AuthCode value cannot exceed 200 characters. ")]
        public string AuthCode { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasAuthCode => AuthCode != null;

		/// <summary>
		/// RefreshToken
		/// </summary>
		[OpenApiPropertyDescription("RefreshToken")]
        [StringLength(200, ErrorMessage = "The RefreshToken value cannot exceed 200 characters. ")]
        public string RefreshToken { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasRefreshToken => RefreshToken != null;

		/// <summary>
		/// AccessToken
		/// </summary>
		[OpenApiPropertyDescription("AccessToken")]
        [StringLength(1500, ErrorMessage = "The AccessToken value cannot exceed 1500 characters. ")]
        public string AccessToken { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasAccessToken => AccessToken != null;

		/// <summary>
		/// RequestState
		/// </summary>
		[OpenApiPropertyDescription("RequestState")]
        [StringLength(200, ErrorMessage = "The RequestState value cannot exceed 200 characters. ")]
        public string RequestState { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasRequestState => RequestState != null;

		/// <summary>
		/// 0: Uninitiated, 1: Success 2: Error
		/// </summary>
		[OpenApiPropertyDescription("0: Uninitiated, 1: Success 2: Error")]
        public int? QboOAuthTokenStatus { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasQboOAuthTokenStatus => QboOAuthTokenStatus != null;

		/// <summary>
		/// LastRefreshTokUpdate
		/// </summary>
		[OpenApiPropertyDescription("LastRefreshTokUpdate")]
        [DataType(DataType.DateTime)]
        public DateTime? LastRefreshTokUpdate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasLastRefreshTokUpdate => LastRefreshTokUpdate != null;

		/// <summary>
		/// LastAccessTokUpdate
		/// </summary>
		[OpenApiPropertyDescription("LastAccessTokUpdate")]
        [DataType(DataType.DateTime)]
        public DateTime? LastAccessTokUpdate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasLastAccessTokUpdate => LastAccessTokUpdate != null;

		/// <summary>
		/// (Radonly) Created Date time. <br> Title: Created At, Display: true, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("(Radonly) Created Date time. <br> Title: Created At, Display: true, Editable: false")]
        [DataType(DataType.DateTime)]
        public DateTime? EnterDate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasEnterDate => EnterDate != null;

		/// <summary>
		/// (Radonly) LastUpdate Date time. <br> Title: Created At, Display: true, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("(Radonly) LastUpdate Date time. <br> Title: Created At, Display: true, Editable: false")]
        [DataType(DataType.DateTime)]
        public DateTime? LastUpdate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasLastUpdate => LastUpdate != null;

		/// <summary>
		/// (Readonly) Database Number. <br> Display: false, Editable: false.
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Database Number. <br> Display: false, Editable: false.")]
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        public int? DatabaseNum { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDatabaseNum => DatabaseNum != null;

		/// <summary>
		/// Shipment uuid. <br> Display: false, Editable: false.
		/// </summary>
		[OpenApiPropertyDescription("Shipment uuid. <br> Display: false, Editable: false.")]
        [StringLength(50, ErrorMessage = "The ConnectionUuid value cannot exceed 50 characters. ")]
        public string ConnectionUuid { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasConnectionUuid => ConnectionUuid != null;



        #endregion Properties - Generated 

        #region Children - Generated 

        #endregion Children - Generated 

    }
}



