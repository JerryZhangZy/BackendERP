    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.QuickBooks.Integration
{
    /// <summary>
    /// Represents a QuickBooksConnectionInfoDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class QuickBooksConnectionInfoDataDtoMapperDefault : IDtoMapper<QuickBooksConnectionInfoData, QuickBooksConnectionInfoDataDto> 
    {
        #region read from dto to data

        public virtual QuickBooksConnectionInfoData ReadDto(QuickBooksConnectionInfoData data, QuickBooksConnectionInfoDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new QuickBooksConnectionInfoData();
                data.New();
            }

			if (dto.QuickBooksConnectionInfo != null)
			{
				if (data.QuickBooksConnectionInfo is null)
					data.QuickBooksConnectionInfo = data.NewQuickBooksConnectionInfo();
				ReadQuickBooksConnectionInfo(data.QuickBooksConnectionInfo, dto.QuickBooksConnectionInfo);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadQuickBooksConnectionInfo(QuickBooksConnectionInfo data, QuickBooksConnectionInfoDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasRequestState) data.RequestState = dto.RequestState;
			if (dto.HasQboOAuthTokenStatus) data.QboOAuthTokenStatus = dto.QboOAuthTokenStatus;
			if (dto.HasLastRefreshTokUpdate) data.LastRefreshTokUpdate = dto.LastRefreshTokUpdate;
			if (dto.HasLastAccessTokUpdate) data.LastAccessTokUpdate = dto.LastAccessTokUpdate;
			if (dto.HasEnterDate) data.EnterDate = dto.EnterDate;
			if (dto.HasLastUpdate) data.LastUpdate = dto.LastUpdate;
			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasConnectionUuid) data.ConnectionUuid = dto.ConnectionUuid;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual QuickBooksConnectionInfoDataDto WriteDto(QuickBooksConnectionInfoData data, QuickBooksConnectionInfoDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new QuickBooksConnectionInfoDataDto();

            data.CheckIntegrity();

			if (data.QuickBooksConnectionInfo != null)
			{
				dto.QuickBooksConnectionInfo = new QuickBooksConnectionInfoDto();
				WriteQuickBooksConnectionInfo(data.QuickBooksConnectionInfo, dto.QuickBooksConnectionInfo);
			}
            return dto;
        }

		protected virtual void WriteQuickBooksConnectionInfo(QuickBooksConnectionInfo data, QuickBooksConnectionInfoDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.RequestState = data.RequestState;
			dto.QboOAuthTokenStatus = data.QboOAuthTokenStatus;
			dto.LastRefreshTokUpdate = data.LastRefreshTokUpdate;
			dto.LastAccessTokUpdate = data.LastAccessTokUpdate;
			dto.EnterDate = data.EnterDate;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.LastUpdate = data.LastUpdate;
			dto.DatabaseNum = data.DatabaseNum;
			dto.RowNum = data.RowNum;
			dto.ConnectionUuid = data.ConnectionUuid;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}


        #endregion write to dto from data

    }
}



