//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.AspNetCore.Http;

namespace DigitBridge.QuickBooks.Integration
{
    /// <summary>
    /// Represents a QuickBooksExportLogService.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public class QuickBooksExportLogManager :  IQuickBooksExportLogManager , IMessage
    {

        public QuickBooksExportLogManager() : base() {}

        public QuickBooksExportLogManager(IDataBaseFactory dbFactory)
        {
            SetDataBaseFactory(dbFactory);
        }
        
        [XmlIgnore, JsonIgnore]
        protected QuickBooksExportLogService _quickBooksExportLogService;
        [XmlIgnore, JsonIgnore]
        public QuickBooksExportLogService quickBooksExportLogService
        {
            get
            {
                if (_quickBooksExportLogService is null)
                    _quickBooksExportLogService = new QuickBooksExportLogService(dbFactory);
                return _quickBooksExportLogService;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected QuickBooksExportLogDataDtoCsv _quickBooksExportLogDataDtoCsv;
        [XmlIgnore, JsonIgnore]
        public QuickBooksExportLogDataDtoCsv quickBooksExportLogDataDtoCsv
        {
            get
            {
                if (_quickBooksExportLogDataDtoCsv is null)
                    _quickBooksExportLogDataDtoCsv = new QuickBooksExportLogDataDtoCsv();
                return _quickBooksExportLogDataDtoCsv;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected QuickBooksExportLogList _quickBooksExportLogList;
        [XmlIgnore, JsonIgnore]
        public QuickBooksExportLogList quickBooksExportLogList
        {
            get
            {
                if (_quickBooksExportLogList is null)
                    _quickBooksExportLogList = new QuickBooksExportLogList(dbFactory);
                return _quickBooksExportLogList;
            }
        }

        public async Task<byte[]> ExportAsync(QuickBooksExportLogPayload payload)
        {
            var rowNumList =await quickBooksExportLogList.GetRowNumListAsync(payload);
            var dtoList = new List<QuickBooksExportLogDataDto>();
           foreach(var x in rowNumList)
            {
                if (quickBooksExportLogService.GetData(x))
                    dtoList.Add(quickBooksExportLogService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new QuickBooksExportLogDataDto());
            return quickBooksExportLogDataDtoCsv.Export(dtoList);
        }

        public byte[] Export(QuickBooksExportLogPayload payload)
        {
            var rowNumList =quickBooksExportLogList.GetRowNumList(payload);
            var dtoList = new List<QuickBooksExportLogDataDto>();
            foreach (var x in rowNumList)
            {
                if (quickBooksExportLogService.GetData(x))
                    dtoList.Add(quickBooksExportLogService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new QuickBooksExportLogDataDto());
            return quickBooksExportLogDataDtoCsv.Export(dtoList);
        }

        public void Import(QuickBooksExportLogPayload payload, IFormFileCollection files)
        {
            if(files==null||files.Count==0)
            {
                AddError("no files upload");
                return;
            }
            foreach(var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list = quickBooksExportLogDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach(var item in list)
                {
                    payload.QuickBooksExportLog = item;
                    if (quickBooksExportLogService.Add(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in quickBooksExportLogService.Messages)
                            Messages.Add(msg);
                        quickBooksExportLogService.Messages.Clear();
                    }
                }
                if (payload.HasQuickBooksExportLog)
                    payload.QuickBooksExportLog = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        public async Task ImportAsync(QuickBooksExportLogPayload payload, IFormFileCollection files)
        {
            if(files==null||files.Count==0)
            {
                AddError("no files upload");
                return;
            }
            foreach(var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list =quickBooksExportLogDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach(var item in list)
                {
                    payload.QuickBooksExportLog = item;
                    if (await quickBooksExportLogService.AddAsync(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in quickBooksExportLogService.Messages)
                            Messages.Add(msg);
                        quickBooksExportLogService.Messages.Clear();
                    }
                }
                if (payload.HasQuickBooksExportLog)
                    payload.QuickBooksExportLog = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        #region DataBase
        [XmlIgnore, JsonIgnore]
        protected IDataBaseFactory _dbFactory;

        [XmlIgnore, JsonIgnore]
        public IDataBaseFactory dbFactory
        {
            get
            {
                if (_dbFactory is null)
                    _dbFactory = DataBaseFactory.CreateDefault();
                return _dbFactory;
            }
        }

        public void SetDataBaseFactory(IDataBaseFactory dbFactory)
        {
            _dbFactory = dbFactory;
        }

        #endregion DataBase

        #region Messages
        protected IList<MessageClass> _messages;
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (_messages is null)
                    _messages = new List<MessageClass>();
                return _messages;
            }
            set { _messages = value; }
        }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             Messages.Add(message, MessageLevel.Info, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Warning, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Error, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Fatal, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Debug, code);

        #endregion Messages
    }
}
