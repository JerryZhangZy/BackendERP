
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.QuickBooks.Integration
{
    public partial class QuickBooksExportLogService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override QuickBooksExportLogService Init()
        {
            base.Init();
            SetDtoMapper(new QuickBooksExportLogDataDtoMapperDefault());
            SetCalculator(new QuickBooksExportLogServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new QuickBooksExportLogServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(QuickBooksExportLogDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(QuickBooksExportLogDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(QuickBooksExportLogPayload payload)
        {
            if (payload is null || !payload.HasQuickBooksExportLog)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.QuickBooksExportLog))
                return false;

            // load data from dto
            FromDto(payload.QuickBooksExportLog);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(QuickBooksExportLogPayload payload)
        {
            if (payload is null || !payload.HasQuickBooksExportLog)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.QuickBooksExportLog)))
                return false;

            // load data from dto
            FromDto(payload.QuickBooksExportLog);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(QuickBooksExportLogDataDto dto)
        {
            if (dto is null || !dto.HasQuickBooksExportLog)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.QuickBooksExportLog.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(QuickBooksExportLogDataDto dto)
        {
            if (dto is null || !dto.HasQuickBooksExportLog)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.QuickBooksExportLog.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(QuickBooksExportLogPayload payload)
        {
            if (payload is null || !payload.HasQuickBooksExportLog || payload.QuickBooksExportLog.QuickBooksExportLog.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.QuickBooksExportLog))
                return false;

            // load data 
            GetData(payload.QuickBooksExportLog.QuickBooksExportLog.RowNum.ToLong());

            // load data from dto
            FromDto(payload.QuickBooksExportLog);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(QuickBooksExportLogPayload payload)
        {
            if (payload is null || !payload.HasQuickBooksExportLog)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.QuickBooksExportLog)))
                return false;

            // load data 
            await GetDataAsync(payload.QuickBooksExportLog.QuickBooksExportLog.RowNum.ToLong());

            // load data from dto
            FromDto(payload.QuickBooksExportLog);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(QuickBooksExportLogPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(QuickBooksExportLogPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(QuickBooksExportLogPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(QuickBooksExportLogPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        public virtual bool AddExportLog(IPayload payload, int batchNum, string logType, string uuid, string docNumber, string txnId, int docStatus)
        {
            Add();
            Data.QuickBooksExportLog = new QuickBooksExportLog
            {
                DatabaseNum = payload.DatabaseNum,
                MasterAccountNum = payload.MasterAccountNum,
                ProfileNum = payload.ProfileNum,
                QuickBooksExportLogUuid = Guid.NewGuid().ToString(),
                BatchNum = batchNum,
                LogType = logType,
                LogUuid = uuid,
                DocNumber = docNumber,
                TxnId = txnId,
                DocStatus = docStatus
            };
            return SaveData();
        }

        public virtual async Task<bool> AddExportLogAsync(QuickBooksExportLog log)
        {
            Add();
            Data.QuickBooksExportLog = log;
            return await SaveDataAsync();
        }
        public virtual async Task<bool> UpdateExportLogAsync(QuickBooksExportLog log)
        {
            Edit();
            Data.QuickBooksExportLog = log;
            return await SaveDataAsync();
        }
        public virtual async Task<bool> AddExportLogAsync(IPayload payload, int batchNum, string logType, string uuid, string docNumber, string txnId, int docStatus)
        {
            Add();
            Data.QuickBooksExportLog = new QuickBooksExportLog
            {
                DatabaseNum = payload.DatabaseNum,
                MasterAccountNum = payload.MasterAccountNum,
                ProfileNum = payload.ProfileNum,
                QuickBooksExportLogUuid = Guid.NewGuid().ToString(),
                BatchNum = batchNum,
                LogType = logType,
                LogUuid = uuid,
                DocNumber = docNumber,
                TxnId = txnId,
                DocStatus = docStatus
            };
            return await SaveDataAsync();
        }

        public virtual async Task<IList<QuickBooksExportLog>> QueryExportLogByLogUuidAsync(string logUuid)
        {
            return (await dbFactory.FindAsync<QuickBooksExportLog>("WHERE LogUuid=@0",
                logUuid.ToSqlParameter("LogUuid"))).ToList();
        }

        public virtual IList<QuickBooksExportLog> QueryExportLogByLogUuid(string logUuid)
        {
            return dbFactory.Find<QuickBooksExportLog>("WHERE LogUuid=@0",
                logUuid.ToSqlParameter("LogUuid")).ToList();
        }

        public virtual IList<QuickBooksExportLog> QueryExportLogByDocNumber(string docNumber)
        {
            return dbFactory.Find<QuickBooksExportLog>("WHERE DocNumber=@0",
                docNumber.ToSqlParameter("docNumber")).ToList();
        }

        public virtual async Task<IList<QuickBooksExportLog>> QueryExportLogByDocNumberAsync(string docNumber)
        {
            return dbFactory.Find<QuickBooksExportLog>("WHERE DocNumber=@0",
                docNumber.ToSqlParameter("docNumber")).ToList();
        }

        public virtual IList<QuickBooksExportLog> QueryExportLogByTxnId(string txnId)
        {
            return dbFactory.Find<QuickBooksExportLog>("WHERE TxnId=@0",
                txnId.ToSqlParameter("txnId")).ToList();
        }

        public virtual async Task<IList<QuickBooksExportLog>> QueryExportLogByTxnIdAsync(string txnId)
        {
            return dbFactory.Find<QuickBooksExportLog>("WHERE TxnId=@0",
                txnId.ToSqlParameter("txnId")).ToList();
        }
    }
}



