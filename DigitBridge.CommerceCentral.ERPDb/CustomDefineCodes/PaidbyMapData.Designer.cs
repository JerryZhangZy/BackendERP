              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a PaidbyMapData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class PaidbyMapData : StructureRepository<PaidbyMapData>
    {
        public PaidbyMapData() : base() {}
        public PaidbyMapData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => PaidbyMap.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => PaidbyMap.UniqueId;
        
		 [JsonIgnore, XmlIgnore] 
		public static string PaidbyMapTable ="PaidbyMap ";
		
        #region CRUD Methods

        public override bool Equals(PaidbyMapData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(PaidbyMapData other)
        {
			if (PaidbyMap == null && other.PaidbyMap != null || PaidbyMap != null && other.PaidbyMap == null) 
				return false; 
			if (PaidbyMap != null && other.PaidbyMap != null && !PaidbyMap.Equals(other.PaidbyMap)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override PaidbyMapData CheckIntegrity()
        {
			if (PaidbyMap is null) return this; 
			PaidbyMap.CheckIntegrity(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			PaidbyMap?.Clear(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			PaidbyMap = NewPaidbyMap(); 
            return;
        }

        public virtual void CopyFrom(PaidbyMapData data)
        {
			CopyPaidbyMapFrom(data); 
            CheckIntegrity();
            return;
        }

        public override PaidbyMapData Clone()
        {
			var newData = new PaidbyMapData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.PaidbyMap.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetPaidbyMap(RowNum); 
			if (obj is null) return false; 
			PaidbyMap = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string PaidbyMapUuid)
        {
			var obj = GetPaidbyMapByPaidbyMapUuid(PaidbyMapUuid); 
			if (obj is null) return false; 
			PaidbyMap = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(PaidbyMap.PaidbyMapUuid)) return; 
        }

        public override bool Save()
        {
			if (PaidbyMap is null || string.IsNullOrEmpty(PaidbyMap.PaidbyMapUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(PaidbyMapTable))
			{
				PaidbyMap.SetDataBaseFactory(dbFactory);
				if (!PaidbyMap.Save()) return false;
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (PaidbyMap is null || string.IsNullOrEmpty(PaidbyMap.PaidbyMapUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(PaidbyMapTable))
			{
				PaidbyMap.SetDataBaseFactory(dbFactory); 
				if (PaidbyMap.Delete() <= 0) return false; 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetPaidbyMapAsync(RowNum); 
			if (obj is null) return false; 
			PaidbyMap = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string PaidbyMapUuid)
        {
			var obj = await GetPaidbyMapByPaidbyMapUuidAsync(PaidbyMapUuid); 
			if (obj is null) return false; 
			PaidbyMap = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(PaidbyMap.PaidbyMapUuid)) return; 
        }

        public override async Task<bool> SaveAsync()
        {
			if (PaidbyMap is null || string.IsNullOrEmpty(PaidbyMap.PaidbyMapUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(PaidbyMapTable))
			{
				PaidbyMap.SetDataBaseFactory(dbFactory); 
				if (!(await PaidbyMap.SaveAsync())) return false; 
			}
			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (PaidbyMap is null || string.IsNullOrEmpty(PaidbyMap.PaidbyMapUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(PaidbyMapTable))
			{
			PaidbyMap.SetDataBaseFactory(dbFactory); 
			if ((await PaidbyMap.DeleteAsync()) <= 0) return false; 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region PaidbyMap - Generated 
    

        // one to one children
        protected PaidbyMap _PaidbyMap;

        public virtual PaidbyMap PaidbyMap 
        { 
            get => _PaidbyMap;
            set => _PaidbyMap = value?.SetParent(this); 
        }

        public virtual void CopyPaidbyMapFrom(PaidbyMapData data) => 
            PaidbyMap?.CopyFrom(data.PaidbyMap, new string[] {"PaidbyMapUuid"});

        public virtual PaidbyMap NewPaidbyMap() => new PaidbyMap(dbFactory).SetParent(this);

        public virtual PaidbyMap GetPaidbyMap(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<PaidbyMap>(RowNum);

        public virtual PaidbyMap GetPaidbyMapByPaidbyMapUuid(string PaidbyMapUuid) =>
            (string.IsNullOrEmpty(PaidbyMapUuid)) ? null : dbFactory.GetById<PaidbyMap>(PaidbyMapUuid);

        public virtual bool SavePaidbyMap(PaidbyMap data) =>
            (data is null) ? false : data.Save();

        public virtual int DeletePaidbyMap(PaidbyMap data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<PaidbyMap> GetPaidbyMapAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<PaidbyMap>(RowNum);

        public virtual async Task<PaidbyMap> GetPaidbyMapByPaidbyMapUuidAsync(string PaidbyMapUuid) =>
            (string.IsNullOrEmpty(PaidbyMapUuid)) ? null : await dbFactory.GetByIdAsync<PaidbyMap>(PaidbyMapUuid);

        public virtual async Task<bool> SavePaidbyMapAsync(PaidbyMap data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeletePaidbyMapAsync(PaidbyMap data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion PaidbyMap - Generated 


    }
}



