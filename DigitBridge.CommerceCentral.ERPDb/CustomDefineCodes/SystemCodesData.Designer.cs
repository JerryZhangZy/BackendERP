              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a SystemCodesData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class SystemCodesData : StructureRepository<SystemCodesData>
    {
        public SystemCodesData() : base() {}
        public SystemCodesData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => SystemCodes.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => SystemCodes.UniqueId;
        
		 [JsonIgnore, XmlIgnore] 
		public static string SystemCodesTable ="SystemCodes ";
		
        #region CRUD Methods

        public override bool Equals(SystemCodesData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(SystemCodesData other)
        {
			if (SystemCodes == null && other.SystemCodes != null || SystemCodes != null && other.SystemCodes == null) 
				return false; 
			if (SystemCodes != null && other.SystemCodes != null && !SystemCodes.Equals(other.SystemCodes)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override SystemCodesData CheckIntegrity()
        {
			if (SystemCodes is null) return this; 
			SystemCodes.CheckIntegrity(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			SystemCodes?.Clear(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			SystemCodes = NewSystemCodes(); 
            return;
        }

        public virtual void CopyFrom(SystemCodesData data)
        {
			CopySystemCodesFrom(data); 
            CheckIntegrity();
            return;
        }

        public override SystemCodesData Clone()
        {
			var newData = new SystemCodesData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.SystemCodes.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetSystemCodes(RowNum); 
			if (obj is null) return false; 
			SystemCodes = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string SystemCodeUuid)
        {
			var obj = GetSystemCodesBySystemCodeUuid(SystemCodeUuid); 
			if (obj is null) return false; 
			SystemCodes = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(SystemCodes.SystemCodeUuid)) return; 
        }

        public override bool Save()
        {
			if (SystemCodes is null || string.IsNullOrEmpty(SystemCodes.SystemCodeUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(SystemCodesTable))
			{
				SystemCodes.SetDataBaseFactory(dbFactory);
				if (!SystemCodes.Save()) return false;
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (SystemCodes is null || string.IsNullOrEmpty(SystemCodes.SystemCodeUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(SystemCodesTable))
			{
				SystemCodes.SetDataBaseFactory(dbFactory); 
				if (SystemCodes.Delete() <= 0) return false; 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetSystemCodesAsync(RowNum); 
			if (obj is null) return false; 
			SystemCodes = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string SystemCodeUuid)
        {
			var obj = await GetSystemCodesBySystemCodeUuidAsync(SystemCodeUuid); 
			if (obj is null) return false; 
			SystemCodes = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(SystemCodes.SystemCodeUuid)) return; 
        }

        public override async Task<bool> SaveAsync()
        {
			if (SystemCodes is null || string.IsNullOrEmpty(SystemCodes.SystemCodeUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(SystemCodesTable))
			{
				SystemCodes.SetDataBaseFactory(dbFactory); 
				if (!(await SystemCodes.SaveAsync())) return false; 
			}
			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (SystemCodes is null || string.IsNullOrEmpty(SystemCodes.SystemCodeUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(SystemCodesTable))
			{
			SystemCodes.SetDataBaseFactory(dbFactory); 
			if ((await SystemCodes.DeleteAsync()) <= 0) return false; 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region SystemCodes - Generated 
    

        // one to one children
        protected SystemCodes _SystemCodes;

        public virtual SystemCodes SystemCodes 
        { 
            get => _SystemCodes;
            set => _SystemCodes = value?.SetParent(this); 
        }

        public virtual void CopySystemCodesFrom(SystemCodesData data) => 
            SystemCodes?.CopyFrom(data.SystemCodes, new string[] {"SystemCodeUuid"});

        public virtual SystemCodes NewSystemCodes() => new SystemCodes(dbFactory).SetParent(this);

        public virtual SystemCodes GetSystemCodes(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<SystemCodes>(RowNum);

        public virtual SystemCodes GetSystemCodesBySystemCodeUuid(string SystemCodeUuid) =>
            (string.IsNullOrEmpty(SystemCodeUuid)) ? null : dbFactory.GetById<SystemCodes>(SystemCodeUuid);

        public virtual bool SaveSystemCodes(SystemCodes data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteSystemCodes(SystemCodes data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<SystemCodes> GetSystemCodesAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<SystemCodes>(RowNum);

        public virtual async Task<SystemCodes> GetSystemCodesBySystemCodeUuidAsync(string SystemCodeUuid) =>
            (string.IsNullOrEmpty(SystemCodeUuid)) ? null : await dbFactory.GetByIdAsync<SystemCodes>(SystemCodeUuid);

        public virtual async Task<bool> SaveSystemCodesAsync(SystemCodes data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteSystemCodesAsync(SystemCodes data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion SystemCodes - Generated 


    }
}



