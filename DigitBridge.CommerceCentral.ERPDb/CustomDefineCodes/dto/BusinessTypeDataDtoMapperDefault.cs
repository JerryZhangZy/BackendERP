    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a BusinessTypeDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class BusinessTypeDataDtoMapperDefault : IDtoMapper<BusinessTypeData, BusinessTypeDataDto> 
    {
        #region read from dto to data

        public virtual BusinessTypeData ReadDto(BusinessTypeData data, BusinessTypeDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new BusinessTypeData();
                data.New();
            }

			if (dto.BusinessType != null)
			{
				if (data.BusinessType is null)
					data.BusinessType = data.NewBusinessType();
				ReadBusinessType(data.BusinessType, dto.BusinessType);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadBusinessType(BusinessType data, BusinessTypeDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasBusinessTypeUuid) data.BusinessTypeUuid = dto.BusinessTypeUuid;
			if (dto.HasBusinessType) data.BizType = dto.BusinessType;
			if (dto.HasPriceRule) data.PriceRule = dto.PriceRule;
			if (dto.HasDescription) data.Description = dto.Description;
			if (dto.HasFields) data.Fields.LoadJson(dto.Fields);
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual BusinessTypeDataDto WriteDto(BusinessTypeData data, BusinessTypeDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new BusinessTypeDataDto();

            data.CheckIntegrity();

			if (data.BusinessType != null)
			{
				dto.BusinessType = new BusinessTypeDto();
				WriteBusinessType(data.BusinessType, dto.BusinessType);
			}
            return dto;
        }

		protected virtual void WriteBusinessType(BusinessType data, BusinessTypeDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.BusinessTypeUuid = data.BusinessTypeUuid;
			dto.BusinessType = data.BizType;
			dto.PriceRule = data.PriceRule;
			dto.Description = data.Description;
			dto.Fields = data.Fields.ToJson();
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}


        #endregion write to dto from data

    }
}



