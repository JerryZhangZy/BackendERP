              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a ApInvoiceData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class ApInvoiceData : StructureRepository<ApInvoiceData>
    {
        public ApInvoiceData() : base() {}
        public ApInvoiceData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => ApInvoiceHeader.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => ApInvoiceHeader.UniqueId;
        
			 [JsonIgnore, XmlIgnore] 
			public static string ApInvoiceHeaderTable ="ApInvoiceHeader ";
			
			 [JsonIgnore, XmlIgnore] 
			public static string ApInvoiceHeaderInfoTable ="ApInvoiceHeaderInfo ";
			
			 [JsonIgnore, XmlIgnore] 
			public static string ApInvoiceHeaderAttributesTable ="ApInvoiceHeaderAttributes ";
			
			 [JsonIgnore, XmlIgnore] 
			public static string ApInvoiceItemsTable ="ApInvoiceItems ";
			
        #region CRUD Methods

        public override bool Equals(ApInvoiceData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(ApInvoiceData other)
        {
			if (ApInvoiceHeader == null && other.ApInvoiceHeader != null || ApInvoiceHeader != null && other.ApInvoiceHeader == null) 
				return false; 
			if (ApInvoiceHeader != null && other.ApInvoiceHeader != null && !ApInvoiceHeader.Equals(other.ApInvoiceHeader)) 
				return false; 
			if (ApInvoiceHeaderInfo == null && other.ApInvoiceHeaderInfo != null || ApInvoiceHeaderInfo != null && other.ApInvoiceHeaderInfo == null) 
				return false; 
			if (ApInvoiceHeaderInfo != null && other.ApInvoiceHeaderInfo != null && !ApInvoiceHeaderInfo.Equals(other.ApInvoiceHeaderInfo)) 
				return false; 
			if (ApInvoiceHeaderAttributes == null && other.ApInvoiceHeaderAttributes != null || ApInvoiceHeaderAttributes != null && other.ApInvoiceHeaderAttributes == null) 
				return false; 
			if (ApInvoiceHeaderAttributes != null && other.ApInvoiceHeaderAttributes != null && !ApInvoiceHeaderAttributes.Equals(other.ApInvoiceHeaderAttributes)) 
				return false; 
			if (ApInvoiceItems == null && other.ApInvoiceItems != null || ApInvoiceItems != null && other.ApInvoiceItems == null) 
				return false; 
			if (ApInvoiceItems != null && other.ApInvoiceItems != null && !ApInvoiceItems.EqualsList(other.ApInvoiceItems)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override ApInvoiceData CheckIntegrity()
        {
			if (ApInvoiceHeader is null) return this; 
			ApInvoiceHeader.CheckIntegrity(); 
			CheckIntegrityApInvoiceHeaderInfo(); 
			CheckIntegrityApInvoiceHeaderAttributes(); 
			CheckIntegrityApInvoiceItems(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			ApInvoiceHeader?.Clear(); 
			ApInvoiceHeaderInfo?.Clear(); 
			ApInvoiceHeaderAttributes?.Clear(); 
			ApInvoiceItems = new List<ApInvoiceItems>(); 
			ClearApInvoiceItemsDeleted(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			ApInvoiceHeader = NewApInvoiceHeader(); 
			ApInvoiceHeaderInfo = NewApInvoiceHeaderInfo(); 
			ApInvoiceHeaderAttributes = NewApInvoiceHeaderAttributes(); 
			ApInvoiceItems = new List<ApInvoiceItems>(); 
			AddApInvoiceItems(NewApInvoiceItems()); 
			ClearApInvoiceItemsDeleted(); 
            return;
        }

        public virtual void CopyFrom(ApInvoiceData data)
        {
			CopyApInvoiceHeaderFrom(data); 
			CopyApInvoiceHeaderInfoFrom(data); 
			CopyApInvoiceHeaderAttributesFrom(data); 
			CopyApInvoiceItemsFrom(data); 
            CheckIntegrity();
            return;
        }

        public override ApInvoiceData Clone()
        {
			var newData = new ApInvoiceData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.ApInvoiceHeader.ClearMetaData(); 
			newData.ApInvoiceHeaderInfo.ClearMetaData(); 
			newData.ApInvoiceHeaderAttributes.ClearMetaData(); 
			newData.ApInvoiceItems.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetApInvoiceHeader(RowNum); 
			if (obj is null) return false; 
			ApInvoiceHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string ApInvoiceUuid)
        {
			var obj = GetApInvoiceHeaderByApInvoiceUuid(ApInvoiceUuid); 
			if (obj is null) return false; 
			ApInvoiceHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(ApInvoiceHeader.ApInvoiceUuid)) return; 
			ApInvoiceHeaderInfo = GetApInvoiceHeaderInfoByApInvoiceUuid(ApInvoiceHeader.ApInvoiceUuid); 
			ApInvoiceHeaderAttributes = GetApInvoiceHeaderAttributesByApInvoiceUuid(ApInvoiceHeader.ApInvoiceUuid); 
			ApInvoiceItems = GetApInvoiceItemsByApInvoiceUuid(ApInvoiceHeader.ApInvoiceUuid); 
        }

        public override bool Save()
        {
			if (ApInvoiceHeader is null || string.IsNullOrEmpty(ApInvoiceHeader.ApInvoiceUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(ApInvoiceHeaderTable))
			{
				ApInvoiceHeader.SetDataBaseFactory(dbFactory);
				if (!ApInvoiceHeader.Save()) return false;
			}

			 if (NeedSave(ApInvoiceHeaderInfoTable))
			{
				if (ApInvoiceHeaderInfo != null) 
					ApInvoiceHeaderInfo.SetDataBaseFactory(dbFactory)?.Save();
			}

			 if (NeedSave(ApInvoiceHeaderAttributesTable))
			{
				if (ApInvoiceHeaderAttributes != null) 
					ApInvoiceHeaderAttributes.SetDataBaseFactory(dbFactory)?.Save();
			}

			 if (NeedSave(ApInvoiceItemsTable))
			{
				if (ApInvoiceItems != null) 
					ApInvoiceItems.SetDataBaseFactory(dbFactory)?.Save();
				var delApInvoiceItems = _ApInvoiceItemsDeleted;
				if (delApInvoiceItems != null)
					delApInvoiceItems.SetDataBaseFactory(dbFactory)?.Delete();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (ApInvoiceHeader is null || string.IsNullOrEmpty(ApInvoiceHeader.ApInvoiceUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(ApInvoiceHeaderTable))
			{
				ApInvoiceHeader.SetDataBaseFactory(dbFactory); 
				if (ApInvoiceHeader.Delete() <= 0) return false; 
			}
			 if (NeedDelete(ApInvoiceHeaderInfoTable))
			{
				if (ApInvoiceHeaderInfo != null) 
					ApInvoiceHeaderInfo?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			 if (NeedDelete(ApInvoiceHeaderAttributesTable))
			{
				if (ApInvoiceHeaderAttributes != null) 
					ApInvoiceHeaderAttributes?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			 if (NeedDelete(ApInvoiceItemsTable))
			{
				if (ApInvoiceItems != null) 
					ApInvoiceItems?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetApInvoiceHeaderAsync(RowNum); 
			if (obj is null) return false; 
			ApInvoiceHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string ApInvoiceUuid)
        {
			var obj = await GetApInvoiceHeaderByApInvoiceUuidAsync(ApInvoiceUuid); 
			if (obj is null) return false; 
			ApInvoiceHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(ApInvoiceHeader.ApInvoiceUuid)) return; 
			ApInvoiceHeaderInfo = await GetApInvoiceHeaderInfoByApInvoiceUuidAsync(ApInvoiceHeader.ApInvoiceUuid); 
			ApInvoiceHeaderAttributes = await GetApInvoiceHeaderAttributesByApInvoiceUuidAsync(ApInvoiceHeader.ApInvoiceUuid); 
			ApInvoiceItems = await GetApInvoiceItemsByApInvoiceUuidAsync(ApInvoiceHeader.ApInvoiceUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (ApInvoiceHeader is null || string.IsNullOrEmpty(ApInvoiceHeader.ApInvoiceUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(ApInvoiceHeaderTable))
			{
				ApInvoiceHeader.SetDataBaseFactory(dbFactory); 
				if (!(await ApInvoiceHeader.SaveAsync())) return false; 
			}
			 if (NeedSave(ApInvoiceHeaderInfoTable))
			{
				if (ApInvoiceHeaderInfo != null) 
					await ApInvoiceHeaderInfo.SetDataBaseFactory(dbFactory).SaveAsync(); 
			}

			 if (NeedSave(ApInvoiceHeaderAttributesTable))
			{
				if (ApInvoiceHeaderAttributes != null) 
					await ApInvoiceHeaderAttributes.SetDataBaseFactory(dbFactory).SaveAsync(); 
			}

			 if (NeedSave(ApInvoiceItemsTable))
			{
				if (ApInvoiceItems != null) 
					await ApInvoiceItems.SetDataBaseFactory(dbFactory).SaveAsync(); 
				var delApInvoiceItems = _ApInvoiceItemsDeleted;
				if (delApInvoiceItems != null)
					await delApInvoiceItems.SetDataBaseFactory(dbFactory).DeleteAsync();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (ApInvoiceHeader is null || string.IsNullOrEmpty(ApInvoiceHeader.ApInvoiceUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(ApInvoiceHeaderTable))
			{
			ApInvoiceHeader.SetDataBaseFactory(dbFactory); 
			if ((await ApInvoiceHeader.DeleteAsync()) <= 0) return false; 
			}
			 if (NeedDelete(ApInvoiceHeaderInfoTable))
			{
				if (ApInvoiceHeaderInfo != null) 
					await ApInvoiceHeaderInfo.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			 if (NeedDelete(ApInvoiceHeaderAttributesTable))
			{
				if (ApInvoiceHeaderAttributes != null) 
					await ApInvoiceHeaderAttributes.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			 if (NeedDelete(ApInvoiceItemsTable))
			{
				if (ApInvoiceItems != null) 
					await ApInvoiceItems.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region ApInvoiceHeader - Generated 
    

        // one to one children
        protected ApInvoiceHeader _ApInvoiceHeader;

        public virtual ApInvoiceHeader ApInvoiceHeader 
        { 
            get => _ApInvoiceHeader;
            set => _ApInvoiceHeader = value?.SetParent(this); 
        }

        public virtual void CopyApInvoiceHeaderFrom(ApInvoiceData data) => 
            ApInvoiceHeader?.CopyFrom(data.ApInvoiceHeader, new string[] {"ApInvoiceUuid"});

        public virtual ApInvoiceHeader NewApInvoiceHeader() => new ApInvoiceHeader(dbFactory).SetParent(this);

        public virtual ApInvoiceHeader GetApInvoiceHeader(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<ApInvoiceHeader>(RowNum);

        public virtual ApInvoiceHeader GetApInvoiceHeaderByApInvoiceUuid(string ApInvoiceUuid) =>
            (string.IsNullOrEmpty(ApInvoiceUuid)) ? null : dbFactory.GetById<ApInvoiceHeader>(ApInvoiceUuid);

        public virtual bool SaveApInvoiceHeader(ApInvoiceHeader data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteApInvoiceHeader(ApInvoiceHeader data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<ApInvoiceHeader> GetApInvoiceHeaderAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<ApInvoiceHeader>(RowNum);

        public virtual async Task<ApInvoiceHeader> GetApInvoiceHeaderByApInvoiceUuidAsync(string ApInvoiceUuid) =>
            (string.IsNullOrEmpty(ApInvoiceUuid)) ? null : await dbFactory.GetByIdAsync<ApInvoiceHeader>(ApInvoiceUuid);

        public virtual async Task<bool> SaveApInvoiceHeaderAsync(ApInvoiceHeader data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteApInvoiceHeaderAsync(ApInvoiceHeader data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion ApInvoiceHeader - Generated 

        #region ApInvoiceHeaderInfo - Generated 
    

        // one to one children
        protected ApInvoiceHeaderInfo _ApInvoiceHeaderInfo;

        public virtual ApInvoiceHeaderInfo ApInvoiceHeaderInfo 
        { 
            get => _ApInvoiceHeaderInfo;
            set => _ApInvoiceHeaderInfo = value?.SetParent(this); 
        }

        public virtual void CopyApInvoiceHeaderInfoFrom(ApInvoiceData data) => 
            ApInvoiceHeaderInfo?.CopyFrom(data.ApInvoiceHeaderInfo, new string[] {"ApInvoiceUuid"});

        public virtual ApInvoiceHeaderInfo NewApInvoiceHeaderInfo() => new ApInvoiceHeaderInfo(dbFactory).SetParent(this);

        public virtual ApInvoiceHeaderInfo GetApInvoiceHeaderInfo(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<ApInvoiceHeaderInfo>(RowNum);

        public virtual ApInvoiceHeaderInfo GetApInvoiceHeaderInfoByApInvoiceUuid(string ApInvoiceUuid) =>
            (string.IsNullOrEmpty(ApInvoiceUuid)) ? null : dbFactory.GetById<ApInvoiceHeaderInfo>(ApInvoiceUuid);

        public virtual bool SaveApInvoiceHeaderInfo(ApInvoiceHeaderInfo data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteApInvoiceHeaderInfo(ApInvoiceHeaderInfo data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<ApInvoiceHeaderInfo> GetApInvoiceHeaderInfoAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<ApInvoiceHeaderInfo>(RowNum);

        public virtual async Task<ApInvoiceHeaderInfo> GetApInvoiceHeaderInfoByApInvoiceUuidAsync(string ApInvoiceUuid) =>
            (string.IsNullOrEmpty(ApInvoiceUuid)) ? null : await dbFactory.GetByIdAsync<ApInvoiceHeaderInfo>(ApInvoiceUuid);

        public virtual async Task<bool> SaveApInvoiceHeaderInfoAsync(ApInvoiceHeaderInfo data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteApInvoiceHeaderInfoAsync(ApInvoiceHeaderInfo data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual ApInvoiceHeaderInfo CheckIntegrityApInvoiceHeaderInfo()
        {
            if (ApInvoiceHeaderInfo is null || ApInvoiceHeader is null) 
                return ApInvoiceHeaderInfo;
            ApInvoiceHeaderInfo.SetParent(this);
            if (ApInvoiceHeaderInfo.ApInvoiceUuid != ApInvoiceHeader.ApInvoiceUuid)
                ApInvoiceHeaderInfo.ApInvoiceUuid = ApInvoiceHeader.ApInvoiceUuid;
            ApInvoiceHeaderInfo.CheckIntegrity();
            return ApInvoiceHeaderInfo;
        }



        #endregion ApInvoiceHeaderInfo - Generated 

        #region ApInvoiceHeaderAttributes - Generated 
    

        // one to one children
        protected ApInvoiceHeaderAttributes _ApInvoiceHeaderAttributes;

        public virtual ApInvoiceHeaderAttributes ApInvoiceHeaderAttributes 
        { 
            get => _ApInvoiceHeaderAttributes;
            set => _ApInvoiceHeaderAttributes = value?.SetParent(this); 
        }

        public virtual void CopyApInvoiceHeaderAttributesFrom(ApInvoiceData data) => 
            ApInvoiceHeaderAttributes?.CopyFrom(data.ApInvoiceHeaderAttributes, new string[] {"ApInvoiceUuid"});

        public virtual ApInvoiceHeaderAttributes NewApInvoiceHeaderAttributes() => new ApInvoiceHeaderAttributes(dbFactory).SetParent(this);

        public virtual ApInvoiceHeaderAttributes GetApInvoiceHeaderAttributes(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<ApInvoiceHeaderAttributes>(RowNum);

        public virtual ApInvoiceHeaderAttributes GetApInvoiceHeaderAttributesByApInvoiceUuid(string ApInvoiceUuid) =>
            (string.IsNullOrEmpty(ApInvoiceUuid)) ? null : dbFactory.GetById<ApInvoiceHeaderAttributes>(ApInvoiceUuid);

        public virtual bool SaveApInvoiceHeaderAttributes(ApInvoiceHeaderAttributes data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteApInvoiceHeaderAttributes(ApInvoiceHeaderAttributes data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<ApInvoiceHeaderAttributes> GetApInvoiceHeaderAttributesAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<ApInvoiceHeaderAttributes>(RowNum);

        public virtual async Task<ApInvoiceHeaderAttributes> GetApInvoiceHeaderAttributesByApInvoiceUuidAsync(string ApInvoiceUuid) =>
            (string.IsNullOrEmpty(ApInvoiceUuid)) ? null : await dbFactory.GetByIdAsync<ApInvoiceHeaderAttributes>(ApInvoiceUuid);

        public virtual async Task<bool> SaveApInvoiceHeaderAttributesAsync(ApInvoiceHeaderAttributes data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteApInvoiceHeaderAttributesAsync(ApInvoiceHeaderAttributes data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual ApInvoiceHeaderAttributes CheckIntegrityApInvoiceHeaderAttributes()
        {
            if (ApInvoiceHeaderAttributes is null || ApInvoiceHeader is null) 
                return ApInvoiceHeaderAttributes;
            ApInvoiceHeaderAttributes.SetParent(this);
            if (ApInvoiceHeaderAttributes.ApInvoiceUuid != ApInvoiceHeader.ApInvoiceUuid)
                ApInvoiceHeaderAttributes.ApInvoiceUuid = ApInvoiceHeader.ApInvoiceUuid;
            ApInvoiceHeaderAttributes.CheckIntegrity();
            return ApInvoiceHeaderAttributes;
        }



        #endregion ApInvoiceHeaderAttributes - Generated 

        #region ApInvoiceItems - Generated 
        // One to many children
        protected IList<ApInvoiceItems> _ApInvoiceItemsDeleted;
        public virtual ApInvoiceItems AddApInvoiceItemsDeleted(ApInvoiceItems del) 
        {
            if (_ApInvoiceItemsDeleted is null)
                _ApInvoiceItemsDeleted = new List<ApInvoiceItems>();
            var lst = _ApInvoiceItemsDeleted.ToList();
            lst.Add(del);
            _ApInvoiceItemsDeleted = lst;
            return del;
        } 

        public virtual IList<ApInvoiceItems> AddApInvoiceItemsDeleted(IList<ApInvoiceItems> del) 
        {
            if (_ApInvoiceItemsDeleted is null)
                _ApInvoiceItemsDeleted = new List<ApInvoiceItems>();
            var lst = _ApInvoiceItemsDeleted.ToList();
            lst.AddRange(del);
            _ApInvoiceItemsDeleted = lst;
            return del;
        } 

        public virtual void SetApInvoiceItemsDeleted(IList<ApInvoiceItems> del) =>
            _ApInvoiceItemsDeleted = del;

        public virtual void ClearApInvoiceItemsDeleted() =>
            _ApInvoiceItemsDeleted = null;


        protected IList<ApInvoiceItems> _ApInvoiceItems;

        public virtual IList<ApInvoiceItems> ApInvoiceItems 
        { 
            get 
            {
                if (_ApInvoiceItems is null)
                    _ApInvoiceItems = new List<ApInvoiceItems>();
                return _ApInvoiceItems;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _ApInvoiceItems = valueList;
                }
                else
                    _ApInvoiceItems = null;
            } 
        }

        public virtual void CopyApInvoiceItemsFrom(ApInvoiceData data) 
        {
            if  (data is null) return;
            var lstDeleted = ApInvoiceItems?.CopyFrom(data.ApInvoiceItems, new string[] {"ApInvoiceUuid"});
            SetApInvoiceItemsDeleted(lstDeleted);
            foreach (var c in ApInvoiceItems)
                c?.CopyChildrenFrom(data.ApInvoiceItems?.FindByRowNum(c.RowNum));
        } 

        public virtual ApInvoiceItems NewApInvoiceItems() => new ApInvoiceItems(dbFactory);

        public virtual ApInvoiceItems AddApInvoiceItems(ApInvoiceItems obj) => 
            ApInvoiceItems.AddOrReplace(obj.SetParent(this));

        public virtual ApInvoiceItems RemoveApInvoiceItems(ApInvoiceItems obj) => 
            AddApInvoiceItemsDeleted(ApInvoiceItems.RemoveObject(obj.SetParent(this)));

        public virtual IList<ApInvoiceItems> GetApInvoiceItemsByApInvoiceUuid(string ApInvoiceUuid) =>
            (string.IsNullOrEmpty(ApInvoiceUuid)) 
                ? null 
                : dbFactory.Find<ApInvoiceItems>("WHERE ApInvoiceUuid = @0 ORDER BY Seq ", ApInvoiceUuid).ToList();

        public virtual bool SaveApInvoiceItems(IList<ApInvoiceItems> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteApInvoiceItems(IList<ApInvoiceItems> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<ApInvoiceItems>> GetApInvoiceItemsByApInvoiceUuidAsync(string ApInvoiceUuid) =>
            (string.IsNullOrEmpty(ApInvoiceUuid)) 
                ? null
                : (await dbFactory.FindAsync<ApInvoiceItems>("WHERE ApInvoiceUuid = @0 ORDER BY Seq ", ApInvoiceUuid)).ToList();

        public virtual async Task<bool> SaveApInvoiceItemsAsync(IList<ApInvoiceItems> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteApInvoiceItemsAsync(IList<ApInvoiceItems> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<ApInvoiceItems> CheckIntegrityApInvoiceItems()
        {
            if (ApInvoiceItems is null || ApInvoiceHeader is null) 
                return ApInvoiceItems;
            var seq = 0;
            ApInvoiceItems.RemoveEmpty();
            var children = ApInvoiceItems.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.ApInvoiceUuid != ApInvoiceHeader.ApInvoiceUuid)
                    child.ApInvoiceUuid = ApInvoiceHeader.ApInvoiceUuid;
                seq += 1;
                child.Seq = seq;
                child.CheckIntegrity();
            }
            return children;
        }



        #endregion ApInvoiceItems - Generated 


    }
}



