    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a ApInvoiceDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class ApInvoiceDataDtoMapperDefault : IDtoMapper<ApInvoiceData, ApInvoiceDataDto> 
    {
        #region read from dto to data

        public virtual ApInvoiceData ReadDto(ApInvoiceData data, ApInvoiceDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new ApInvoiceData();
                data.New();
            }

			if (dto.ApInvoiceHeader != null)
			{
				if (data.ApInvoiceHeader is null)
					data.ApInvoiceHeader = data.NewApInvoiceHeader();
				ReadApInvoiceHeader(data.ApInvoiceHeader, dto.ApInvoiceHeader);
			}
			if (dto.ApInvoiceHeaderInfo != null)
			{
				if (data.ApInvoiceHeaderInfo is null)
					data.ApInvoiceHeaderInfo = data.NewApInvoiceHeaderInfo();
				ReadApInvoiceHeaderInfo(data.ApInvoiceHeaderInfo, dto.ApInvoiceHeaderInfo);
			}
			if (dto.ApInvoiceHeaderAttributes != null)
			{
				if (data.ApInvoiceHeaderAttributes is null)
					data.ApInvoiceHeaderAttributes = data.NewApInvoiceHeaderAttributes();
				ReadApInvoiceHeaderAttributes(data.ApInvoiceHeaderAttributes, dto.ApInvoiceHeaderAttributes);
			}
			if (dto.ApInvoiceItems != null)
			{
				if (data.ApInvoiceItems is null)
					data.ApInvoiceItems = new List<ApInvoiceItems>();
				var deleted = ReadApInvoiceItems(data.ApInvoiceItems, dto.ApInvoiceItems);
				data.SetApInvoiceItemsDeleted(deleted);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadApInvoiceHeader(ApInvoiceHeader data, ApInvoiceHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasApInvoiceUuid) data.ApInvoiceUuid = dto.ApInvoiceUuid;
			if (dto.HasApInvoiceNum) data.ApInvoiceNum = dto.ApInvoiceNum;
			if (dto.HasApInvoiceType) data.ApInvoiceType = dto.ApInvoiceType;
			if (dto.HasApInvoiceStatus) data.ApInvoiceStatus = dto.ApInvoiceStatus;
			if (dto.HasApInvoiceDate) data.ApInvoiceDate = dto.ApInvoiceDate.ToDateTime();
			if (dto.HasApInvoiceTime) data.ApInvoiceTime = dto.ApInvoiceTime.ToTimeSpan();
			if (dto.HasVendorUuid) data.VendorUuid = dto.VendorUuid;
			if (dto.HasVendorNum) data.VendorNum = dto.VendorNum;
			if (dto.HasVendorName) data.VendorName = dto.VendorName;
			if (dto.HasVendorInvoiceNum) data.VendorInvoiceNum = dto.VendorInvoiceNum;
			if (dto.HasVendorInvoiceDate) data.VendorInvoiceDate = dto.VendorInvoiceDate;
			if (dto.HasDueDate) data.DueDate = dto.DueDate;
			if (dto.HasBillDate) data.BillDate = dto.BillDate;
			if (dto.HasCurrency) data.Currency = dto.Currency;
			if (dto.HasTotalAmount) data.TotalAmount = dto.TotalAmount.ToDecimal();
			if (dto.HasPaidAmount) data.PaidAmount = dto.PaidAmount;
			if (dto.HasCreditAmount) data.CreditAmount = dto.CreditAmount;
			if (dto.HasBalance) data.Balance = dto.Balance;
			if (dto.HasCreditAccount) data.CreditAccount = dto.CreditAccount;
			if (dto.HasDebitAccount) data.DebitAccount = dto.DebitAccount;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}


		protected virtual void ReadApInvoiceHeaderInfo(ApInvoiceHeaderInfo data, ApInvoiceHeaderInfoDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasApInvoiceUuid) data.ApInvoiceUuid = dto.ApInvoiceUuid;
			if (dto.HasPoUuid) data.PoUuid = dto.PoUuid;
			if (dto.HasReceiveUuid) data.ReceiveUuid = dto.ReceiveUuid;
			if (dto.HasCentralFulfillmentNum) data.CentralFulfillmentNum = dto.CentralFulfillmentNum;
			if (dto.HasShippingCarrier) data.ShippingCarrier = dto.ShippingCarrier;
			if (dto.HasShippingClass) data.ShippingClass = dto.ShippingClass;
			if (dto.HasDistributionCenterNum) data.DistributionCenterNum = dto.DistributionCenterNum;
			if (dto.HasCentralOrderNum) data.CentralOrderNum = dto.CentralOrderNum;
			if (dto.HasChannelNum) data.ChannelNum = dto.ChannelNum.ToInt();
			if (dto.HasChannelAccountNum) data.ChannelAccountNum = dto.ChannelAccountNum.ToInt();
			if (dto.HasChannelOrderID) data.ChannelOrderID = dto.ChannelOrderID;
			if (dto.HasSecondaryChannelOrderID) data.SecondaryChannelOrderID = dto.SecondaryChannelOrderID;
			if (dto.HasShippingAccount) data.ShippingAccount = dto.ShippingAccount;
			if (dto.HasRefNum) data.RefNum = dto.RefNum;
			if (dto.HasCustomerPoNum) data.CustomerPoNum = dto.CustomerPoNum;
			if (dto.HasBillToName) data.BillToName = dto.BillToName;
			if (dto.HasBillToFirstName) data.BillToFirstName = dto.BillToFirstName;
			if (dto.HasBillToLastName) data.BillToLastName = dto.BillToLastName;
			if (dto.HasBillToSuffix) data.BillToSuffix = dto.BillToSuffix;
			if (dto.HasBillToCompany) data.BillToCompany = dto.BillToCompany;
			if (dto.HasBillToCompanyJobTitle) data.BillToCompanyJobTitle = dto.BillToCompanyJobTitle;
			if (dto.HasBillToAttention) data.BillToAttention = dto.BillToAttention;
			if (dto.HasBillToAddressLine1) data.BillToAddressLine1 = dto.BillToAddressLine1;
			if (dto.HasBillToAddressLine2) data.BillToAddressLine2 = dto.BillToAddressLine2;
			if (dto.HasBillToAddressLine3) data.BillToAddressLine3 = dto.BillToAddressLine3;
			if (dto.HasBillToCity) data.BillToCity = dto.BillToCity;
			if (dto.HasBillToState) data.BillToState = dto.BillToState;
			if (dto.HasBillToStateFullName) data.BillToStateFullName = dto.BillToStateFullName;
			if (dto.HasBillToPostalCode) data.BillToPostalCode = dto.BillToPostalCode;
			if (dto.HasBillToPostalCodeExt) data.BillToPostalCodeExt = dto.BillToPostalCodeExt;
			if (dto.HasBillToCounty) data.BillToCounty = dto.BillToCounty;
			if (dto.HasBillToCountry) data.BillToCountry = dto.BillToCountry;
			if (dto.HasBillToEmail) data.BillToEmail = dto.BillToEmail;
			if (dto.HasBillToDaytimePhone) data.BillToDaytimePhone = dto.BillToDaytimePhone;
			if (dto.HasBillToNightPhone) data.BillToNightPhone = dto.BillToNightPhone;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}


		protected virtual void ReadApInvoiceHeaderAttributes(ApInvoiceHeaderAttributes data, ApInvoiceHeaderAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasApInvoiceUuid) data.ApInvoiceUuid = dto.ApInvoiceUuid;
			if (dto.HasFields) data.Fields.LoadJson(dto.Fields);

			#endregion read properties

			data.CheckIntegrity();
			return;
		}


		protected virtual void ReadApInvoiceItems(ApInvoiceItems data, ApInvoiceItemsDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasApInvoiceItemsUuid) data.ApInvoiceItemsUuid = dto.ApInvoiceItemsUuid;
			if (dto.HasApInvoiceUuid) data.ApInvoiceUuid = dto.ApInvoiceUuid;
			if (dto.HasSeq) data.Seq = dto.Seq.ToInt();
			if (dto.HasApInvoiceItemType) data.ApInvoiceItemType = dto.ApInvoiceItemType;
			if (dto.HasApInvoiceItemStatus) data.ApInvoiceItemStatus = dto.ApInvoiceItemStatus;
			if (dto.HasItemDate) data.ItemDate = dto.ItemDate.ToDateTime();
			if (dto.HasItemTime) data.ItemTime = dto.ItemTime.ToTimeSpan();
			if (dto.HasApDistributionNum) data.ApDistributionNum = dto.ApDistributionNum;
			if (dto.HasDescription) data.Description = dto.Description;
			if (dto.HasNotes) data.Notes = dto.Notes;
			if (dto.HasCurrency) data.Currency = dto.Currency;
			if (dto.HasAmount) data.Amount = dto.Amount.ToDecimal();
			if (dto.HasIsAp) data.IsAp = dto.IsAp.ToBool();
			if (dto.HasCreditAccount) data.CreditAccount = dto.CreditAccount;
			if (dto.HasDebitAccount) data.DebitAccount = dto.DebitAccount;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}

		protected virtual IList<ApInvoiceItems> ReadApInvoiceItems(IList<ApInvoiceItems> data, IList<ApInvoiceItemsDto> dto)
		{
			if (data is null || dto is null)
				return null;
			var lstOrig = new List<ApInvoiceItems>(data.Where(x => x != null).ToList());
			data.Clear();
			foreach (var itemDto in dto)
			{
				if (itemDto == null) continue;

				var obj = itemDto.RowNum > 0
					? lstOrig.Find(x => x.RowNum == itemDto.RowNum)
					: lstOrig.Find(x => x.ApInvoiceItemsUuid == itemDto.ApInvoiceItemsUuid);
				if (obj is null)
					obj = new ApInvoiceItems().SetAllowNull(false);
				else
					lstOrig.Remove(obj);

				data.Add(obj);

				ReadApInvoiceItems(obj, itemDto);

			}
			return lstOrig;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual ApInvoiceDataDto WriteDto(ApInvoiceData data, ApInvoiceDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new ApInvoiceDataDto();

            data.CheckIntegrity();

			if (data.ApInvoiceHeader != null)
			{
				dto.ApInvoiceHeader = new ApInvoiceHeaderDto();
				WriteApInvoiceHeader(data.ApInvoiceHeader, dto.ApInvoiceHeader);
			}
			if (data.ApInvoiceHeaderInfo != null)
			{
				dto.ApInvoiceHeaderInfo = new ApInvoiceHeaderInfoDto();
				WriteApInvoiceHeaderInfo(data.ApInvoiceHeaderInfo, dto.ApInvoiceHeaderInfo);
			}
			if (data.ApInvoiceHeaderAttributes != null)
			{
				dto.ApInvoiceHeaderAttributes = new ApInvoiceHeaderAttributesDto();
				WriteApInvoiceHeaderAttributes(data.ApInvoiceHeaderAttributes, dto.ApInvoiceHeaderAttributes);
			}
			if (data.ApInvoiceItems != null)
			{
				dto.ApInvoiceItems = new List<ApInvoiceItemsDto>();
				WriteApInvoiceItems(data.ApInvoiceItems, dto.ApInvoiceItems);
			}
            return dto;
        }

		protected virtual void WriteApInvoiceHeader(ApInvoiceHeader data, ApInvoiceHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.ApInvoiceUuid = data.ApInvoiceUuid;
			dto.ApInvoiceNum = data.ApInvoiceNum;
			dto.ApInvoiceType = data.ApInvoiceType;
			dto.ApInvoiceStatus = data.ApInvoiceStatus;
			dto.ApInvoiceDate = data.ApInvoiceDate;
			dto.ApInvoiceTime = data.ApInvoiceTime.ToDateTime();
			dto.VendorUuid = data.VendorUuid;
			dto.VendorNum = data.VendorNum;
			dto.VendorName = data.VendorName;
			dto.VendorInvoiceNum = data.VendorInvoiceNum;
			dto.VendorInvoiceDate = data.VendorInvoiceDate;
			dto.DueDate = data.DueDate;
			dto.BillDate = data.BillDate;
			dto.Currency = data.Currency;
			dto.TotalAmount = data.TotalAmount;
			dto.PaidAmount = data.PaidAmount;
			dto.CreditAmount = data.CreditAmount;
			dto.Balance = data.Balance;
			dto.CreditAccount = data.CreditAccount;
			dto.DebitAccount = data.DebitAccount;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}

		protected virtual void WriteApInvoiceHeaderInfo(ApInvoiceHeaderInfo data, ApInvoiceHeaderInfoDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.ApInvoiceUuid = data.ApInvoiceUuid;
			dto.PoUuid = data.PoUuid;
			dto.ReceiveUuid = data.ReceiveUuid;
			dto.CentralFulfillmentNum = data.CentralFulfillmentNum;
			dto.ShippingCarrier = data.ShippingCarrier;
			dto.ShippingClass = data.ShippingClass;
			dto.DistributionCenterNum = data.DistributionCenterNum;
			dto.CentralOrderNum = data.CentralOrderNum;
			dto.ChannelNum = data.ChannelNum;
			dto.ChannelAccountNum = data.ChannelAccountNum;
			dto.ChannelOrderID = data.ChannelOrderID;
			dto.SecondaryChannelOrderID = data.SecondaryChannelOrderID;
			dto.ShippingAccount = data.ShippingAccount;
			dto.RefNum = data.RefNum;
			dto.CustomerPoNum = data.CustomerPoNum;
			dto.BillToName = data.BillToName;
			dto.BillToFirstName = data.BillToFirstName;
			dto.BillToLastName = data.BillToLastName;
			dto.BillToSuffix = data.BillToSuffix;
			dto.BillToCompany = data.BillToCompany;
			dto.BillToCompanyJobTitle = data.BillToCompanyJobTitle;
			dto.BillToAttention = data.BillToAttention;
			dto.BillToAddressLine1 = data.BillToAddressLine1;
			dto.BillToAddressLine2 = data.BillToAddressLine2;
			dto.BillToAddressLine3 = data.BillToAddressLine3;
			dto.BillToCity = data.BillToCity;
			dto.BillToState = data.BillToState;
			dto.BillToStateFullName = data.BillToStateFullName;
			dto.BillToPostalCode = data.BillToPostalCode;
			dto.BillToPostalCodeExt = data.BillToPostalCodeExt;
			dto.BillToCounty = data.BillToCounty;
			dto.BillToCountry = data.BillToCountry;
			dto.BillToEmail = data.BillToEmail;
			dto.BillToDaytimePhone = data.BillToDaytimePhone;
			dto.BillToNightPhone = data.BillToNightPhone;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}

		protected virtual void WriteApInvoiceHeaderAttributes(ApInvoiceHeaderAttributes data, ApInvoiceHeaderAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.ApInvoiceUuid = data.ApInvoiceUuid;
			dto.Fields = data.Fields.ToJson();

			#endregion read properties

			return;
		}

		protected virtual void WriteApInvoiceItems(ApInvoiceItems data, ApInvoiceItemsDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.ApInvoiceItemsUuid = data.ApInvoiceItemsUuid;
			dto.ApInvoiceUuid = data.ApInvoiceUuid;
			dto.Seq = data.Seq;
			dto.ApInvoiceItemType = data.ApInvoiceItemType;
			dto.ApInvoiceItemStatus = data.ApInvoiceItemStatus;
			dto.ItemDate = data.ItemDate;
			dto.ItemTime = data.ItemTime.ToDateTime();
			dto.ApDistributionNum = data.ApDistributionNum;
			dto.Description = data.Description;
			dto.Notes = data.Notes;
			dto.Currency = data.Currency;
			dto.Amount = data.Amount;
			dto.IsAp = data.IsAp;
			dto.CreditAccount = data.CreditAccount;
			dto.DebitAccount = data.DebitAccount;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}
		protected virtual void WriteApInvoiceItems(IList<ApInvoiceItems> data, IList<ApInvoiceItemsDto> dto)
		{
			if (data is null || dto is null)
				return;

			dto.Clear();

			#region write all list items and properties with null

			foreach (var itemData in data)
			{
				if (itemData is null) continue;
				var obj = new ApInvoiceItemsDto();
				dto.Add(obj);
				WriteApInvoiceItems(itemData, obj);
			}

			#endregion write all list items and properties with null
			return;
		}



        #endregion write to dto from data

    }
}



