//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using CsvHelper;
using System.IO;

using Bogus;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a ApInvoiceDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class ApInvoiceDataDtoExtension
    {
        /// <summary>
        /// Merge ApInvoiceDataDto header objects to one dynamic object
        /// </summary>
        /// <param name="dto">ApInvoiceDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>Single dynamic object include all properties of Dto header objects</returns>
        public static IEnumerable<dynamic> MergeHeaderRecord(this ApInvoiceDataDto dto, bool withHeaderText = false)
        {
            var result = new List<dynamic>();
            if(!dto.HasApInvoiceHeader)
                return result;
            //TODO change to merge Dto children object
            //if (withHeaderText)
            //    result.Add(dto.SalesOrderHeader.MergeName(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            //result.Add(dto.SalesOrderHeader.Merge(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeDetailRecord(this ApInvoiceDataDto dto, bool withHeaderText = false)
        {
            return null;
            //TODO change to merge Dto children object
            //var result = new List<dynamic>();
            //if (!dto.HasSalesOrderItems) 
            //    return result;
            //
            //var salesOrderItems = new SalesOrderItems() { SalesOrderItemsAttributes = new SalesOrderItemsAttributes()};
            //
            //if (withHeaderText)
            //    result.Add(salesOrderItems.MergeName(salesOrderItems.SalesOrderItemsAttributes));
            //
            //foreach (var item in dto.SalesOrderItems)
            //{
            //    result.Add(item.Merge(item.SalesOrderItemsAttributes));
            //}
            //return result;
        }


        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <param name="count">Generate multiple fake data</param>
        /// <returns>list for Fake data</returns>
        public static IList<ApInvoiceDataDto> GetFakerData(this ApInvoiceDataDto dto, int count)
        {
            var obj = new ApInvoiceDataDto();
            var datas = new List<ApInvoiceDataDto>();
            for (int i = 0; i < count; i++)
                datas.Add(obj.GetFakerData());
            return datas;
        }

        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <returns>single Fake data</returns>
        public static ApInvoiceDataDto GetFakerData(this ApInvoiceDataDto dto)
        {
            var data = new ApInvoiceDataDto();
			data.ApInvoiceHeader = new ApInvoiceHeaderDto().GetFaker().Generate();
			data.ApInvoiceHeaderInfo = new ApInvoiceHeaderInfoDto().GetFaker().Generate();
			data.ApInvoiceHeaderAttributes = new ApInvoiceHeaderAttributesDto().GetFaker().Generate();
			data.ApInvoiceItems = new ApInvoiceItemsDto().GetFaker().Generate(3);
            return data;
        }


		/// <summary>
		/// Get faker object for ApInvoiceHeaderDto
		/// </summary>
		/// <param name="dto">ApInvoiceHeaderDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<ApInvoiceHeaderDto> GetFaker(this ApInvoiceHeaderDto dto)
		{
			#region faker data rules
			return new Faker<ApInvoiceHeaderDto>()
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.ApInvoiceUuid, f => String.Empty)
				.RuleFor(u => u.ApInvoiceNum, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.ApInvoiceType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ApInvoiceStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ApInvoiceDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.ApInvoiceTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.VendorUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.VendorNum, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.VendorName, f => f.Company.CompanyName())
				.RuleFor(u => u.VendorInvoiceNum, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.VendorInvoiceDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.DueDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.BillDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.Currency, f => f.Lorem.Sentence().TruncateTo(10))
				.RuleFor(u => u.TotalAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.PaidAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.CreditAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.Balance, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.CreditAccount, f => default(long))
				.RuleFor(u => u.DebitAccount, f => default(long))
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for ApInvoiceHeaderInfoDto
		/// </summary>
		/// <param name="dto">ApInvoiceHeaderInfoDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<ApInvoiceHeaderInfoDto> GetFaker(this ApInvoiceHeaderInfoDto dto)
		{
			#region faker data rules
			return new Faker<ApInvoiceHeaderInfoDto>()
				.RuleFor(u => u.ApInvoiceUuid, f => String.Empty)
				.RuleFor(u => u.PoUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ReceiveUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.CentralFulfillmentNum, f => default(long))
				.RuleFor(u => u.ShippingCarrier, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.ShippingClass, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.DistributionCenterNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.CentralOrderNum, f => default(long))
				.RuleFor(u => u.ChannelNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ChannelAccountNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ChannelOrderID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.SecondaryChannelOrderID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ShippingAccount, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.RefNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.CustomerPoNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.BillToName, f => f.Company.CompanyName())
				.RuleFor(u => u.BillToFirstName, f => f.Company.CompanyName())
				.RuleFor(u => u.BillToLastName, f => f.Company.CompanyName())
				.RuleFor(u => u.BillToSuffix, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.BillToCompany, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.BillToCompanyJobTitle, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.BillToAttention, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.BillToAddressLine1, f => f.Address.StreetAddress())
				.RuleFor(u => u.BillToAddressLine2, f => f.Address.SecondaryAddress())
				.RuleFor(u => u.BillToAddressLine3, f => f.Lorem.Sentence().TruncateTo(200))
				.RuleFor(u => u.BillToCity, f => f.Address.City())
				.RuleFor(u => u.BillToState, f => f.Address.State())
				.RuleFor(u => u.BillToStateFullName, f => f.Company.CompanyName())
				.RuleFor(u => u.BillToPostalCode, f => f.Address.ZipCode())
				.RuleFor(u => u.BillToPostalCodeExt, f => f.Lorem.Word())
				.RuleFor(u => u.BillToCounty, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.BillToCountry, f => f.Address.Country())
				.RuleFor(u => u.BillToEmail, f => f.Internet.Email())
				.RuleFor(u => u.BillToDaytimePhone, f => f.Phone.PhoneNumber())
				.RuleFor(u => u.BillToNightPhone, f => f.Phone.PhoneNumber())
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for ApInvoiceHeaderAttributesDto
		/// </summary>
		/// <param name="dto">ApInvoiceHeaderAttributesDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<ApInvoiceHeaderAttributesDto> GetFaker(this ApInvoiceHeaderAttributesDto dto)
		{
			#region faker data rules
			return new Faker<ApInvoiceHeaderAttributesDto>()
				.RuleFor(u => u.ApInvoiceUuid, f => String.Empty)
				.RuleFor(u => u.Fields, f => f.Random.JObject())
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for ApInvoiceItemsDto
		/// </summary>
		/// <param name="dto">ApInvoiceItemsDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<ApInvoiceItemsDto> GetFaker(this ApInvoiceItemsDto dto)
		{
			#region faker data rules
			return new Faker<ApInvoiceItemsDto>()
				.RuleFor(u => u.ApInvoiceItemsUuid, f => String.Empty)
				.RuleFor(u => u.ApInvoiceUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.Seq, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ApInvoiceItemType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ApInvoiceItemStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ItemDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.ItemTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.ApDistributionNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.Description, f => f.Commerce.ProductName())
				.RuleFor(u => u.Notes, f => f.Lorem.Sentence().TruncateTo(500))
				.RuleFor(u => u.Currency, f => f.Lorem.Sentence().TruncateTo(10))
				.RuleFor(u => u.Amount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.IsAp, f => f.Random.Bool())
				.RuleFor(u => u.CreditAccount, f => default(long))
				.RuleFor(u => u.DebitAccount, f => default(long))
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}

    }
}


