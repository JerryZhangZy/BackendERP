


              
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using DigitBridge.CommerceCentral.YoPoco;
using CsvHelper;
using System.IO;
using DigitBridge.Base.Utility;
using System.Dynamic;
using System.Linq;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderShipmentDataDtoCsv Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    [Serializable()]
    public partial class OrderShipmentDataDtoCsv : CsvHelper<OrderShipmentDataDto>
    {
        public override void GetFormat() 
        { 

        }

        public override void RegisterMapper(CsvContext context)
        {
			context.RegisterClassMap(new CsvAutoMapper<OrderShipmentHeaderDto>());
			context.RegisterClassMap(new CsvAutoMapper<OrderShipmentCanceledItemDto>(1));
			context.RegisterClassMap(new CsvAutoMapper<OrderShipmentPackageDto>(2));
			context.RegisterClassMap(new CsvAutoMapper<OrderShipmentShippedItemDto>(2));
        }
        
        protected override void WriteCsv(OrderShipmentDataDto data, CsvWriter csv)
        {
            //data.ExportFixed();
            // combine multiple Dto to one dynamic object
            var headerRecords = data.MergeHeaderRecord(true).ToList();
            WriteEntities(csv, headerRecords, "H");

            //if no details ,please comment undercode
            if (data.HasOrderShipmentPackage)
            {
                foreach (var package in data.OrderShipmentPackage)
                {
                    headerRecords = package.MergeShipmentPackageHeaderRecord(true).ToList();
                    WriteEntities(csv, headerRecords, "L");

                    if(package.HasOrderShipmentShippedItem){
                        var detailsRecords = package.OrderShipmentShippedItem.MergeShipmentPackageDetailRecord(true).ToList();
                        WriteEntities(csv, detailsRecords, "L1");
                    }
                }
            }

            //if no details ,please comment undercode
            if (data.HasOrderShipmentCanceledItem)
            {
                var cancelDetailRecords = data.MergeShipmentCanceledDetailRecord(true).ToList();
                WriteEntities(csv, cancelDetailRecords, "M");
            }
        }

        public override void ReadEntities(CsvReader csv, IList<OrderShipmentDataDto> data)
        {
            var isFirst = true;
            OrderShipmentDataDto dto = new OrderShipmentDataDto();
            OrderShipmentPackageDto packageDto = new OrderShipmentPackageDto();
            while (csv.Read())
            {
                // it is header line
                if (csv.GetField(0).EqualsIgnoreSpace("RecordType"))
                {
                    csv.ReadHeader();
                    isFirst = false;
                    continue;
                }

                switch (csv.GetField(0))
                {
                    case "H":
                        if (!isFirst)
                        {
                            if (dto != null && dto.HasOrderShipmentHeader)
                                data.Add(dto);
                            dto = new OrderShipmentDataDto();
                            isFirst = false;
                        }
                        dto. OrderShipmentHeader = csv.GetRecord<OrderShipmentHeaderDto>();
                        break;
                    case "L":
                        if (dto.OrderShipmentPackage == null)
                            dto.OrderShipmentPackage = new List<OrderShipmentPackageDto>();
                        packageDto = csv.GetRecord<OrderShipmentPackageDto>();
                        dto.OrderShipmentPackage.Add(packageDto);
                        break;
                    case "L1":
                        if (packageDto.OrderShipmentShippedItem == null)
                            packageDto.OrderShipmentShippedItem = new List<OrderShipmentShippedItemDto>();
                        var packageItem = csv.GetRecord<OrderShipmentShippedItemDto>();
                        packageDto.OrderShipmentShippedItem.Add(packageItem);
                        break;
                    case "M":
                        if (dto.OrderShipmentCanceledItem == null)
                            dto.OrderShipmentCanceledItem = new List<OrderShipmentCanceledItemDto>();
                        var cancelItem = csv.GetRecord<OrderShipmentCanceledItemDto>();
                        dto.OrderShipmentCanceledItem.Add(cancelItem);
                        break;
                }
            }
            if (dto != null)
                data.Add(dto);
        }
    }
}


