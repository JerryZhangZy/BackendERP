



//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using DigitBridge.CommerceCentral.YoPoco;
using System.Linq;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderShipmentDataDto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    [Serializable()]
    public partial class OrderShipmentDataDto
    {
        public OrderShipmentHeaderDto OrderShipmentHeader { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        public bool HasOrderShipmentHeader => OrderShipmentHeader != null;

        public IList<OrderShipmentCanceledItemDto> OrderShipmentCanceledItem { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        public bool HasOrderShipmentCanceledItem => OrderShipmentCanceledItem != null;

        public IList<OrderShipmentPackageDto> OrderShipmentPackage { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        public bool HasOrderShipmentPackage => OrderShipmentPackage != null;

        private IList<OrderShipmentShippedItemDto> orderShipmentShippedItem { get; set; }
        /// <summary>
        /// Get shipped items of all package 
        /// </summary>
        public IList<OrderShipmentShippedItemDto> OrderShipmentShippedItem
        {
            get
            {
                //if (orderShipmentShippedItem == null && HasOrderShipmentPackage)
                //{
                //    orderShipmentShippedItem = OrderShipmentPackage.Where(i => i.OrderShipmentShippedItem != null).SelectMany(i => i.OrderShipmentShippedItem).ToList();
                //}
                return orderShipmentShippedItem;
            }
            set
            {
                orderShipmentShippedItem = value;
            }
        }

        [JsonIgnore, XmlIgnore, IgnoreCompare]
        public bool HasOrderShipmentShippedItem => OrderShipmentShippedItem != null && OrderShipmentShippedItem.Count() > 0;


        /// <summary>
        /// Set account info.
        /// </summary>
        /// <param name="masterAccountNum"></param>
        /// <param name="profileNum"></param>
        /// <param name="databaseNum"></param>
        public void SetAccount(int masterAccountNum, int profileNum, int databaseNum)
        {
            if (this.HasOrderShipmentHeader)
            {
                this.OrderShipmentHeader.MasterAccountNum = masterAccountNum;
                this.OrderShipmentHeader.ProfileNum = profileNum;
                this.OrderShipmentHeader.DatabaseNum = databaseNum;
            }

            if (this.HasOrderShipmentCanceledItem)
            {
                foreach (var item in this.OrderShipmentCanceledItem)
                {
                    item.MasterAccountNum = masterAccountNum;
                    item.ProfileNum = profileNum;
                    item.DatabaseNum = databaseNum;
                }
            }
            if (this.HasOrderShipmentPackage)
            {
                foreach (var item in this.OrderShipmentPackage)
                {
                    item.MasterAccountNum = masterAccountNum;
                    item.ProfileNum = profileNum;
                    item.DatabaseNum = databaseNum;
                }
            }
            if (this.HasOrderShipmentShippedItem)
            {
                foreach (var item in this.OrderShipmentShippedItem)
                {
                    item.MasterAccountNum = masterAccountNum;
                    item.ProfileNum = profileNum;
                    item.DatabaseNum = databaseNum;
                }
            }
        }

        /// <summary>
        /// clear all acount info 
        /// </summary>
        public void ClearAccount()

        {
            if (this.HasOrderShipmentHeader)
            {
                this.OrderShipmentHeader.MasterAccountNum = null;
                this.OrderShipmentHeader.ProfileNum = null;
                this.OrderShipmentHeader.DatabaseNum = null;
            }

            if (this.HasOrderShipmentCanceledItem)
            {
                foreach (var item in this.OrderShipmentCanceledItem)
                {
                    item.MasterAccountNum = null;
                    item.ProfileNum = null;
                    item.DatabaseNum = null;
                }
            }
            if (this.HasOrderShipmentPackage)
            {
                foreach (var item in this.OrderShipmentPackage)
                {
                    item.MasterAccountNum = null;
                    item.ProfileNum = null;
                    item.DatabaseNum = null;
                }
            }
            if (this.HasOrderShipmentShippedItem)
            {
                foreach (var item in this.OrderShipmentShippedItem)
                {
                    item.MasterAccountNum = null;
                    item.ProfileNum = null;
                    item.DatabaseNum = null;
                }
            }
        }
    }
}



