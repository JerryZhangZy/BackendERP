//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using CsvHelper;
using System.IO;

using Bogus;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderShipmentDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class OrderShipmentDataDtoExtension
    {
        /// <summary>
        /// Merge OrderShipmentDataDto header objects to one dynamic object
        /// </summary>
        /// <param name="dto">OrderShipmentDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>Single dynamic object include all properties of Dto header objects</returns>
        public static IEnumerable<dynamic> MergeHeaderRecord(this OrderShipmentDataDto dto, bool withHeaderText = false)
        {
            var result = new List<dynamic>();
			if (!dto.HasOrderShipmentHeader)
				return result;
			//TODO change to merge Dto children object
			if (withHeaderText)
                result.Add(dto.OrderShipmentHeader.MergeName(dto.OrderShipmentHeader));
            result.Add(dto.OrderShipmentPackage.Merge(dto.OrderShipmentCanceledItem));
            return result;
        }

		/// <summary>
		/// Merge OrderShipmentDataDto header objects to one dynamic object
		/// </summary>
		/// <param name="dto">OrderShipmentDataDto object to merge data</param>
		/// <param name="withHeaderText">Add header text line at first</param>
		/// <returns>Single dynamic object include all properties of Dto header objects</returns>
		public static IEnumerable<dynamic> MergeShipmentPackageHeaderRecord(this OrderShipmentPackageDto dto, bool withHeaderText = false)
		{
			var result = new List<dynamic>();
			//TODO change to merge Dto children object
			if (withHeaderText)
				result.Add(dto.MergeName(dto));
			result.Add(dto.Merge(dto));
			return result;
		}

		/// <summary>
		/// Merge SalesOrderDataDto detailt list to dynamic object list
		/// </summary>
		/// <param name="dto">SalesOrderDataDto object to merge data</param>
		/// <param name="withHeaderText">Add header text line at first</param>
		/// <returns>list of dynamic object include all properties of detailt objects</returns>
		public static IEnumerable<dynamic> MergeShipmentPackageDetailRecord(this IList<OrderShipmentShippedItemDto> dto, bool withHeaderText = false)
        {
            //TODO change to merge Dto children object
            var result = new List<dynamic>();
			if (dto == null || dto.Count == 0)
				return result;
			var orderShipmentShippedItem = new OrderShipmentShippedItemDto();
			if (withHeaderText)
			{
				result.Add(orderShipmentShippedItem.MergeName(orderShipmentShippedItem));
			}

			foreach (var it in dto)
			{
				result.Add(it.Merge(it));
			}
            return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeShipmentCanceledDetailRecord(this OrderShipmentDataDto dto, bool withHeaderText = false)
        {
			//TODO change to merge Dto children object
			var result = new List<dynamic>();
            if (!dto.HasOrderShipmentCanceledItem)
                return result;

            var orderShipmentCanceledItem = new OrderShipmentCanceledItemDto();

            if (withHeaderText)
                result.Add(orderShipmentCanceledItem.MergeName(orderShipmentCanceledItem));

            foreach (var item in dto.OrderShipmentCanceledItem)
            {
                result.Add(item.Merge(item));

            }
            return result;
        }


        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <param name="count">Generate multiple fake data</param>
        /// <returns>list for Fake data</returns>
        public static IList<OrderShipmentDataDto> GetFakerData(this OrderShipmentDataDto dto, int count)
        {
            var obj = new OrderShipmentDataDto();
            var datas = new List<OrderShipmentDataDto>();
            for (int i = 0; i < count; i++)
                datas.Add(obj.GetFakerData());
            return datas;
        }

        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <returns>single Fake data</returns>
        public static OrderShipmentDataDto GetFakerData(this OrderShipmentDataDto dto)
        {
            var data = new OrderShipmentDataDto();
			data.OrderShipmentHeader = new OrderShipmentHeaderDto().GetFaker().Generate();
			data.OrderShipmentCanceledItem = new OrderShipmentCanceledItemDto().GetFaker().Generate(3);
			data.OrderShipmentPackage = new OrderShipmentPackageDto().GetFaker().Generate(3);
			foreach (var item in data.OrderShipmentPackage)
			{
				item.OrderShipmentShippedItem= new OrderShipmentShippedItemDto().GetFaker().Generate(3);
			}
            return data;
        }


		/// <summary>
		/// Get faker object for OrderShipmentHeaderDto
		/// </summary>
		/// <param name="dto">OrderShipmentHeaderDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<OrderShipmentHeaderDto> GetFaker(this OrderShipmentHeaderDto dto)
		{
			#region faker data rules
			return new Faker<OrderShipmentHeaderDto>()
				.RuleFor(u => u.OrderShipmentNum, f => default(long))
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.ChannelNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ChannelAccountNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.OrderDCAssignmentNum, f => default(long))
				.RuleFor(u => u.DistributionCenterNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.CentralOrderNum, f => default(long))
				.RuleFor(u => u.ChannelOrderID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ShipmentID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.WarehouseCode, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ShipmentType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ShipmentReferenceID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ShipmentDateUtc, f => f.Date.Past(0).Date)
				.RuleFor(u => u.ShippingCarrier, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.ShippingClass, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.ShippingCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.MainTrackingNumber, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.MainReturnTrackingNumber, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.BillOfLadingID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.TotalPackages, f => f.Random.Int(1, 100))
				.RuleFor(u => u.TotalShippedQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TotalCanceledQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TotalWeight, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TotalVolume, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.WeightUnit, f => f.Random.Int(1, 100))
				.RuleFor(u => u.LengthUnit, f => f.Random.Int(1, 100))
				.RuleFor(u => u.VolumeUnit, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ShipmentStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.DBChannelOrderHeaderRowID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ProcessStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ProcessDateUtc, f => f.Date.Past(0).Date)
				.RuleFor(u => u.OrderShipmentUuid, f => String.Empty)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for OrderShipmentCanceledItemDto
		/// </summary>
		/// <param name="dto">OrderShipmentCanceledItemDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<OrderShipmentCanceledItemDto> GetFaker(this OrderShipmentCanceledItemDto dto)
		{
			#region faker data rules
			return new Faker<OrderShipmentCanceledItemDto>()
				.RuleFor(u => u.OrderShipmentCanceledItemNum, f => default(long))
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.ChannelNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ChannelAccountNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.OrderShipmentNum, f => default(long))
				.RuleFor(u => u.ChannelOrderID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.OrderDCAssignmentLineNum, f => default(long))
				.RuleFor(u => u.SKU, f => f.Commerce.Product())
				.RuleFor(u => u.CanceledQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.CancelCode, f => f.Lorem.Word())
				.RuleFor(u => u.CancelOtherReason, f => f.Lorem.Sentence().TruncateTo(200))
				.RuleFor(u => u.DBChannelOrderLineRowID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.OrderShipmentUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.OrderShipmentCanceledItemUuid, f => String.Empty)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for OrderShipmentPackageDto
		/// </summary>
		/// <param name="dto">OrderShipmentPackageDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<OrderShipmentPackageDto> GetFaker(this OrderShipmentPackageDto dto)
		{
			#region faker data rules
			return new Faker<OrderShipmentPackageDto>()
				.RuleFor(u => u.OrderShipmentPackageNum, f => default(long))
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.ChannelNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ChannelAccountNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.OrderShipmentNum, f => default(long))
				.RuleFor(u => u.PackageID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.PackageType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.PackagePatternNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.PackageTrackingNumber, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.PackageReturnTrackingNumber, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.PackageWeight, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.PackageLength, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.PackageWidth, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.PackageHeight, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.PackageVolume, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.PackageQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ParentPackageNum, f => default(long))
				.RuleFor(u => u.HasChildPackage, f => f.Random.Bool())
				.RuleFor(u => u.OrderShipmentUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.OrderShipmentPackageUuid, f => String.Empty)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for OrderShipmentShippedItemDto
		/// </summary>
		/// <param name="dto">OrderShipmentShippedItemDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<OrderShipmentShippedItemDto> GetFaker(this OrderShipmentShippedItemDto dto)
		{
			#region faker data rules
			return new Faker<OrderShipmentShippedItemDto>()
				.RuleFor(u => u.OrderShipmentShippedItemNum, f => default(long))
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.ChannelNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ChannelAccountNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.OrderShipmentNum, f => default(long))
				.RuleFor(u => u.OrderShipmentPackageNum, f => default(long))
				.RuleFor(u => u.ChannelOrderID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.OrderDCAssignmentLineNum, f => default(long))
				.RuleFor(u => u.SKU, f => f.Commerce.Product())
				.RuleFor(u => u.ShippedQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.DBChannelOrderLineRowID, f => f.Random.Guid().ToString())
				.RuleFor(u => u.OrderShipmentUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.OrderShipmentPackageUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.OrderShipmentShippedItemUuid, f => String.Empty)
				;
			#endregion faker data rules
		}

    }
}


