              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a WarehouseTransferItems.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("WarehouseTransferItems")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("WarehouseTransferItemsUuid")]
    [DtoName("WarehouseTransferItemsDto")]
    public partial class WarehouseTransferItems : TableRepository<WarehouseTransferItems, long>
    {

        public WarehouseTransferItems() : base() {}
        public WarehouseTransferItems(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("WarehouseTransferItemsUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _warehouseTransferItemsUuid;

        [Column("ReferWarehouseTransferItemsUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _referWarehouseTransferItemsUuid;

        [Column("WarehouseTransferUuid",SqlDbType.VarChar,NotNull=true)]
        private string _warehouseTransferUuid;

        [Column("Seq",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _seq;

        [Column("ItemDate",SqlDbType.Date,NotNull=true)]
        private DateTime _itemDate;

        [Column("ItemTime",SqlDbType.Time,NotNull=true)]
        private TimeSpan _itemTime;

        [Column("SKU",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _sKU;

        [Column("ProductUuid",SqlDbType.VarChar,NotNull=true)]
        private string _productUuid;

        [Column("FromInventoryUuid",SqlDbType.VarChar,NotNull=true)]
        private string _fromInventoryUuid;

        [Column("FromWarehouseUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _fromWarehouseUuid;

        [Column("FromWarehouseCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _fromWarehouseCode;

        [Column("LotNum",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _lotNum;

        [Column("ToInventoryUuid",SqlDbType.VarChar,NotNull=true)]
        private string _toInventoryUuid;

        [Column("ToWarehouseUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _toWarehouseUuid;

        [Column("ToWarehouseCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _toWarehouseCode;

        [Column("ToLotNum",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _toLotNum;

        [Column("Description",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _description;

        [Column("Notes",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _notes;

        [Column("UOM",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _uOM;

        [Column("PackType",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _packType;

        [Column("PackQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _packQty;

        [Column("TransferPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _transferPack;

        [Column("TransferQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _transferQty;

        [Column("FromBeforeInstockPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _fromBeforeInstockPack;

        [Column("FromBeforeInstockQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _fromBeforeInstockQty;

        [Column("ToBeforeInstockPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _toBeforeInstockPack;

        [Column("ToBeforeInstockQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _toBeforeInstockQty;

        [Column("UnitCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _unitCost;

        [Column("AvgCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _avgCost;

        [Column("LotCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _lotCost;

        [Column("LotInDate",SqlDbType.Date)]
        private DateTime? _lotInDate;

        [Column("LotExpDate",SqlDbType.Date)]
        private DateTime? _lotExpDate;

        [Column("UpdateDateUtc",SqlDbType.DateTime)]
        private DateTime? _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => WarehouseTransferItemsUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(WarehouseTransferItemsUuid)) 
				WarehouseTransferItemsUuid = Guid.NewGuid().ToString(); 
		}
		[IgnoreCompare] 
		public override bool IsEmpty => ( string.IsNullOrWhiteSpace(SKU) );
		/// <summary>
		/// (Readonly) Item Line uuid. <br> Display: false, Editable: false
		/// </summary>
        public virtual string WarehouseTransferItemsUuid
        {
            get
            {
				return _warehouseTransferItemsUuid?.TrimEnd(); 
            }
            set
            {
				_warehouseTransferItemsUuid = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseTransferItemsUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) Original Item Line uuid. <br> Display: false, Editable: false
		/// </summary>
        public virtual string ReferWarehouseTransferItemsUuid
        {
            get
            {
				return _referWarehouseTransferItemsUuid?.TrimEnd(); 
            }
            set
            {
				_referWarehouseTransferItemsUuid = value.TruncateTo(50); 
				OnPropertyChanged("ReferWarehouseTransferItemsUuid", value);
            }
        }

		/// <summary>
		/// Order uuid. <br> Display: false, Editable: false.
		/// </summary>
        public virtual string WarehouseTransferUuid
        {
            get
            {
				return _warehouseTransferUuid?.TrimEnd(); 
            }
            set
            {
				_warehouseTransferUuid = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseTransferUuid", value);
            }
        }

		/// <summary>
		/// Item Line sequence number. <br> Title: Line#, Display: true, Editable: false
		/// </summary>
        public virtual int Seq
        {
            get
            {
				return _seq; 
            }
            set
            {
				_seq = value; 
				OnPropertyChanged("Seq", value);
            }
        }

		/// <summary>
		/// Update item date
		/// </summary>
        public virtual DateTime ItemDate
        {
            get
            {
				return _itemDate; 
            }
            set
            {
				_itemDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("ItemDate", value);
            }
        }

		/// <summary>
		/// Update item time
		/// </summary>
        public virtual TimeSpan ItemTime
        {
            get
            {
				return _itemTime; 
            }
            set
            {
				_itemTime = value.ToSqlSafeValue(); 
				OnPropertyChanged("ItemTime", value);
            }
        }

		/// <summary>
		/// Product SKU. <br> Title: SKU, Display: true, Editable: true
		/// </summary>
        public virtual string SKU
        {
            get
            {
				return _sKU?.TrimEnd(); 
            }
            set
            {
				_sKU = value.TruncateTo(100); 
				OnPropertyChanged("SKU", value);
            }
        }

		/// <summary>
		/// (Readonly) Product uuid. load from ProductBasic data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string ProductUuid
        {
            get
            {
				return _productUuid?.TrimEnd(); 
            }
            set
            {
				_productUuid = value.TruncateTo(50); 
				OnPropertyChanged("ProductUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) Inventory Item Line uuid, load from inventory data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string FromInventoryUuid
        {
            get
            {
				return _fromInventoryUuid?.TrimEnd(); 
            }
            set
            {
				_fromInventoryUuid = value.TruncateTo(50); 
				OnPropertyChanged("FromInventoryUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) Warehouse uuid, transfer from warehouse. <br> Display: false, Editable: false
		/// </summary>
        public virtual string FromWarehouseUuid
        {
            get
            {
				return _fromWarehouseUuid?.TrimEnd(); 
            }
            set
            {
				_fromWarehouseUuid = value.TruncateTo(50); 
				OnPropertyChanged("FromWarehouseUuid", value);
            }
        }

		/// <summary>
		/// Readable warehouse code, transfer from warehouse. <br> Title: Warehouse Code, Display: true, Editable: true
		/// </summary>
        public virtual string FromWarehouseCode
        {
            get
            {
				return _fromWarehouseCode?.TrimEnd(); 
            }
            set
            {
				_fromWarehouseCode = value.TruncateTo(50); 
				OnPropertyChanged("FromWarehouseCode", value);
            }
        }

		/// <summary>
		/// Lot Number. <br> Title: Lot Number, Display: true, Editable: true
		/// </summary>
        public virtual string LotNum
        {
            get
            {
				return _lotNum?.TrimEnd(); 
            }
            set
            {
				_lotNum = value.TruncateTo(100); 
				OnPropertyChanged("LotNum", value);
            }
        }

		/// <summary>
		/// (Readonly) Inventory Item Line uuid, load from inventory data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string ToInventoryUuid
        {
            get
            {
				return _toInventoryUuid?.TrimEnd(); 
            }
            set
            {
				_toInventoryUuid = value.TruncateTo(50); 
				OnPropertyChanged("ToInventoryUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) Warehouse uuid, transfer to warehouse. <br> Display: false, Editable: false
		/// </summary>
        public virtual string ToWarehouseUuid
        {
            get
            {
				return _toWarehouseUuid?.TrimEnd(); 
            }
            set
            {
				_toWarehouseUuid = value.TruncateTo(50); 
				OnPropertyChanged("ToWarehouseUuid", value);
            }
        }

		/// <summary>
		/// Readable warehouse code, transfer to warehouse. <br> Title: Warehouse Code, Display: true, Editable: true
		/// </summary>
        public virtual string ToWarehouseCode
        {
            get
            {
				return _toWarehouseCode?.TrimEnd(); 
            }
            set
            {
				_toWarehouseCode = value.TruncateTo(50); 
				OnPropertyChanged("ToWarehouseCode", value);
            }
        }

		/// <summary>
		/// To Lot Number. <br> Title: To Lot Number, Display: true, Editable: true
		/// </summary>
        public virtual string ToLotNum
        {
            get
            {
				return _toLotNum?.TrimEnd(); 
            }
            set
            {
				_toLotNum = value.TruncateTo(100); 
				OnPropertyChanged("ToLotNum", value);
            }
        }

		/// <summary>
		/// Item line description, default from ProductBasic data. <br> Title: Description, Display: true, Editable: true
		/// </summary>
        public virtual string Description
        {
            get
            {
				return _description?.TrimEnd(); 
            }
            set
            {
				_description = value.TruncateTo(200); 
				OnPropertyChanged("Description", value);
            }
        }

		/// <summary>
		/// Order item line notes. <br> Title: Notes, Display: true, Editable: true
		/// </summary>
        public virtual string Notes
        {
            get
            {
				return _notes?.TrimEnd(); 
            }
            set
            {
				_notes = value.TruncateTo(500); 
				OnPropertyChanged("Notes", value);
            }
        }

		/// <summary>
		/// (Readonly) Product unit of measure, load from ProductBasic data. <br> Title: UOM, Display: true, Editable: false
		/// </summary>
        public virtual string UOM
        {
            get
            {
				return _uOM?.TrimEnd(); 
            }
            set
            {
				_uOM = value.TruncateTo(50); 
				OnPropertyChanged("UOM", value);
            }
        }

		/// <summary>
		/// Product SKU Qty pack type, for example: Case, Box, Each. <br> Title: Pack, Display: true, Editable: true
		/// </summary>
        public virtual string PackType
        {
            get
            {
				return _packType?.TrimEnd(); 
            }
            set
            {
				_packType = value.TruncateTo(50); 
				OnPropertyChanged("PackType", value);
            }
        }

		/// <summary>
		/// Item Qty each per pack. <br> Title: Qty/Pack, Display: true, Editable: true
		/// </summary>
        public virtual decimal PackQty
        {
            get
            {
				return _packQty; 
            }
            set
            {
				_packQty = value; 
				OnPropertyChanged("PackQty", value);
            }
        }

		/// <summary>
		/// Item transfered pack (positive/negative). <br> Title: Transfer Pack, Display: true, Editable: true
		/// </summary>
        public virtual decimal TransferPack
        {
            get
            {
				return _transferPack; 
            }
            set
            {
				_transferPack = value; 
				OnPropertyChanged("TransferPack", value);
            }
        }

		/// <summary>
		/// Item transfer qty (positive). <br> Title: Transfer Qty, Display: true, Editable: true
		/// </summary>
        public virtual decimal TransferQty
        {
            get
            {
				return _transferQty; 
            }
            set
            {
				_transferQty = value; 
				OnPropertyChanged("TransferQty", value);
            }
        }

		/// <summary>
		/// (Readonly) from warehouse Instock pack before transfer. <br> Title: Instock Pack, Display: true, Editable: false
		/// </summary>
        public virtual decimal FromBeforeInstockPack
        {
            get
            {
				return _fromBeforeInstockPack; 
            }
            set
            {
				_fromBeforeInstockPack = value; 
				OnPropertyChanged("FromBeforeInstockPack", value);
            }
        }

		/// <summary>
		/// (Readonly) from warehouse Instock before transfer. <br> Title: Instock, Display: true, Editable: false
		/// </summary>
        public virtual decimal FromBeforeInstockQty
        {
            get
            {
				return _fromBeforeInstockQty; 
            }
            set
            {
				_fromBeforeInstockQty = value; 
				OnPropertyChanged("FromBeforeInstockQty", value);
            }
        }

		/// <summary>
		/// (Readonly) to warehouse Instock pack before transfer. <br> Title: Instock Pack, Display: true, Editable: false
		/// </summary>
        public virtual decimal ToBeforeInstockPack
        {
            get
            {
				return _toBeforeInstockPack; 
            }
            set
            {
				_toBeforeInstockPack = value; 
				OnPropertyChanged("ToBeforeInstockPack", value);
            }
        }

		/// <summary>
		/// (Readonly) to warehouse Instock before transfer. <br> Title: Instock, Display: true, Editable: false
		/// </summary>
        public virtual decimal ToBeforeInstockQty
        {
            get
            {
				return _toBeforeInstockQty; 
            }
            set
            {
				_toBeforeInstockQty = value; 
				OnPropertyChanged("ToBeforeInstockQty", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Unit Cost.
		/// </summary>
        public virtual decimal UnitCost
        {
            get
            {
				return _unitCost; 
            }
            set
            {
				_unitCost = value; 
				OnPropertyChanged("UnitCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Avg.Cost.
		/// </summary>
        public virtual decimal AvgCost
        {
            get
            {
				return _avgCost; 
            }
            set
            {
				_avgCost = value; 
				OnPropertyChanged("AvgCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Lot Cost.
		/// </summary>
        public virtual decimal LotCost
        {
            get
            {
				return _lotCost; 
            }
            set
            {
				_lotCost = value; 
				OnPropertyChanged("LotCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Lot receive Date
		/// </summary>
        public virtual DateTime? LotInDate
        {
            get
            {
				if (!AllowNull && _lotInDate is null) 
					_lotInDate = new DateTime().MinValueSql(); 
				return _lotInDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotInDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotInDate", value);
				}
            }
        }

		/// <summary>
		/// (Ignore) Lot Expiration date
		/// </summary>
        public virtual DateTime? LotExpDate
        {
            get
            {
				if (!AllowNull && _lotExpDate is null) 
					_lotExpDate = new DateTime().MinValueSql(); 
				return _lotExpDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotExpDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotExpDate", value);
				}
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual DateTime? UpdateDateUtc
        {
            get
            {
				if (!AllowNull && _updateDateUtc is null) 
					_updateDateUtc = new DateTime().MinValueSql(); 
				return _updateDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_updateDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("UpdateDateUtc", value);
				}
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
				OnPropertyChanged("UpdateBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private WarehouseTransferData Parent { get; set; }
		public WarehouseTransferData GetParent() => Parent;
		public WarehouseTransferItems SetParent(WarehouseTransferData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			WarehouseTransferItemsUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override WarehouseTransferItems Clear()
        {
            base.Clear();
			_warehouseTransferItemsUuid = String.Empty; 
			_referWarehouseTransferItemsUuid = String.Empty; 
			_warehouseTransferUuid = String.Empty; 
			_seq = default(int); 
			_itemDate = new DateTime().MinValueSql(); 
			_itemTime = new TimeSpan().MinValueSql(); 
			_sKU = String.Empty; 
			_productUuid = String.Empty; 
			_fromInventoryUuid = String.Empty; 
			_fromWarehouseUuid = String.Empty; 
			_fromWarehouseCode = String.Empty; 
			_lotNum = String.Empty; 
			_toInventoryUuid = String.Empty; 
			_toWarehouseUuid = String.Empty; 
			_toWarehouseCode = String.Empty; 
			_toLotNum = String.Empty; 
			_description = String.Empty; 
			_notes = String.Empty; 
			_uOM = String.Empty; 
			_packType = String.Empty; 
			_packQty = default(decimal); 
			_transferPack = default(decimal); 
			_transferQty = default(decimal); 
			_fromBeforeInstockPack = default(decimal); 
			_fromBeforeInstockQty = default(decimal); 
			_toBeforeInstockPack = default(decimal); 
			_toBeforeInstockQty = default(decimal); 
			_unitCost = default(decimal); 
			_avgCost = default(decimal); 
			_lotCost = default(decimal); 
			_lotInDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_lotExpDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_updateDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public override WarehouseTransferItems CheckIntegrity()
        {
            CheckUniqueId();
            CheckIntegrityOthers();
            return this;
        }

        public virtual WarehouseTransferItems ClearChildren()
        {
            return this;
        }

        public virtual WarehouseTransferItems NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(WarehouseTransferItems data)
        {
            if (data is null) return;
            return;
        }

		public static IList<WarehouseTransferItems> FindByWarehouseTransferUuid(IDataBaseFactory dbFactory, string warehouseTransferUuid)
		{
			return dbFactory.Find<WarehouseTransferItems>("WHERE WarehouseTransferUuid = @0 ORDER BY Seq ", warehouseTransferUuid).ToList();
		}
		public static long CountByWarehouseTransferUuid(IDataBaseFactory dbFactory, string warehouseTransferUuid)
		{
			return dbFactory.Count<WarehouseTransferItems>("WHERE WarehouseTransferUuid = @0 ", warehouseTransferUuid);
		}
		public static async Task<IList<WarehouseTransferItems>> FindByAsyncWarehouseTransferUuid(IDataBaseFactory dbFactory, string warehouseTransferUuid)
		{
			return (await dbFactory.FindAsync<WarehouseTransferItems>("WHERE WarehouseTransferUuid = @0 ORDER BY Seq ", warehouseTransferUuid)).ToList();
		}
		public static async Task<long> CountByAsyncWarehouseTransferUuid(IDataBaseFactory dbFactory, string warehouseTransferUuid)
		{
			return await dbFactory.CountAsync<WarehouseTransferItems>("WHERE WarehouseTransferUuid = @0 ", warehouseTransferUuid);
		}


        #endregion Methods - Generated 
    }
}



