//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using CsvHelper;
using System.IO;

using Bogus;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a WarehouseTransferDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class WarehouseTransferDataDtoExtension
    {
        /// <summary>
        /// Merge WarehouseTransferDataDto header objects to one dynamic object
        /// </summary>
        /// <param name="dto">WarehouseTransferDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>Single dynamic object include all properties of Dto header objects</returns>
        public static IEnumerable<dynamic> MergeHeaderRecord(this WarehouseTransferDataDto dto, bool withHeaderText = false)
        {
            var result = new List<dynamic>();
            if(!dto.HasWarehouseTransferHeader)
                return result;
            //TODO change to merge Dto children object
            //if (withHeaderText)
            //    result.Add(dto.SalesOrderHeader.MergeName(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            //result.Add(dto.SalesOrderHeader.Merge(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeDetailRecord(this WarehouseTransferDataDto dto, bool withHeaderText = false)
        {
            return null;
            //TODO change to merge Dto children object
            //var result = new List<dynamic>();
            //if (!dto.HasSalesOrderItems) 
            //    return result;
            //
            //var salesOrderItems = new SalesOrderItems() { SalesOrderItemsAttributes = new SalesOrderItemsAttributes()};
            //
            //if (withHeaderText)
            //    result.Add(salesOrderItems.MergeName(salesOrderItems.SalesOrderItemsAttributes));
            //
            //foreach (var item in dto.SalesOrderItems)
            //{
            //    result.Add(item.Merge(item.SalesOrderItemsAttributes));
            //}
            //return result;
        }


        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <param name="count">Generate multiple fake data</param>
        /// <returns>list for Fake data</returns>
        public static IList<WarehouseTransferDataDto> GetFakerData(this WarehouseTransferDataDto dto, int count)
        {
            var obj = new WarehouseTransferDataDto();
            var datas = new List<WarehouseTransferDataDto>();
            for (int i = 0; i < count; i++)
                datas.Add(obj.GetFakerData());
            return datas;
        }

        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <returns>single Fake data</returns>
        public static WarehouseTransferDataDto GetFakerData(this WarehouseTransferDataDto dto)
        {
            var data = new WarehouseTransferDataDto();
			data.WarehouseTransferHeader = new WarehouseTransferHeaderDto().GetFaker().Generate();
			data.WarehouseTransferItems = new WarehouseTransferItemsDto().GetFaker().Generate(3);
            return data;
        }


		/// <summary>
		/// Get faker object for WarehouseTransferHeaderDto
		/// </summary>
		/// <param name="dto">WarehouseTransferHeaderDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<WarehouseTransferHeaderDto> GetFaker(this WarehouseTransferHeaderDto dto)
		{
			#region faker data rules
			return new Faker<WarehouseTransferHeaderDto>()
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.WarehouseTransferUuid, f => String.Empty)
				.RuleFor(u => u.BatchNumber, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.WarehouseTransferType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.WarehouseTransferStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.TransferDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.TransferTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.Processor, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.ReceiveDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.ReceiveTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.ReceiveProcessor, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.FromWarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.FromWarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.ToWarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ToWarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.ReferenceType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ReferenceUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ReferenceNum, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.WarehouseTransferSourceCode, f => f.Lorem.Word())
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for WarehouseTransferItemsDto
		/// </summary>
		/// <param name="dto">WarehouseTransferItemsDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<WarehouseTransferItemsDto> GetFaker(this WarehouseTransferItemsDto dto)
		{
			#region faker data rules
			return new Faker<WarehouseTransferItemsDto>()
				.RuleFor(u => u.WarehouseTransferItemsUuid, f => String.Empty)
				.RuleFor(u => u.ReferWarehouseTransferItemsUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.WarehouseTransferUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.Seq, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ItemDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.ItemTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.SKU, f => f.Commerce.Product())
				.RuleFor(u => u.ProductUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.FromInventoryUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.FromWarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.FromWarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.LotNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.ToInventoryUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ToWarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ToWarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.ToLotNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.Description, f => f.Commerce.ProductName())
				.RuleFor(u => u.Notes, f => f.Lorem.Sentence().TruncateTo(500))
				.RuleFor(u => u.UOM, f => f.PickRandom(FakerExtension.UOM))
				.RuleFor(u => u.PackType, f => f.PickRandom(FakerExtension.PackType))
				.RuleFor(u => u.PackQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TransferPack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TransferQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.FromBeforeInstockPack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.FromBeforeInstockQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ToBeforeInstockPack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ToBeforeInstockQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.UnitCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.AvgCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.LotCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.LotInDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.LotExpDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}

    }
}


