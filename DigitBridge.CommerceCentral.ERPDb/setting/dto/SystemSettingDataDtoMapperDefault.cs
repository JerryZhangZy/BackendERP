    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a SystemSettingDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class SystemSettingDataDtoMapperDefault : IDtoMapper<SystemSettingData, SystemSettingDataDto> 
    {
        #region read from dto to data

        public virtual SystemSettingData ReadDto(SystemSettingData data, SystemSettingDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new SystemSettingData();
                data.New();
            }

			if (dto.SystemSetting != null)
			{
				if (data.SystemSetting is null)
					data.SystemSetting = data.NewSystemSetting();
				ReadSystemSetting(data.SystemSetting, dto.SystemSetting);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadSystemSetting(SystemSetting data, SystemSettingDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasSystemSettingUuid) data.SystemSettingUuid = dto.SystemSettingUuid;
			if (dto.HasDescription) data.Description = dto.Description;
			if (dto.HasFields) data.Fields.LoadJson(dto.Fields);
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual SystemSettingDataDto WriteDto(SystemSettingData data, SystemSettingDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new SystemSettingDataDto();

            data.CheckIntegrity();

			if (data.SystemSetting != null)
			{
				dto.SystemSetting = new SystemSettingDto();
				WriteSystemSetting(data.SystemSetting, dto.SystemSetting);
			}
            return dto;
        }

		protected virtual void WriteSystemSetting(SystemSetting data, SystemSettingDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.SystemSettingUuid = data.SystemSettingUuid;
			dto.Description = data.Description;
			dto.Fields = data.Fields.ToJson();
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}


        #endregion write to dto from data

    }
}



