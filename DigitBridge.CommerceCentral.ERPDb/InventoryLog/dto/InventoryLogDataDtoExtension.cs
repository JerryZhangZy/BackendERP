//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using CsvHelper;
using System.IO;

using Bogus;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InventoryLogDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class InventoryLogDataDtoExtension
    {
        /// <summary>
        /// Merge InventoryLogDataDto header objects to one dynamic object
        /// </summary>
        /// <param name="dto">InventoryLogDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>Single dynamic object include all properties of Dto header objects</returns>
        public static IEnumerable<dynamic> MergeHeaderRecord(this InventoryLogDataDto dto, bool withHeaderText = false)
        {
            var result = new List<dynamic>();
            //TODO change to merge Dto children object
            //if (withHeaderText)
            //    result.Add(dto.SalesOrderHeader.MergeName(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            //result.Add(dto.SalesOrderHeader.Merge(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeDetailRecord(this InventoryLogDataDto dto, bool withHeaderText = false)
        {
            return null;
            //TODO change to merge Dto children object
            //if (!dto.HasSalesOrderItems) 
            //    return null;
            //
            //var result = new List<dynamic>();
            //var salesOrderItems = new SalesOrderItems() { SalesOrderItemsAttributes = new SalesOrderItemsAttributes()};
            //
            //if (withHeaderText)
            //    result.Add(salesOrderItems.MergeName(salesOrderItems.SalesOrderItemsAttributes));
            //
            //foreach (var item in dto.SalesOrderItems)
            //{
            //    result.Add(item.Merge(item.SalesOrderItemsAttributes));
            //}
            //return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeDetailRecord(this IEnumerable<InventoryLogDataDto> dtoList, bool withHeaderText = false)
        {
            //TODO change to merge Dto children object
            var result = new List<dynamic>();
            if (dtoList == null)
                return result;

            var inventoryLog = new InventoryLogDataDto() { InventoryLog = new InventoryLogDto() };

            if (withHeaderText)
                result.Add(inventoryLog.MergeName(inventoryLog.InventoryLog));

            foreach (var item in dtoList)
            {
                result.Add(item.Merge(item.InventoryLog));
            }
            return result;
        }




        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <param name="count">Generate multiple fake data</param>
        /// <returns>list for Fake data</returns>
        public static IList<InventoryLogDataDto> GetFakerData(this InventoryLogDataDto dto, int count)
        {
            var obj = new InventoryLogDataDto();
            var datas = new List<InventoryLogDataDto>();
            for (int i = 0; i < count; i++)
                datas.Add(obj.GetFakerData());
            return datas;
        }

        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <returns>single Fake data</returns>
        public static InventoryLogDataDto GetFakerData(this InventoryLogDataDto dto)
        {
            var data = new InventoryLogDataDto();
			data.InventoryLog = new InventoryLogDto().GetFaker().Generate();
            return data;
        }


		/// <summary>
		/// Get faker object for InventoryLogDto
		/// </summary>
		/// <param name="dto">InventoryLogDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<InventoryLogDto> GetFaker(this InventoryLogDto dto)
		{
			#region faker data rules
			return new Faker<InventoryLogDto>()
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.InventoryLogUuid, f => String.Empty)
				.RuleFor(u => u.ProductUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.InventoryUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.BatchNum, f => default(long))
				.RuleFor(u => u.LogType, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.LogUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.LogNumber, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.LogItemUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.LogStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.LogDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.LogTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.LogBy, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.SKU, f => f.Commerce.Product())
				.RuleFor(u => u.Description, f => f.Commerce.ProductName())
				.RuleFor(u => u.WarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.LotNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.LotInDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.LotExpDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.LpnNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.StyleCode, f => f.Lorem.Word())
				.RuleFor(u => u.ColorPatternCode, f => f.Commerce.Color())
				.RuleFor(u => u.SizeCode, f => f.Lorem.Word())
				.RuleFor(u => u.WidthCode, f => f.Lorem.Word())
				.RuleFor(u => u.LengthCode, f => f.Lorem.Word())
				.RuleFor(u => u.UOM, f => f.PickRandom(FakerExtension.UOM))
				.RuleFor(u => u.LogQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.BeforeInstock, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.BeforeBaseCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.BeforeUnitCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.BeforeAvgCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.EnterBy, f => null)
				;
			#endregion faker data rules
		}

    }
}


