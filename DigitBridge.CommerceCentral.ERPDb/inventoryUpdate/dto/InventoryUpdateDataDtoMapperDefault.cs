    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InventoryUpdateDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class InventoryUpdateDataDtoMapperDefault : IDtoMapper<InventoryUpdateData, InventoryUpdateDataDto> 
    {
        #region read from dto to data

        public virtual InventoryUpdateData ReadDto(InventoryUpdateData data, InventoryUpdateDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new InventoryUpdateData();
                data.New();
            }

			if (dto.InventoryUpdateHeader != null)
			{
				if (data.InventoryUpdateHeader is null)
					data.InventoryUpdateHeader = data.NewInventoryUpdateHeader();
				ReadInventoryUpdateHeader(data.InventoryUpdateHeader, dto.InventoryUpdateHeader);
			}
			if (dto.InventoryUpdateItems != null)
			{
				if (data.InventoryUpdateItems is null)
					data.InventoryUpdateItems = new List<InventoryUpdateItems>();
				var deleted = ReadInventoryUpdateItems(data.InventoryUpdateItems, dto.InventoryUpdateItems);
				data.SetInventoryUpdateItemsDeleted(deleted);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadInventoryUpdateHeader(InventoryUpdateHeader data, InventoryUpdateHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasInventoryUpdateUuid) data.InventoryUpdateUuid = dto.InventoryUpdateUuid;
			if (dto.HasBatchNumber) data.BatchNumber = dto.BatchNumber;
			if (dto.HasInventoryUpdateType) data.InventoryUpdateType = dto.InventoryUpdateType.ToInt();
			if (dto.HasInventoryUpdateStatus) data.InventoryUpdateStatus = dto.InventoryUpdateStatus.ToInt();
			if (dto.HasUpdateDate) data.UpdateDate = dto.UpdateDate.ToDateTime();
			if (dto.HasUpdateTime) data.UpdateTime = dto.UpdateTime.ToTimeSpan();
			if (dto.HasProcessor) data.Processor = dto.Processor;
			if (dto.HasWarehouseUuid) data.WarehouseUuid = dto.WarehouseUuid;
			if (dto.HasWarehouseCode) data.WarehouseCode = dto.WarehouseCode;
			if (dto.HasCustomerUuid) data.CustomerUuid = dto.CustomerUuid;
			if (dto.HasCustomerCode) data.CustomerCode = dto.CustomerCode;
			if (dto.HasCustomerName) data.CustomerName = dto.CustomerName;
			if (dto.HasVendorUuid) data.VendorUuid = dto.VendorUuid;
			if (dto.HasVendorCode) data.VendorCode = dto.VendorCode;
			if (dto.HasVendorName) data.VendorName = dto.VendorName;
			if (dto.HasReferenceType) data.ReferenceType = dto.ReferenceType.ToInt();
			if (dto.HasReferenceUuid) data.ReferenceUuid = dto.ReferenceUuid;
			if (dto.HasReferenceNum) data.ReferenceNum = dto.ReferenceNum;
			if (dto.HasInventoryUpdateSourceCode) data.InventoryUpdateSourceCode = dto.InventoryUpdateSourceCode;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}


		protected virtual void ReadInventoryUpdateItems(InventoryUpdateItems data, InventoryUpdateItemsDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasInventoryUpdateItemsUuid) data.InventoryUpdateItemsUuid = dto.InventoryUpdateItemsUuid;
			if (dto.HasInventoryUpdateUuid) data.InventoryUpdateUuid = dto.InventoryUpdateUuid;
			if (dto.HasSeq) data.Seq = dto.Seq.ToInt();
			if (dto.HasItemDate) data.ItemDate = dto.ItemDate.ToDateTime();
			if (dto.HasItemTime) data.ItemTime = dto.ItemTime.ToTimeSpan();
			if (dto.HasSKU) data.SKU = dto.SKU;
			if (dto.HasProductUuid) data.ProductUuid = dto.ProductUuid;
			if (dto.HasInventoryUuid) data.InventoryUuid = dto.InventoryUuid;
			if (dto.HasWarehouseUuid) data.WarehouseUuid = dto.WarehouseUuid;
			if (dto.HasWarehouseCode) data.WarehouseCode = dto.WarehouseCode;
			if (dto.HasLotNum) data.LotNum = dto.LotNum;
			if (dto.HasDescription) data.Description = dto.Description;
			if (dto.HasNotes) data.Notes = dto.Notes;
			if (dto.HasUOM) data.UOM = dto.UOM;
			if (dto.HasPackType) data.PackType = dto.PackType;
			if (dto.HasPackQty) data.PackQty = dto.PackQty.ToDecimal();
			if (dto.HasUpdatePack) data.UpdatePack = dto.UpdatePack.ToDecimal();
			if (dto.HasCountPack) data.CountPack = dto.CountPack.ToDecimal();
			if (dto.HasBeforeInstockPack) data.BeforeInstockPack = dto.BeforeInstockPack.ToDecimal();
			if (dto.HasUpdateQty) data.UpdateQty = dto.UpdateQty.ToDecimal();
			if (dto.HasCountQty) data.CountQty = dto.CountQty.ToDecimal();
			if (dto.HasBeforeInstockQty) data.BeforeInstockQty = dto.BeforeInstockQty.ToDecimal();
			if (dto.HasUnitCost) data.UnitCost = dto.UnitCost.ToDecimal();
			if (dto.HasAvgCost) data.AvgCost = dto.AvgCost.ToDecimal();
			if (dto.HasLotCost) data.LotCost = dto.LotCost.ToDecimal();
			if (dto.HasLotInDate) data.LotInDate = dto.LotInDate;
			if (dto.HasLotExpDate) data.LotExpDate = dto.LotExpDate;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}

		protected virtual IList<InventoryUpdateItems> ReadInventoryUpdateItems(IList<InventoryUpdateItems> data, IList<InventoryUpdateItemsDto> dto)
		{
			if (data is null || dto is null)
				return null;
			var lstOrig = new List<InventoryUpdateItems>(data.Where(x => x != null).ToList());
			data.Clear();
			foreach (var itemDto in dto)
			{
				if (itemDto == null) continue;

				var obj = itemDto.RowNum > 0
					? lstOrig.Find(x => x.RowNum == itemDto.RowNum)
					: lstOrig.Find(x => x.InventoryUpdateItemsUuid == itemDto.InventoryUpdateItemsUuid);
				if (obj is null)
					obj = new InventoryUpdateItems().SetAllowNull(false);
				else
					lstOrig.Remove(obj);

				data.Add(obj);

				ReadInventoryUpdateItems(obj, itemDto);

			}
			return lstOrig;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual InventoryUpdateDataDto WriteDto(InventoryUpdateData data, InventoryUpdateDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new InventoryUpdateDataDto();

            data.CheckIntegrity();

			if (data.InventoryUpdateHeader != null)
			{
				dto.InventoryUpdateHeader = new InventoryUpdateHeaderDto();
				WriteInventoryUpdateHeader(data.InventoryUpdateHeader, dto.InventoryUpdateHeader);
			}
			if (data.InventoryUpdateItems != null)
			{
				dto.InventoryUpdateItems = new List<InventoryUpdateItemsDto>();
				WriteInventoryUpdateItems(data.InventoryUpdateItems, dto.InventoryUpdateItems);
			}
            return dto;
        }

		protected virtual void WriteInventoryUpdateHeader(InventoryUpdateHeader data, InventoryUpdateHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.InventoryUpdateUuid = data.InventoryUpdateUuid;
			dto.BatchNumber = data.BatchNumber;
			dto.InventoryUpdateType = data.InventoryUpdateType;
			dto.InventoryUpdateStatus = data.InventoryUpdateStatus;
			dto.UpdateDate = data.UpdateDate;
			dto.UpdateTime = data.UpdateTime.ToDateTime();
			dto.Processor = data.Processor;
			dto.WarehouseUuid = data.WarehouseUuid;
			dto.WarehouseCode = data.WarehouseCode;
			dto.CustomerUuid = data.CustomerUuid;
			dto.CustomerCode = data.CustomerCode;
			dto.CustomerName = data.CustomerName;
			dto.VendorUuid = data.VendorUuid;
			dto.VendorCode = data.VendorCode;
			dto.VendorName = data.VendorName;
			dto.ReferenceType = data.ReferenceType;
			dto.ReferenceUuid = data.ReferenceUuid;
			dto.ReferenceNum = data.ReferenceNum;
			dto.InventoryUpdateSourceCode = data.InventoryUpdateSourceCode;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}

		protected virtual void WriteInventoryUpdateItems(InventoryUpdateItems data, InventoryUpdateItemsDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.InventoryUpdateItemsUuid = data.InventoryUpdateItemsUuid;
			dto.InventoryUpdateUuid = data.InventoryUpdateUuid;
			dto.Seq = data.Seq;
			dto.ItemDate = data.ItemDate;
			dto.ItemTime = data.ItemTime.ToDateTime();
			dto.SKU = data.SKU;
			dto.ProductUuid = data.ProductUuid;
			dto.InventoryUuid = data.InventoryUuid;
			dto.WarehouseUuid = data.WarehouseUuid;
			dto.WarehouseCode = data.WarehouseCode;
			dto.LotNum = data.LotNum;
			dto.Description = data.Description;
			dto.Notes = data.Notes;
			dto.UOM = data.UOM;
			dto.PackType = data.PackType;
			dto.PackQty = data.PackQty;
			dto.UpdatePack = data.UpdatePack;
			dto.CountPack = data.CountPack;
			dto.BeforeInstockPack = data.BeforeInstockPack;
			dto.UpdateQty = data.UpdateQty;
			dto.CountQty = data.CountQty;
			dto.BeforeInstockQty = data.BeforeInstockQty;
			dto.UnitCost = data.UnitCost;
			dto.AvgCost = data.AvgCost;
			dto.LotCost = data.LotCost;
			dto.LotInDate = data.LotInDate;
			dto.LotExpDate = data.LotExpDate;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}
		protected virtual void WriteInventoryUpdateItems(IList<InventoryUpdateItems> data, IList<InventoryUpdateItemsDto> dto)
		{
			if (data is null || dto is null)
				return;

			dto.Clear();

			#region write all list items and properties with null

			foreach (var itemData in data)
			{
				if (itemData is null) continue;
				var obj = new InventoryUpdateItemsDto();
				dto.Add(obj);
				WriteInventoryUpdateItems(itemData, obj);
			}

			#endregion write all list items and properties with null
			return;
		}



        #endregion write to dto from data

    }
}



