//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using CsvHelper;
using System.IO;

using Bogus;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InventoryUpdateDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class InventoryUpdateDataDtoExtension
    {
        /// <summary>
        /// Merge InventoryUpdateDataDto header objects to one dynamic object
        /// </summary>
        /// <param name="dto">InventoryUpdateDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>Single dynamic object include all properties of Dto header objects</returns>
        public static IEnumerable<dynamic> MergeHeaderRecord(this InventoryUpdateDataDto dto, bool withHeaderText = false)
        {
            var result = new List<dynamic>();
            if(!dto.HasInventoryUpdateHeader)
                return result;
            //TODO change to merge Dto children object
            if (withHeaderText)
                result.Add(dto.InventoryUpdateHeader.MergeName(dto.InventoryUpdateHeader));
            result.Add(dto.InventoryUpdateHeader.Merge(dto.InventoryUpdateHeader));
            return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeDetailRecord(this InventoryUpdateDataDto dto, bool withHeaderText = false)
        {
            //TODO change to merge Dto children object
            var result = new List<dynamic>();
            if (!dto.HasInventoryUpdateItems)
                return result;

			var updateItems = new InventoryUpdateItemsDto();

            if (withHeaderText)
                result.Add(updateItems.MergeName(updateItems));

            foreach (var item in dto.InventoryUpdateItems)
            {
                result.Add(item.Merge(item));
            }
            return result;
        }


        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <param name="count">Generate multiple fake data</param>
        /// <returns>list for Fake data</returns>
        public static IList<InventoryUpdateDataDto> GetFakerData(this InventoryUpdateDataDto dto, int count)
        {
            var obj = new InventoryUpdateDataDto();
            var datas = new List<InventoryUpdateDataDto>();
            for (int i = 0; i < count; i++)
                datas.Add(obj.GetFakerData());
            return datas;
        }

        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <returns>single Fake data</returns>
        public static InventoryUpdateDataDto GetFakerData(this InventoryUpdateDataDto dto)
        {
            var data = new InventoryUpdateDataDto();
			data.InventoryUpdateHeader = new InventoryUpdateHeaderDto().GetFaker().Generate();
			data.InventoryUpdateItems = new InventoryUpdateItemsDto().GetFaker().Generate(3);
            return data;
        }


		/// <summary>
		/// Get faker object for InventoryUpdateHeaderDto
		/// </summary>
		/// <param name="dto">InventoryUpdateHeaderDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<InventoryUpdateHeaderDto> GetFaker(this InventoryUpdateHeaderDto dto)
		{
			#region faker data rules
			return new Faker<InventoryUpdateHeaderDto>()
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.InventoryUpdateUuid, f => String.Empty)
				.RuleFor(u => u.BatchNumber, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.InventoryUpdateType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.InventoryUpdateStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.UpdateDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.UpdateTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.Processor, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.WarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.WarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.CustomerUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.CustomerCode, f => f.Lorem.Word())
				.RuleFor(u => u.CustomerName, f => f.Company.CompanyName())
				.RuleFor(u => u.VendorUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.VendorCode, f => f.Lorem.Word())
				.RuleFor(u => u.VendorName, f => f.Company.CompanyName())
				.RuleFor(u => u.ReferenceType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ReferenceUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ReferenceNum, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.InventoryUpdateSourceCode, f => f.Lorem.Word())
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for InventoryUpdateItemsDto
		/// </summary>
		/// <param name="dto">InventoryUpdateItemsDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<InventoryUpdateItemsDto> GetFaker(this InventoryUpdateItemsDto dto)
		{
			#region faker data rules
			return new Faker<InventoryUpdateItemsDto>()
				.RuleFor(u => u.InventoryUpdateItemsUuid, f => String.Empty)
				.RuleFor(u => u.InventoryUpdateUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.Seq, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ItemDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.ItemTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.SKU, f => f.Commerce.Product())
				.RuleFor(u => u.ProductUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.InventoryUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.WarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.WarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.LotNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.Description, f => f.Commerce.ProductName())
				.RuleFor(u => u.Notes, f => f.Lorem.Sentence().TruncateTo(500))
				.RuleFor(u => u.UOM, f => f.PickRandom(FakerExtension.UOM))
				.RuleFor(u => u.PackType, f => f.PickRandom(FakerExtension.PackType))
				.RuleFor(u => u.PackQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.UpdatePack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.CountPack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.BeforeInstockPack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.UpdateQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.CountQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.BeforeInstockQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.UnitCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.AvgCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.LotCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.LotInDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.LotExpDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}

    }
}


