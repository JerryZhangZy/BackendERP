              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InventoryUpdateData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class InventoryUpdateData : StructureRepository<InventoryUpdateData>
    {
        public InventoryUpdateData() : base() {}
        public InventoryUpdateData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => InventoryUpdateHeader.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => InventoryUpdateHeader.UniqueId;
        
		 [JsonIgnore, XmlIgnore] 
		public static string InventoryUpdateHeaderTable ="InventoryUpdateHeader ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string InventoryUpdateItemsTable ="InventoryUpdateItems ";
		
        #region CRUD Methods

        public override bool Equals(InventoryUpdateData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(InventoryUpdateData other)
        {
			if (InventoryUpdateHeader == null && other.InventoryUpdateHeader != null || InventoryUpdateHeader != null && other.InventoryUpdateHeader == null) 
				return false; 
			if (InventoryUpdateHeader != null && other.InventoryUpdateHeader != null && !InventoryUpdateHeader.Equals(other.InventoryUpdateHeader)) 
				return false; 
			if (InventoryUpdateItems == null && other.InventoryUpdateItems != null || InventoryUpdateItems != null && other.InventoryUpdateItems == null) 
				return false; 
			if (InventoryUpdateItems != null && other.InventoryUpdateItems != null && !InventoryUpdateItems.EqualsList(other.InventoryUpdateItems)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override InventoryUpdateData CheckIntegrity()
        {
			if (InventoryUpdateHeader is null) return this; 
			InventoryUpdateHeader.CheckIntegrity(); 
			CheckIntegrityInventoryUpdateItems(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			InventoryUpdateHeader?.Clear(); 
			InventoryUpdateItems = new List<InventoryUpdateItems>(); 
			ClearInventoryUpdateItemsDeleted(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			InventoryUpdateHeader = NewInventoryUpdateHeader(); 
			InventoryUpdateItems = new List<InventoryUpdateItems>(); 
			AddInventoryUpdateItems(NewInventoryUpdateItems()); 
			ClearInventoryUpdateItemsDeleted(); 
            return;
        }

        public virtual void CopyFrom(InventoryUpdateData data)
        {
			CopyInventoryUpdateHeaderFrom(data); 
			CopyInventoryUpdateItemsFrom(data); 
            CheckIntegrity();
            return;
        }

        public override InventoryUpdateData Clone()
        {
			var newData = new InventoryUpdateData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.InventoryUpdateHeader.ClearMetaData(); 
			newData.InventoryUpdateItems.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetInventoryUpdateHeader(RowNum); 
			if (obj is null) return false; 
			InventoryUpdateHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string InventoryUpdateUuid)
        {
			var obj = GetInventoryUpdateHeaderByInventoryUpdateUuid(InventoryUpdateUuid); 
			if (obj is null) return false; 
			InventoryUpdateHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(InventoryUpdateHeader.InventoryUpdateUuid)) return; 
			InventoryUpdateItems = GetInventoryUpdateItemsByInventoryUpdateUuid(InventoryUpdateHeader.InventoryUpdateUuid); 
        }

        public override bool Save()
        {
			if (InventoryUpdateHeader is null || string.IsNullOrEmpty(InventoryUpdateHeader.InventoryUpdateUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(InventoryUpdateHeaderTable))
			{
				InventoryUpdateHeader.SetDataBaseFactory(dbFactory);
				if (!InventoryUpdateHeader.Save()) return false;
			}

			 if (NeedSave(InventoryUpdateItemsTable))
			{
				if (InventoryUpdateItems != null) 
					InventoryUpdateItems.SetDataBaseFactory(dbFactory)?.Save();
				var delInventoryUpdateItems = _InventoryUpdateItemsDeleted;
				if (delInventoryUpdateItems != null)
					delInventoryUpdateItems.SetDataBaseFactory(dbFactory)?.Delete();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (InventoryUpdateHeader is null || string.IsNullOrEmpty(InventoryUpdateHeader.InventoryUpdateUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(InventoryUpdateHeaderTable))
			{
				InventoryUpdateHeader.SetDataBaseFactory(dbFactory); 
				if (InventoryUpdateHeader.Delete() <= 0) return false; 
			}
			 if (NeedDelete(InventoryUpdateItemsTable))
			{
				if (InventoryUpdateItems != null) 
					InventoryUpdateItems?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetInventoryUpdateHeaderAsync(RowNum); 
			if (obj is null) return false; 
			InventoryUpdateHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string InventoryUpdateUuid)
        {
			var obj = await GetInventoryUpdateHeaderByInventoryUpdateUuidAsync(InventoryUpdateUuid); 
			if (obj is null) return false; 
			InventoryUpdateHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(InventoryUpdateHeader.InventoryUpdateUuid)) return; 
			InventoryUpdateItems = await GetInventoryUpdateItemsByInventoryUpdateUuidAsync(InventoryUpdateHeader.InventoryUpdateUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (InventoryUpdateHeader is null || string.IsNullOrEmpty(InventoryUpdateHeader.InventoryUpdateUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(InventoryUpdateHeaderTable))
			{
				InventoryUpdateHeader.SetDataBaseFactory(dbFactory); 
				if (!(await InventoryUpdateHeader.SaveAsync())) return false; 
			}
			 if (NeedSave(InventoryUpdateItemsTable))
			{
				if (InventoryUpdateItems != null) 
					await InventoryUpdateItems.SetDataBaseFactory(dbFactory).SaveAsync(); 
				var delInventoryUpdateItems = _InventoryUpdateItemsDeleted;
				if (delInventoryUpdateItems != null)
					await delInventoryUpdateItems.SetDataBaseFactory(dbFactory).DeleteAsync();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (InventoryUpdateHeader is null || string.IsNullOrEmpty(InventoryUpdateHeader.InventoryUpdateUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(InventoryUpdateHeaderTable))
			{
			InventoryUpdateHeader.SetDataBaseFactory(dbFactory); 
			if ((await InventoryUpdateHeader.DeleteAsync()) <= 0) return false; 
			}
			 if (NeedDelete(InventoryUpdateItemsTable))
			{
				if (InventoryUpdateItems != null) 
					await InventoryUpdateItems.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region InventoryUpdateHeader - Generated 
    

        // one to one children
        protected InventoryUpdateHeader _InventoryUpdateHeader;

        public virtual InventoryUpdateHeader InventoryUpdateHeader 
        { 
            get => _InventoryUpdateHeader;
            set => _InventoryUpdateHeader = value?.SetParent(this); 
        }

        public virtual void CopyInventoryUpdateHeaderFrom(InventoryUpdateData data) => 
            InventoryUpdateHeader?.CopyFrom(data.InventoryUpdateHeader, new string[] {"InventoryUpdateUuid"});

        public virtual InventoryUpdateHeader NewInventoryUpdateHeader() => new InventoryUpdateHeader(dbFactory).SetParent(this);

        public virtual InventoryUpdateHeader GetInventoryUpdateHeader(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<InventoryUpdateHeader>(RowNum);

        public virtual InventoryUpdateHeader GetInventoryUpdateHeaderByInventoryUpdateUuid(string InventoryUpdateUuid) =>
            (string.IsNullOrEmpty(InventoryUpdateUuid)) ? null : dbFactory.GetById<InventoryUpdateHeader>(InventoryUpdateUuid);

        public virtual bool SaveInventoryUpdateHeader(InventoryUpdateHeader data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteInventoryUpdateHeader(InventoryUpdateHeader data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<InventoryUpdateHeader> GetInventoryUpdateHeaderAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<InventoryUpdateHeader>(RowNum);

        public virtual async Task<InventoryUpdateHeader> GetInventoryUpdateHeaderByInventoryUpdateUuidAsync(string InventoryUpdateUuid) =>
            (string.IsNullOrEmpty(InventoryUpdateUuid)) ? null : await dbFactory.GetByIdAsync<InventoryUpdateHeader>(InventoryUpdateUuid);

        public virtual async Task<bool> SaveInventoryUpdateHeaderAsync(InventoryUpdateHeader data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteInventoryUpdateHeaderAsync(InventoryUpdateHeader data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion InventoryUpdateHeader - Generated 

        #region InventoryUpdateItems - Generated 
        // One to many children
        protected IList<InventoryUpdateItems> _InventoryUpdateItemsDeleted;
        public virtual InventoryUpdateItems AddInventoryUpdateItemsDeleted(InventoryUpdateItems del) 
        {
            if (_InventoryUpdateItemsDeleted is null)
                _InventoryUpdateItemsDeleted = new List<InventoryUpdateItems>();
            var lst = _InventoryUpdateItemsDeleted.ToList();
            lst.Add(del);
            _InventoryUpdateItemsDeleted = lst;
            return del;
        } 

        public virtual IList<InventoryUpdateItems> AddInventoryUpdateItemsDeleted(IList<InventoryUpdateItems> del) 
        {
            if (_InventoryUpdateItemsDeleted is null)
                _InventoryUpdateItemsDeleted = new List<InventoryUpdateItems>();
            var lst = _InventoryUpdateItemsDeleted.ToList();
            lst.AddRange(del);
            _InventoryUpdateItemsDeleted = lst;
            return del;
        } 

        public virtual void SetInventoryUpdateItemsDeleted(IList<InventoryUpdateItems> del) =>
            _InventoryUpdateItemsDeleted = del;

        public virtual void ClearInventoryUpdateItemsDeleted() =>
            _InventoryUpdateItemsDeleted = null;


        protected IList<InventoryUpdateItems> _InventoryUpdateItems;

        public virtual IList<InventoryUpdateItems> InventoryUpdateItems 
        { 
            get 
            {
                if (_InventoryUpdateItems is null)
                    _InventoryUpdateItems = new List<InventoryUpdateItems>();
                return _InventoryUpdateItems;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _InventoryUpdateItems = valueList;
                }
                else
                    _InventoryUpdateItems = null;
            } 
        }

        public virtual void CopyInventoryUpdateItemsFrom(InventoryUpdateData data) 
        {
            if  (data is null) return;
            var lstDeleted = InventoryUpdateItems?.CopyFrom(data.InventoryUpdateItems, new string[] {"InventoryUpdateUuid"});
            SetInventoryUpdateItemsDeleted(lstDeleted);
            foreach (var c in InventoryUpdateItems)
                c?.CopyChildrenFrom(data.InventoryUpdateItems?.FindByRowNum(c.RowNum));
        } 

        public virtual InventoryUpdateItems NewInventoryUpdateItems() => new InventoryUpdateItems(dbFactory);

        public virtual InventoryUpdateItems AddInventoryUpdateItems(InventoryUpdateItems obj) => 
            InventoryUpdateItems.AddOrReplace(obj.SetParent(this));

        public virtual InventoryUpdateItems RemoveInventoryUpdateItems(InventoryUpdateItems obj) => 
            AddInventoryUpdateItemsDeleted(InventoryUpdateItems.RemoveObject(obj.SetParent(this)));

        public virtual IList<InventoryUpdateItems> GetInventoryUpdateItemsByInventoryUpdateUuid(string InventoryUpdateUuid) =>
            (string.IsNullOrEmpty(InventoryUpdateUuid)) 
                ? null 
                : dbFactory.Find<InventoryUpdateItems>("WHERE InventoryUpdateUuid = @0 ORDER BY Seq ", InventoryUpdateUuid).ToList();

        public virtual bool SaveInventoryUpdateItems(IList<InventoryUpdateItems> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteInventoryUpdateItems(IList<InventoryUpdateItems> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<InventoryUpdateItems>> GetInventoryUpdateItemsByInventoryUpdateUuidAsync(string InventoryUpdateUuid) =>
            (string.IsNullOrEmpty(InventoryUpdateUuid)) 
                ? null
                : (await dbFactory.FindAsync<InventoryUpdateItems>("WHERE InventoryUpdateUuid = @0 ORDER BY Seq ", InventoryUpdateUuid)).ToList();

        public virtual async Task<bool> SaveInventoryUpdateItemsAsync(IList<InventoryUpdateItems> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteInventoryUpdateItemsAsync(IList<InventoryUpdateItems> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<InventoryUpdateItems> CheckIntegrityInventoryUpdateItems()
        {
            if (InventoryUpdateItems is null || InventoryUpdateHeader is null) 
                return InventoryUpdateItems;
            var seq = 0;
            InventoryUpdateItems.RemoveEmpty();
            var children = InventoryUpdateItems.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.InventoryUpdateUuid != InventoryUpdateHeader.InventoryUpdateUuid)
                    child.InventoryUpdateUuid = InventoryUpdateHeader.InventoryUpdateUuid;
                seq += 1;
                child.Seq = seq;
                child.CheckIntegrity();
            }
            return children;
        }



        #endregion InventoryUpdateItems - Generated 


    }
}



