              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InventoryUpdateItems.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("InventoryUpdateItems")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("InventoryUpdateItemsUuid")]
    [DtoName("InventoryUpdateItemsDto")]
    public partial class InventoryUpdateItems : TableRepository<InventoryUpdateItems, long>
    {

        public InventoryUpdateItems() : base() {}
        public InventoryUpdateItems(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("InventoryUpdateItemsUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _inventoryUpdateItemsUuid;

        [Column("InventoryUpdateUuid",SqlDbType.VarChar,NotNull=true)]
        private string _inventoryUpdateUuid;

        [Column("Seq",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _seq;

        [Column("ItemDate",SqlDbType.Date,NotNull=true)]
        private DateTime _itemDate;

        [Column("ItemTime",SqlDbType.Time,NotNull=true)]
        private TimeSpan _itemTime;

        [Column("SKU",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _sku;

        [Column("ProductUuid",SqlDbType.VarChar,NotNull=true)]
        private string _productUuid;

        [Column("InventoryUuid",SqlDbType.VarChar,NotNull=true)]
        private string _inventoryUuid;

        [Column("WarehouseUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _warehouseUuid;

        [Column("WarehouseCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _warehouseCode;

        [Column("LotNum",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _lotNum;

        [Column("Description",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _description;

        [Column("Notes",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _notes;

        [Column("UOM",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _uom;

        [Column("PackType",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _packType;

        [Column("PackQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _packQty;

        [Column("UpdatePack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _updatePack;

        [Column("CountPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _countPack;

        [Column("BeforeInstockPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _beforeInstockPack;

        [Column("UpdateQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _updateQty;

        [Column("CountQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _countQty;

        [Column("BeforeInstockQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _beforeInstockQty;

        [Column("UnitCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _unitCost;

        [Column("AvgCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _avgCost;

        [Column("LotCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _lotCost;

        [Column("LotInDate",SqlDbType.Date)]
        private DateTime? _lotInDate;

        [Column("LotExpDate",SqlDbType.Date)]
        private DateTime? _lotExpDate;

        [Column("UpdateDateUtc",SqlDbType.DateTime)]
        private DateTime? _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => InventoryUpdateItemsUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(InventoryUpdateItemsUuid)) 
				InventoryUpdateItemsUuid = Guid.NewGuid().ToString(); 
		}
		[IgnoreCompare] 
		public override bool IsEmpty => ( string.IsNullOrWhiteSpace(SKU) );
		/// <summary>
		/// (Readonly) Order Item Line uuid. <br> Display: false, Editable: false
		/// </summary>
        public virtual string InventoryUpdateItemsUuid
        {
            get
            {
				return _inventoryUpdateItemsUuid?.TrimEnd(); 
            }
            set
            {
				_inventoryUpdateItemsUuid = value.TruncateTo(50); 
				OnPropertyChanged("InventoryUpdateItemsUuid", value);
            }
        }

		/// <summary>
		/// Order uuid. <br> Display: false, Editable: false.
		/// </summary>
        public virtual string InventoryUpdateUuid
        {
            get
            {
				return _inventoryUpdateUuid?.TrimEnd(); 
            }
            set
            {
				_inventoryUpdateUuid = value.TruncateTo(50); 
				OnPropertyChanged("InventoryUpdateUuid", value);
            }
        }

		/// <summary>
		/// Order Item Line sequence number. <br> Title: Line#, Display: true, Editable: false
		/// </summary>
        public virtual int Seq
        {
            get
            {
				return _seq; 
            }
            set
            {
				_seq = value; 
				OnPropertyChanged("Seq", value);
            }
        }

		/// <summary>
		/// (Ignore) Update item date
		/// </summary>
        public virtual DateTime ItemDate
        {
            get
            {
				return _itemDate; 
            }
            set
            {
				_itemDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("ItemDate", value);
            }
        }

		/// <summary>
		/// (Ignore) Update item time
		/// </summary>
        public virtual TimeSpan ItemTime
        {
            get
            {
				return _itemTime; 
            }
            set
            {
				_itemTime = value.ToSqlSafeValue(); 
				OnPropertyChanged("ItemTime", value);
            }
        }

		/// <summary>
		/// Product SKU. <br> Title: SKU, Display: true, Editable: true
		/// </summary>
        public virtual string SKU
        {
            get
            {
				return _sku?.TrimEnd(); 
            }
            set
            {
				_sku = value.TruncateTo(100); 
				OnPropertyChanged("SKU", value);
            }
        }

		/// <summary>
		/// (Readonly) Product uuid. load from ProductBasic data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string ProductUuid
        {
            get
            {
				return _productUuid?.TrimEnd(); 
            }
            set
            {
				_productUuid = value.TruncateTo(50); 
				OnPropertyChanged("ProductUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) Inventory Item Line uuid, load from inventory data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string InventoryUuid
        {
            get
            {
				return _inventoryUuid?.TrimEnd(); 
            }
            set
            {
				_inventoryUuid = value.TruncateTo(50); 
				OnPropertyChanged("InventoryUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) Warehouse uuid, load from inventory data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string WarehouseUuid
        {
            get
            {
				return _warehouseUuid?.TrimEnd(); 
            }
            set
            {
				_warehouseUuid = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseUuid", value);
            }
        }

		/// <summary>
		/// Readable warehouse code, load from inventory data. <br> Title: Warehouse Code, Display: true, Editable: true
		/// </summary>
        public virtual string WarehouseCode
        {
            get
            {
				return _warehouseCode?.TrimEnd(); 
            }
            set
            {
				_warehouseCode = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseCode", value);
            }
        }

		/// <summary>
		/// Lot Number. <br> Title: Lot Number, Display: true, Editable: true
		/// </summary>
        public virtual string LotNum
        {
            get
            {
				return _lotNum?.TrimEnd(); 
            }
            set
            {
				_lotNum = value.TruncateTo(100); 
				OnPropertyChanged("LotNum", value);
            }
        }

		/// <summary>
		/// Item line description, default from ProductBasic data. <br> Title: Description, Display: true, Editable: true
		/// </summary>
        public virtual string Description
        {
            get
            {
				return _description?.TrimEnd(); 
            }
            set
            {
				_description = value.TruncateTo(200); 
				OnPropertyChanged("Description", value);
            }
        }

		/// <summary>
		/// Order item line notes. <br> Title: Notes, Display: true, Editable: true
		/// </summary>
        public virtual string Notes
        {
            get
            {
				return _notes?.TrimEnd(); 
            }
            set
            {
				_notes = value.TruncateTo(500); 
				OnPropertyChanged("Notes", value);
            }
        }

		/// <summary>
		/// (Readonly) Product unit of measure, load from ProductBasic data. <br> Title: UOM, Display: true, Editable: false
		/// </summary>
        public virtual string UOM
        {
            get
            {
				return _uom?.TrimEnd(); 
            }
            set
            {
				_uom = value.TruncateTo(50); 
				OnPropertyChanged("UOM", value);
            }
        }

		/// <summary>
		/// Product SKU Qty pack type, for example: Case, Box, Each. <br> Title: Pack, Display: true, Editable: true
		/// </summary>
        public virtual string PackType
        {
            get
            {
				return _packType?.TrimEnd(); 
            }
            set
            {
				_packType = value.TruncateTo(50); 
				OnPropertyChanged("PackType", value);
            }
        }

		/// <summary>
		/// Item Qty each per pack. <br> Title: Qty/Pack, Display: true, Editable: true
		/// </summary>
        public virtual decimal PackQty
        {
            get
            {
				return _packQty; 
            }
            set
            {
				_packQty = value; 
				OnPropertyChanged("PackQty", value);
            }
        }

		/// <summary>
		/// Item updated pack (positive/negative). <br> Title: Update Pack, Display: true, Editable: true
		/// </summary>
        public virtual decimal UpdatePack
        {
            get
            {
				return _updatePack; 
            }
            set
            {
				_updatePack = value; 
				OnPropertyChanged("UpdatePack", value);
            }
        }

		/// <summary>
		/// Item count pack (use for Count only). <br> Title: Count Pack, Display: true, Editable: true
		/// </summary>
        public virtual decimal CountPack
        {
            get
            {
				return _countPack; 
            }
            set
            {
				_countPack = value; 
				OnPropertyChanged("CountPack", value);
            }
        }

		/// <summary>
		/// (Readonly) Instock pack before update. <br> Title: Instock Pack, Display: true, Editable: false
		/// </summary>
        public virtual decimal BeforeInstockPack
        {
            get
            {
				return _beforeInstockPack; 
            }
            set
            {
				_beforeInstockPack = value; 
				OnPropertyChanged("BeforeInstockPack", value);
            }
        }

		/// <summary>
		/// Item updated qty (positive/negative). <br> Title: Update Qty, Display: true, Editable: true
		/// </summary>
        public virtual decimal UpdateQty
        {
            get
            {
				return _updateQty; 
            }
            set
            {
				_updateQty = value; 
				OnPropertyChanged("UpdateQty", value);
            }
        }

		/// <summary>
		/// Item count qty (use for Count only). <br> Title: Count Qty, Display: true, Editable: true
		/// </summary>
        public virtual decimal CountQty
        {
            get
            {
				return _countQty; 
            }
            set
            {
				_countQty = value; 
				OnPropertyChanged("CountQty", value);
            }
        }

		/// <summary>
		/// (Readonly) Instock before update. <br> Title: Instock, Display: true, Editable: false
		/// </summary>
        public virtual decimal BeforeInstockQty
        {
            get
            {
				return _beforeInstockQty; 
            }
            set
            {
				_beforeInstockQty = value; 
				OnPropertyChanged("BeforeInstockQty", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Unit Cost.
		/// </summary>
        public virtual decimal UnitCost
        {
            get
            {
				return _unitCost; 
            }
            set
            {
				_unitCost = value; 
				OnPropertyChanged("UnitCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Avg.Cost.
		/// </summary>
        public virtual decimal AvgCost
        {
            get
            {
				return _avgCost; 
            }
            set
            {
				_avgCost = value; 
				OnPropertyChanged("AvgCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Lot Cost.
		/// </summary>
        public virtual decimal LotCost
        {
            get
            {
				return _lotCost; 
            }
            set
            {
				_lotCost = value; 
				OnPropertyChanged("LotCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Lot receive Date
		/// </summary>
        public virtual DateTime? LotInDate
        {
            get
            {
				if (!AllowNull && _lotInDate is null) 
					_lotInDate = new DateTime().MinValueSql(); 
				return _lotInDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotInDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotInDate", value);
				}
            }
        }

		/// <summary>
		/// (Ignore) Lot Expiration date
		/// </summary>
        public virtual DateTime? LotExpDate
        {
            get
            {
				if (!AllowNull && _lotExpDate is null) 
					_lotExpDate = new DateTime().MinValueSql(); 
				return _lotExpDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotExpDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotExpDate", value);
				}
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual DateTime? UpdateDateUtc
        {
            get
            {
				if (!AllowNull && _updateDateUtc is null) 
					_updateDateUtc = new DateTime().MinValueSql(); 
				return _updateDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_updateDateUtc = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("UpdateDateUtc", value);
				}
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
				OnPropertyChanged("UpdateBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private InventoryUpdateData Parent { get; set; }
		public InventoryUpdateData GetParent() => Parent;
		public InventoryUpdateItems SetParent(InventoryUpdateData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			InventoryUpdateItemsUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override InventoryUpdateItems Clear()
        {
            base.Clear();
			_inventoryUpdateItemsUuid = String.Empty; 
			_inventoryUpdateUuid = String.Empty; 
			_seq = default(int); 
			_itemDate = new DateTime().MinValueSql(); 
			_itemTime = new TimeSpan().MinValueSql(); 
			_sku = String.Empty; 
			_productUuid = String.Empty; 
			_inventoryUuid = String.Empty; 
			_warehouseUuid = String.Empty; 
			_warehouseCode = String.Empty; 
			_lotNum = String.Empty; 
			_description = String.Empty; 
			_notes = String.Empty; 
			_uom = String.Empty; 
			_packType = String.Empty; 
			_packQty = default(decimal); 
			_updatePack = default(decimal); 
			_countPack = default(decimal); 
			_beforeInstockPack = default(decimal); 
			_updateQty = default(decimal); 
			_countQty = default(decimal); 
			_beforeInstockQty = default(decimal); 
			_unitCost = default(decimal); 
			_avgCost = default(decimal); 
			_lotCost = default(decimal); 
			_lotInDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_lotExpDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_updateDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public override InventoryUpdateItems CheckIntegrity()
        {
            CheckUniqueId();
            CheckIntegrityOthers();
            return this;
        }

        public virtual InventoryUpdateItems ClearChildren()
        {
            return this;
        }

        public virtual InventoryUpdateItems NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(InventoryUpdateItems data)
        {
            if (data is null) return;
            return;
        }

		public static IList<InventoryUpdateItems> FindByInventoryUpdateUuid(IDataBaseFactory dbFactory, string inventoryUpdateUuid)
		{
			return dbFactory.Find<InventoryUpdateItems>("WHERE InventoryUpdateUuid = @0 ORDER BY Seq ", inventoryUpdateUuid).ToList();
		}
		public static long CountByInventoryUpdateUuid(IDataBaseFactory dbFactory, string inventoryUpdateUuid)
		{
			return dbFactory.Count<InventoryUpdateItems>("WHERE InventoryUpdateUuid = @0 ", inventoryUpdateUuid);
		}
		public static async Task<IList<InventoryUpdateItems>> FindByAsyncInventoryUpdateUuid(IDataBaseFactory dbFactory, string inventoryUpdateUuid)
		{
			return (await dbFactory.FindAsync<InventoryUpdateItems>("WHERE InventoryUpdateUuid = @0 ORDER BY Seq ", inventoryUpdateUuid)).ToList();
		}
		public static async Task<long> CountByAsyncInventoryUpdateUuid(IDataBaseFactory dbFactory, string inventoryUpdateUuid)
		{
			return await dbFactory.CountAsync<InventoryUpdateItems>("WHERE InventoryUpdateUuid = @0 ", inventoryUpdateUuid);
		}

		public override InventoryUpdateItems ConvertDbFieldsToData()
		{
			base.ConvertDbFieldsToData();
			return this;
		}
		public override InventoryUpdateItems ConvertDataFieldsToDb()
		{
			base.ConvertDataFieldsToDb();
			UpdateDateUtc =DateTime.UtcNow;
			return this;
		}

        #endregion Methods - Generated 
    }
}



