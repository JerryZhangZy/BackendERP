

              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public partial class OrderData : StructureRepository<OrderData>
    {
        public OrderData() : base() {}
        public OrderData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [XmlIgnore, JsonIgnore]
        public new bool IsNew => OrderHeader.IsNew;

        [XmlIgnore, JsonIgnore]
        public new string UniqueId => OrderHeader.UniqueId;

        #region CRUD Methods

        public override bool Equals(OrderData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(OrderData other)
        {
			if (OrderHeader == null && other.OrderHeader != null || OrderHeader != null && other.OrderHeader == null) 
				return false; 
			if (OrderHeader != null && other.OrderHeader != null && !OrderHeader.Equals(other.OrderHeader)) 
				return false; 
			if (OrderHeaderInfo == null && other.OrderHeaderInfo != null || OrderHeaderInfo != null && other.OrderHeaderInfo == null) 
				return false; 
			if (OrderHeaderInfo != null && other.OrderHeaderInfo != null && !OrderHeaderInfo.Equals(other.OrderHeaderInfo)) 
				return false; 
			if (OrderHeaderAttributes == null && other.OrderHeaderAttributes != null || OrderHeaderAttributes != null && other.OrderHeaderAttributes == null) 
				return false; 
			if (OrderHeaderAttributes != null && other.OrderHeaderAttributes != null && !OrderHeaderAttributes.Equals(other.OrderHeaderAttributes)) 
				return false; 
			if (OrderItems == null && other.OrderItems != null || OrderItems != null && other.OrderItems == null) 
				return false; 
			if (OrderItems != null && other.OrderItems != null && !OrderItems.EqualsList(other.OrderItems)) 
				return false; 
			if (OrderItemsAttributes == null && other.OrderItemsAttributes != null || OrderItemsAttributes != null && other.OrderItemsAttributes == null) 
				return false; 
			if (OrderItemsAttributes != null && other.OrderItemsAttributes != null && !OrderItemsAttributes.EqualsList(other.OrderItemsAttributes)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public virtual OrderData CheckIntegrity()
        {
			if (OrderHeader is null) return this; 
			OrderHeader.CheckUniqueId(); 
			CheckIntegrityOrderHeaderInfo(); 
			CheckIntegrityOrderHeaderAttributes(); 
			CheckIntegrityOrderItems(); 
			CheckIntegrityOrderItemsAttributes(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			OrderHeader?.Clear(); 
			OrderHeaderInfo?.Clear(); 
			OrderHeaderAttributes?.Clear(); 
			OrderItems = new List<OrderItems>(); 
			ClearOrderItemsDeleted(); 
			OrderItemsAttributes = new List<OrderItemsAttributes>(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			OrderHeader = NewOrderHeader(); 
			OrderHeaderInfo = NewOrderHeaderInfo(); 
			OrderHeaderAttributes = NewOrderHeaderAttributes(); 
			OrderItems = new List<OrderItems>(); 
			AddOrderItems(NewOrderItems()); 
			OrderItems.ToList().ForEach(x => x?.NewChildren()); 
			ClearOrderItemsDeleted(); 
            return;
        }

        public virtual void CopyFrom(OrderData data)
        {
			CopyOrderHeaderFrom(data); 
			CopyOrderHeaderInfoFrom(data); 
			CopyOrderHeaderAttributesFrom(data); 
			CopyOrderItemsFrom(data); 
            CheckIntegrity();
            return;
        }

        public override OrderData Clone()
        {
			var newData = new OrderData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.OrderHeader.ClearMetaData(); 
			newData.OrderHeaderInfo.ClearMetaData(); 
			newData.OrderHeaderAttributes.ClearMetaData(); 
			newData.OrderItems.ClearMetaData(); 
			newData.OrderItemsAttributes.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetOrderHeader(RowNum); 
			if (obj is null) return false; 
			OrderHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string OrderUuid)
        {
			var obj = GetOrderHeaderByOrderUuid(OrderUuid); 
			if (obj is null) return false; 
			OrderHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(OrderHeader.OrderUuid)) return; 
			OrderHeaderInfo = GetOrderHeaderInfoByOrderUuid(OrderHeader.OrderUuid); 
			OrderHeaderAttributes = GetOrderHeaderAttributesByOrderUuid(OrderHeader.OrderUuid); 
			OrderItems = GetOrderItemsByOrderUuid(OrderHeader.OrderUuid); 
			OrderItemsAttributes = GetOrderItemsAttributesByOrderUuid(OrderHeader.OrderUuid); 
        }

        public override bool Save()
        {
			if (OrderHeader is null || string.IsNullOrEmpty(OrderHeader.OrderUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();
			OrderHeader.SetDataBaseFactory(dbFactory);
			if (!OrderHeader.Save()) return false;

			if (OrderHeaderInfo != null) 
				OrderHeaderInfo.SetDataBaseFactory(dbFactory)?.Save();

			if (OrderHeaderAttributes != null) 
				OrderHeaderAttributes.SetDataBaseFactory(dbFactory)?.Save();

			if (OrderItems != null) 
				OrderItems.SetDataBaseFactory(dbFactory)?.Save();
			var delOrderItems = _OrderItemsDeleted;
			if (delOrderItems != null)
				delOrderItems.SetDataBaseFactory(dbFactory)?.Delete();

			if (OrderItemsAttributes != null) 
				OrderItemsAttributes.SetDataBaseFactory(dbFactory)?.Save();
			var delChildrenOrderItemsAttributes = OrderItemsAttributesDeleted;
			if (delChildrenOrderItemsAttributes != null)
				delChildrenOrderItemsAttributes.SetDataBaseFactory(dbFactory)?.Delete();

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (OrderHeader is null || string.IsNullOrEmpty(OrderHeader.OrderUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			OrderHeader.SetDataBaseFactory(dbFactory); 
			if (OrderHeader.Delete() <= 0) return false; 
			if (OrderHeaderInfo != null) 
				OrderHeaderInfo?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (OrderHeaderAttributes != null) 
				OrderHeaderAttributes?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (OrderItems != null) 
				OrderItems?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (OrderItemsAttributes != null) 
				OrderItemsAttributes?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetOrderHeaderAsync(RowNum); 
			if (obj is null) return false; 
			OrderHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string OrderUuid)
        {
			var obj = await GetOrderHeaderByOrderUuidAsync(OrderUuid); 
			if (obj is null) return false; 
			OrderHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(OrderHeader.OrderUuid)) return; 
			OrderHeaderInfo = await GetOrderHeaderInfoByOrderUuidAsync(OrderHeader.OrderUuid); 
			OrderHeaderAttributes = await GetOrderHeaderAttributesByOrderUuidAsync(OrderHeader.OrderUuid); 
			OrderItems = await GetOrderItemsByOrderUuidAsync(OrderHeader.OrderUuid); 
			OrderItemsAttributes = await GetOrderItemsAttributesByOrderUuidAsync(OrderHeader.OrderUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (OrderHeader is null || string.IsNullOrEmpty(OrderHeader.OrderUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 
			OrderHeader.SetDataBaseFactory(dbFactory); 
			if (!(await OrderHeader.SaveAsync().ConfigureAwait(false))) return false; 
			if (OrderHeaderInfo != null) 
				await OrderHeaderInfo.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 

			if (OrderHeaderAttributes != null) 
				await OrderHeaderAttributes.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 

			if (OrderItems != null) 
				await OrderItems.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 
			var delOrderItems = _OrderItemsDeleted;
			if (delOrderItems != null)
				await delOrderItems.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false);

			if (OrderItemsAttributes != null) 
				await OrderItemsAttributes.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 
			var delOrderItemsAttributes = OrderItemsAttributesDeleted;
			if (delOrderItemsAttributes != null)
				await delOrderItemsAttributes.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false);

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (OrderHeader is null || string.IsNullOrEmpty(OrderHeader.OrderUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			OrderHeader.SetDataBaseFactory(dbFactory); 
			if ((await OrderHeader.DeleteAsync().ConfigureAwait(false)) <= 0) return false; 
			if (OrderHeaderInfo != null) 
				await OrderHeaderInfo.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (OrderHeaderAttributes != null) 
				await OrderHeaderAttributes.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (OrderItems != null) 
				await OrderItems.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (OrderItemsAttributes != null) 
				await OrderItemsAttributes.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region OrderHeader - Generated 
    

        // one to one children
        protected OrderHeader _OrderHeader;

        public virtual OrderHeader OrderHeader 
        { 
            get => _OrderHeader;
            set => _OrderHeader = value?.SetParent(this); 
        }

        public virtual void CopyOrderHeaderFrom(OrderData data) => 
            OrderHeader?.CopyFrom(data.OrderHeader, new string[] {"OrderUuid"});

        public virtual OrderHeader NewOrderHeader() => new OrderHeader(dbFactory).SetParent(this);

        public virtual OrderHeader GetOrderHeader(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<OrderHeader>(RowNum);

        public virtual OrderHeader GetOrderHeaderByOrderUuid(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) ? null : dbFactory.GetById<OrderHeader>(OrderUuid);

        public virtual bool SaveOrderHeader(OrderHeader data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteOrderHeader(OrderHeader data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<OrderHeader> GetOrderHeaderAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<OrderHeader>(RowNum);

        public virtual async Task<OrderHeader> GetOrderHeaderByOrderUuidAsync(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) ? null : await dbFactory.GetByIdAsync<OrderHeader>(OrderUuid);

        public virtual async Task<bool> SaveOrderHeaderAsync(OrderHeader data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteOrderHeaderAsync(OrderHeader data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion OrderHeader - Generated 

        #region OrderHeaderInfo - Generated 
    

        // one to one children
        protected OrderHeaderInfo _OrderHeaderInfo;

        public virtual OrderHeaderInfo OrderHeaderInfo 
        { 
            get => _OrderHeaderInfo;
            set => _OrderHeaderInfo = value?.SetParent(this); 
        }

        public virtual void CopyOrderHeaderInfoFrom(OrderData data) => 
            OrderHeaderInfo?.CopyFrom(data.OrderHeaderInfo, new string[] {"OrderUuid"});

        public virtual OrderHeaderInfo NewOrderHeaderInfo() => new OrderHeaderInfo(dbFactory).SetParent(this);

        public virtual OrderHeaderInfo GetOrderHeaderInfo(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<OrderHeaderInfo>(RowNum);

        public virtual OrderHeaderInfo GetOrderHeaderInfoByOrderUuid(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) ? null : dbFactory.GetById<OrderHeaderInfo>(OrderUuid);

        public virtual bool SaveOrderHeaderInfo(OrderHeaderInfo data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteOrderHeaderInfo(OrderHeaderInfo data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<OrderHeaderInfo> GetOrderHeaderInfoAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<OrderHeaderInfo>(RowNum);

        public virtual async Task<OrderHeaderInfo> GetOrderHeaderInfoByOrderUuidAsync(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) ? null : await dbFactory.GetByIdAsync<OrderHeaderInfo>(OrderUuid);

        public virtual async Task<bool> SaveOrderHeaderInfoAsync(OrderHeaderInfo data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteOrderHeaderInfoAsync(OrderHeaderInfo data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual OrderHeaderInfo CheckIntegrityOrderHeaderInfo()
        {
            if (OrderHeaderInfo is null || OrderHeader is null) 
                return OrderHeaderInfo;
            OrderHeaderInfo.SetParent(this);
            if (OrderHeaderInfo.OrderUuid != OrderHeader.OrderUuid)
                OrderHeaderInfo.OrderUuid = OrderHeader.OrderUuid;
            return OrderHeaderInfo;
        }



        #endregion OrderHeaderInfo - Generated 

        #region OrderHeaderAttributes - Generated 
    

        // one to one children
        protected OrderHeaderAttributes _OrderHeaderAttributes;

        public virtual OrderHeaderAttributes OrderHeaderAttributes 
        { 
            get => _OrderHeaderAttributes;
            set => _OrderHeaderAttributes = value?.SetParent(this); 
        }

        public virtual void CopyOrderHeaderAttributesFrom(OrderData data) => 
            OrderHeaderAttributes?.CopyFrom(data.OrderHeaderAttributes, new string[] {"OrderUuid"});

        public virtual OrderHeaderAttributes NewOrderHeaderAttributes() => new OrderHeaderAttributes(dbFactory).SetParent(this);

        public virtual OrderHeaderAttributes GetOrderHeaderAttributes(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<OrderHeaderAttributes>(RowNum);

        public virtual OrderHeaderAttributes GetOrderHeaderAttributesByOrderUuid(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) ? null : dbFactory.GetById<OrderHeaderAttributes>(OrderUuid);

        public virtual bool SaveOrderHeaderAttributes(OrderHeaderAttributes data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteOrderHeaderAttributes(OrderHeaderAttributes data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<OrderHeaderAttributes> GetOrderHeaderAttributesAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<OrderHeaderAttributes>(RowNum);

        public virtual async Task<OrderHeaderAttributes> GetOrderHeaderAttributesByOrderUuidAsync(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) ? null : await dbFactory.GetByIdAsync<OrderHeaderAttributes>(OrderUuid);

        public virtual async Task<bool> SaveOrderHeaderAttributesAsync(OrderHeaderAttributes data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteOrderHeaderAttributesAsync(OrderHeaderAttributes data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual OrderHeaderAttributes CheckIntegrityOrderHeaderAttributes()
        {
            if (OrderHeaderAttributes is null || OrderHeader is null) 
                return OrderHeaderAttributes;
            OrderHeaderAttributes.SetParent(this);
            if (OrderHeaderAttributes.OrderUuid != OrderHeader.OrderUuid)
                OrderHeaderAttributes.OrderUuid = OrderHeader.OrderUuid;
            return OrderHeaderAttributes;
        }



        #endregion OrderHeaderAttributes - Generated 

        #region OrderItems - Generated 
        // One to many children
        protected IList<OrderItems> _OrderItemsDeleted;
        public virtual OrderItems AddOrderItemsDeleted(OrderItems del) 
        {
            if (_OrderItemsDeleted is null)
                _OrderItemsDeleted = new List<OrderItems>();
            var lst = _OrderItemsDeleted.ToList();
            lst.Add(del);
            _OrderItemsDeleted = lst;
            return del;
        } 

        public virtual IList<OrderItems> AddOrderItemsDeleted(IList<OrderItems> del) 
        {
            if (_OrderItemsDeleted is null)
                _OrderItemsDeleted = new List<OrderItems>();
            var lst = _OrderItemsDeleted.ToList();
            lst.AddRange(del);
            _OrderItemsDeleted = lst;
            return del;
        } 

        public virtual void SetOrderItemsDeleted(IList<OrderItems> del) =>
            _OrderItemsDeleted = del;

        public virtual void ClearOrderItemsDeleted() =>
            _OrderItemsDeleted = null;


        protected IList<OrderItems> _OrderItems;

        public virtual IList<OrderItems> OrderItems 
        { 
            get 
            {
                if (_OrderItems is null)
                    _OrderItems = new List<OrderItems>();
                return _OrderItems;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _OrderItems = valueList;
                }
                else
                    _OrderItems = null;
            } 
        }

        public virtual void CopyOrderItemsFrom(OrderData data) 
        {
            if  (data is null) return;
            var lstDeleted = OrderItems?.CopyFrom(data.OrderItems, new string[] {"OrderUuid"});
            SetOrderItemsDeleted(lstDeleted);
            foreach (var c in OrderItems)
                c?.CopyChildrenFrom(data.OrderItems?.FindByRowNum(c.RowNum));
        } 

        public virtual OrderItems NewOrderItems() => new OrderItems(dbFactory);

        public virtual OrderItems AddOrderItems(OrderItems obj) => 
            OrderItems.AddOrReplace(obj.SetParent(this));

        public virtual OrderItems RemoveOrderItems(OrderItems obj) => 
            AddOrderItemsDeleted(OrderItems.RemoveObject(obj.SetParent(this)));

        public virtual IList<OrderItems> GetOrderItemsByOrderUuid(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) 
                ? null 
                : dbFactory.Find<OrderItems>("WHERE OrderUuid = @0 ORDER BY Seq ", OrderUuid).ToList();

        public virtual bool SaveOrderItems(IList<OrderItems> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteOrderItems(IList<OrderItems> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<OrderItems>> GetOrderItemsByOrderUuidAsync(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) 
                ? null
                : (await dbFactory.FindAsync<OrderItems>("WHERE OrderUuid = @0 ORDER BY Seq ", OrderUuid)).ToList();

        public virtual async Task<bool> SaveOrderItemsAsync(IList<OrderItems> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteOrderItemsAsync(IList<OrderItems> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<OrderItems> CheckIntegrityOrderItems()
        {
            if (OrderItems is null || OrderHeader is null) 
                return OrderItems;
            var seq = 0;
            OrderItems.RemoveEmpty();
            var children = OrderItems.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.OrderUuid != OrderHeader.OrderUuid)
                    child.OrderUuid = OrderHeader.OrderUuid;
                seq += 1;
                child.Seq = seq;
            }
            return children;
        }



        #endregion OrderItems - Generated 

        #region OrderItemsAttributes - Generated 
        // grand children
        protected IList<OrderItemsAttributes> _OrderItemsAttributes;

        protected IList<OrderItemsAttributes> OrderItemsAttributes 
        { 
            get 
            {
                _OrderItemsAttributes = OrderItems is null ? null : OrderItems.SelectMany(x => x.GetChildrenOrderItemsAttributes()).ToList();
                return _OrderItemsAttributes;
            } 
            set
            {
                _OrderItemsAttributes = value;
                if (OrderItems != null)
                    foreach (var par in OrderItems)
                        par.SetChildrenOrderItemsAttributes(_OrderItemsAttributes);
            } 
        }

        protected IList<OrderItemsAttributes> OrderItemsAttributesDeleted 
        { 
            get 
            {
                var deleted = new List<OrderItemsAttributes>();
                if (_OrderItemsDeleted != null)
                {
                    var del = _OrderItemsDeleted
                            .Where(x => x?.GetChildrenOrderItemsAttributes() != null)
                            .SelectMany(x => x?.GetChildrenOrderItemsAttributes());
                    if (del.Any())
                        deleted.AddRange(del.ToList());
                }
                if (OrderItems != null)
                {
                    var delChildren = OrderItems
                                    .Where(x => x?.GetChildrenDeletedOrderItemsAttributes() != null)
                                    .SelectMany(x => x?.GetChildrenDeletedOrderItemsAttributes());
                    if (delChildren.Any())
                        deleted.AddRange(delChildren.ToList());
                }
                return deleted;
            } 
        }

        public virtual IList<OrderItemsAttributes> GetOrderItemsAttributesByOrderUuid(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) 
                ? null 
                : dbFactory.Find<OrderItemsAttributes>("WHERE OrderUuid = @0 ORDER BY RowNum ", OrderUuid).ToList();

        public virtual bool SaveOrderItemsAttributes(IList<OrderItemsAttributes> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteOrderItemsAttributes(IList<OrderItemsAttributes> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<OrderItemsAttributes>> GetOrderItemsAttributesByOrderUuidAsync(string OrderUuid) =>
            (string.IsNullOrEmpty(OrderUuid)) 
                ? null
                : (await dbFactory.FindAsync<OrderItemsAttributes>("WHERE OrderUuid = @0 ORDER BY RowNum ", OrderUuid)).ToList();

        public virtual async Task<bool> SaveOrderItemsAttributesAsync(IList<OrderItemsAttributes> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteOrderItemsAttributesAsync(IList<OrderItemsAttributes> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<OrderItemsAttributes> CheckIntegrityOrderItemsAttributes()
        {
            if (OrderItemsAttributes is null || OrderHeader is null) 
                return OrderItemsAttributes;
            var seq = 0;
            OrderItemsAttributes.RemoveEmpty();
            var children = OrderItemsAttributes.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.OrderUuid != OrderHeader.OrderUuid)
                    child.OrderUuid = OrderHeader.OrderUuid;
            }
            return children;
        }


        #endregion OrderItemsAttributes - Generated 


    }
}



