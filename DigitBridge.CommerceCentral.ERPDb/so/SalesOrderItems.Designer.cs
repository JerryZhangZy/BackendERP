              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a SalesOrderItems.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("SalesOrderItems")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("SalesOrderItemsUuid")]
    [DtoName("SalesOrderItemsDto")]
    public partial class SalesOrderItems : TableRepository<SalesOrderItems, long>
    {

        public SalesOrderItems() : base() {}
        public SalesOrderItems(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("SalesOrderItemsUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _salesOrderItemsUuid;

        [Column("SalesOrderUuid",SqlDbType.VarChar,NotNull=true)]
        private string _salesOrderUuid;

        [Column("Seq",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _seq;

        [Column("OrderItemType",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _orderItemType;

        [Column("SalesOrderItemstatus",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _salesOrderItemstatus;

        [Column("ItemDate",SqlDbType.Date,NotNull=true)]
        private DateTime _itemDate;

        [Column("ItemTime",SqlDbType.Time,NotNull=true)]
        private TimeSpan _itemTime;

        [Column("ShipDate",SqlDbType.Date)]
        private DateTime? _shipDate;

        [Column("EtaArrivalDate",SqlDbType.Date)]
        private DateTime? _etaArrivalDate;

        [Column("SKU",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _sKU;

        [Column("ProductUuid",SqlDbType.VarChar,NotNull=true)]
        private string _productUuid;

        [Column("InventoryUuid",SqlDbType.VarChar,NotNull=true)]
        private string _inventoryUuid;

        [Column("WarehouseUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _warehouseUuid;

        [Column("WarehouseCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _warehouseCode;

        [Column("LotNum",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _lotNum;

        [Column("Description",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _description;

        [Column("Notes",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _notes;

        [Column("Currency",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _currency;

        [Column("UOM",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _uOM;

        [Column("PackType",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _packType;

        [Column("PackQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _packQty;

        [Column("OrderPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _orderPack;

        [Column("ShipPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shipPack;

        [Column("CancelledPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _cancelledPack;

        [Column("OpenPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _openPack;

        [Column("OrderQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _orderQty;

        [Column("ShipQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shipQty;

        [Column("CancelledQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _cancelledQty;

        [Column("OpenQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _openQty;

        [Column("PriceRule",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _priceRule;

        [Column("Price",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _price;

        [Column("DiscountRate",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountRate;

        [Column("DiscountAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountAmount;

        [Column("DiscountPrice",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountPrice;

        [Column("ExtAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _extAmount;

        [Column("TaxableAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxableAmount;

        [Column("NonTaxableAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _nonTaxableAmount;

        [Column("TaxRate",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxRate;

        [Column("TaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxAmount;

        [Column("ShippingAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shippingAmount;

        [Column("ShippingTaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shippingTaxAmount;

        [Column("MiscAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _miscAmount;

        [Column("MiscTaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _miscTaxAmount;

        [Column("ChargeAndAllowanceAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _chargeAndAllowanceAmount;

        [Column("ItemTotalAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _itemTotalAmount;

        [Column("ShipAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shipAmount;

        [Column("CancelledAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _cancelledAmount;

        [Column("OpenAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _openAmount;

        [Column("Stockable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _stockable;

        [Column("IsAr",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _isAr;

        [Column("Taxable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _taxable;

        [Column("Costable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _costable;

        [Column("IsProfit",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _isProfit;

        [Column("UnitCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _unitCost;

        [Column("AvgCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _avgCost;

        [Column("LotCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _lotCost;

        [Column("LotInDate",SqlDbType.Date)]
        private DateTime? _lotInDate;

        [Column("LotExpDate",SqlDbType.Date)]
        private DateTime? _lotExpDate;

        [Column("CentralOrderLineUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _centralOrderLineUuid;

        [Column("DBChannelOrderLineRowID",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _dBChannelOrderLineRowID;

        [Column("OrderDCAssignmentLineUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _orderDCAssignmentLineUuid;

        [Column("UpdateDateUtc",SqlDbType.DateTime)]
        private DateTime? _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => SalesOrderItemsUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(SalesOrderItemsUuid)) 
				SalesOrderItemsUuid = Guid.NewGuid().ToString(); 
		}
		[IgnoreCompare] 
		public override bool IsEmpty => ( string.IsNullOrWhiteSpace(SKU) );
		/// <summary>
		/// (Readonly) Order Item Line uuid. <br> Display: false, Editable: false
		/// </summary>
        public virtual string SalesOrderItemsUuid
        {
            get
            {
				return _salesOrderItemsUuid?.TrimEnd(); 
            }
            set
            {
				_salesOrderItemsUuid = value.TruncateTo(50); 
				OnPropertyChanged("SalesOrderItemsUuid", value);
            }
        }

		/// <summary>
		/// Order uuid. <br> Display: false, Editable: false.
		/// </summary>
        public virtual string SalesOrderUuid
        {
            get
            {
				return _salesOrderUuid?.TrimEnd(); 
            }
            set
            {
				_salesOrderUuid = value.TruncateTo(50); 
				OnPropertyChanged("SalesOrderUuid", value);
            }
        }

		/// <summary>
		/// Order Item Line sequence number. <br> Title: Line#, Display: true, Editable: false
		/// </summary>
        public virtual int Seq
        {
            get
            {
				return _seq; 
            }
            set
            {
				_seq = value; 
				OnPropertyChanged("Seq", value);
            }
        }

		/// <summary>
		/// Order item type. <br> Title: Type, Display: true, Editable: true
		/// </summary>
        public virtual int OrderItemType
        {
            get
            {
				return _orderItemType; 
            }
            set
            {
				_orderItemType = value; 
				OnPropertyChanged("OrderItemType", value);
            }
        }

		/// <summary>
		/// Order item status. <br> Title: Status, Display: true, Editable: true
		/// </summary>
        public virtual int SalesOrderItemstatus
        {
            get
            {
				return _salesOrderItemstatus; 
            }
            set
            {
				_salesOrderItemstatus = value; 
				OnPropertyChanged("SalesOrderItemstatus", value);
            }
        }

		/// <summary>
		/// (Ignore) Order date
		/// </summary>
        public virtual DateTime ItemDate
        {
            get
            {
				return _itemDate; 
            }
            set
            {
				_itemDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("ItemDate", value);
            }
        }

		/// <summary>
		/// (Ignore) Order time
		/// </summary>
        public virtual TimeSpan ItemTime
        {
            get
            {
				return _itemTime; 
            }
            set
            {
				_itemTime = value.ToSqlSafeValue(); 
				OnPropertyChanged("ItemTime", value);
            }
        }

		/// <summary>
		/// Estimated vendor ship date. <br> Title: Ship Date, Display: true, Editable: true
		/// </summary>
        public virtual DateTime? ShipDate
        {
            get
            {
				if (!AllowNull && _shipDate is null) 
					_shipDate = new DateTime().MinValueSql(); 
				return _shipDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("ShipDate", value);
				}
            }
        }

		/// <summary>
		/// Estimated date when item arrival to buyer. <br> Title: Delivery Date, Display: true, Editable: true
		/// </summary>
        public virtual DateTime? EtaArrivalDate
        {
            get
            {
				if (!AllowNull && _etaArrivalDate is null) 
					_etaArrivalDate = new DateTime().MinValueSql(); 
				return _etaArrivalDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_etaArrivalDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("EtaArrivalDate", value);
				}
            }
        }

		/// <summary>
		/// Product SKU. <br> Title: SKU, Display: true, Editable: true
		/// </summary>
        public virtual string SKU
        {
            get
            {
				return _sKU?.TrimEnd(); 
            }
            set
            {
				_sKU = value.TruncateTo(100); 
				OnPropertyChanged("SKU", value);
            }
        }

		/// <summary>
		/// (Readonly) Product uuid. load from ProductBasic data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string ProductUuid
        {
            get
            {
				return _productUuid?.TrimEnd(); 
            }
            set
            {
				_productUuid = value.TruncateTo(50); 
				OnPropertyChanged("ProductUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) Inventory Item Line uuid, load from inventory data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string InventoryUuid
        {
            get
            {
				return _inventoryUuid?.TrimEnd(); 
            }
            set
            {
				_inventoryUuid = value.TruncateTo(50); 
				OnPropertyChanged("InventoryUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) Warehouse uuid, load from inventory data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string WarehouseUuid
        {
            get
            {
				return _warehouseUuid?.TrimEnd(); 
            }
            set
            {
				_warehouseUuid = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseUuid", value);
            }
        }

		/// <summary>
		/// Readable warehouse code, load from inventory data. <br> Title: Warehouse Code, Display: true, Editable: true
		/// </summary>
        public virtual string WarehouseCode
        {
            get
            {
				return _warehouseCode?.TrimEnd(); 
            }
            set
            {
				_warehouseCode = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseCode", value);
            }
        }

		/// <summary>
		/// Lot Number. <br> Title: Lot Number, Display: true, Editable: true
		/// </summary>
        public virtual string LotNum
        {
            get
            {
				return _lotNum?.TrimEnd(); 
            }
            set
            {
				_lotNum = value.TruncateTo(100); 
				OnPropertyChanged("LotNum", value);
            }
        }

		/// <summary>
		/// Item line description, default from ProductBasic data. <br> Title: Description, Display: true, Editable: true
		/// </summary>
        public virtual string Description
        {
            get
            {
				return _description?.TrimEnd(); 
            }
            set
            {
				_description = value.TruncateTo(200); 
				OnPropertyChanged("Description", value);
            }
        }

		/// <summary>
		/// Order item line notes. <br> Title: Notes, Display: true, Editable: true
		/// </summary>
        public virtual string Notes
        {
            get
            {
				return _notes?.TrimEnd(); 
            }
            set
            {
				_notes = value.TruncateTo(500); 
				OnPropertyChanged("Notes", value);
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual string Currency
        {
            get
            {
				return _currency?.TrimEnd(); 
            }
            set
            {
				_currency = value.TruncateTo(10); 
				OnPropertyChanged("Currency", value);
            }
        }

		/// <summary>
		/// (Readonly) Product unit of measure, load from ProductBasic data. <br> Title: UOM, Display: true, Editable: false
		/// </summary>
        public virtual string UOM
        {
            get
            {
				return _uOM?.TrimEnd(); 
            }
            set
            {
				_uOM = value.TruncateTo(50); 
				OnPropertyChanged("UOM", value);
            }
        }

		/// <summary>
		/// (Ignore) Product SKU Qty pack type, for example: Case, Box, Each
		/// </summary>
        public virtual string PackType
        {
            get
            {
				return _packType?.TrimEnd(); 
            }
            set
            {
				_packType = value.TruncateTo(50); 
				OnPropertyChanged("PackType", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Qty each per pack.
		/// </summary>
        public virtual decimal PackQty
        {
            get
            {
				return _packQty; 
            }
            set
            {
				_packQty = value; 
				OnPropertyChanged("PackQty", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Order number of pack.
		/// </summary>
        public virtual decimal OrderPack
        {
            get
            {
				return _orderPack; 
            }
            set
            {
				_orderPack = value; 
				OnPropertyChanged("OrderPack", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Shipped number of pack.
		/// </summary>
        public virtual decimal ShipPack
        {
            get
            {
				return _shipPack; 
            }
            set
            {
				_shipPack = value; 
				OnPropertyChanged("ShipPack", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Cancelled number of pack.
		/// </summary>
        public virtual decimal CancelledPack
        {
            get
            {
				return _cancelledPack; 
            }
            set
            {
				_cancelledPack = value; 
				OnPropertyChanged("CancelledPack", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Cancelled number of pack.
		/// </summary>
        public virtual decimal OpenPack
        {
            get
            {
				return _openPack; 
            }
            set
            {
				_openPack = value; 
				OnPropertyChanged("OpenPack", value);
            }
        }

		/// <summary>
		/// Item Order Qty. <br> Title: Order Qty, Display: true, Editable: true
		/// </summary>
        public virtual decimal OrderQty
        {
            get
            {
				return _orderQty; 
            }
            set
            {
				_orderQty = value; 
				OnPropertyChanged("OrderQty", value);
            }
        }

		/// <summary>
		/// Item Shipped Qty. <br> Title: Shipped Qty, Display: true, Editable: false
		/// </summary>
        public virtual decimal ShipQty
        {
            get
            {
				return _shipQty; 
            }
            set
            {
				_shipQty = value; 
				OnPropertyChanged("ShipQty", value);
            }
        }

		/// <summary>
		/// Item Cancelled Qty. <br> Title: Cancelled Qty, Display: true, Editable: false
		/// </summary>
        public virtual decimal CancelledQty
        {
            get
            {
				return _cancelledQty; 
            }
            set
            {
				_cancelledQty = value; 
				OnPropertyChanged("CancelledQty", value);
            }
        }

		/// <summary>
		/// Item Open Qty.
		/// </summary>
        public virtual decimal OpenQty
        {
            get
            {
				return _openQty; 
            }
            set
            {
				_openQty = value; 
				OnPropertyChanged("OpenQty", value);
            }
        }

		/// <summary>
		/// Item price rule. <br> Title: Price Type, Display: true, Editable: true
		/// </summary>
        public virtual string PriceRule
        {
            get
            {
				return _priceRule?.TrimEnd(); 
            }
            set
            {
				_priceRule = value.TruncateTo(50); 
				OnPropertyChanged("PriceRule", value);
            }
        }

		/// <summary>
		/// Item unit price. <br> Title: Unit Price, Display: true, Editable: true
		/// </summary>
        public virtual decimal Price
        {
            get
            {
				return _price; 
            }
            set
            {
				_price = value; 
				OnPropertyChanged("Price", value);
            }
        }

		/// <summary>
		/// Item level discount rate. <br> Title: Discount Rate, Display: true, Editable: true
		/// </summary>
        public virtual decimal DiscountRate
        {
            get
            {
				return _discountRate; 
            }
            set
            {
				_discountRate = value; 
				OnPropertyChanged("DiscountRate", value);
            }
        }

		/// <summary>
		/// Item level discount amount. <br> Title: Discount Amount, Display: true, Editable: true
		/// </summary>
        public virtual decimal DiscountAmount
        {
            get
            {
				return _discountAmount; 
            }
            set
            {
				_discountAmount = value; 
				OnPropertyChanged("DiscountAmount", value);
            }
        }

		/// <summary>
		/// Item after discount price. <br> Title: Discount Price, Display: true, Editable: false
		/// </summary>
        public virtual decimal DiscountPrice
        {
            get
            {
				return _discountPrice; 
            }
            set
            {
				_discountPrice = value; 
				OnPropertyChanged("DiscountPrice", value);
            }
        }

		/// <summary>
		/// Item total amount. <br> Title: Ext.Amount, Display: true, Editable: false
		/// </summary>
        public virtual decimal ExtAmount
        {
            get
            {
				return _extAmount; 
            }
            set
            {
				_extAmount = value; 
				OnPropertyChanged("ExtAmount", value);
            }
        }

		/// <summary>
		/// Amount should apply tax. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal TaxableAmount
        {
            get
            {
				return _taxableAmount; 
            }
            set
            {
				_taxableAmount = value; 
				OnPropertyChanged("TaxableAmount", value);
            }
        }

		/// <summary>
		/// Amount should not apply tax. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal NonTaxableAmount
        {
            get
            {
				return _nonTaxableAmount; 
            }
            set
            {
				_nonTaxableAmount = value; 
				OnPropertyChanged("NonTaxableAmount", value);
            }
        }

		/// <summary>
		/// Default Tax rate for item. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal TaxRate
        {
            get
            {
				return _taxRate; 
            }
            set
            {
				_taxRate = value; 
				OnPropertyChanged("TaxRate", value);
            }
        }

		/// <summary>
		/// Item level tax amount (include shipping tax and misc tax). <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal TaxAmount
        {
            get
            {
				return _taxAmount; 
            }
            set
            {
				_taxAmount = value; 
				OnPropertyChanged("TaxAmount", value);
            }
        }

		/// <summary>
		/// shipping fee for this item. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal ShippingAmount
        {
            get
            {
				return _shippingAmount; 
            }
            set
            {
				_shippingAmount = value; 
				OnPropertyChanged("ShippingAmount", value);
            }
        }

		/// <summary>
		/// Item level tax amount of shipping fee. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal ShippingTaxAmount
        {
            get
            {
				return _shippingTaxAmount; 
            }
            set
            {
				_shippingTaxAmount = value; 
				OnPropertyChanged("ShippingTaxAmount", value);
            }
        }

		/// <summary>
		/// Item level handling charge. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal MiscAmount
        {
            get
            {
				return _miscAmount; 
            }
            set
            {
				_miscAmount = value; 
				OnPropertyChanged("MiscAmount", value);
            }
        }

		/// <summary>
		/// Item level tax amount of handling charge. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal MiscTaxAmount
        {
            get
            {
				return _miscTaxAmount; 
            }
            set
            {
				_miscTaxAmount = value; 
				OnPropertyChanged("MiscTaxAmount", value);
            }
        }

		/// <summary>
		/// Item level Charge and Allowance Amount. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal ChargeAndAllowanceAmount
        {
            get
            {
				return _chargeAndAllowanceAmount; 
            }
            set
            {
				_chargeAndAllowanceAmount = value; 
				OnPropertyChanged("ChargeAndAllowanceAmount", value);
            }
        }

		/// <summary>
		/// Item total amount include all. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal ItemTotalAmount
        {
            get
            {
				return _itemTotalAmount; 
            }
            set
            {
				_itemTotalAmount = value; 
				OnPropertyChanged("ItemTotalAmount", value);
            }
        }

		/// <summary>
		/// Item shipped amount. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal ShipAmount
        {
            get
            {
				return _shipAmount; 
            }
            set
            {
				_shipAmount = value; 
				OnPropertyChanged("ShipAmount", value);
            }
        }

		/// <summary>
		/// Item cancelled amount. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal CancelledAmount
        {
            get
            {
				return _cancelledAmount; 
            }
            set
            {
				_cancelledAmount = value; 
				OnPropertyChanged("CancelledAmount", value);
            }
        }

		/// <summary>
		/// Item open amount. <br> Display: false, Editable: false
		/// </summary>
        public virtual decimal OpenAmount
        {
            get
            {
				return _openAmount; 
            }
            set
            {
				_openAmount = value; 
				OnPropertyChanged("OpenAmount", value);
            }
        }

		/// <summary>
		/// item will update inventory instock qty. <br> Title: Stockable, Display: true, Editable: true
		/// </summary>
        public virtual bool Stockable
        {
            get
            {
				return (_stockable == 1); 
            }
            set
            {
				_stockable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Stockable", value);
            }
        }

		/// <summary>
		/// item will add to Order total amount. <br> Title: A/R, Display: true, Editable: true
		/// </summary>
        public virtual bool IsAr
        {
            get
            {
				return (_isAr == 1); 
            }
            set
            {
				_isAr = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("IsAr", value);
            }
        }

		/// <summary>
		/// item will apply tax. <br> Title: Taxable, Display: true, Editable: true
		/// </summary>
        public virtual bool Taxable
        {
            get
            {
				return (_taxable == 1); 
            }
            set
            {
				_taxable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Taxable", value);
            }
        }

		/// <summary>
		/// item will calculate total cost. <br> Title: Apply Cost, Display: true, Editable: true
		/// </summary>
        public virtual bool Costable
        {
            get
            {
				return (_costable == 1); 
            }
            set
            {
				_costable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Costable", value);
            }
        }

		/// <summary>
		/// item will calculate profit. <br> Title: Apply Profit, Display: true, Editable: true
		/// </summary>
        public virtual bool IsProfit
        {
            get
            {
				return (_isProfit == 1); 
            }
            set
            {
				_isProfit = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("IsProfit", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Unit Cost.
		/// </summary>
        public virtual decimal UnitCost
        {
            get
            {
				return _unitCost; 
            }
            set
            {
				_unitCost = value; 
				OnPropertyChanged("UnitCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Avg.Cost.
		/// </summary>
        public virtual decimal AvgCost
        {
            get
            {
				return _avgCost; 
            }
            set
            {
				_avgCost = value; 
				OnPropertyChanged("AvgCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Lot Cost.
		/// </summary>
        public virtual decimal LotCost
        {
            get
            {
				return _lotCost; 
            }
            set
            {
				_lotCost = value; 
				OnPropertyChanged("LotCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Lot receive Date
		/// </summary>
        public virtual DateTime? LotInDate
        {
            get
            {
				if (!AllowNull && _lotInDate is null) 
					_lotInDate = new DateTime().MinValueSql(); 
				return _lotInDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotInDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotInDate", value);
				}
            }
        }

		/// <summary>
		/// (Ignore) Lot Expiration date
		/// </summary>
        public virtual DateTime? LotExpDate
        {
            get
            {
				if (!AllowNull && _lotExpDate is null) 
					_lotExpDate = new DateTime().MinValueSql(); 
				return _lotExpDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotExpDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotExpDate", value);
				}
            }
        }

		/// <summary>
		/// (Readonly) Link to CentralOrderLineUuid in OrderLine. <br> Title: CentralOrderLineUuid, Display: false, Editable: false
		/// </summary>
        public virtual string CentralOrderLineUuid
        {
            get
            {
				return _centralOrderLineUuid?.TrimEnd(); 
            }
            set
            {
				_centralOrderLineUuid = value.TruncateTo(50); 
				OnPropertyChanged("CentralOrderLineUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) DB Channel Order Line RowID. <br> Title: Channel Order Line RowID, Display: false, Editable: false
		/// </summary>
        public virtual string DBChannelOrderLineRowID
        {
            get
            {
				return _dBChannelOrderLineRowID?.TrimEnd(); 
            }
            set
            {
				_dBChannelOrderLineRowID = value.TruncateTo(50); 
				OnPropertyChanged("DBChannelOrderLineRowID", value);
            }
        }

		/// <summary>
		/// (Readonly) Link to OrderDCAssignmentLineUuid in OrderDCAssignmentLine. <br> Title: CentralOrderLineUuid, Display: false, Editable: false
		/// </summary>
        public virtual string OrderDCAssignmentLineUuid
        {
            get
            {
				return _orderDCAssignmentLineUuid?.TrimEnd(); 
            }
            set
            {
				_orderDCAssignmentLineUuid = value.TruncateTo(50); 
				OnPropertyChanged("OrderDCAssignmentLineUuid", value);
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual DateTime? UpdateDateUtc
        {
            get
            {
				if (!AllowNull && _updateDateUtc is null) 
					_updateDateUtc = new DateTime().MinValueSql(); 
				return _updateDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_updateDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("UpdateDateUtc", value);
				}
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }

		/// <summary>
		/// (Ignore)
		/// </summary>
        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
				OnPropertyChanged("UpdateBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private SalesOrderData Parent { get; set; }
		public SalesOrderData GetParent() => Parent;
		public SalesOrderItems SetParent(SalesOrderData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent

		#region Methods - Children SalesOrderItemsAttributes
		protected SalesOrderItemsAttributes _SalesOrderItemsAttributes;
		[IgnoreCompare]
		public SalesOrderItemsAttributes SalesOrderItemsAttributes
		{
			get
			{
				return _SalesOrderItemsAttributes;
			}
			set
			{
				_SalesOrderItemsAttributes = value;
				CheckIntegritySalesOrderItemsAttributes();
			}
		}
		public SalesOrderItemsAttributes SetChildrenSalesOrderItemsAttributes(IList<SalesOrderItemsAttributes> children)
		{
			var childrenList = children.ToList();
			SalesOrderItemsAttributes = childrenList.FirstOrDefault(x => !string.IsNullOrEmpty(SalesOrderItemsUuid) && x.SalesOrderItemsUuid == SalesOrderItemsUuid);
			return SalesOrderItemsAttributes;
		}
		public IList<SalesOrderItemsAttributes> GetChildrenSalesOrderItemsAttributes()
		{
			return new List<SalesOrderItemsAttributes>() { SalesOrderItemsAttributes };
		}
		public IList<SalesOrderItemsAttributes> GetChildrenDeletedSalesOrderItemsAttributes()
		{
			return null;
		}
		public SalesOrderItemsAttributes CheckIntegritySalesOrderItemsAttributes()
		{
			if (SalesOrderItemsAttributes == null)
				return SalesOrderItemsAttributes;
			CheckUniqueId();
			SalesOrderItemsAttributes.SetParent(Parent);
			if (SalesOrderItemsAttributes.SalesOrderItemsUuid != SalesOrderItemsUuid) SalesOrderItemsAttributes.SalesOrderItemsUuid = SalesOrderItemsUuid;
			SalesOrderItemsAttributes.CheckIntegrity();
			return SalesOrderItemsAttributes;
		}
		public SalesOrderItemsAttributes LoadSalesOrderItemsAttributes()
		{
			SalesOrderItemsAttributes = dbFactory.GetById<SalesOrderItemsAttributes>(SalesOrderItemsUuid);
			return SalesOrderItemsAttributes;
		}
		public async Task<SalesOrderItemsAttributes> LoadSalesOrderItemsAttributesAsync()
		{
			SalesOrderItemsAttributes = await dbFactory.GetByIdAsync<SalesOrderItemsAttributes>(SalesOrderItemsUuid);
			return SalesOrderItemsAttributes;
		}
		public SalesOrderItemsAttributes NewSalesOrderItemsAttributes()
		{
			CheckUniqueId();
			var child = new SalesOrderItemsAttributes(dbFactory);
			child.SetParent(Parent);
			child.SalesOrderItemsUuid = SalesOrderItemsUuid;
			child.CheckIntegrity();
			return child;
		}
		public SalesOrderItemsAttributes AddSalesOrderItemsAttributes(SalesOrderItemsAttributes child)
		{
			if (child == null)
				child = NewSalesOrderItemsAttributes();
			SalesOrderItemsAttributes = child;
			return SalesOrderItemsAttributes;
			child.CheckIntegrity();
		}
		#endregion Methods - Children SalesOrderItemsAttributes

        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			SalesOrderItemsUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override SalesOrderItems Clear()
        {
            base.Clear();
			_salesOrderItemsUuid = String.Empty; 
			_salesOrderUuid = String.Empty; 
			_seq = default(int); 
			_orderItemType = default(int); 
			_salesOrderItemstatus = default(int); 
			_itemDate = new DateTime().MinValueSql(); 
			_itemTime = new TimeSpan().MinValueSql(); 
			_shipDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_etaArrivalDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_sKU = String.Empty; 
			_productUuid = String.Empty; 
			_inventoryUuid = String.Empty; 
			_warehouseUuid = String.Empty; 
			_warehouseCode = String.Empty; 
			_lotNum = String.Empty; 
			_description = String.Empty; 
			_notes = String.Empty; 
			_currency = String.Empty; 
			_uOM = String.Empty; 
			_packType = String.Empty; 
			_packQty = default(decimal); 
			_orderPack = default(decimal); 
			_shipPack = default(decimal); 
			_cancelledPack = default(decimal); 
			_openPack = default(decimal); 
			_orderQty = default(decimal); 
			_shipQty = default(decimal); 
			_cancelledQty = default(decimal); 
			_openQty = default(decimal); 
			_priceRule = String.Empty; 
			_price = default(decimal); 
			_discountRate = default(decimal); 
			_discountAmount = default(decimal); 
			_discountPrice = default(decimal); 
			_extAmount = default(decimal); 
			_taxableAmount = default(decimal); 
			_nonTaxableAmount = default(decimal); 
			_taxRate = default(decimal); 
			_taxAmount = default(decimal); 
			_shippingAmount = default(decimal); 
			_shippingTaxAmount = default(decimal); 
			_miscAmount = default(decimal); 
			_miscTaxAmount = default(decimal); 
			_chargeAndAllowanceAmount = default(decimal); 
			_itemTotalAmount = default(decimal); 
			_shipAmount = default(decimal); 
			_cancelledAmount = default(decimal); 
			_openAmount = default(decimal); 
			_stockable = default(byte); 
			_isAr = default(byte); 
			_taxable = default(byte); 
			_costable = default(byte); 
			_isProfit = default(byte); 
			_unitCost = default(decimal); 
			_avgCost = default(decimal); 
			_lotCost = default(decimal); 
			_lotInDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_lotExpDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_centralOrderLineUuid = String.Empty; 
			_dBChannelOrderLineRowID = String.Empty; 
			_orderDCAssignmentLineUuid = String.Empty; 
			_updateDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public override SalesOrderItems CheckIntegrity()
        {
            CheckUniqueId();
			CheckIntegritySalesOrderItemsAttributes();
            CheckIntegrityOthers();
            return this;
        }

        public virtual SalesOrderItems ClearChildren()
        {
			SalesOrderItemsAttributes?.Clear();
            return this;
        }

        public virtual SalesOrderItems NewChildren()
        {
			AddSalesOrderItemsAttributes(NewSalesOrderItemsAttributes());
            return this;
        }

        public virtual void CopyChildrenFrom(SalesOrderItems data)
        {
            if (data is null) return;
			SalesOrderItemsAttributes?.CopyFrom(data.SalesOrderItemsAttributes);
			CheckIntegritySalesOrderItemsAttributes(); 
            return;
        }

		public static IList<SalesOrderItems> FindBySalesOrderUuid(IDataBaseFactory dbFactory, string salesOrderUuid)
		{
			return dbFactory.Find<SalesOrderItems>("WHERE SalesOrderUuid = @0 ORDER BY Seq ", salesOrderUuid).ToList();
		}
		public static long CountBySalesOrderUuid(IDataBaseFactory dbFactory, string salesOrderUuid)
		{
			return dbFactory.Count<SalesOrderItems>("WHERE SalesOrderUuid = @0 ", salesOrderUuid);
		}
		public static async Task<IList<SalesOrderItems>> FindByAsyncSalesOrderUuid(IDataBaseFactory dbFactory, string salesOrderUuid)
		{
			return (await dbFactory.FindAsync<SalesOrderItems>("WHERE SalesOrderUuid = @0 ORDER BY Seq ", salesOrderUuid)).ToList();
		}
		public static async Task<long> CountByAsyncSalesOrderUuid(IDataBaseFactory dbFactory, string salesOrderUuid)
		{
			return await dbFactory.CountAsync<SalesOrderItems>("WHERE SalesOrderUuid = @0 ", salesOrderUuid);
		}


        #endregion Methods - Generated 
    }
}



