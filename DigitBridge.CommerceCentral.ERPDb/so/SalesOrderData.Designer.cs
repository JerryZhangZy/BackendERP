

              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a SalesOrderData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class SalesOrderData : StructureRepository<SalesOrderData>
    {
        public SalesOrderData() : base() {}
        public SalesOrderData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => SalesOrderHeader.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => SalesOrderHeader.UniqueId;

        #region CRUD Methods

        public override bool Equals(SalesOrderData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(SalesOrderData other)
        {
			if (SalesOrderHeader == null && other.SalesOrderHeader != null || SalesOrderHeader != null && other.SalesOrderHeader == null) 
				return false; 
			if (SalesOrderHeader != null && other.SalesOrderHeader != null && !SalesOrderHeader.Equals(other.SalesOrderHeader)) 
				return false; 
			if (SalesOrderHeaderInfo == null && other.SalesOrderHeaderInfo != null || SalesOrderHeaderInfo != null && other.SalesOrderHeaderInfo == null) 
				return false; 
			if (SalesOrderHeaderInfo != null && other.SalesOrderHeaderInfo != null && !SalesOrderHeaderInfo.Equals(other.SalesOrderHeaderInfo)) 
				return false; 
			if (SalesOrderHeaderAttributes == null && other.SalesOrderHeaderAttributes != null || SalesOrderHeaderAttributes != null && other.SalesOrderHeaderAttributes == null) 
				return false; 
			if (SalesOrderHeaderAttributes != null && other.SalesOrderHeaderAttributes != null && !SalesOrderHeaderAttributes.Equals(other.SalesOrderHeaderAttributes)) 
				return false; 
			if (SalesOrderItems == null && other.SalesOrderItems != null || SalesOrderItems != null && other.SalesOrderItems == null) 
				return false; 
			if (SalesOrderItems != null && other.SalesOrderItems != null && !SalesOrderItems.EqualsList(other.SalesOrderItems)) 
				return false; 
			if (SalesOrderItemsAttributes == null && other.SalesOrderItemsAttributes != null || SalesOrderItemsAttributes != null && other.SalesOrderItemsAttributes == null) 
				return false; 
			if (SalesOrderItemsAttributes != null && other.SalesOrderItemsAttributes != null && !SalesOrderItemsAttributes.EqualsList(other.SalesOrderItemsAttributes)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public virtual SalesOrderData CheckIntegrity()
        {
			if (SalesOrderHeader is null) return this; 
			SalesOrderHeader.CheckUniqueId(); 
			CheckIntegritySalesOrderHeaderInfo(); 
			CheckIntegritySalesOrderHeaderAttributes(); 
			CheckIntegritySalesOrderItems(); 
			CheckIntegritySalesOrderItemsAttributes(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			SalesOrderHeader?.Clear(); 
			SalesOrderHeaderInfo?.Clear(); 
			SalesOrderHeaderAttributes?.Clear(); 
			SalesOrderItems = new List<SalesOrderItems>(); 
			ClearSalesOrderItemsDeleted(); 
			SalesOrderItemsAttributes = new List<SalesOrderItemsAttributes>(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			SalesOrderHeader = NewSalesOrderHeader(); 
			SalesOrderHeaderInfo = NewSalesOrderHeaderInfo(); 
			SalesOrderHeaderAttributes = NewSalesOrderHeaderAttributes(); 
			SalesOrderItems = new List<SalesOrderItems>(); 
			AddSalesOrderItems(NewSalesOrderItems()); 
			SalesOrderItems.ToList().ForEach(x => x?.NewChildren()); 
			ClearSalesOrderItemsDeleted(); 
            return;
        }

        public virtual void CopyFrom(SalesOrderData data)
        {
			CopySalesOrderHeaderFrom(data); 
			CopySalesOrderHeaderInfoFrom(data); 
			CopySalesOrderHeaderAttributesFrom(data); 
			CopySalesOrderItemsFrom(data); 
            CheckIntegrity();
            return;
        }

        public override SalesOrderData Clone()
        {
			var newData = new SalesOrderData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.SalesOrderHeader.ClearMetaData(); 
			newData.SalesOrderHeaderInfo.ClearMetaData(); 
			newData.SalesOrderHeaderAttributes.ClearMetaData(); 
			newData.SalesOrderItems.ClearMetaData(); 
			newData.SalesOrderItemsAttributes.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetSalesOrderHeader(RowNum); 
			if (obj is null) return false; 
			SalesOrderHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string SalesOrderUuid)
        {
			var obj = GetSalesOrderHeaderBySalesOrderUuid(SalesOrderUuid); 
			if (obj is null) return false; 
			SalesOrderHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(SalesOrderHeader.SalesOrderUuid)) return; 
			SalesOrderHeaderInfo = GetSalesOrderHeaderInfoBySalesOrderUuid(SalesOrderHeader.SalesOrderUuid); 
			SalesOrderHeaderAttributes = GetSalesOrderHeaderAttributesBySalesOrderUuid(SalesOrderHeader.SalesOrderUuid); 
			SalesOrderItems = GetSalesOrderItemsBySalesOrderUuid(SalesOrderHeader.SalesOrderUuid); 
			SalesOrderItemsAttributes = GetSalesOrderItemsAttributesBySalesOrderUuid(SalesOrderHeader.SalesOrderUuid); 
        }

        public override bool Save()
        {
			if (SalesOrderHeader is null || string.IsNullOrEmpty(SalesOrderHeader.SalesOrderUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();
			SalesOrderHeader.SetDataBaseFactory(dbFactory);
			if (!SalesOrderHeader.Save()) return false;

			if (SalesOrderHeaderInfo != null) 
				SalesOrderHeaderInfo.SetDataBaseFactory(dbFactory)?.Save();

			if (SalesOrderHeaderAttributes != null) 
				SalesOrderHeaderAttributes.SetDataBaseFactory(dbFactory)?.Save();

			if (SalesOrderItems != null) 
				SalesOrderItems.SetDataBaseFactory(dbFactory)?.Save();
			var delSalesOrderItems = _SalesOrderItemsDeleted;
			if (delSalesOrderItems != null)
				delSalesOrderItems.SetDataBaseFactory(dbFactory)?.Delete();

			if (SalesOrderItemsAttributes != null) 
				SalesOrderItemsAttributes.SetDataBaseFactory(dbFactory)?.Save();
			var delChildrenSalesOrderItemsAttributes = SalesOrderItemsAttributesDeleted;
			if (delChildrenSalesOrderItemsAttributes != null)
				delChildrenSalesOrderItemsAttributes.SetDataBaseFactory(dbFactory)?.Delete();

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (SalesOrderHeader is null || string.IsNullOrEmpty(SalesOrderHeader.SalesOrderUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			SalesOrderHeader.SetDataBaseFactory(dbFactory); 
			if (SalesOrderHeader.Delete() <= 0) return false; 
			if (SalesOrderHeaderInfo != null) 
				SalesOrderHeaderInfo?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (SalesOrderHeaderAttributes != null) 
				SalesOrderHeaderAttributes?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (SalesOrderItems != null) 
				SalesOrderItems?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (SalesOrderItemsAttributes != null) 
				SalesOrderItemsAttributes?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetSalesOrderHeaderAsync(RowNum); 
			if (obj is null) return false; 
			SalesOrderHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string SalesOrderUuid)
        {
			var obj = await GetSalesOrderHeaderBySalesOrderUuidAsync(SalesOrderUuid); 
			if (obj is null) return false; 
			SalesOrderHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(SalesOrderHeader.SalesOrderUuid)) return; 
			SalesOrderHeaderInfo = await GetSalesOrderHeaderInfoBySalesOrderUuidAsync(SalesOrderHeader.SalesOrderUuid); 
			SalesOrderHeaderAttributes = await GetSalesOrderHeaderAttributesBySalesOrderUuidAsync(SalesOrderHeader.SalesOrderUuid); 
			SalesOrderItems = await GetSalesOrderItemsBySalesOrderUuidAsync(SalesOrderHeader.SalesOrderUuid); 
			SalesOrderItemsAttributes = await GetSalesOrderItemsAttributesBySalesOrderUuidAsync(SalesOrderHeader.SalesOrderUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (SalesOrderHeader is null || string.IsNullOrEmpty(SalesOrderHeader.SalesOrderUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 
			SalesOrderHeader.SetDataBaseFactory(dbFactory); 
			if (!(await SalesOrderHeader.SaveAsync().ConfigureAwait(false))) return false; 
			if (SalesOrderHeaderInfo != null) 
				await SalesOrderHeaderInfo.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 

			if (SalesOrderHeaderAttributes != null) 
				await SalesOrderHeaderAttributes.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 

			if (SalesOrderItems != null) 
				await SalesOrderItems.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 
			var delSalesOrderItems = _SalesOrderItemsDeleted;
			if (delSalesOrderItems != null)
				await delSalesOrderItems.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false);

			if (SalesOrderItemsAttributes != null) 
				await SalesOrderItemsAttributes.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 
			var delSalesOrderItemsAttributes = SalesOrderItemsAttributesDeleted;
			if (delSalesOrderItemsAttributes != null)
				await delSalesOrderItemsAttributes.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false);

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (SalesOrderHeader is null || string.IsNullOrEmpty(SalesOrderHeader.SalesOrderUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			SalesOrderHeader.SetDataBaseFactory(dbFactory); 
			if ((await SalesOrderHeader.DeleteAsync().ConfigureAwait(false)) <= 0) return false; 
			if (SalesOrderHeaderInfo != null) 
				await SalesOrderHeaderInfo.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (SalesOrderHeaderAttributes != null) 
				await SalesOrderHeaderAttributes.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (SalesOrderItems != null) 
				await SalesOrderItems.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (SalesOrderItemsAttributes != null) 
				await SalesOrderItemsAttributes.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region SalesOrderHeader - Generated 
    

        // one to one children
        protected SalesOrderHeader _SalesOrderHeader;

        public virtual SalesOrderHeader SalesOrderHeader 
        { 
            get => _SalesOrderHeader;
            set => _SalesOrderHeader = value?.SetParent(this); 
        }

        public virtual void CopySalesOrderHeaderFrom(SalesOrderData data) => 
            SalesOrderHeader?.CopyFrom(data.SalesOrderHeader, new string[] {"SalesOrderUuid"});

        public virtual SalesOrderHeader NewSalesOrderHeader() => new SalesOrderHeader(dbFactory).SetParent(this);

        public virtual SalesOrderHeader GetSalesOrderHeader(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<SalesOrderHeader>(RowNum);

        public virtual SalesOrderHeader GetSalesOrderHeaderBySalesOrderUuid(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) ? null : dbFactory.GetById<SalesOrderHeader>(SalesOrderUuid);

        public virtual bool SaveSalesOrderHeader(SalesOrderHeader data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteSalesOrderHeader(SalesOrderHeader data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<SalesOrderHeader> GetSalesOrderHeaderAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<SalesOrderHeader>(RowNum);

        public virtual async Task<SalesOrderHeader> GetSalesOrderHeaderBySalesOrderUuidAsync(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) ? null : await dbFactory.GetByIdAsync<SalesOrderHeader>(SalesOrderUuid);

        public virtual async Task<bool> SaveSalesOrderHeaderAsync(SalesOrderHeader data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteSalesOrderHeaderAsync(SalesOrderHeader data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion SalesOrderHeader - Generated 

        #region SalesOrderHeaderInfo - Generated 
    

        // one to one children
        protected SalesOrderHeaderInfo _SalesOrderHeaderInfo;

        public virtual SalesOrderHeaderInfo SalesOrderHeaderInfo 
        { 
            get => _SalesOrderHeaderInfo;
            set => _SalesOrderHeaderInfo = value?.SetParent(this); 
        }

        public virtual void CopySalesOrderHeaderInfoFrom(SalesOrderData data) => 
            SalesOrderHeaderInfo?.CopyFrom(data.SalesOrderHeaderInfo, new string[] {"SalesOrderUuid"});

        public virtual SalesOrderHeaderInfo NewSalesOrderHeaderInfo() => new SalesOrderHeaderInfo(dbFactory).SetParent(this);

        public virtual SalesOrderHeaderInfo GetSalesOrderHeaderInfo(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<SalesOrderHeaderInfo>(RowNum);

        public virtual SalesOrderHeaderInfo GetSalesOrderHeaderInfoBySalesOrderUuid(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) ? null : dbFactory.GetById<SalesOrderHeaderInfo>(SalesOrderUuid);

        public virtual bool SaveSalesOrderHeaderInfo(SalesOrderHeaderInfo data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteSalesOrderHeaderInfo(SalesOrderHeaderInfo data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<SalesOrderHeaderInfo> GetSalesOrderHeaderInfoAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<SalesOrderHeaderInfo>(RowNum);

        public virtual async Task<SalesOrderHeaderInfo> GetSalesOrderHeaderInfoBySalesOrderUuidAsync(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) ? null : await dbFactory.GetByIdAsync<SalesOrderHeaderInfo>(SalesOrderUuid);

        public virtual async Task<bool> SaveSalesOrderHeaderInfoAsync(SalesOrderHeaderInfo data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteSalesOrderHeaderInfoAsync(SalesOrderHeaderInfo data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual SalesOrderHeaderInfo CheckIntegritySalesOrderHeaderInfo()
        {
            if (SalesOrderHeaderInfo is null || SalesOrderHeader is null) 
                return SalesOrderHeaderInfo;
            SalesOrderHeaderInfo.SetParent(this);
            if (SalesOrderHeaderInfo.SalesOrderUuid != SalesOrderHeader.SalesOrderUuid)
                SalesOrderHeaderInfo.SalesOrderUuid = SalesOrderHeader.SalesOrderUuid;
            return SalesOrderHeaderInfo;
        }



        #endregion SalesOrderHeaderInfo - Generated 

        #region SalesOrderHeaderAttributes - Generated 
    

        // one to one children
        protected SalesOrderHeaderAttributes _SalesOrderHeaderAttributes;

        public virtual SalesOrderHeaderAttributes SalesOrderHeaderAttributes 
        { 
            get => _SalesOrderHeaderAttributes;
            set => _SalesOrderHeaderAttributes = value?.SetParent(this); 
        }

        public virtual void CopySalesOrderHeaderAttributesFrom(SalesOrderData data) => 
            SalesOrderHeaderAttributes?.CopyFrom(data.SalesOrderHeaderAttributes, new string[] {"SalesOrderUuid"});

        public virtual SalesOrderHeaderAttributes NewSalesOrderHeaderAttributes() => new SalesOrderHeaderAttributes(dbFactory).SetParent(this);

        public virtual SalesOrderHeaderAttributes GetSalesOrderHeaderAttributes(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<SalesOrderHeaderAttributes>(RowNum);

        public virtual SalesOrderHeaderAttributes GetSalesOrderHeaderAttributesBySalesOrderUuid(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) ? null : dbFactory.GetById<SalesOrderHeaderAttributes>(SalesOrderUuid);

        public virtual bool SaveSalesOrderHeaderAttributes(SalesOrderHeaderAttributes data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteSalesOrderHeaderAttributes(SalesOrderHeaderAttributes data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<SalesOrderHeaderAttributes> GetSalesOrderHeaderAttributesAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<SalesOrderHeaderAttributes>(RowNum);

        public virtual async Task<SalesOrderHeaderAttributes> GetSalesOrderHeaderAttributesBySalesOrderUuidAsync(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) ? null : await dbFactory.GetByIdAsync<SalesOrderHeaderAttributes>(SalesOrderUuid);

        public virtual async Task<bool> SaveSalesOrderHeaderAttributesAsync(SalesOrderHeaderAttributes data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteSalesOrderHeaderAttributesAsync(SalesOrderHeaderAttributes data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual SalesOrderHeaderAttributes CheckIntegritySalesOrderHeaderAttributes()
        {
            if (SalesOrderHeaderAttributes is null || SalesOrderHeader is null) 
                return SalesOrderHeaderAttributes;
            SalesOrderHeaderAttributes.SetParent(this);
            if (SalesOrderHeaderAttributes.SalesOrderUuid != SalesOrderHeader.SalesOrderUuid)
                SalesOrderHeaderAttributes.SalesOrderUuid = SalesOrderHeader.SalesOrderUuid;
            return SalesOrderHeaderAttributes;
        }



        #endregion SalesOrderHeaderAttributes - Generated 

        #region SalesOrderItems - Generated 
        // One to many children
        protected IList<SalesOrderItems> _SalesOrderItemsDeleted;
        public virtual SalesOrderItems AddSalesOrderItemsDeleted(SalesOrderItems del) 
        {
            if (_SalesOrderItemsDeleted is null)
                _SalesOrderItemsDeleted = new List<SalesOrderItems>();
            var lst = _SalesOrderItemsDeleted.ToList();
            lst.Add(del);
            _SalesOrderItemsDeleted = lst;
            return del;
        } 

        public virtual IList<SalesOrderItems> AddSalesOrderItemsDeleted(IList<SalesOrderItems> del) 
        {
            if (_SalesOrderItemsDeleted is null)
                _SalesOrderItemsDeleted = new List<SalesOrderItems>();
            var lst = _SalesOrderItemsDeleted.ToList();
            lst.AddRange(del);
            _SalesOrderItemsDeleted = lst;
            return del;
        } 

        public virtual void SetSalesOrderItemsDeleted(IList<SalesOrderItems> del) =>
            _SalesOrderItemsDeleted = del;

        public virtual void ClearSalesOrderItemsDeleted() =>
            _SalesOrderItemsDeleted = null;


        protected IList<SalesOrderItems> _SalesOrderItems;

        public virtual IList<SalesOrderItems> SalesOrderItems 
        { 
            get 
            {
                if (_SalesOrderItems is null)
                    _SalesOrderItems = new List<SalesOrderItems>();
                return _SalesOrderItems;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _SalesOrderItems = valueList;
                }
                else
                    _SalesOrderItems = null;
            } 
        }

        public virtual void CopySalesOrderItemsFrom(SalesOrderData data) 
        {
            if  (data is null) return;
            var lstDeleted = SalesOrderItems?.CopyFrom(data.SalesOrderItems, new string[] {"SalesOrderUuid"});
            SetSalesOrderItemsDeleted(lstDeleted);
            foreach (var c in SalesOrderItems)
                c?.CopyChildrenFrom(data.SalesOrderItems?.FindByRowNum(c.RowNum));
        } 

        public virtual SalesOrderItems NewSalesOrderItems() => new SalesOrderItems(dbFactory);

        public virtual SalesOrderItems AddSalesOrderItems(SalesOrderItems obj) => 
            SalesOrderItems.AddOrReplace(obj.SetParent(this));

        public virtual SalesOrderItems RemoveSalesOrderItems(SalesOrderItems obj) => 
            AddSalesOrderItemsDeleted(SalesOrderItems.RemoveObject(obj.SetParent(this)));

        public virtual IList<SalesOrderItems> GetSalesOrderItemsBySalesOrderUuid(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) 
                ? null 
                : dbFactory.Find<SalesOrderItems>("WHERE SalesOrderUuid = @0 ORDER BY Seq ", SalesOrderUuid).ToList();

        public virtual bool SaveSalesOrderItems(IList<SalesOrderItems> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteSalesOrderItems(IList<SalesOrderItems> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<SalesOrderItems>> GetSalesOrderItemsBySalesOrderUuidAsync(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) 
                ? null
                : (await dbFactory.FindAsync<SalesOrderItems>("WHERE SalesOrderUuid = @0 ORDER BY Seq ", SalesOrderUuid)).ToList();

        public virtual async Task<bool> SaveSalesOrderItemsAsync(IList<SalesOrderItems> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteSalesOrderItemsAsync(IList<SalesOrderItems> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<SalesOrderItems> CheckIntegritySalesOrderItems()
        {
            if (SalesOrderItems is null || SalesOrderHeader is null) 
                return SalesOrderItems;
            var seq = 0;
            SalesOrderItems.RemoveEmpty();
            var children = SalesOrderItems.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.SalesOrderUuid != SalesOrderHeader.SalesOrderUuid)
                    child.SalesOrderUuid = SalesOrderHeader.SalesOrderUuid;
                seq += 1;
                child.Seq = seq;
            }
            return children;
        }



        #endregion SalesOrderItems - Generated 

        #region SalesOrderItemsAttributes - Generated 
        // grand children
        protected IList<SalesOrderItemsAttributes> _SalesOrderItemsAttributes;

        protected IList<SalesOrderItemsAttributes> SalesOrderItemsAttributes 
        { 
            get 
            {
                _SalesOrderItemsAttributes = SalesOrderItems is null ? null : SalesOrderItems.SelectMany(x => x.GetChildrenSalesOrderItemsAttributes()).ToList();
                return _SalesOrderItemsAttributes;
            } 
            set
            {
                _SalesOrderItemsAttributes = value;
                if (SalesOrderItems != null)
                    foreach (var par in SalesOrderItems)
                        par.SetChildrenSalesOrderItemsAttributes(_SalesOrderItemsAttributes);
            } 
        }

        protected IList<SalesOrderItemsAttributes> SalesOrderItemsAttributesDeleted 
        { 
            get 
            {
                var deleted = new List<SalesOrderItemsAttributes>();
                if (_SalesOrderItemsDeleted != null)
                {
                    var del = _SalesOrderItemsDeleted
                            .Where(x => x?.GetChildrenSalesOrderItemsAttributes() != null)
                            .SelectMany(x => x?.GetChildrenSalesOrderItemsAttributes());
                    if (del.Any())
                        deleted.AddRange(del.ToList());
                }
                if (SalesOrderItems != null)
                {
                    var delChildren = SalesOrderItems
                                    .Where(x => x?.GetChildrenDeletedSalesOrderItemsAttributes() != null)
                                    .SelectMany(x => x?.GetChildrenDeletedSalesOrderItemsAttributes());
                    if (delChildren.Any())
                        deleted.AddRange(delChildren.ToList());
                }
                return deleted;
            } 
        }

        public virtual IList<SalesOrderItemsAttributes> GetSalesOrderItemsAttributesBySalesOrderUuid(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) 
                ? null 
                : dbFactory.Find<SalesOrderItemsAttributes>("WHERE SalesOrderUuid = @0 ORDER BY RowNum ", SalesOrderUuid).ToList();

        public virtual bool SaveSalesOrderItemsAttributes(IList<SalesOrderItemsAttributes> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteSalesOrderItemsAttributes(IList<SalesOrderItemsAttributes> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<SalesOrderItemsAttributes>> GetSalesOrderItemsAttributesBySalesOrderUuidAsync(string SalesOrderUuid) =>
            (string.IsNullOrEmpty(SalesOrderUuid)) 
                ? null
                : (await dbFactory.FindAsync<SalesOrderItemsAttributes>("WHERE SalesOrderUuid = @0 ORDER BY RowNum ", SalesOrderUuid)).ToList();

        public virtual async Task<bool> SaveSalesOrderItemsAttributesAsync(IList<SalesOrderItemsAttributes> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteSalesOrderItemsAttributesAsync(IList<SalesOrderItemsAttributes> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<SalesOrderItemsAttributes> CheckIntegritySalesOrderItemsAttributes()
        {
            if (SalesOrderItemsAttributes is null || SalesOrderHeader is null) 
                return SalesOrderItemsAttributes;
            var seq = 0;
            SalesOrderItemsAttributes.RemoveEmpty();
            var children = SalesOrderItemsAttributes.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.SalesOrderUuid != SalesOrderHeader.SalesOrderUuid)
                    child.SalesOrderUuid = SalesOrderHeader.SalesOrderUuid;
            }
            return children;
        }


        #endregion SalesOrderItemsAttributes - Generated 


    }
}



