    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a CustomerDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class CustomerDataDtoMapperDefault : IDtoMapper<CustomerData, CustomerDataDto> 
    {
        #region read from dto to data

        public virtual CustomerData ReadDto(CustomerData data, CustomerDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new CustomerData();
                data.New();
            }

			if (dto.Customer != null)
			{
				if (data.Customer is null)
					data.Customer = data.NewCustomer();
				ReadCustomer(data.Customer, dto.Customer);
			}
			if (dto.CustomerAddress != null)
			{
				if (data.CustomerAddress is null)
					data.CustomerAddress = new List<CustomerAddress>();
				ReadCustomerAddress(data.CustomerAddress, dto.CustomerAddress);
			}
			if (dto.CustomerAttributes != null)
			{
				if (data.CustomerAttributes is null)
					data.CustomerAttributes = data.NewCustomerAttributes();
				ReadCustomerAttributes(data.CustomerAttributes, dto.CustomerAttributes);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadCustomer(Customer data, CustomerDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasDigit_seller_id) data.Digit_seller_id = dto.Digit_seller_id;
			if (dto.HasCustomerUuid) data.CustomerUuid = dto.CustomerUuid;
			if (dto.HasCustomerNum) data.CustomerNum = dto.CustomerNum;
			if (dto.HasCustomerName) data.CustomerName = dto.CustomerName;
			if (dto.HasContact) data.Contact = dto.Contact;
			if (dto.HasPhone1) data.Phone1 = dto.Phone1;
			if (dto.HasPhone2) data.Phone2 = dto.Phone2;
			if (dto.HasPhone3) data.Phone3 = dto.Phone3;
			if (dto.HasPhone4) data.Phone4 = dto.Phone4;
			if (dto.HasEmail) data.Email = dto.Email;
			if (dto.HasCustomerType) data.CustomerType = dto.CustomerType;
			if (dto.HasCustomerStatus) data.CustomerStatus = dto.CustomerStatus;
			if (dto.HasBusinessType) data.BusinessType = dto.BusinessType;
			if (dto.HasPriceRule) data.PriceRule = dto.PriceRule;
			if (dto.HasFirstDate) data.FirstDate = dto.FirstDate.ToDateTime();
			if (dto.HasCurrency) data.Currency = dto.Currency;
			if (dto.HasCreditLimit) data.CreditLimit = dto.CreditLimit.ToDecimal();
			if (dto.HasTaxRate) data.TaxRate = dto.TaxRate;
			if (dto.HasDiscountRate) data.DiscountRate = dto.DiscountRate;
			if (dto.HasShippingCarrier) data.ShippingCarrier = dto.ShippingCarrier;
			if (dto.HasShippingClass) data.ShippingClass = dto.ShippingClass;
			if (dto.HasShippingAccount) data.ShippingAccount = dto.ShippingAccount;
			if (dto.HasPriority) data.Priority = dto.Priority;
			if (dto.HasArea) data.Area = dto.Area;
			if (dto.HasTaxId) data.TaxId = dto.TaxId;
			if (dto.HasResaleLicense) data.ResaleLicense = dto.ResaleLicense;
			if (dto.HasClassCode) data.ClassCode = dto.ClassCode;
			if (dto.HasDepartmentCode) data.DepartmentCode = dto.DepartmentCode;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			return;
		}
		protected virtual void ReadCustomerAddress(IEnumerable<CustomerAddress> data, IEnumerable<CustomerAddressDto> dto)
		{
			if (data is null || dto is null)
				return;
			return;
		}
		protected virtual void ReadCustomerAttributes(CustomerAttributes data, CustomerAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasCustomerUuid) data.CustomerUuid = dto.CustomerUuid;
			if (dto.HasJsonFields) data.JsonFields = dto.JsonFields;

			#endregion read properties

			return;
		}

        #endregion read from dto to data

        #region write to dto from data

        public virtual CustomerDataDto WriteDto(CustomerData data, CustomerDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new CustomerDataDto();

            data.CheckIntegrity();

			if (data.Customer != null)
			{
				dto.Customer = new CustomerDto();
				WriteCustomer(data.Customer, dto.Customer);
			}
			if (data.CustomerAddress != null)
			{
				dto.CustomerAddress = new List<CustomerAddressDto>();
				WriteCustomerAddress(data.CustomerAddress, dto.CustomerAddress);
			}
			if (data.CustomerAttributes != null)
			{
				dto.CustomerAttributes = new CustomerAttributesDto();
				WriteCustomerAttributes(data.CustomerAttributes, dto.CustomerAttributes);
			}
            return dto;
        }

		protected virtual void WriteCustomer(Customer data, CustomerDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.Digit_seller_id = data.Digit_seller_id;
			dto.CustomerUuid = data.CustomerUuid;
			dto.CustomerNum = data.CustomerNum;
			dto.CustomerName = data.CustomerName;
			dto.Contact = data.Contact;
			dto.Phone1 = data.Phone1;
			dto.Phone2 = data.Phone2;
			dto.Phone3 = data.Phone3;
			dto.Phone4 = data.Phone4;
			dto.Email = data.Email;
			dto.CustomerType = data.CustomerType;
			dto.CustomerStatus = data.CustomerStatus;
			dto.BusinessType = data.BusinessType;
			dto.PriceRule = data.PriceRule;
			dto.FirstDate = data.FirstDate;
			dto.Currency = data.Currency;
			dto.CreditLimit = data.CreditLimit;
			dto.TaxRate = data.TaxRate;
			dto.DiscountRate = data.DiscountRate;
			dto.ShippingCarrier = data.ShippingCarrier;
			dto.ShippingClass = data.ShippingClass;
			dto.ShippingAccount = data.ShippingAccount;
			dto.Priority = data.Priority;
			dto.Area = data.Area;
			dto.TaxId = data.TaxId;
			dto.ResaleLicense = data.ResaleLicense;
			dto.ClassCode = data.ClassCode;
			dto.DepartmentCode = data.DepartmentCode;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}
		protected virtual void WriteCustomerAddress(IEnumerable<CustomerAddress> data, IEnumerable<CustomerAddressDto> dto)
		{
			if (data is null || dto is null)
				return;

			var dataList = data.ToList();
			var dtoList = dto.ToList();
			dtoList.Clear();

			#region write all list items and properties with null

			foreach (var itemData in dataList)
			{
				if (itemData is null) continue;
				var obj = new CustomerAddressDto()
				{
					RowNum = itemData.RowNum,
					AddressUuid = itemData.AddressUuid,
					CustomerUuid = itemData.CustomerUuid,
					AddressCode = itemData.AddressCode,
					AddressType = itemData.AddressType,
					Description = itemData.Description,
					Name = itemData.Name,
					FirstName = itemData.FirstName,
					LastName = itemData.LastName,
					Suffix = itemData.Suffix,
					Company = itemData.Company,
					CompanyJobTitle = itemData.CompanyJobTitle,
					Attention = itemData.Attention,
					AddressLine1 = itemData.AddressLine1,
					AddressLine2 = itemData.AddressLine2,
					AddressLine3 = itemData.AddressLine3,
					City = itemData.City,
					State = itemData.State,
					StateFullName = itemData.StateFullName,
					PostalCode = itemData.PostalCode,
					PostalCodeExt = itemData.PostalCodeExt,
					County = itemData.County,
					Country = itemData.Country,
					Email = itemData.Email,
					DaytimePhone = itemData.DaytimePhone,
					NightPhone = itemData.NightPhone,
					EnterDateUtc = itemData.EnterDateUtc,
					UpdateDateUtc = itemData.UpdateDateUtc,
					EnterBy = itemData.EnterBy,
					UpdateBy = itemData.UpdateBy,
					DigitBridgeGuid = itemData.DigitBridgeGuid,
				};
				dtoList.Add(obj);
			}

			#endregion write all list items and properties with null
			return;
		}
		protected virtual void WriteCustomerAttributes(CustomerAttributes data, CustomerAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.CustomerUuid = data.CustomerUuid;
			dto.JsonFields = data.JsonFields;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}

        #endregion write to dto from data

    }
}



