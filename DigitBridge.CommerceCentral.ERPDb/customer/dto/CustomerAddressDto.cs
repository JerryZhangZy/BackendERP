
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Xml.Serialization;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a CustomerAddress Dto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class CustomerAddressDto
    {
        public long? RowNum { get; set; }
        public string UniqueId { get; set; }
        public DateTime? EnterDateUtc { get; set; }
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

        [StringLength(50, ErrorMessage = "The AddressUuid value cannot exceed 50 characters. ")]
        public string AddressUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAddressUuid => AddressUuid != null;

        [StringLength(50, ErrorMessage = "The CustomerUuid value cannot exceed 50 characters. ")]
        public string CustomerUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCustomerUuid => CustomerUuid != null;

        [StringLength(50, ErrorMessage = "The AddressCode value cannot exceed 50 characters. ")]
        public string AddressCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAddressCode => AddressCode != null;

        public int? AddressType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAddressType => AddressType != null;

        [StringLength(200, ErrorMessage = "The Description value cannot exceed 200 characters. ")]
        public string Description { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDescription => Description != null;

        [StringLength(100, ErrorMessage = "The Name value cannot exceed 100 characters. ")]
        public string Name { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasName => Name != null;

        [StringLength(50, ErrorMessage = "The FirstName value cannot exceed 50 characters. ")]
        public string FirstName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasFirstName => FirstName != null;

        [StringLength(50, ErrorMessage = "The LastName value cannot exceed 50 characters. ")]
        public string LastName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLastName => LastName != null;

        [StringLength(50, ErrorMessage = "The Suffix value cannot exceed 50 characters. ")]
        public string Suffix { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSuffix => Suffix != null;

        [StringLength(100, ErrorMessage = "The Company value cannot exceed 100 characters. ")]
        public string Company { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCompany => Company != null;

        [StringLength(100, ErrorMessage = "The CompanyJobTitle value cannot exceed 100 characters. ")]
        public string CompanyJobTitle { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCompanyJobTitle => CompanyJobTitle != null;

        [StringLength(100, ErrorMessage = "The Attention value cannot exceed 100 characters. ")]
        public string Attention { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAttention => Attention != null;

        [StringLength(200, ErrorMessage = "The AddressLine1 value cannot exceed 200 characters. ")]
        public string AddressLine1 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAddressLine1 => AddressLine1 != null;

        [StringLength(200, ErrorMessage = "The AddressLine2 value cannot exceed 200 characters. ")]
        public string AddressLine2 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAddressLine2 => AddressLine2 != null;

        [StringLength(200, ErrorMessage = "The AddressLine3 value cannot exceed 200 characters. ")]
        public string AddressLine3 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAddressLine3 => AddressLine3 != null;

        [StringLength(100, ErrorMessage = "The City value cannot exceed 100 characters. ")]
        public string City { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCity => City != null;

        [StringLength(50, ErrorMessage = "The State value cannot exceed 50 characters. ")]
        public string State { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasState => State != null;

        [StringLength(100, ErrorMessage = "The StateFullName value cannot exceed 100 characters. ")]
        public string StateFullName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasStateFullName => StateFullName != null;

        [StringLength(50, ErrorMessage = "The PostalCode value cannot exceed 50 characters. ")]
        public string PostalCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPostalCode => PostalCode != null;

        [StringLength(50, ErrorMessage = "The PostalCodeExt value cannot exceed 50 characters. ")]
        public string PostalCodeExt { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPostalCodeExt => PostalCodeExt != null;

        [StringLength(100, ErrorMessage = "The County value cannot exceed 100 characters. ")]
        public string County { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCounty => County != null;

        [StringLength(100, ErrorMessage = "The Country value cannot exceed 100 characters. ")]
        public string Country { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCountry => Country != null;

        [StringLength(100, ErrorMessage = "The Email value cannot exceed 100 characters. ")]
        public string Email { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEmail => Email != null;

        [StringLength(50, ErrorMessage = "The DaytimePhone value cannot exceed 50 characters. ")]
        public string DaytimePhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDaytimePhone => DaytimePhone != null;

        [StringLength(50, ErrorMessage = "The NightPhone value cannot exceed 50 characters. ")]
        public string NightPhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasNightPhone => NightPhone != null;

        [DataType(DataType.DateTime)]
        public DateTime? UpdateDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateDateUtc => UpdateDateUtc != null;

        [StringLength(100, ErrorMessage = "The EnterBy value cannot exceed 100 characters. ")]
        public string EnterBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEnterBy => EnterBy != null;

        [StringLength(100, ErrorMessage = "The UpdateBy value cannot exceed 100 characters. ")]
        public string UpdateBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateBy => UpdateBy != null;


        #endregion Properties - Generated 

        #region Children - Generated 

        #endregion Children - Generated 

    }
}



