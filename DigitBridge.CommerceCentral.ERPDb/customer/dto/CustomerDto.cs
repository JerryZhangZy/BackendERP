
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Enums;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;

using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a Customer Dto Class.
    /// NOTE: This class is generated from a T4 template Once - if you want re-generate it, you need delete cs file and generate again
    /// </summary>
    [Serializable()]
    public class CustomerDto
    {
        public long? RowNum { get; set; }
        public string UniqueId { get; set; }
        public DateTime? EnterDateUtc { get; set; }
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

		/// <summary>
		/// (Readonly) Database Number. <br> Display: false, Editable: false.
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Database Number. <br> Display: false, Editable: false.")]
        public int? DatabaseNum { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDatabaseNum => DatabaseNum != null;

		/// <summary>
		/// (Readonly) Login user account. <br> Display: false, Editable: false.
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Login user account. <br> Display: false, Editable: false.")]
        public int? MasterAccountNum { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasMasterAccountNum => MasterAccountNum != null;

		/// <summary>
		/// (Readonly) Login user profile. <br> Display: false, Editable: false.
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Login user profile. <br> Display: false, Editable: false.")]
        public int? ProfileNum { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasProfileNum => ProfileNum != null;

		/// <summary>
		/// Digit bridge seller_id. <br> Title: Digit Seller Id, Display: true, Editable: true.
		/// </summary>
		[OpenApiPropertyDescription("Digit bridge seller_id. <br> Title: Digit Seller Id, Display: true, Editable: true.")]
        [StringLength(50, ErrorMessage = "The Digit_seller_id value cannot exceed 50 characters. ")]
        public string Digit_seller_id { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDigit_seller_id => Digit_seller_id != null;

		/// <summary>
		/// Customer uuid. <br> Display: false, Editable: false.
		/// </summary>
		[OpenApiPropertyDescription("Customer uuid. <br> Display: false, Editable: false.")]
        [StringLength(50, ErrorMessage = "The CustomerUuid value cannot exceed 50 characters. ")]
        public string CustomerUuid { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCustomerUuid => CustomerUuid != null;

		/// <summary>
		/// Readable customer number, unique in same database and profile. <br> Parameter should pass ProfileNum-CustomerCode. <br> Title: Customer Number, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Readable customer number, unique in same database and profile. <br> Parameter should pass ProfileNum-CustomerCode. <br> Title: Customer Number, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The CustomerCode value cannot exceed 50 characters. ")]
        public string CustomerCode { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCustomerCode => CustomerCode != null;

		/// <summary>
		/// Customer name. <br> Title: Name, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer name. <br> Title: Name, Display: true, Editable: true")]
        [StringLength(200, ErrorMessage = "The CustomerName value cannot exceed 200 characters. ")]
        public string CustomerName { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCustomerName => CustomerName != null;

		/// <summary>
		/// Customer contact person. <br> Title: Contact, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer contact person. <br> Title: Contact, Display: true, Editable: true")]
        [StringLength(200, ErrorMessage = "The Contact value cannot exceed 200 characters. ")]
        public string Contact { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasContact => Contact != null;

		/// <summary>
		/// Customer contact person 2. <br> Title: Contact 2, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer contact person 2. <br> Title: Contact 2, Display: true, Editable: true")]
        [StringLength(200, ErrorMessage = "The Contact2 value cannot exceed 200 characters. ")]
        public string Contact2 { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasContact2 => Contact2 != null;

		/// <summary>
		/// Customer contact person 3. <br> Title: Contact 3, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer contact person 3. <br> Title: Contact 3, Display: true, Editable: true")]
        [StringLength(200, ErrorMessage = "The Contact3 value cannot exceed 200 characters. ")]
        public string Contact3 { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasContact3 => Contact3 != null;

		/// <summary>
		/// Customer phone 1. <br> Title: Phone, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer phone 1. <br> Title: Phone, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The Phone1 value cannot exceed 50 characters. ")]
        public string Phone1 { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPhone1 => Phone1 != null;

		/// <summary>
		/// Customer phone 2. <br> Title: Phone 2, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer phone 2. <br> Title: Phone 2, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The Phone2 value cannot exceed 50 characters. ")]
        public string Phone2 { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPhone2 => Phone2 != null;

		/// <summary>
		/// Customer phone 3. <br> Title: Phone 3, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer phone 3. <br> Title: Phone 3, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The Phone3 value cannot exceed 50 characters. ")]
        public string Phone3 { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPhone3 => Phone3 != null;

		/// <summary>
		/// Customer phone 4. <br> Title: Fax, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer phone 4. <br> Title: Fax, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The Phone4 value cannot exceed 50 characters. ")]
        public string Phone4 { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPhone4 => Phone4 != null;

		/// <summary>
		/// Customer email. <br> Title: Email, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer email. <br> Title: Email, Display: true, Editable: true")]
        [StringLength(200, ErrorMessage = "The Email value cannot exceed 200 characters. ")]
        public string Email { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasEmail => Email != null;

		/// <summary>
		/// Customer WebSite. <br> Title: WebSite, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer WebSite. <br> Title: WebSite, Display: true, Editable: true")]
        [StringLength(200, ErrorMessage = "The WebSite value cannot exceed 200 characters. ")]
        public string WebSite { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasWebSite => WebSite != null;

		/// <summary>
		/// Customer type. <br> Title: Type, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer type. <br> Title: Type, Display: true, Editable: true")]
        public int? CustomerType { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCustomerType => CustomerType != null;

		/// <summary>
		/// Customer status. <br> Title: Status, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer status. <br> Title: Status, Display: true, Editable: true")]
        public int? CustomerStatus { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCustomerStatus => CustomerStatus != null;

		/// <summary>
		/// Customer business type. <br> Title: Business Type, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer business type. <br> Title: Business Type, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The BusinessType value cannot exceed 50 characters. ")]
        public string BusinessType { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasBusinessType => BusinessType != null;

		/// <summary>
		/// Customer default price rule. <br> Title: Price Rule, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer default price rule. <br> Title: Price Rule, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The PriceRule value cannot exceed 50 characters. ")]
        public string PriceRule { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPriceRule => PriceRule != null;

		/// <summary>
		/// Customer create date. <br> Title: Since, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer create date. <br> Title: Since, Display: true, Editable: true")]
        [DataType(DataType.DateTime)]
        public DateTime? FirstDate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasFirstDate => FirstDate != null;

		/// <summary>
		/// Customer default Currency. <br> Title: Currency, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer default Currency. <br> Title: Currency, Display: true, Editable: true")]
        [StringLength(10, ErrorMessage = "The Currency value cannot exceed 10 characters. ")]
        public string Currency { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCurrency => Currency != null;

		/// <summary>
		/// Customer Credit Limit. <br> Title: Credit Limit, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Credit Limit. <br> Title: Credit Limit, Display: true, Editable: true")]
        public decimal? CreditLimit { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCreditLimit => CreditLimit != null;

		/// <summary>
		/// Default Tax rate. <br> Title: Tax Rate, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Default Tax rate. <br> Title: Tax Rate, Display: true, Editable: true")]
        public decimal? TaxRate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasTaxRate => TaxRate != null;

		/// <summary>
		/// Customer default discount rate. <br> Title: Discount Rate, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer default discount rate. <br> Title: Discount Rate, Display: true, Editable: true")]
        public decimal? DiscountRate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDiscountRate => DiscountRate != null;

		/// <summary>
		/// Customer default ShippingCarrier. <br> Title: Shipping Carrier, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer default ShippingCarrier. <br> Title: Shipping Carrier, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The ShippingCarrier value cannot exceed 50 characters. ")]
        public string ShippingCarrier { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasShippingCarrier => ShippingCarrier != null;

		/// <summary>
		/// Customer default ShippingClass. <br> Title: Shipping Method, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer default ShippingClass. <br> Title: Shipping Method, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The ShippingClass value cannot exceed 50 characters. ")]
        public string ShippingClass { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasShippingClass => ShippingClass != null;

		/// <summary>
		/// Customer default Shipping Account. <br> Title: Shipping Account, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer default Shipping Account. <br> Title: Shipping Account, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The ShippingAccount value cannot exceed 50 characters. ")]
        public string ShippingAccount { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasShippingAccount => ShippingAccount != null;

		/// <summary>
		/// Customer Priority. <br> Title: Priority, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Priority. <br> Title: Priority, Display: true, Editable: true")]
        [StringLength(10, ErrorMessage = "The Priority value cannot exceed 10 characters. ")]
        public string Priority { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPriority => Priority != null;

		/// <summary>
		/// Customer Area. <br> Title: Area, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Area. <br> Title: Area, Display: true, Editable: true")]
        [StringLength(20, ErrorMessage = "The Area value cannot exceed 20 characters. ")]
        public string Area { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasArea => Area != null;

		/// <summary>
		/// Customer Region. <br> Title: Region, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Region. <br> Title: Region, Display: true, Editable: true")]
        [StringLength(20, ErrorMessage = "The Region value cannot exceed 20 characters. ")]
        public string Region { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasRegion => Region != null;

		/// <summary>
		/// Customer Districtn. <br> Districtn: Area, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Districtn. <br> Districtn: Area, Display: true, Editable: true")]
        [StringLength(20, ErrorMessage = "The Districtn value cannot exceed 20 characters. ")]
        public string Districtn { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDistrictn => Districtn != null;

		/// <summary>
		/// Customer Zone. <br> Title: Zone, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Zone. <br> Title: Zone, Display: true, Editable: true")]
        [StringLength(20, ErrorMessage = "The Zone value cannot exceed 20 characters. ")]
        public string Zone { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasZone => Zone != null;

		/// <summary>
		/// Customer Tax Id. <br> Title: Tax Id, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Tax Id. <br> Title: Tax Id, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The TaxId value cannot exceed 50 characters. ")]
        public string TaxId { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasTaxId => TaxId != null;

		/// <summary>
		/// Customer Resale License number. <br> Title: Resale License, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Resale License number. <br> Title: Resale License, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The ResaleLicense value cannot exceed 50 characters. ")]
        public string ResaleLicense { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasResaleLicense => ResaleLicense != null;

		/// <summary>
		/// Customer Class. <br> Title: Class, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Class. <br> Title: Class, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The ClassCode value cannot exceed 50 characters. ")]
        public string ClassCode { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasClassCode => ClassCode != null;

		/// <summary>
		/// Customer Department. <br> Title: Department, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Department. <br> Title: Department, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The DepartmentCode value cannot exceed 50 characters. ")]
        public string DepartmentCode { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDepartmentCode => DepartmentCode != null;

		/// <summary>
		/// Customer Division. <br> Title: Division, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Division. <br> Title: Division, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The DivisionCode value cannot exceed 50 characters. ")]
        public string DivisionCode { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDivisionCode => DivisionCode != null;

		/// <summary>
		/// Customer Source. <br> Title: Source, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Customer Source. <br> Title: Source, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The SourceCode value cannot exceed 50 characters. ")]
        public string SourceCode { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasSourceCode => SourceCode != null;

		/// <summary>
		/// Payment terms. <br> Title: Terms, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Payment terms. <br> Title: Terms, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The Terms value cannot exceed 50 characters. ")]
        public string Terms { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasTerms => Terms != null;

		/// <summary>
		/// Payment terms days. <br> Title: Days, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Payment terms days. <br> Title: Days, Display: true, Editable: true")]
        public int? TermsDays { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasTermsDays => TermsDays != null;

		/// <summary>
		/// (Readonly) Last update date time. <br> Title: Update At, Display: true, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Last update date time. <br> Title: Update At, Display: true, Editable: false")]
        [DataType(DataType.DateTime)]
        public DateTime? UpdateDateUtc { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasUpdateDateUtc => UpdateDateUtc != null;

		/// <summary>
		/// (Readonly) User who created this order. <br> Title: Created By, Display: true, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) User who created this order. <br> Title: Created By, Display: true, Editable: false")]
        [StringLength(100, ErrorMessage = "The EnterBy value cannot exceed 100 characters. ")]
        public string EnterBy { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasEnterBy => EnterBy != null;

		/// <summary>
		/// (Readonly) Last updated user. <br> Title: Update By, Display: true, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Last updated user. <br> Title: Update By, Display: true, Editable: false")]
        [StringLength(100, ErrorMessage = "The UpdateBy value cannot exceed 100 characters. ")]
        public string UpdateBy { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasUpdateBy => UpdateBy != null;



        #endregion Properties - Generated 

        #region Children - Generated 

        #endregion Children - Generated 

    }
}



