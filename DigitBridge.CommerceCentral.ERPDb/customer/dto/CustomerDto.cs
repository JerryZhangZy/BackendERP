
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a Customer Dto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class CustomerDto
    {
        public long? RowNum { get; set; }
        public string UniqueId { get; set; }
        public DateTime? EnterDateUtc { get; set; }
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

        public int? DatabaseNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDatabaseNum => DatabaseNum != null;

        public int? MasterAccountNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMasterAccountNum => MasterAccountNum != null;

        public int? ProfileNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasProfileNum => ProfileNum != null;

        [StringLength(50, ErrorMessage = "The Digit_seller_id value cannot exceed 50 characters. ")]
        public string Digit_seller_id { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDigit_seller_id => Digit_seller_id != null;

        [StringLength(50, ErrorMessage = "The CustomerUuid value cannot exceed 50 characters. ")]
        public string CustomerUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCustomerUuid => CustomerUuid != null;

        [StringLength(50, ErrorMessage = "The CustomerNum value cannot exceed 50 characters. ")]
        public string CustomerNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCustomerNum => CustomerNum != null;

        [StringLength(200, ErrorMessage = "The CustomerName value cannot exceed 200 characters. ")]
        public string CustomerName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCustomerName => CustomerName != null;

        [StringLength(200, ErrorMessage = "The Contact value cannot exceed 200 characters. ")]
        public string Contact { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasContact => Contact != null;

        [StringLength(50, ErrorMessage = "The Phone1 value cannot exceed 50 characters. ")]
        public string Phone1 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPhone1 => Phone1 != null;

        [StringLength(50, ErrorMessage = "The Phone2 value cannot exceed 50 characters. ")]
        public string Phone2 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPhone2 => Phone2 != null;

        [StringLength(50, ErrorMessage = "The Phone3 value cannot exceed 50 characters. ")]
        public string Phone3 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPhone3 => Phone3 != null;

        [StringLength(50, ErrorMessage = "The Phone4 value cannot exceed 50 characters. ")]
        public string Phone4 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPhone4 => Phone4 != null;

        [StringLength(200, ErrorMessage = "The Email value cannot exceed 200 characters. ")]
        public string Email { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEmail => Email != null;

        public int? CustomerType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCustomerType => CustomerType != null;

        public int? CustomerStatus { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCustomerStatus => CustomerStatus != null;

        [StringLength(50, ErrorMessage = "The BusinessType value cannot exceed 50 characters. ")]
        public string BusinessType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBusinessType => BusinessType != null;

        [StringLength(50, ErrorMessage = "The PriceRule value cannot exceed 50 characters. ")]
        public string PriceRule { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPriceRule => PriceRule != null;

        [DataType(DataType.DateTime)]
        public DateTime? FirstDate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasFirstDate => FirstDate != null;

        [StringLength(10, ErrorMessage = "The Currency value cannot exceed 10 characters. ")]
        public string Currency { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCurrency => Currency != null;

        public decimal? CreditLimit { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCreditLimit => CreditLimit != null;

        public decimal? TaxRate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTaxRate => TaxRate != null;

        public decimal? DiscountRate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDiscountRate => DiscountRate != null;

        [StringLength(50, ErrorMessage = "The ShippingCarrier value cannot exceed 50 characters. ")]
        public string ShippingCarrier { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingCarrier => ShippingCarrier != null;

        [StringLength(50, ErrorMessage = "The ShippingClass value cannot exceed 50 characters. ")]
        public string ShippingClass { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingClass => ShippingClass != null;

        [StringLength(50, ErrorMessage = "The ShippingAccount value cannot exceed 50 characters. ")]
        public string ShippingAccount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingAccount => ShippingAccount != null;

        [StringLength(10, ErrorMessage = "The Priority value cannot exceed 10 characters. ")]
        public string Priority { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPriority => Priority != null;

        [StringLength(20, ErrorMessage = "The Area value cannot exceed 20 characters. ")]
        public string Area { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasArea => Area != null;

        [StringLength(50, ErrorMessage = "The TaxId value cannot exceed 50 characters. ")]
        public string TaxId { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTaxId => TaxId != null;

        [StringLength(50, ErrorMessage = "The ResaleLicense value cannot exceed 50 characters. ")]
        public string ResaleLicense { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasResaleLicense => ResaleLicense != null;

        [StringLength(50, ErrorMessage = "The ClassCode value cannot exceed 50 characters. ")]
        public string ClassCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasClassCode => ClassCode != null;

        [StringLength(50, ErrorMessage = "The DepartmentCode value cannot exceed 50 characters. ")]
        public string DepartmentCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDepartmentCode => DepartmentCode != null;

        [DataType(DataType.DateTime)]
        public DateTime? UpdateDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateDateUtc => UpdateDateUtc != null;

        [StringLength(100, ErrorMessage = "The EnterBy value cannot exceed 100 characters. ")]
        public string EnterBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEnterBy => EnterBy != null;



        #endregion Properties - Generated 

        #region Children - Generated 

        #endregion Children - Generated 

    }
}



