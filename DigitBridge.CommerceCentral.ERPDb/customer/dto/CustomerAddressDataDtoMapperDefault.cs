    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a CustomerAddressDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class CustomerAddressDataDtoMapperDefault : IDtoMapper<CustomerAddressData, CustomerAddressDataDto> 
    {
        #region read from dto to data

        public virtual CustomerAddressData ReadDto(CustomerAddressData data, CustomerAddressDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new CustomerAddressData();
                data.New();
            }

			if (dto.CustomerAddress != null)
			{
				if (data.CustomerAddress is null)
					data.CustomerAddress = data.NewCustomerAddress();
				ReadCustomerAddress(data.CustomerAddress, dto.CustomerAddress);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadCustomerAddress(CustomerAddress data, CustomerAddressDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties
			 data.RowNum = dto.RowNum.ToLong();
			if (dto.HasAddressUuid) data.AddressUuid = dto.AddressUuid;
			if (dto.HasCustomerUuid) data.CustomerUuid = dto.CustomerUuid;
			if (dto.HasAddressCode) data.AddressCode = dto.AddressCode;
			if (dto.HasAddressType) data.AddressType = dto.AddressType.ToInt();
			if (dto.HasDescription) data.Description = dto.Description;
			if (dto.HasName) data.Name = dto.Name;
			if (dto.HasFirstName) data.FirstName = dto.FirstName;
			if (dto.HasLastName) data.LastName = dto.LastName;
			if (dto.HasSuffix) data.Suffix = dto.Suffix;
			if (dto.HasCompany) data.Company = dto.Company;
			if (dto.HasCompanyJobTitle) data.CompanyJobTitle = dto.CompanyJobTitle;
			if (dto.HasAttention) data.Attention = dto.Attention;
			if (dto.HasAddressLine1) data.AddressLine1 = dto.AddressLine1;
			if (dto.HasAddressLine2) data.AddressLine2 = dto.AddressLine2;
			if (dto.HasAddressLine3) data.AddressLine3 = dto.AddressLine3;
			if (dto.HasCity) data.City = dto.City;
			if (dto.HasState) data.State = dto.State;
			if (dto.HasStateFullName) data.StateFullName = dto.StateFullName;
			if (dto.HasPostalCode) data.PostalCode = dto.PostalCode;
			if (dto.HasPostalCodeExt) data.PostalCodeExt = dto.PostalCodeExt;
			if (dto.HasCounty) data.County = dto.County;
			if (dto.HasCountry) data.Country = dto.Country;
			if (dto.HasEmail) data.Email = dto.Email;
			if (dto.HasDaytimePhone) data.DaytimePhone = dto.DaytimePhone;
			if (dto.HasNightPhone) data.NightPhone = dto.NightPhone;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual CustomerAddressDataDto WriteDto(CustomerAddressData data, CustomerAddressDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new CustomerAddressDataDto();

            data.CheckIntegrity();

			if (data.CustomerAddress != null)
			{
				dto.CustomerAddress = new CustomerAddressDto();
				WriteCustomerAddress(data.CustomerAddress, dto.CustomerAddress);
			}
            return dto;
        }

		protected virtual void WriteCustomerAddress(CustomerAddress data, CustomerAddressDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.AddressUuid = data.AddressUuid;
			dto.CustomerUuid = data.CustomerUuid;
			dto.AddressCode = data.AddressCode;
			dto.AddressType = data.AddressType;
			dto.Description = data.Description;
			dto.Name = data.Name;
			dto.FirstName = data.FirstName;
			dto.LastName = data.LastName;
			dto.Suffix = data.Suffix;
			dto.Company = data.Company;
			dto.CompanyJobTitle = data.CompanyJobTitle;
			dto.Attention = data.Attention;
			dto.AddressLine1 = data.AddressLine1;
			dto.AddressLine2 = data.AddressLine2;
			dto.AddressLine3 = data.AddressLine3;
			dto.City = data.City;
			dto.State = data.State;
			dto.StateFullName = data.StateFullName;
			dto.PostalCode = data.PostalCode;
			dto.PostalCodeExt = data.PostalCodeExt;
			dto.County = data.County;
			dto.Country = data.Country;
			dto.Email = data.Email;
			dto.DaytimePhone = data.DaytimePhone;
			dto.NightPhone = data.NightPhone;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}


        #endregion write to dto from data

    }
}



