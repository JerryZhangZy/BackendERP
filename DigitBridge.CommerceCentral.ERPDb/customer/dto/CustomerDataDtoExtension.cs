//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using CsvHelper;
using System.IO;

using Bogus;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a CustomerDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class CustomerDataDtoExtension
    {
        /// <summary>
        /// Merge CustomerDataDto header objects to one dynamic object
        /// </summary>
        /// <param name="dto">CustomerDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>Single dynamic object include all properties of Dto header objects</returns>
        public static IEnumerable<dynamic> MergeHeaderRecord(this CustomerDataDto dto, bool withHeaderText = false)
        {
            var result = new List<dynamic>();
			if (!dto.HasCustomer)
				return result;
			//TODO change to merge Dto children object
			if (withHeaderText)
                result.Add(dto.Customer.MergeName(dto.CustomerAttributes));
            result.Add(dto.Customer.Merge(dto.CustomerAttributes));
            return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeDetailRecord(this CustomerDataDto dto, bool withHeaderText = false)
        {
			//TODO change to merge Dto children object
			var result = new List<dynamic>();
			if (!dto.HasCustomerAddress)
                return result;

			var addressList = new CustomerAddressDto();

            if (withHeaderText)
                result.Add(addressList.MergeName(addressList));

            foreach (var item in dto.CustomerAddress)
            {
                result.Add(item.Merge(item));
            }
            return result;
        }


        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <param name="count">Generate multiple fake data</param>
        /// <returns>list for Fake data</returns>
        public static IList<CustomerDataDto> GetFakerData(this CustomerDataDto dto, int count)
        {
            var obj = new CustomerDataDto();
            var datas = new List<CustomerDataDto>();
            for (int i = 0; i < count; i++)
                datas.Add(obj.GetFakerData());
            return datas;
        }

        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <returns>single Fake data</returns>
        public static CustomerDataDto GetFakerData(this CustomerDataDto dto)
        {
            var data = new CustomerDataDto();
			data.Customer = new CustomerDto().GetFaker().Generate();
			data.CustomerAddress = new CustomerAddressDto().GetFaker().Generate(3);
			data.CustomerAttributes = new CustomerAttributesDto().GetFaker().Generate();
            return data;
        }


		/// <summary>
		/// Get faker object for CustomerDto
		/// </summary>
		/// <param name="dto">CustomerDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<CustomerDto> GetFaker(this CustomerDto dto)
		{
			#region faker data rules
			return new Faker<CustomerDto>()
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.Digit_seller_id, f => f.Random.Guid().ToString())
				.RuleFor(u => u.CustomerUuid, f =>null)
				.RuleFor(u => u.CustomerCode, f => f.Lorem.Word())
				.RuleFor(u => u.CustomerName, f => f.Company.CompanyName())
				.RuleFor(u => u.Contact, f => f.Name.FullName())
				.RuleFor(u => u.Contact2, f => f.Name.FullName())
				.RuleFor(u => u.Contact3, f => f.Name.FullName())
				.RuleFor(u => u.Phone1, f => f.Phone.PhoneNumber())
				.RuleFor(u => u.Phone2, f => f.Phone.PhoneNumber())
				.RuleFor(u => u.Phone3, f => f.Phone.PhoneNumber())
				.RuleFor(u => u.Phone4, f => f.Phone.PhoneNumber())
				.RuleFor(u => u.Email, f => f.Internet.Email())
				.RuleFor(u => u.WebSite, f => f.Internet.DomainName())
				.RuleFor(u => u.CustomerType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.CustomerStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.BusinessType, f => f.Random.AlphaNumeric(10))
				.RuleFor(u => u.PriceRule, f => f.PickRandom(FakerExtension.PriceRule))
				.RuleFor(u => u.FirstDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.Currency, f => "USD")
				.RuleFor(u => u.CreditLimit, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TaxRate, f => f.Random.Decimal(0.01m, 0.99m, 2))
				.RuleFor(u => u.DiscountRate, f => f.Random.Decimal(0.01m, 0.99m, 2))
				.RuleFor(u => u.ShippingCarrier, f =>"Fedex")
				.RuleFor(u => u.ShippingClass, f =>"Fedex")
				.RuleFor(u => u.ShippingAccount, f => f.Random.AlphaNumeric(10))
				.RuleFor(u => u.Priority, f => f.Lorem.Word().TruncateTo(10))
				.RuleFor(u => u.Area, f => f.Address.State())
				.RuleFor(u => u.Region, f => f.Address.City())
				.RuleFor(u => u.Districtn, f => f.Address.County())
				.RuleFor(u => u.Zone, f => f.Address.County())
				.RuleFor(u => u.TaxId, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ResaleLicense, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.ClassCode, f => f.Lorem.Word())
				.RuleFor(u => u.DepartmentCode, f => f.Lorem.Word())
				.RuleFor(u => u.DivisionCode, f => f.Lorem.Word())
				.RuleFor(u => u.SourceCode, f => f.Lorem.Word())
				.RuleFor(u => u.Terms, f => f.Random.Int(1,100).ToString())
				.RuleFor(u => u.TermsDays, f => f.Random.Int(1, 100))
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for CustomerAddressDto
		/// </summary>
		/// <param name="dto">CustomerAddressDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<CustomerAddressDto> GetFaker(this CustomerAddressDto dto)
		{
			#region faker data rules
			return new Faker<CustomerAddressDto>()
				.RuleFor(u => u.AddressUuid, f => null)
				.RuleFor(u => u.CustomerUuid, f =>null)
				.RuleFor(u => u.AddressCode, f => f.Lorem.Word())
				.RuleFor(u => u.AddressType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.Description, f => f.Commerce.ProductName())
				.RuleFor(u => u.Name, f => f.Name.FullName())
				.RuleFor(u => u.FirstName, f => f.Name.FirstName())
				.RuleFor(u => u.LastName, f => f.Name.LastName())
				.RuleFor(u => u.Suffix, f => f.Name.Suffix())
				.RuleFor(u => u.Company, f => f.Company.CompanyName())
				.RuleFor(u => u.CompanyJobTitle, f => f.Name.JobTitle())
				.RuleFor(u => u.Attention, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.AddressLine1, f => f.Address.StreetAddress())
				.RuleFor(u => u.AddressLine2, f => f.Address.SecondaryAddress())
				.RuleFor(u => u.AddressLine3, f => f.Address.SecondaryAddress())
				.RuleFor(u => u.City, f => f.Address.City())
				.RuleFor(u => u.State, f => f.Address.StateAbbr())
				.RuleFor(u => u.StateFullName, f => f.Address.State())
				.RuleFor(u => u.PostalCode, f => f.Address.ZipCode())
				.RuleFor(u => u.PostalCodeExt, f => f.Address.ZipCode())
				.RuleFor(u => u.County, f => f.Address.County())
				.RuleFor(u => u.Country, f => f.Address.Country())
				.RuleFor(u => u.Email, f => f.Internet.Email())
				.RuleFor(u => u.DaytimePhone, f => f.Phone.PhoneNumber())
				.RuleFor(u => u.NightPhone, f => f.Phone.PhoneNumber())
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for CustomerAttributesDto
		/// </summary>
		/// <param name="dto">CustomerAttributesDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<CustomerAttributesDto> GetFaker(this CustomerAttributesDto dto)
		{
			#region faker data rules
			return new Faker<CustomerAttributesDto>()
				.RuleFor(u => u.CustomerUuid, f => null)
				.RuleFor(u => u.Fields, f => f.Random.JObject())
				;
			#endregion faker data rules
		}

    }
}


