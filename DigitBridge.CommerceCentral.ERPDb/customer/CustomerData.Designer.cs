

              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a CustomerData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public partial class CustomerData : StructureRepository<CustomerData>
    {
        public CustomerData() : base() {}
        public CustomerData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [XmlIgnore, JsonIgnore]
        public new bool IsNew => Customer.IsNew;

        [XmlIgnore, JsonIgnore]
        public new string UniqueId => Customer.UniqueId;

        #region CRUD Methods

        public override bool Equals(CustomerData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(CustomerData other)
        {
			if (Customer == null && other.Customer != null || Customer != null && other.Customer == null) 
				return false; 
			if (Customer != null && other.Customer != null && !Customer.Equals(other.Customer)) 
				return false; 
			if (CustomerAddress == null && other.CustomerAddress != null || CustomerAddress != null && other.CustomerAddress == null) 
				return false; 
			if (CustomerAddress != null && other.CustomerAddress != null && !CustomerAddress.EqualsList(other.CustomerAddress)) 
				return false; 
			if (CustomerAttributes == null && other.CustomerAttributes != null || CustomerAttributes != null && other.CustomerAttributes == null) 
				return false; 
			if (CustomerAttributes != null && other.CustomerAttributes != null && !CustomerAttributes.Equals(other.CustomerAttributes)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public virtual CustomerData CheckIntegrity()
        {
			if (Customer is null) return this; 
			Customer.CheckUniqueId(); 
			CheckIntegrityCustomerAddress(); 
			CheckIntegrityCustomerAttributes(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			Customer?.Clear(); 
			CustomerAddress = new List<CustomerAddress>(); 
			ClearCustomerAddressDeleted(); 
			CustomerAttributes?.Clear(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			Customer = NewCustomer(); 
			CustomerAddress = new List<CustomerAddress>(); 
			AddCustomerAddress(NewCustomerAddress()); 
			ClearCustomerAddressDeleted(); 
			CustomerAttributes = NewCustomerAttributes(); 
            return;
        }

        public virtual void CopyFrom(CustomerData data)
        {
			CopyCustomerFrom(data); 
			CopyCustomerAddressFrom(data); 
			CopyCustomerAttributesFrom(data); 
            CheckIntegrity();
            return;
        }

        public override CustomerData Clone()
        {
			var newData = new CustomerData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.Customer.ClearMetaData(); 
			newData.CustomerAddress.ClearMetaData(); 
			newData.CustomerAttributes.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetCustomer(RowNum); 
			if (obj is null) return false; 
			Customer = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string CustomerUuid)
        {
			var obj = GetCustomerByCustomerUuid(CustomerUuid); 
			if (obj is null) return false; 
			Customer = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(Customer.CustomerUuid)) return; 
			CustomerAddress = GetCustomerAddressByCustomerUuid(Customer.CustomerUuid); 
			CustomerAttributes = GetCustomerAttributesByCustomerUuid(Customer.CustomerUuid); 
        }

        public override bool Save()
        {
			if (Customer is null || string.IsNullOrEmpty(Customer.CustomerUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();
			Customer.SetDataBaseFactory(dbFactory);
			if (!Customer.Save()) return false;

			if (CustomerAddress != null) 
				CustomerAddress.SetDataBaseFactory(dbFactory)?.Save();
			var delCustomerAddress = _CustomerAddressDeleted;
			if (delCustomerAddress != null)
				delCustomerAddress.SetDataBaseFactory(dbFactory)?.Delete();

			if (CustomerAttributes != null) 
				CustomerAttributes.SetDataBaseFactory(dbFactory)?.Save();

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (Customer is null || string.IsNullOrEmpty(Customer.CustomerUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			Customer.SetDataBaseFactory(dbFactory); 
			if (Customer.Delete() <= 0) return false; 
			if (CustomerAddress != null) 
				CustomerAddress?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (CustomerAttributes != null) 
				CustomerAttributes?.SetDataBaseFactory(dbFactory)?.Delete(); 
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetCustomerAsync(RowNum); 
			if (obj is null) return false; 
			Customer = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string CustomerUuid)
        {
			var obj = await GetCustomerByCustomerUuidAsync(CustomerUuid); 
			if (obj is null) return false; 
			Customer = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(Customer.CustomerUuid)) return; 
			CustomerAddress = await GetCustomerAddressByCustomerUuidAsync(Customer.CustomerUuid); 
			CustomerAttributes = await GetCustomerAttributesByCustomerUuidAsync(Customer.CustomerUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (Customer is null || string.IsNullOrEmpty(Customer.CustomerUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 
			Customer.SetDataBaseFactory(dbFactory); 
			if (!(await Customer.SaveAsync().ConfigureAwait(false))) return false; 
			if (CustomerAddress != null) 
				await CustomerAddress.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 
			var delCustomerAddress = _CustomerAddressDeleted;
			if (delCustomerAddress != null)
				await delCustomerAddress.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false);

			if (CustomerAttributes != null) 
				await CustomerAttributes.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (Customer is null || string.IsNullOrEmpty(Customer.CustomerUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			Customer.SetDataBaseFactory(dbFactory); 
			if ((await Customer.DeleteAsync().ConfigureAwait(false)) <= 0) return false; 
			if (CustomerAddress != null) 
				await CustomerAddress.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (CustomerAttributes != null) 
				await CustomerAttributes.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region Customer - Generated 
    

        // one to one children
        protected Customer _Customer;

        public virtual Customer Customer 
        { 
            get => _Customer;
            set => _Customer = value?.SetParent(this); 
        }

        public virtual void CopyCustomerFrom(CustomerData data) => 
            Customer?.CopyFrom(data.Customer, new string[] {"CustomerUuid"});

        public virtual Customer NewCustomer() => new Customer(dbFactory).SetParent(this);

        public virtual Customer GetCustomer(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<Customer>(RowNum);

        public virtual Customer GetCustomerByCustomerUuid(string CustomerUuid) =>
            (string.IsNullOrEmpty(CustomerUuid)) ? null : dbFactory.GetById<Customer>(CustomerUuid);

        public virtual bool SaveCustomer(Customer data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteCustomer(Customer data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<Customer> GetCustomerAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<Customer>(RowNum);

        public virtual async Task<Customer> GetCustomerByCustomerUuidAsync(string CustomerUuid) =>
            (string.IsNullOrEmpty(CustomerUuid)) ? null : await dbFactory.GetByIdAsync<Customer>(CustomerUuid);

        public virtual async Task<bool> SaveCustomerAsync(Customer data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteCustomerAsync(Customer data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion Customer - Generated 

        #region CustomerAddress - Generated 
        // One to many children
        protected IList<CustomerAddress> _CustomerAddressDeleted;
        public virtual CustomerAddress AddCustomerAddressDeleted(CustomerAddress del) 
        {
            if (_CustomerAddressDeleted is null)
                _CustomerAddressDeleted = new List<CustomerAddress>();
            var lst = _CustomerAddressDeleted.ToList();
            lst.Add(del);
            _CustomerAddressDeleted = lst;
            return del;
        } 

        public virtual IList<CustomerAddress> AddCustomerAddressDeleted(IList<CustomerAddress> del) 
        {
            if (_CustomerAddressDeleted is null)
                _CustomerAddressDeleted = new List<CustomerAddress>();
            var lst = _CustomerAddressDeleted.ToList();
            lst.AddRange(del);
            _CustomerAddressDeleted = lst;
            return del;
        } 

        public virtual void SetCustomerAddressDeleted(IList<CustomerAddress> del) =>
            _CustomerAddressDeleted = del;

        public virtual void ClearCustomerAddressDeleted() =>
            _CustomerAddressDeleted = null;


        protected IList<CustomerAddress> _CustomerAddress;

        public virtual IList<CustomerAddress> CustomerAddress 
        { 
            get 
            {
                if (_CustomerAddress is null)
                    _CustomerAddress = new List<CustomerAddress>();
                return _CustomerAddress;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _CustomerAddress = valueList;
                }
                else
                    _CustomerAddress = null;
            } 
        }

        public virtual void CopyCustomerAddressFrom(CustomerData data) 
        {
            if  (data is null) return;
            var lstDeleted = CustomerAddress?.CopyFrom(data.CustomerAddress, new string[] {"CustomerUuid"});
            SetCustomerAddressDeleted(lstDeleted);
            foreach (var c in CustomerAddress)
                c?.CopyChildrenFrom(data.CustomerAddress?.FindByRowNum(c.RowNum));
        } 

        public virtual CustomerAddress NewCustomerAddress() => new CustomerAddress(dbFactory);

        public virtual CustomerAddress AddCustomerAddress(CustomerAddress obj) => 
            CustomerAddress.AddOrReplace(obj.SetParent(this));

        public virtual CustomerAddress RemoveCustomerAddress(CustomerAddress obj) => 
            AddCustomerAddressDeleted(CustomerAddress.RemoveObject(obj.SetParent(this)));

        public virtual IList<CustomerAddress> GetCustomerAddressByCustomerUuid(string CustomerUuid) =>
            (string.IsNullOrEmpty(CustomerUuid)) 
                ? null 
                : dbFactory.Find<CustomerAddress>("WHERE CustomerUuid = @0 ORDER BY RowNum ", CustomerUuid).ToList();

        public virtual bool SaveCustomerAddress(IList<CustomerAddress> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteCustomerAddress(IList<CustomerAddress> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<CustomerAddress>> GetCustomerAddressByCustomerUuidAsync(string CustomerUuid) =>
            (string.IsNullOrEmpty(CustomerUuid)) 
                ? null
                : (await dbFactory.FindAsync<CustomerAddress>("WHERE CustomerUuid = @0 ORDER BY RowNum ", CustomerUuid)).ToList();

        public virtual async Task<bool> SaveCustomerAddressAsync(IList<CustomerAddress> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteCustomerAddressAsync(IList<CustomerAddress> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<CustomerAddress> CheckIntegrityCustomerAddress()
        {
            if (CustomerAddress is null || Customer is null) 
                return CustomerAddress;
            var seq = 0;
            CustomerAddress.RemoveEmpty();
            var children = CustomerAddress.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.CustomerUuid != Customer.CustomerUuid)
                    child.CustomerUuid = Customer.CustomerUuid;
            }
            return children;
        }



        #endregion CustomerAddress - Generated 

        #region CustomerAttributes - Generated 
    

        // one to one children
        protected CustomerAttributes _CustomerAttributes;

        public virtual CustomerAttributes CustomerAttributes 
        { 
            get => _CustomerAttributes;
            set => _CustomerAttributes = value?.SetParent(this); 
        }

        public virtual void CopyCustomerAttributesFrom(CustomerData data) => 
            CustomerAttributes?.CopyFrom(data.CustomerAttributes, new string[] {"CustomerUuid"});

        public virtual CustomerAttributes NewCustomerAttributes() => new CustomerAttributes(dbFactory).SetParent(this);

        public virtual CustomerAttributes GetCustomerAttributes(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<CustomerAttributes>(RowNum);

        public virtual CustomerAttributes GetCustomerAttributesByCustomerUuid(string CustomerUuid) =>
            (string.IsNullOrEmpty(CustomerUuid)) ? null : dbFactory.GetById<CustomerAttributes>(CustomerUuid);

        public virtual bool SaveCustomerAttributes(CustomerAttributes data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteCustomerAttributes(CustomerAttributes data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<CustomerAttributes> GetCustomerAttributesAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<CustomerAttributes>(RowNum);

        public virtual async Task<CustomerAttributes> GetCustomerAttributesByCustomerUuidAsync(string CustomerUuid) =>
            (string.IsNullOrEmpty(CustomerUuid)) ? null : await dbFactory.GetByIdAsync<CustomerAttributes>(CustomerUuid);

        public virtual async Task<bool> SaveCustomerAttributesAsync(CustomerAttributes data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteCustomerAttributesAsync(CustomerAttributes data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual CustomerAttributes CheckIntegrityCustomerAttributes()
        {
            if (CustomerAttributes is null || Customer is null) 
                return CustomerAttributes;
            CustomerAttributes.SetParent(this);
            if (CustomerAttributes.CustomerUuid != Customer.CustomerUuid)
                CustomerAttributes.CustomerUuid = Customer.CustomerUuid;
            return CustomerAttributes;
        }



        #endregion CustomerAttributes - Generated 


    }
}



