              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderLine SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you want re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class OrderLineHelper
    {
        public static readonly string TableName = "OrderLine";
        public static readonly string TableAllies = "chol";

        public static string From(string TableAllies = null) => $"FROM {TableName} {TableAllies ?? TableAllies} ";
        public static string InnerJoin(string TableAllies = null) => $"INNER JOIN {TableName} {TableAllies ?? TableAllies} ";
        public static string LeftJoin(string TableAllies = null) => $"LEFT JOIN {TableName} {TableAllies ?? TableAllies} ";

        #region - static SQL fileds statement

        public static string CentralOrderLineNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.CentralOrderLineNum AS {name ?? "CentralOrderLineNum".ToCamelCase(camelCase)} ";
        public static string DatabaseNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DatabaseNum AS {name ?? "DatabaseNum".ToCamelCase(camelCase)} ";
        public static string CentralOrderNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.CentralOrderNum AS {name ?? "CentralOrderNum".ToCamelCase(camelCase)} ";
        public static string MasterAccountNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.MasterAccountNum AS {name ?? "MasterAccountNum".ToCamelCase(camelCase)} ";
        public static string ProfileNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ProfileNum AS {name ?? "ProfileNum".ToCamelCase(camelCase)} ";
        public static string ChannelNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ChannelNum AS {name ?? "ChannelNum".ToCamelCase(camelCase)} ";
        public static string ChannelAccountNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ChannelAccountNum AS {name ?? "ChannelAccountNum".ToCamelCase(camelCase)} ";
        public static string ChannelOrderID(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ChannelOrderID) AS {name ?? "ChannelOrderID".ToCamelCase(camelCase)} ";
        public static string CentralProductNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.CentralProductNum AS {name ?? "CentralProductNum".ToCamelCase(camelCase)} ";
        public static string ChannelItemID(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ChannelItemID) AS {name ?? "ChannelItemID".ToCamelCase(camelCase)} ";
        public static string SKU(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.SKU) AS {name ?? "SKU".ToCamelCase(camelCase)} ";
        public static string ItemTitle(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ItemTitle) AS {name ?? "ItemTitle".ToCamelCase(camelCase)} ";
        public static string OrderQty(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.OrderQty AS {name ?? "OrderQty".ToCamelCase(camelCase)} ";
        public static string UnitPrice(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.UnitPrice AS {name ?? "UnitPrice".ToCamelCase(camelCase)} ";
        public static string LineItemTaxAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LineItemTaxAmount AS {name ?? "LineItemTaxAmount".ToCamelCase(camelCase)} ";
        public static string LineShippingAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LineShippingAmount AS {name ?? "LineShippingAmount".ToCamelCase(camelCase)} ";
        public static string LineShippingTaxAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LineShippingTaxAmount AS {name ?? "LineShippingTaxAmount".ToCamelCase(camelCase)} ";
        public static string LineShippingDiscount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LineShippingDiscount AS {name ?? "LineShippingDiscount".ToCamelCase(camelCase)} ";
        public static string LineShippingDiscountTaxAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LineShippingDiscountTaxAmount AS {name ?? "LineShippingDiscountTaxAmount".ToCamelCase(camelCase)} ";
        public static string LineRecyclingFee(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LineRecyclingFee AS {name ?? "LineRecyclingFee".ToCamelCase(camelCase)} ";
        public static string LineGiftMsg(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.LineGiftMsg) AS {name ?? "LineGiftMsg".ToCamelCase(camelCase)} ";
        public static string LineGiftNotes(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.LineGiftNotes) AS {name ?? "LineGiftNotes".ToCamelCase(camelCase)} ";
        public static string LineGiftAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LineGiftAmount AS {name ?? "LineGiftAmount".ToCamelCase(camelCase)} ";
        public static string LineGiftTaxAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LineGiftTaxAmount AS {name ?? "LineGiftTaxAmount".ToCamelCase(camelCase)} ";
        public static string LinePromotionCodes(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.LinePromotionCodes) AS {name ?? "LinePromotionCodes".ToCamelCase(camelCase)} ";
        public static string LinePromotionAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LinePromotionAmount AS {name ?? "LinePromotionAmount".ToCamelCase(camelCase)} ";
        public static string LinePromotionTaxAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LinePromotionTaxAmount AS {name ?? "LinePromotionTaxAmount".ToCamelCase(camelCase)} ";
        public static string BundleStatus(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.BundleStatus AS {name ?? "BundleStatus".ToCamelCase(camelCase)} ";
        public static string HarmonizedCode(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.HarmonizedCode) AS {name ?? "HarmonizedCode".ToCamelCase(camelCase)} ";
        public static string UPC(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.UPC) AS {name ?? "UPC".ToCamelCase(camelCase)} ";
        public static string EAN(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.EAN) AS {name ?? "EAN".ToCamelCase(camelCase)} ";
        public static string UnitOfMeasure(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.UnitOfMeasure) AS {name ?? "UnitOfMeasure".ToCamelCase(camelCase)} ";
        public static string EnterDateUtc(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.EnterDateUtc AS {name ?? "EnterDateUtc".ToCamelCase(camelCase)} ";
        public static string DigitBridgeGuid(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DigitBridgeGuid AS {name ?? "DigitBridgeGuid".ToCamelCase(camelCase)} ";
        public static string DBChannelOrderLineRowID(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.DBChannelOrderLineRowID) AS {name ?? "DBChannelOrderLineRowID".ToCamelCase(camelCase)} ";
        public static string CentralOrderUuid(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.CentralOrderUuid) AS {name ?? "CentralOrderUuid".ToCamelCase(camelCase)} ";
        public static string CentralOrderLineUuid(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.CentralOrderLineUuid) AS {name ?? "CentralOrderLineUuid".ToCamelCase(camelCase)} ";
        public static string RowNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.RowNum AS {name ?? "RowNum".ToCamelCase(camelCase)} ";
        public static string UnitDueSellerAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.UnitDueSellerAmount AS {name ?? "UnitDueSellerAmount".ToCamelCase(camelCase)} ";

        #endregion - static SQL fileds statement

        public static string SelectAll(string tableAllies = null) 
        {
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : $"{tableAllies.TrimEnd()}.";
            return $@"
{allies}CentralOrderLineNum AS CentralOrderLineNum,
{allies}DatabaseNum AS DatabaseNum,
{allies}CentralOrderNum AS CentralOrderNum,
{allies}MasterAccountNum AS MasterAccountNum,
{allies}ProfileNum AS ProfileNum,
{allies}ChannelNum AS ChannelNum,
{allies}ChannelAccountNum AS ChannelAccountNum,
RTRIM({allies}ChannelOrderID) AS ChannelOrderID,
{allies}CentralProductNum AS CentralProductNum,
RTRIM({allies}ChannelItemID) AS ChannelItemID,
RTRIM({allies}SKU) AS SKU,
RTRIM({allies}ItemTitle) AS ItemTitle,
{allies}OrderQty AS OrderQty,
{allies}UnitPrice AS UnitPrice,
{allies}LineItemTaxAmount AS LineItemTaxAmount,
{allies}LineShippingAmount AS LineShippingAmount,
{allies}LineShippingTaxAmount AS LineShippingTaxAmount,
{allies}LineShippingDiscount AS LineShippingDiscount,
{allies}LineShippingDiscountTaxAmount AS LineShippingDiscountTaxAmount,
{allies}LineRecyclingFee AS LineRecyclingFee,
RTRIM({allies}LineGiftMsg) AS LineGiftMsg,
RTRIM({allies}LineGiftNotes) AS LineGiftNotes,
{allies}LineGiftAmount AS LineGiftAmount,
{allies}LineGiftTaxAmount AS LineGiftTaxAmount,
RTRIM({allies}LinePromotionCodes) AS LinePromotionCodes,
{allies}LinePromotionAmount AS LinePromotionAmount,
{allies}LinePromotionTaxAmount AS LinePromotionTaxAmount,
{allies}BundleStatus AS BundleStatus,
RTRIM({allies}HarmonizedCode) AS HarmonizedCode,
RTRIM({allies}UPC) AS UPC,
RTRIM({allies}EAN) AS EAN,
RTRIM({allies}UnitOfMeasure) AS UnitOfMeasure,
{allies}EnterDateUtc AS EnterDateUtc,
{allies}DigitBridgeGuid AS DigitBridgeGuid,
RTRIM({allies}DBChannelOrderLineRowID) AS DBChannelOrderLineRowID,
RTRIM({allies}CentralOrderUuid) AS CentralOrderUuid,
RTRIM({allies}CentralOrderLineUuid) AS CentralOrderLineUuid,
{allies}RowNum AS RowNum,
{allies}UnitDueSellerAmount AS UnitDueSellerAmount
";
        }

        public static string SelectAllWhere(string sqlWhere, string tableAllies = null, bool forJson = false) 
        {
            if (!sqlWhere.StartsWith("WHERE", StringComparison.CurrentCultureIgnoreCase))
                sqlWhere = $"WHERE {sqlWhere}";
            var forJsonString = forJson ? "FOR JSON PATH" : string.Empty;
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : tableAllies.TrimEnd();

            return $"SELECT {SelectAll(tableAllies)} FROM {TableName} {allies} {sqlWhere} {forJsonString}";
        }

    }
}

