
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderDCAssignmentHeader SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you want re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class OrderDCAssignmentHeaderHelper
    {
        public static readonly string TableName = "OrderDCAssignmentHeader";
        public static readonly string TableAllies = "odc";

        public static string From(string TableAllies = null) => $"FROM {TableName} {TableAllies ?? TableAllies} ";
        public static string InnerJoin(string TableAllies = null) => $"INNER JOIN {TableName} {TableAllies ?? TableAllies} ";
        public static string LeftJoin(string TableAllies = null) => $"LEFT JOIN {TableName} {TableAllies ?? TableAllies} ";

        #region - static SQL fileds statement

        public static string OrderDCAssignmentNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.OrderDCAssignmentNum AS {name ?? "OrderDCAssignmentNum".ToCamelCase(camelCase)} ";
        public static string DatabaseNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DatabaseNum AS {name ?? "DatabaseNum".ToCamelCase(camelCase)} ";
        public static string MasterAccountNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.MasterAccountNum AS {name ?? "MasterAccountNum".ToCamelCase(camelCase)} ";
        public static string ProfileNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ProfileNum AS {name ?? "ProfileNum".ToCamelCase(camelCase)} ";
        public static string ChannelNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ChannelNum AS {name ?? "ChannelNum".ToCamelCase(camelCase)} ";
        public static string ChannelAccountNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ChannelAccountNum AS {name ?? "ChannelAccountNum".ToCamelCase(camelCase)} ";
        public static string CentralOrderNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.CentralOrderNum AS {name ?? "CentralOrderNum".ToCamelCase(camelCase)} ";
        public static string ChannelOrderID(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ChannelOrderID) AS {name ?? "ChannelOrderID".ToCamelCase(camelCase)} ";
        public static string ShippingCost(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ShippingCost AS {name ?? "ShippingCost".ToCamelCase(camelCase)} ";
        public static string InsuranceCost(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.InsuranceCost AS {name ?? "InsuranceCost".ToCamelCase(camelCase)} ";
        public static string TaxCost(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.TaxCost AS {name ?? "TaxCost".ToCamelCase(camelCase)} ";
        public static string FulfillmentType(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.FulfillmentType AS {name ?? "FulfillmentType".ToCamelCase(camelCase)} ";
        public static string DistributionCenterNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DistributionCenterNum AS {name ?? "DistributionCenterNum".ToCamelCase(camelCase)} ";
        public static string SellerWarehouseID(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.SellerWarehouseID) AS {name ?? "SellerWarehouseID".ToCamelCase(camelCase)} ";
        public static string UseSystemShippingLabel(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.UseSystemShippingLabel AS {name ?? "UseSystemShippingLabel".ToCamelCase(camelCase)} ";
        public static string UseChannelPackingSlip(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.UseChannelPackingSlip AS {name ?? "UseChannelPackingSlip".ToCamelCase(camelCase)} ";
        public static string UseSystemReturnLabel(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.UseSystemReturnLabel AS {name ?? "UseSystemReturnLabel".ToCamelCase(camelCase)} ";
        public static string ShippingLabelFormat(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ShippingLabelFormat AS {name ?? "ShippingLabelFormat".ToCamelCase(camelCase)} ";
        public static string ReturnLabelFormat(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ReturnLabelFormat AS {name ?? "ReturnLabelFormat".ToCamelCase(camelCase)} ";
        public static string DBChannelOrderHeaderRowID(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.DBChannelOrderHeaderRowID) AS {name ?? "DBChannelOrderHeaderRowID".ToCamelCase(camelCase)} ";
        public static string FulfillmentProcessStatus(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.FulfillmentProcessStatus AS {name ?? "FulfillmentProcessStatus".ToCamelCase(camelCase)} ";
        public static string IntegrationStatus(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.IntegrationStatus AS {name ?? "IntegrationStatus".ToCamelCase(camelCase)} ";
        public static string IntegrationDateUtc(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.IntegrationDateUtc AS {name ?? "IntegrationDateUtc".ToCamelCase(camelCase)} ";
        public static string EnterDateUtc(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.EnterDateUtc AS {name ?? "EnterDateUtc".ToCamelCase(camelCase)} ";
        public static string CentralOrderUuid(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.CentralOrderUuid) AS {name ?? "CentralOrderUuid".ToCamelCase(camelCase)} ";
        public static string OrderDCAssignmentUuid(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.OrderDCAssignmentUuid) AS {name ?? "OrderDCAssignmentUuid".ToCamelCase(camelCase)} ";
        public static string RowNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.RowNum AS {name ?? "RowNum".ToCamelCase(camelCase)} ";
        public static string DigitBridgeGuid(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DigitBridgeGuid AS {name ?? "DigitBridgeGuid".ToCamelCase(camelCase)} ";

        #endregion - static SQL fileds statement

        public static string SelectAll(string tableAllies = null) 
        {
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : $"{tableAllies.TrimEnd()}.";
            return $@"
{allies}OrderDCAssignmentNum AS OrderDCAssignmentNum,
{allies}DatabaseNum AS DatabaseNum,
{allies}MasterAccountNum AS MasterAccountNum,
{allies}ProfileNum AS ProfileNum,
{allies}ChannelNum AS ChannelNum,
{allies}ChannelAccountNum AS ChannelAccountNum,
{allies}CentralOrderNum AS CentralOrderNum,
RTRIM({allies}ChannelOrderID) AS ChannelOrderID,
{allies}ShippingCost AS ShippingCost,
{allies}InsuranceCost AS InsuranceCost,
{allies}TaxCost AS TaxCost,
{allies}FulfillmentType AS FulfillmentType,
{allies}DistributionCenterNum AS DistributionCenterNum,
RTRIM({allies}SellerWarehouseID) AS SellerWarehouseID,
{allies}UseSystemShippingLabel AS UseSystemShippingLabel,
{allies}UseChannelPackingSlip AS UseChannelPackingSlip,
{allies}UseSystemReturnLabel AS UseSystemReturnLabel,
{allies}ShippingLabelFormat AS ShippingLabelFormat,
{allies}ReturnLabelFormat AS ReturnLabelFormat,
RTRIM({allies}DBChannelOrderHeaderRowID) AS DBChannelOrderHeaderRowID,
{allies}FulfillmentProcessStatus AS FulfillmentProcessStatus,
{allies}IntegrationStatus AS IntegrationStatus,
{allies}IntegrationDateUtc AS IntegrationDateUtc,
{allies}EnterDateUtc AS EnterDateUtc,
RTRIM({allies}CentralOrderUuid) AS CentralOrderUuid,
RTRIM({allies}OrderDCAssignmentUuid) AS OrderDCAssignmentUuid,
{allies}RowNum AS RowNum,
{allies}DigitBridgeGuid AS DigitBridgeGuid
";
        }

        public static string SelectAllWhere(string sqlWhere, string tableAllies = null, bool forJson = false) 
        {
            if (!sqlWhere.StartsWith("WHERE", StringComparison.CurrentCultureIgnoreCase))
                sqlWhere = $"WHERE {sqlWhere}";
            var forJsonString = forJson ? "FOR JSON PATH" : string.Empty;
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : tableAllies.TrimEnd();

            return $"SELECT {SelectAll(tableAllies)} FROM {TableName} {allies} {sqlWhere} {forJsonString}";
        }

    }
}

