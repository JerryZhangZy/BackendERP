              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a DCAssignmentData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class DCAssignmentData : StructureRepository<DCAssignmentData>
    {
        public DCAssignmentData() : base() {}
        public DCAssignmentData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => OrderDCAssignmentHeader.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => OrderDCAssignmentHeader.UniqueId;
        
		 [JsonIgnore, XmlIgnore] 
		public static string OrderDCAssignmentHeaderTable ="OrderDCAssignmentHeader ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string OrderDCAssignmentLineTable ="OrderDCAssignmentLine ";
		
        #region CRUD Methods

        public override bool Equals(DCAssignmentData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(DCAssignmentData other)
        {
			if (OrderDCAssignmentHeader == null && other.OrderDCAssignmentHeader != null || OrderDCAssignmentHeader != null && other.OrderDCAssignmentHeader == null) 
				return false; 
			if (OrderDCAssignmentHeader != null && other.OrderDCAssignmentHeader != null && !OrderDCAssignmentHeader.Equals(other.OrderDCAssignmentHeader)) 
				return false; 
			if (OrderDCAssignmentLine == null && other.OrderDCAssignmentLine != null || OrderDCAssignmentLine != null && other.OrderDCAssignmentLine == null) 
				return false; 
			if (OrderDCAssignmentLine != null && other.OrderDCAssignmentLine != null && !OrderDCAssignmentLine.EqualsList(other.OrderDCAssignmentLine)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override DCAssignmentData CheckIntegrity()
        {
			if (OrderDCAssignmentHeader is null) return this; 
			OrderDCAssignmentHeader.CheckUniqueId(); 
			CheckIntegrityOrderDCAssignmentLine(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			OrderDCAssignmentHeader?.Clear(); 
			OrderDCAssignmentLine = new List<OrderDCAssignmentLine>(); 
			ClearOrderDCAssignmentLineDeleted(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			OrderDCAssignmentHeader = NewOrderDCAssignmentHeader(); 
			OrderDCAssignmentLine = new List<OrderDCAssignmentLine>(); 
			AddOrderDCAssignmentLine(NewOrderDCAssignmentLine()); 
			ClearOrderDCAssignmentLineDeleted(); 
            return;
        }

        public virtual void CopyFrom(DCAssignmentData data)
        {
			CopyOrderDCAssignmentHeaderFrom(data); 
			CopyOrderDCAssignmentLineFrom(data); 
            CheckIntegrity();
            return;
        }

        public override DCAssignmentData Clone()
        {
			var newData = new DCAssignmentData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.OrderDCAssignmentHeader.ClearMetaData(); 
			newData.OrderDCAssignmentLine.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetOrderDCAssignmentHeader(RowNum); 
			if (obj is null) return false; 
			OrderDCAssignmentHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string OrderDCAssignmentUuid)
        {
			var obj = GetOrderDCAssignmentHeaderByOrderDCAssignmentUuid(OrderDCAssignmentUuid); 
			if (obj is null) return false; 
			OrderDCAssignmentHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(OrderDCAssignmentHeader.OrderDCAssignmentUuid)) return; 
			OrderDCAssignmentLine = GetOrderDCAssignmentLineByOrderDCAssignmentUuid(OrderDCAssignmentHeader.OrderDCAssignmentUuid); 
        }

        public override bool Save()
        {
			if (OrderDCAssignmentHeader is null || string.IsNullOrEmpty(OrderDCAssignmentHeader.OrderDCAssignmentUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(OrderDCAssignmentHeaderTable))
			{
				OrderDCAssignmentHeader.SetDataBaseFactory(dbFactory);
				if (!OrderDCAssignmentHeader.Save()) return false;
			}

			 if (NeedSave(OrderDCAssignmentLineTable))
			{
				if (OrderDCAssignmentLine != null) 
					OrderDCAssignmentLine.SetDataBaseFactory(dbFactory)?.Save();
				var delOrderDCAssignmentLine = _OrderDCAssignmentLineDeleted;
				if (delOrderDCAssignmentLine != null)
					delOrderDCAssignmentLine.SetDataBaseFactory(dbFactory)?.Delete();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (OrderDCAssignmentHeader is null || string.IsNullOrEmpty(OrderDCAssignmentHeader.OrderDCAssignmentUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(OrderDCAssignmentHeaderTable))
			{
				OrderDCAssignmentHeader.SetDataBaseFactory(dbFactory); 
				if (OrderDCAssignmentHeader.Delete() <= 0) return false; 
			}
			 if (NeedDelete(OrderDCAssignmentLineTable))
			{
				if (OrderDCAssignmentLine != null) 
					OrderDCAssignmentLine?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetOrderDCAssignmentHeaderAsync(RowNum); 
			if (obj is null) return false; 
			OrderDCAssignmentHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string OrderDCAssignmentUuid)
        {
			var obj = await GetOrderDCAssignmentHeaderByOrderDCAssignmentUuidAsync(OrderDCAssignmentUuid); 
			if (obj is null) return false; 
			OrderDCAssignmentHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(OrderDCAssignmentHeader.OrderDCAssignmentUuid)) return; 
			OrderDCAssignmentLine = await GetOrderDCAssignmentLineByOrderDCAssignmentUuidAsync(OrderDCAssignmentHeader.OrderDCAssignmentUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (OrderDCAssignmentHeader is null || string.IsNullOrEmpty(OrderDCAssignmentHeader.OrderDCAssignmentUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(OrderDCAssignmentHeaderTable))
			{
				OrderDCAssignmentHeader.SetDataBaseFactory(dbFactory); 
				if (!(await OrderDCAssignmentHeader.SaveAsync().ConfigureAwait(false))) return false; 
			}
			 if (NeedSave(OrderDCAssignmentLineTable))
			{
				if (OrderDCAssignmentLine != null) 
					await OrderDCAssignmentLine.SetDataBaseFactory(dbFactory).SaveAsync().ConfigureAwait(false); 
				var delOrderDCAssignmentLine = _OrderDCAssignmentLineDeleted;
				if (delOrderDCAssignmentLine != null)
					await delOrderDCAssignmentLine.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false);
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (OrderDCAssignmentHeader is null || string.IsNullOrEmpty(OrderDCAssignmentHeader.OrderDCAssignmentUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(OrderDCAssignmentHeaderTable))
			{
			OrderDCAssignmentHeader.SetDataBaseFactory(dbFactory); 
			if ((await OrderDCAssignmentHeader.DeleteAsync().ConfigureAwait(false)) <= 0) return false; 
			}
			 if (NeedDelete(OrderDCAssignmentLineTable))
			{
				if (OrderDCAssignmentLine != null) 
					await OrderDCAssignmentLine.SetDataBaseFactory(dbFactory).DeleteAsync().ConfigureAwait(false); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region OrderDCAssignmentHeader - Generated 
    

        // one to one children
        protected OrderDCAssignmentHeader _OrderDCAssignmentHeader;

        public virtual OrderDCAssignmentHeader OrderDCAssignmentHeader 
        { 
            get => _OrderDCAssignmentHeader;
            set => _OrderDCAssignmentHeader = value?.SetParent(this); 
        }

        public virtual void CopyOrderDCAssignmentHeaderFrom(DCAssignmentData data) => 
            OrderDCAssignmentHeader?.CopyFrom(data.OrderDCAssignmentHeader, new string[] {"OrderDCAssignmentUuid"});

        public virtual OrderDCAssignmentHeader NewOrderDCAssignmentHeader() => new OrderDCAssignmentHeader(dbFactory).SetParent(this);

        public virtual OrderDCAssignmentHeader GetOrderDCAssignmentHeader(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<OrderDCAssignmentHeader>(RowNum);

        public virtual OrderDCAssignmentHeader GetOrderDCAssignmentHeaderByOrderDCAssignmentUuid(string OrderDCAssignmentUuid) =>
            (string.IsNullOrEmpty(OrderDCAssignmentUuid)) ? null : dbFactory.GetById<OrderDCAssignmentHeader>(OrderDCAssignmentUuid);

        public virtual bool SaveOrderDCAssignmentHeader(OrderDCAssignmentHeader data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteOrderDCAssignmentHeader(OrderDCAssignmentHeader data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<OrderDCAssignmentHeader> GetOrderDCAssignmentHeaderAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<OrderDCAssignmentHeader>(RowNum);

        public virtual async Task<OrderDCAssignmentHeader> GetOrderDCAssignmentHeaderByOrderDCAssignmentUuidAsync(string OrderDCAssignmentUuid) =>
            (string.IsNullOrEmpty(OrderDCAssignmentUuid)) ? null : await dbFactory.GetByIdAsync<OrderDCAssignmentHeader>(OrderDCAssignmentUuid);

        public virtual async Task<bool> SaveOrderDCAssignmentHeaderAsync(OrderDCAssignmentHeader data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteOrderDCAssignmentHeaderAsync(OrderDCAssignmentHeader data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion OrderDCAssignmentHeader - Generated 

        #region OrderDCAssignmentLine - Generated 
        // One to many children
        protected IList<OrderDCAssignmentLine> _OrderDCAssignmentLineDeleted;
        public virtual OrderDCAssignmentLine AddOrderDCAssignmentLineDeleted(OrderDCAssignmentLine del) 
        {
            if (_OrderDCAssignmentLineDeleted is null)
                _OrderDCAssignmentLineDeleted = new List<OrderDCAssignmentLine>();
            var lst = _OrderDCAssignmentLineDeleted.ToList();
            lst.Add(del);
            _OrderDCAssignmentLineDeleted = lst;
            return del;
        } 

        public virtual IList<OrderDCAssignmentLine> AddOrderDCAssignmentLineDeleted(IList<OrderDCAssignmentLine> del) 
        {
            if (_OrderDCAssignmentLineDeleted is null)
                _OrderDCAssignmentLineDeleted = new List<OrderDCAssignmentLine>();
            var lst = _OrderDCAssignmentLineDeleted.ToList();
            lst.AddRange(del);
            _OrderDCAssignmentLineDeleted = lst;
            return del;
        } 

        public virtual void SetOrderDCAssignmentLineDeleted(IList<OrderDCAssignmentLine> del) =>
            _OrderDCAssignmentLineDeleted = del;

        public virtual void ClearOrderDCAssignmentLineDeleted() =>
            _OrderDCAssignmentLineDeleted = null;


        protected IList<OrderDCAssignmentLine> _OrderDCAssignmentLine;

        public virtual IList<OrderDCAssignmentLine> OrderDCAssignmentLine 
        { 
            get 
            {
                if (_OrderDCAssignmentLine is null)
                    _OrderDCAssignmentLine = new List<OrderDCAssignmentLine>();
                return _OrderDCAssignmentLine;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _OrderDCAssignmentLine = valueList;
                }
                else
                    _OrderDCAssignmentLine = null;
            } 
        }

        public virtual void CopyOrderDCAssignmentLineFrom(DCAssignmentData data) 
        {
            if  (data is null) return;
            var lstDeleted = OrderDCAssignmentLine?.CopyFrom(data.OrderDCAssignmentLine, new string[] {"OrderDCAssignmentUuid"});
            SetOrderDCAssignmentLineDeleted(lstDeleted);
            foreach (var c in OrderDCAssignmentLine)
                c?.CopyChildrenFrom(data.OrderDCAssignmentLine?.FindByRowNum(c.RowNum));
        } 

        public virtual OrderDCAssignmentLine NewOrderDCAssignmentLine() => new OrderDCAssignmentLine(dbFactory);

        public virtual OrderDCAssignmentLine AddOrderDCAssignmentLine(OrderDCAssignmentLine obj) => 
            OrderDCAssignmentLine.AddOrReplace(obj.SetParent(this));

        public virtual OrderDCAssignmentLine RemoveOrderDCAssignmentLine(OrderDCAssignmentLine obj) => 
            AddOrderDCAssignmentLineDeleted(OrderDCAssignmentLine.RemoveObject(obj.SetParent(this)));

        public virtual IList<OrderDCAssignmentLine> GetOrderDCAssignmentLineByOrderDCAssignmentUuid(string OrderDCAssignmentUuid) =>
            (string.IsNullOrEmpty(OrderDCAssignmentUuid)) 
                ? null 
                : dbFactory.Find<OrderDCAssignmentLine>("WHERE OrderDCAssignmentUuid = @0 ORDER BY RowNum ", OrderDCAssignmentUuid).ToList();

        public virtual bool SaveOrderDCAssignmentLine(IList<OrderDCAssignmentLine> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteOrderDCAssignmentLine(IList<OrderDCAssignmentLine> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<OrderDCAssignmentLine>> GetOrderDCAssignmentLineByOrderDCAssignmentUuidAsync(string OrderDCAssignmentUuid) =>
            (string.IsNullOrEmpty(OrderDCAssignmentUuid)) 
                ? null
                : (await dbFactory.FindAsync<OrderDCAssignmentLine>("WHERE OrderDCAssignmentUuid = @0 ORDER BY RowNum ", OrderDCAssignmentUuid)).ToList();

        public virtual async Task<bool> SaveOrderDCAssignmentLineAsync(IList<OrderDCAssignmentLine> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteOrderDCAssignmentLineAsync(IList<OrderDCAssignmentLine> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<OrderDCAssignmentLine> CheckIntegrityOrderDCAssignmentLine()
        {
            if (OrderDCAssignmentLine is null || OrderDCAssignmentHeader is null) 
                return OrderDCAssignmentLine;
            var seq = 0;
            OrderDCAssignmentLine.RemoveEmpty();
            var children = OrderDCAssignmentLine.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.OrderDCAssignmentUuid != OrderDCAssignmentHeader.OrderDCAssignmentUuid)
                    child.OrderDCAssignmentUuid = OrderDCAssignmentHeader.OrderDCAssignmentUuid;
            }
            return children;
        }



        #endregion OrderDCAssignmentLine - Generated 


    }
}



