              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderLineMerchantExt.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("OrderLineMerchantExt")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("CentralOrderLineMerchantExtUuid")]
    [DtoName("OrderLineMerchantExtDto")]
    public partial class OrderLineMerchantExt : TableRepository<OrderLineMerchantExt, long>
    {

        public OrderLineMerchantExt() : base() {}
        public OrderLineMerchantExt(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("CentralOrderLineNum",SqlDbType.BigInt,NotNull=true,IsDefault=true)]
        private long _centralOrderLineNum;

        [Column("DatabaseNum",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _databaseNum;

        [Column("CentralOrderNum",SqlDbType.BigInt,NotNull=true,IsDefault=true)]
        private long _centralOrderNum;

        [Column("MasterAccountNum",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _masterAccountNum;

        [Column("ProfileNum",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _profileNum;

        [Column("ChannelNum",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _channelNum;

        [Column("ChannelAccountNum",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _channelAccountNum;

        [Column("ChannelOrderID",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _channelOrderID;

        [Column("ChannelOrderLineNum",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _channelOrderLineNum;

        [Column("MerchantLineNumber",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _merchantLineNumber;

        [Column("CustomerOrderLineNumber",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _customerOrderLineNumber;

        [Column("HubLineID",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _hubLineID;

        [Column("MerchantNRProductID",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantNRProductID;

        [Column("MerchantSKU",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantSKU;

        [Column("VendorSKU",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorSKU;

        [Column("ManufacturerSKU",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _manufacturerSKU;

        [Column("ShoppingCartSKU",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _shoppingCartSKU;

        [Column("VendorDescription",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorDescription;

        [Column("VendorStyleNumber",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorStyleNumber;

        [Column("VendorColorDescription",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorColorDescription;

        [Column("VendorSizeDescription",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorSizeDescription;

        [Column("MerchantColorCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantColorCode;

        [Column("MerchantSizeCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantSizeCode;

        [Column("MerchantSetCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantSetCode;

        [Column("MerchantDescription",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantDescription;

        [Column("MerchantDescription2",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantDescription2;

        [Column("MerchantDescription3",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantDescription3;

        [Column("MerchantColorSizeDescription",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantColorSizeDescription;

        [Column("FullRetailPrice",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _fullRetailPrice;

        [Column("EncodedPrice",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _encodedPrice;

        [Column("UnitShippingWeight",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _unitShippingWeight;

        [Column("WeightUnit",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _weightUnit;

        [Column("CustomerUnitPrice",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _customerUnitPrice;

        [Column("UnitCostToMerchant",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _unitCostToMerchant;

        [Column("LineMerchandiseCost",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _lineMerchandiseCost;

        [Column("CustomerMerchandiseAmount",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _customerMerchandiseAmount;

        [Column("CustomerLineShippingAmount",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _customerLineShippingAmount;

        [Column("CustomerLineHandlingAmount",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _customerLineHandlingAmount;

        [Column("CustomerLineSubTotalAmount",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _customerLineSubTotalAmount;

        [Column("CustomerLineTaxAmount",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _customerLineTaxAmount;

        [Column("CustomerLineTotalAmount",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _customerLineTotalAmount;

        [Column("CustomerLineCredits",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _customerLineCredits;

        [Column("CustomerLineBalanceDue",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _customerLineBalanceDue;

        [Column("LineDiscountAmount",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _lineDiscountAmount;

        [Column("VendorWareshoueID",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorWareshoueID;

        [Column("ExpectedShipDateUtc",SqlDbType.DateTime)]
        private DateTime? _expectedShipDateUtc;

        [Column("PackingSlipLineMessage",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _packingSlipLineMessage;

        [Column("VendorLineNotes",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _vendorLineNotes;

        [Column("StoreName",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _storeName;

        [Column("PersonalizationData",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _personalizationData;

        [Column("FacgtoryOrderNum",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _facgtoryOrderNum;

        [Column("SubUnitQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _subUnitQty;

        [Column("GiftWrapIndicator",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _giftWrapIndicator;

        [Column("HoldUntilDateUtc",SqlDbType.DateTime)]
        private DateTime? _holdUntilDateUtc;

        [Column("RequiredShipDateUtc",SqlDbType.DateTime)]
        private DateTime? _requiredShipDateUtc;

        [Column("RequiredDeliveryDateUtc",SqlDbType.DateTime)]
        private DateTime? _requiredDeliveryDateUtc;

        [Column("CustomerRequestedArrivalDateUtc",SqlDbType.DateTime)]
        private DateTime? _customerRequestedArrivalDateUtc;

        [Column("ShipperHubCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _shipperHubCode;

        [Column("ShippingHub",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _shippingHub;

        [Column("SerializedProduct",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _serializedProduct;

        [Column("CustomerSKU",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _customerSKU;

        [Column("VendorQuoteNumber",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorQuoteNumber;

        [Column("GiftRegistryID",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _giftRegistryID;

        [Column("MerchantDepartment",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _merchantDepartment;

        [Column("NdcNumber",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _ndcNumber;

        [Column("VendorPatternCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorPatternCode;

        [Column("VendorFinishCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorFinishCode;

        [Column("CentralOrderUuid",SqlDbType.VarChar,NotNull=true)]
        private string _centralOrderUuid;

        [Column("CentralOrderLineUuid",SqlDbType.VarChar,NotNull=true)]
        private string _centralOrderLineUuid;

        [Column("CentralOrderLineMerchantExtUuid",SqlDbType.VarChar,NotNull=true)]
        private string _centralOrderLineMerchantExtUuid;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => CentralOrderLineMerchantExtUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(CentralOrderLineMerchantExtUuid)) 
				CentralOrderLineMerchantExtUuid = Guid.NewGuid().ToString(); 
		}
		/// <summary>
		/// 
		/// </summary>
        public virtual long CentralOrderLineNum
        {
            get
            {
				return _centralOrderLineNum; 
            }
            set
            {
				_centralOrderLineNum = value; 
				OnPropertyChanged("CentralOrderLineNum", value);
            }
        }

		/// <summary>
		/// Each database has its own default value.
		/// </summary>
        public virtual int DatabaseNum
        {
            get
            {
				return _databaseNum; 
            }
            set
            {
				_databaseNum = value; 
				OnPropertyChanged("DatabaseNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual long CentralOrderNum
        {
            get
            {
				return _centralOrderNum; 
            }
            set
            {
				_centralOrderNum = value; 
				OnPropertyChanged("CentralOrderNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual int MasterAccountNum
        {
            get
            {
				return _masterAccountNum; 
            }
            set
            {
				_masterAccountNum = value; 
				OnPropertyChanged("MasterAccountNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual int ProfileNum
        {
            get
            {
				return _profileNum; 
            }
            set
            {
				_profileNum = value; 
				OnPropertyChanged("ProfileNum", value);
            }
        }

		/// <summary>
		/// The channel which sells the item. Refer to Master Account Channel Setting
		/// </summary>
        public virtual int ChannelNum
        {
            get
            {
				return _channelNum; 
            }
            set
            {
				_channelNum = value; 
				OnPropertyChanged("ChannelNum", value);
            }
        }

		/// <summary>
		/// The unique number of this profile’s channel account
		/// </summary>
        public virtual int ChannelAccountNum
        {
            get
            {
				return _channelAccountNum; 
            }
            set
            {
				_channelAccountNum = value; 
				OnPropertyChanged("ChannelAccountNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ChannelOrderID
        {
            get
            {
				return _channelOrderID?.TrimEnd(); 
            }
            set
            {
				_channelOrderID = value.TruncateTo(130); 
				OnPropertyChanged("ChannelOrderID", value);
            }
        }

		/// <summary>
		/// sequentially ordered I 4 number assigned to each line item included in the purchase order.
		/// </summary>
        public virtual int ChannelOrderLineNum
        {
            get
            {
				return _channelOrderLineNum; 
            }
            set
            {
				_channelOrderLineNum = value; 
				OnPropertyChanged("ChannelOrderLineNum", value);
            }
        }

		/// <summary>
		/// This field will contain a non-sequentially ordered number assigned by the retailer to each line Item in the purchase order.
		/// </summary>
        public virtual int MerchantLineNumber
        {
            get
            {
				return _merchantLineNumber; 
            }
            set
            {
				_merchantLineNumber = value; 
				OnPropertyChanged("MerchantLineNumber", value);
            }
        }

		/// <summary>
		/// This field will contain a non-sequentially ordered I 4 number assigned to each line in the customer order.
		/// </summary>
        public virtual int CustomerOrderLineNumber
        {
            get
            {
				return _customerOrderLineNumber; 
            }
            set
            {
				_customerOrderLineNumber = value; 
				OnPropertyChanged("CustomerOrderLineNumber", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string HubLineID
        {
            get
            {
				return _hubLineID?.TrimEnd(); 
            }
            set
            {
				_hubLineID = value.TruncateTo(50); 
				OnPropertyChanged("HubLineID", value);
            }
        }

		/// <summary>
		/// The merchant’s product ID for the product on the line item.
		/// </summary>
        public virtual string MerchantNRProductID
        {
            get
            {
				return _merchantNRProductID?.TrimEnd(); 
            }
            set
            {
				_merchantNRProductID = value.TruncateTo(50); 
				OnPropertyChanged("MerchantNRProductID", value);
            }
        }

		/// <summary>
		/// The merchant’s SKU for the product on the line item.
		/// </summary>
        public virtual string MerchantSKU
        {
            get
            {
				return _merchantSKU?.TrimEnd(); 
            }
            set
            {
				_merchantSKU = value.TruncateTo(50); 
				OnPropertyChanged("MerchantSKU", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string VendorSKU
        {
            get
            {
				return _vendorSKU?.TrimEnd(); 
            }
            set
            {
				_vendorSKU = value.TruncateTo(50); 
				OnPropertyChanged("VendorSKU", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ManufacturerSKU
        {
            get
            {
				return _manufacturerSKU?.TrimEnd(); 
            }
            set
            {
				_manufacturerSKU = value.TruncateTo(50); 
				OnPropertyChanged("ManufacturerSKU", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShoppingCartSKU
        {
            get
            {
				return _shoppingCartSKU?.TrimEnd(); 
            }
            set
            {
				_shoppingCartSKU = value.TruncateTo(50); 
				OnPropertyChanged("ShoppingCartSKU", value);
            }
        }

		/// <summary>
		/// Vendor oriented description of the product
		/// </summary>
        public virtual string VendorDescription
        {
            get
            {
				return _vendorDescription?.TrimEnd(); 
            }
            set
            {
				_vendorDescription = value.TruncateTo(255); 
				OnPropertyChanged("VendorDescription", value);
            }
        }

		/// <summary>
		/// A vendor assigned style number for the product on the line item.
		/// </summary>
        public virtual string VendorStyleNumber
        {
            get
            {
				return _vendorStyleNumber?.TrimEnd(); 
            }
            set
            {
				_vendorStyleNumber = value.TruncateTo(255); 
				OnPropertyChanged("VendorStyleNumber", value);
            }
        }

		/// <summary>
		/// A vendor description / color for the color of the product on the line item.
		/// </summary>
        public virtual string VendorColorDescription
        {
            get
            {
				return _vendorColorDescription?.TrimEnd(); 
            }
            set
            {
				_vendorColorDescription = value.TruncateTo(50); 
				OnPropertyChanged("VendorColorDescription", value);
            }
        }

		/// <summary>
		/// A vendor description / code for the size of the product on the line item.
		/// </summary>
        public virtual string VendorSizeDescription
        {
            get
            {
				return _vendorSizeDescription?.TrimEnd(); 
            }
            set
            {
				_vendorSizeDescription = value.TruncateTo(20); 
				OnPropertyChanged("VendorSizeDescription", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string MerchantColorCode
        {
            get
            {
				return _merchantColorCode?.TrimEnd(); 
            }
            set
            {
				_merchantColorCode = value.TruncateTo(20); 
				OnPropertyChanged("MerchantColorCode", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string MerchantSizeCode
        {
            get
            {
				return _merchantSizeCode?.TrimEnd(); 
            }
            set
            {
				_merchantSizeCode = value.TruncateTo(20); 
				OnPropertyChanged("MerchantSizeCode", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string MerchantSetCode
        {
            get
            {
				return _merchantSetCode?.TrimEnd(); 
            }
            set
            {
				_merchantSetCode = value.TruncateTo(50); 
				OnPropertyChanged("MerchantSetCode", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string MerchantDescription
        {
            get
            {
				return _merchantDescription?.TrimEnd(); 
            }
            set
            {
				_merchantDescription = value.TruncateTo(255); 
				OnPropertyChanged("MerchantDescription", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string MerchantDescription2
        {
            get
            {
				return _merchantDescription2?.TrimEnd(); 
            }
            set
            {
				_merchantDescription2 = value.TruncateTo(255); 
				OnPropertyChanged("MerchantDescription2", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string MerchantDescription3
        {
            get
            {
				return _merchantDescription3?.TrimEnd(); 
            }
            set
            {
				_merchantDescription3 = value.TruncateTo(255); 
				OnPropertyChanged("MerchantDescription3", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string MerchantColorSizeDescription
        {
            get
            {
				return _merchantColorSizeDescription?.TrimEnd(); 
            }
            set
            {
				_merchantColorSizeDescription = value.TruncateTo(20); 
				OnPropertyChanged("MerchantColorSizeDescription", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal FullRetailPrice
        {
            get
            {
				return _fullRetailPrice; 
            }
            set
            {
				_fullRetailPrice = value; 
				OnPropertyChanged("FullRetailPrice", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string EncodedPrice
        {
            get
            {
				return _encodedPrice?.TrimEnd(); 
            }
            set
            {
				_encodedPrice = value.TruncateTo(50); 
				OnPropertyChanged("EncodedPrice", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal UnitShippingWeight
        {
            get
            {
				return _unitShippingWeight; 
            }
            set
            {
				_unitShippingWeight = value; 
				OnPropertyChanged("UnitShippingWeight", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string WeightUnit
        {
            get
            {
				return _weightUnit?.TrimEnd(); 
            }
            set
            {
				_weightUnit = value.TruncateTo(20); 
				OnPropertyChanged("WeightUnit", value);
            }
        }

		/// <summary>
		/// The price, per unit, charged to the end customer (this will be the price that the customer sees on the website).
		/// </summary>
        public virtual decimal CustomerUnitPrice
        {
            get
            {
				return _customerUnitPrice; 
            }
            set
            {
				_customerUnitPrice = value; 
				OnPropertyChanged("CustomerUnitPrice", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal UnitCostToMerchant
        {
            get
            {
				return _unitCostToMerchant; 
            }
            set
            {
				_unitCostToMerchant = value; 
				OnPropertyChanged("UnitCostToMerchant", value);
            }
        }

		/// <summary>
		/// The wholesale extended cost, what the vendor is expected to charge the merchant for the line item.
		/// </summary>
        public virtual decimal LineMerchandiseCost
        {
            get
            {
				return _lineMerchandiseCost; 
            }
            set
            {
				_lineMerchandiseCost = value; 
				OnPropertyChanged("LineMerchandiseCost", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal CustomerMerchandiseAmount
        {
            get
            {
				return _customerMerchandiseAmount; 
            }
            set
            {
				_customerMerchandiseAmount = value; 
				OnPropertyChanged("CustomerMerchandiseAmount", value);
            }
        }

		/// <summary>
		/// The shipping cost charged to the end customer for the line item.
		/// </summary>
        public virtual decimal CustomerLineShippingAmount
        {
            get
            {
				return _customerLineShippingAmount; 
            }
            set
            {
				_customerLineShippingAmount = value; 
				OnPropertyChanged("CustomerLineShippingAmount", value);
            }
        }

		/// <summary>
		/// The handling cost charged to the end customer for the line item.
		/// </summary>
        public virtual decimal CustomerLineHandlingAmount
        {
            get
            {
				return _customerLineHandlingAmount; 
            }
            set
            {
				_customerLineHandlingAmount = value; 
				OnPropertyChanged("CustomerLineHandlingAmount", value);
            }
        }

		/// <summary>
		/// The taxable total of the merchandise, shipping and handling for the line item.
		/// </summary>
        public virtual decimal CustomerLineSubTotalAmount
        {
            get
            {
				return _customerLineSubTotalAmount; 
            }
            set
            {
				_customerLineSubTotalAmount = value; 
				OnPropertyChanged("CustomerLineSubTotalAmount", value);
            }
        }

		/// <summary>
		/// The tax charged to the end customer for the line item.
		/// </summary>
        public virtual decimal CustomerLineTaxAmount
        {
            get
            {
				return _customerLineTaxAmount; 
            }
            set
            {
				_customerLineTaxAmount = value; 
				OnPropertyChanged("CustomerLineTaxAmount", value);
            }
        }

		/// <summary>
		/// The end customers line total, excluding any credits.
		/// </summary>
        public virtual decimal CustomerLineTotalAmount
        {
            get
            {
				return _customerLineTotalAmount; 
            }
            set
            {
				_customerLineTotalAmount = value; 
				OnPropertyChanged("CustomerLineTotalAmount", value);
            }
        }

		/// <summary>
		/// All credits applied to the line item.
		/// </summary>
        public virtual decimal CustomerLineCredits
        {
            get
            {
				return _customerLineCredits; 
            }
            set
            {
				_customerLineCredits = value; 
				OnPropertyChanged("CustomerLineCredits", value);
            }
        }

		/// <summary>
		/// The end customers line total after any credits have been applied
		/// </summary>
        public virtual decimal CustomerLineBalanceDue
        {
            get
            {
				return _customerLineBalanceDue; 
            }
            set
            {
				_customerLineBalanceDue = value; 
				OnPropertyChanged("CustomerLineBalanceDue", value);
            }
        }

		/// <summary>
		/// The line item discount allowed by the retailer.
		/// </summary>
        public virtual decimal LineDiscountAmount
        {
            get
            {
				return _lineDiscountAmount; 
            }
            set
            {
				_lineDiscountAmount = value; 
				OnPropertyChanged("LineDiscountAmount", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string VendorWareshoueID
        {
            get
            {
				return _vendorWareshoueID?.TrimEnd(); 
            }
            set
            {
				_vendorWareshoueID = value.TruncateTo(20); 
				OnPropertyChanged("VendorWareshoueID", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual DateTime? ExpectedShipDateUtc
        {
            get
            {
				if (!AllowNull && _expectedShipDateUtc is null) 
					_expectedShipDateUtc = new DateTime().MinValueSql(); 
				return _expectedShipDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_expectedShipDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("ExpectedShipDateUtc", value);
				}
            }
        }

		/// <summary>
		/// A line item message that will appear on the packing slip.
		/// </summary>
        public virtual string PackingSlipLineMessage
        {
            get
            {
				return _packingSlipLineMessage?.TrimEnd(); 
            }
            set
            {
				_packingSlipLineMessage = value.TruncateTo(255); 
				OnPropertyChanged("PackingSlipLineMessage", value);
            }
        }

		/// <summary>
		/// Special instructions to the vendor regarding the line item
		/// </summary>
        public virtual string VendorLineNotes
        {
            get
            {
				return _vendorLineNotes?.TrimEnd(); 
            }
            set
            {
				_vendorLineNotes = value.TruncateTo(255); 
				OnPropertyChanged("VendorLineNotes", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string StoreName
        {
            get
            {
				return _storeName?.TrimEnd(); 
            }
            set
            {
				_storeName = value.TruncateTo(255); 
				OnPropertyChanged("StoreName", value);
            }
        }

		/// <summary>
		/// End customer provided personalization parameters
		/// </summary>
        public virtual string PersonalizationData
        {
            get
            {
				return _personalizationData?.TrimEnd(); 
            }
            set
            {
				_personalizationData = value.TruncateTo(400); 
				OnPropertyChanged("PersonalizationData", value);
            }
        }

		/// <summary>
		/// The merchant’s unique ID for the lineitem.
		/// </summary>
        public virtual string FacgtoryOrderNum
        {
            get
            {
				return _facgtoryOrderNum?.TrimEnd(); 
            }
            set
            {
				_facgtoryOrderNum = value.TruncateTo(50); 
				OnPropertyChanged("FacgtoryOrderNum", value);
            }
        }

		/// <summary>
		/// The quantity of sub units or components per unit ordered.
		/// </summary>
        public virtual decimal SubUnitQty
        {
            get
            {
				return _subUnitQty; 
            }
            set
            {
				_subUnitQty = value; 
				OnPropertyChanged("SubUnitQty", value);
            }
        }

		/// <summary>
		/// This field contains the do not fulfill until date.
		/// </summary>
        public virtual string GiftWrapIndicator
        {
            get
            {
				return _giftWrapIndicator?.TrimEnd(); 
            }
            set
            {
				_giftWrapIndicator = value.TruncateTo(10); 
				OnPropertyChanged("GiftWrapIndicator", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual DateTime? HoldUntilDateUtc
        {
            get
            {
				if (!AllowNull && _holdUntilDateUtc is null) 
					_holdUntilDateUtc = new DateTime().MinValueSql(); 
				return _holdUntilDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_holdUntilDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("HoldUntilDateUtc", value);
				}
            }
        }

		/// <summary>
		/// The date on which the merchant expects the vendor to ship the goods includ
		/// </summary>
        public virtual DateTime? RequiredShipDateUtc
        {
            get
            {
				if (!AllowNull && _requiredShipDateUtc is null) 
					_requiredShipDateUtc = new DateTime().MinValueSql(); 
				return _requiredShipDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_requiredShipDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("RequiredShipDateUtc", value);
				}
            }
        }

		/// <summary>
		/// Must be delivered to the end customer by this date.
		/// </summary>
        public virtual DateTime? RequiredDeliveryDateUtc
        {
            get
            {
				if (!AllowNull && _requiredDeliveryDateUtc is null) 
					_requiredDeliveryDateUtc = new DateTime().MinValueSql(); 
				return _requiredDeliveryDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_requiredDeliveryDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("RequiredDeliveryDateUtc", value);
				}
            }
        }

		/// <summary>
		/// This field contains the end customers requested delivery date.
		/// </summary>
        public virtual DateTime? CustomerRequestedArrivalDateUtc
        {
            get
            {
				if (!AllowNull && _customerRequestedArrivalDateUtc is null) 
					_customerRequestedArrivalDateUtc = new DateTime().MinValueSql(); 
				return _customerRequestedArrivalDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_customerRequestedArrivalDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("CustomerRequestedArrivalDateUtc", value);
				}
            }
        }

		/// <summary>
		/// A merchant specified code used for pick sorting.
		/// </summary>
        public virtual string ShipperHubCode
        {
            get
            {
				return _shipperHubCode?.TrimEnd(); 
            }
            set
            {
				_shipperHubCode = value.TruncateTo(20); 
				OnPropertyChanged("ShipperHubCode", value);
            }
        }

		/// <summary>
		/// This field is used to identify which of the shippers ‘hub’ a particular package should be processed through. When this element is provided, packing slips can be sorted by Shipping Hub to facilitate ‘staging’ operations for pick-up by the shipping carrier.
		/// </summary>
        public virtual string ShippingHub
        {
            get
            {
				return _shippingHub?.TrimEnd(); 
            }
            set
            {
				_shippingHub = value.TruncateTo(50); 
				OnPropertyChanged("ShippingHub", value);
            }
        }

		/// <summary>
		/// This field is used to declare if a product is serialized (i.e., is assigned a serial number) and if the serial number must be reported as part of a shipment confirmation message.
		/// </summary>
        public virtual string SerializedProduct
        {
            get
            {
				return _serializedProduct?.TrimEnd(); 
            }
            set
            {
				_serializedProduct = value.TruncateTo(20); 
				OnPropertyChanged("SerializedProduct", value);
            }
        }

		/// <summary>
		/// The SKU by which the drop-ship customer identifies the product.
		/// </summary>
        public virtual string CustomerSKU
        {
            get
            {
				return _customerSKU?.TrimEnd(); 
            }
            set
            {
				_customerSKU = value.TruncateTo(50); 
				OnPropertyChanged("CustomerSKU", value);
            }
        }

		/// <summary>
		/// This field references a quote document on which he Unit Cost value is predicated
		/// </summary>
        public virtual string VendorQuoteNumber
        {
            get
            {
				return _vendorQuoteNumber?.TrimEnd(); 
            }
            set
            {
				_vendorQuoteNumber = value.TruncateTo(30); 
				OnPropertyChanged("VendorQuoteNumber", value);
            }
        }

		/// <summary>
		/// This field will contain the ID of a gift registry list to which the line item belongs, used for merchandise return processing.
		/// </summary>
        public virtual string GiftRegistryID
        {
            get
            {
				return _giftRegistryID?.TrimEnd(); 
            }
            set
            {
				_giftRegistryID = value.TruncateTo(30); 
				OnPropertyChanged("GiftRegistryID", value);
            }
        }

		/// <summary>
		/// The merchant assigned department ID.
		/// </summary>
        public virtual string MerchantDepartment
        {
            get
            {
				return _merchantDepartment?.TrimEnd(); 
            }
            set
            {
				_merchantDepartment = value.TruncateTo(50); 
				OnPropertyChanged("MerchantDepartment", value);
            }
        }

		/// <summary>
		/// National Drug Code number.
		/// </summary>
        public virtual string NdcNumber
        {
            get
            {
				return _ndcNumber?.TrimEnd(); 
            }
            set
            {
				_ndcNumber = value.TruncateTo(20); 
				OnPropertyChanged("NdcNumber", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string VendorPatternCode
        {
            get
            {
				return _vendorPatternCode?.TrimEnd(); 
            }
            set
            {
				_vendorPatternCode = value.TruncateTo(50); 
				OnPropertyChanged("VendorPatternCode", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string VendorFinishCode
        {
            get
            {
				return _vendorFinishCode?.TrimEnd(); 
            }
            set
            {
				_vendorFinishCode = value.TruncateTo(50); 
				OnPropertyChanged("VendorFinishCode", value);
            }
        }

		/// <summary>
		/// Global Unique Guid for CentralOrder
		/// </summary>
        public virtual string CentralOrderUuid
        {
            get
            {
				return _centralOrderUuid?.TrimEnd(); 
            }
            set
            {
				_centralOrderUuid = value.TruncateTo(50); 
				OnPropertyChanged("CentralOrderUuid", value);
            }
        }

		/// <summary>
		/// Global Unique Guid for CentralOrder line
		/// </summary>
        public virtual string CentralOrderLineUuid
        {
            get
            {
				return _centralOrderLineUuid?.TrimEnd(); 
            }
            set
            {
				_centralOrderLineUuid = value.TruncateTo(50); 
				OnPropertyChanged("CentralOrderLineUuid", value);
            }
        }

		/// <summary>
		/// Global Unique Guid for CentralOrder line
		/// </summary>
        public virtual string CentralOrderLineMerchantExtUuid
        {
            get
            {
				return _centralOrderLineMerchantExtUuid?.TrimEnd(); 
            }
            set
            {
				_centralOrderLineMerchantExtUuid = value.TruncateTo(50); 
				OnPropertyChanged("CentralOrderLineMerchantExtUuid", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private ChannelOrderData Parent { get; set; }
		public ChannelOrderData GetParent() => Parent;
		public OrderLineMerchantExt SetParent(ChannelOrderData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			CentralOrderLineMerchantExtUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override OrderLineMerchantExt Clear()
        {
            base.Clear();
			_centralOrderLineNum = default(long); 
			_databaseNum = default(int); 
			_centralOrderNum = default(long); 
			_masterAccountNum = default(int); 
			_profileNum = default(int); 
			_channelNum = default(int); 
			_channelAccountNum = default(int); 
			_channelOrderID = String.Empty; 
			_channelOrderLineNum = default(int); 
			_merchantLineNumber = default(int); 
			_customerOrderLineNumber = default(int); 
			_hubLineID = String.Empty; 
			_merchantNRProductID = String.Empty; 
			_merchantSKU = String.Empty; 
			_vendorSKU = String.Empty; 
			_manufacturerSKU = String.Empty; 
			_shoppingCartSKU = String.Empty; 
			_vendorDescription = String.Empty; 
			_vendorStyleNumber = String.Empty; 
			_vendorColorDescription = String.Empty; 
			_vendorSizeDescription = String.Empty; 
			_merchantColorCode = String.Empty; 
			_merchantSizeCode = String.Empty; 
			_merchantSetCode = String.Empty; 
			_merchantDescription = String.Empty; 
			_merchantDescription2 = String.Empty; 
			_merchantDescription3 = String.Empty; 
			_merchantColorSizeDescription = String.Empty; 
			_fullRetailPrice = default(decimal); 
			_encodedPrice = String.Empty; 
			_unitShippingWeight = default(decimal); 
			_weightUnit = String.Empty; 
			_customerUnitPrice = default(decimal); 
			_unitCostToMerchant = default(decimal); 
			_lineMerchandiseCost = default(decimal); 
			_customerMerchandiseAmount = default(decimal); 
			_customerLineShippingAmount = default(decimal); 
			_customerLineHandlingAmount = default(decimal); 
			_customerLineSubTotalAmount = default(decimal); 
			_customerLineTaxAmount = default(decimal); 
			_customerLineTotalAmount = default(decimal); 
			_customerLineCredits = default(decimal); 
			_customerLineBalanceDue = default(decimal); 
			_lineDiscountAmount = default(decimal); 
			_vendorWareshoueID = String.Empty; 
			_expectedShipDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_packingSlipLineMessage = String.Empty; 
			_vendorLineNotes = String.Empty; 
			_storeName = String.Empty; 
			_personalizationData = String.Empty; 
			_facgtoryOrderNum = String.Empty; 
			_subUnitQty = default(decimal); 
			_giftWrapIndicator = String.Empty; 
			_holdUntilDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_requiredShipDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_requiredDeliveryDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_customerRequestedArrivalDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_shipperHubCode = String.Empty; 
			_shippingHub = String.Empty; 
			_serializedProduct = String.Empty; 
			_customerSKU = String.Empty; 
			_vendorQuoteNumber = String.Empty; 
			_giftRegistryID = String.Empty; 
			_merchantDepartment = String.Empty; 
			_ndcNumber = String.Empty; 
			_vendorPatternCode = String.Empty; 
			_vendorFinishCode = String.Empty; 
			_centralOrderUuid = String.Empty; 
			_centralOrderLineUuid = String.Empty; 
			_centralOrderLineMerchantExtUuid = String.Empty; 
            ClearChildren();
            return this;
        }

        public override OrderLineMerchantExt CheckIntegrity()
        {
            CheckUniqueId();
            CheckIntegrityOthers();
            return this;
        }

        public virtual OrderLineMerchantExt ClearChildren()
        {
            return this;
        }

        public virtual OrderLineMerchantExt NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(OrderLineMerchantExt data)
        {
            if (data is null) return;
            return;
        }

		public static IList<OrderLineMerchantExt> FindByCentralOrderUuid(IDataBaseFactory dbFactory, string centralOrderUuid)
		{
			return dbFactory.Find<OrderLineMerchantExt>("WHERE CentralOrderUuid = @0 ORDER BY CentralOrderLineNum ", centralOrderUuid).ToList();
		}
		public static long CountByCentralOrderUuid(IDataBaseFactory dbFactory, string centralOrderUuid)
		{
			return dbFactory.Count<OrderLineMerchantExt>("WHERE CentralOrderUuid = @0 ", centralOrderUuid);
		}
		public static async Task<IList<OrderLineMerchantExt>> FindByAsyncCentralOrderUuid(IDataBaseFactory dbFactory, string centralOrderUuid)
		{
			return (await dbFactory.FindAsync<OrderLineMerchantExt>("WHERE CentralOrderUuid = @0 ORDER BY CentralOrderLineNum ", centralOrderUuid)).ToList();
		}
		public static async Task<long> CountByAsyncCentralOrderUuid(IDataBaseFactory dbFactory, string centralOrderUuid)
		{
			return await dbFactory.CountAsync<OrderLineMerchantExt>("WHERE CentralOrderUuid = @0 ", centralOrderUuid);
		}
		public static IList<OrderLineMerchantExt> FindByCentralOrderLineUuid(IDataBaseFactory dbFactory, string centralOrderLineUuid)
		{
			return dbFactory.Find<OrderLineMerchantExt>("WHERE CentralOrderLineUuid = @0 ", centralOrderLineUuid).ToList();
		}
		public static long CountByCentralOrderLineUuid(IDataBaseFactory dbFactory, string centralOrderLineUuid)
		{
			return dbFactory.Count<OrderLineMerchantExt>("WHERE CentralOrderLineUuid = @0 ", centralOrderLineUuid);
		}
		public static async Task<IList<OrderLineMerchantExt>> FindByAsyncCentralOrderLineUuid(IDataBaseFactory dbFactory, string centralOrderLineUuid)
		{
			return (await dbFactory.FindAsync<OrderLineMerchantExt>("WHERE CentralOrderLineUuid = @0 ", centralOrderLineUuid)).ToList();
		}
		public static async Task<long> CountByAsyncCentralOrderLineUuid(IDataBaseFactory dbFactory, string centralOrderLineUuid)
		{
			return await dbFactory.CountAsync<OrderLineMerchantExt>("WHERE CentralOrderLineUuid = @0 ", centralOrderLineUuid);
		}


        #endregion Methods - Generated 
    }
}



