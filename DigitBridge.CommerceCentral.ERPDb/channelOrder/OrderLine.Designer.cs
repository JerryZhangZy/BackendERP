
              

              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderLine.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("OrderLine")]
    [PrimaryKey("CentralOrderLineNum", AutoIncrement = true)]
    [UniqueId("CentralOrderLineUuid")]
    [DtoName("OrderLineDto")]
    public partial class OrderLine : TableRepository<OrderLine, long>
    {

        public OrderLine() : base() {}
        public OrderLine(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
		[ResultColumn(Name = "CentralOrderLineNum", IncludeInAutoSelect = IncludeInAutoSelect.Yes)] 
		protected long _centralOrderLineNum; 
		[XmlIgnore, IgnoreCompare] 
		public virtual long CentralOrderLineNum
		{
			get => _centralOrderLineNum;
			set => _centralOrderLineNum = value;
		}
		[XmlIgnore, IgnoreCompare] 
		public override long RowNum
		{
			get => CentralOrderLineNum.ToLong();
			set => CentralOrderLineNum = value.ToLong();
		}
		[JsonIgnore, XmlIgnore, IgnoreCompare] 
		public override bool IsNew => CentralOrderLineNum <= 0; 
        [Column("DatabaseNum",SqlDbType.Int,NotNull=true)]
        private int _databaseNum;

        [Column("CentralOrderNum",SqlDbType.BigInt,NotNull=true)]
        private long _centralOrderNum;

        [Column("MasterAccountNum",SqlDbType.Int,NotNull=true)]
        private int _masterAccountNum;

        [Column("ProfileNum",SqlDbType.Int,NotNull=true)]
        private int _profileNum;

        [Column("ChannelNum",SqlDbType.Int,NotNull=true)]
        private int _channelNum;

        [Column("ChannelAccountNum",SqlDbType.Int,NotNull=true)]
        private int _channelAccountNum;

        [Column("ChannelOrderID",SqlDbType.VarChar,NotNull=true)]
        private string _channelOrderID;

        [Column("CentralProductNum",SqlDbType.BigInt)]
        private long? _centralProductNum;

        [Column("ChannelItemID",SqlDbType.VarChar)]
        private string _channelItemID;

        [Column("SKU",SqlDbType.VarChar)]
        private string _sKU;

        [Column("ItemTitle",SqlDbType.NVarChar)]
        private string _itemTitle;

        [Column("OrderQty",SqlDbType.Decimal)]
        private decimal? _orderQty;

        [Column("UnitPrice",SqlDbType.Money)]
        private decimal? _unitPrice;

        [Column("LineItemTaxAmount",SqlDbType.Money)]
        private decimal? _lineItemTaxAmount;

        [Column("LineShippingAmount",SqlDbType.Money)]
        private decimal? _lineShippingAmount;

        [Column("LineShippingTaxAmount",SqlDbType.Money)]
        private decimal? _lineShippingTaxAmount;

        [Column("LineShippingDiscount",SqlDbType.Money)]
        private decimal? _lineShippingDiscount;

        [Column("LineShippingDiscountTaxAmount",SqlDbType.Money)]
        private decimal? _lineShippingDiscountTaxAmount;

        [Column("LineRecyclingFee",SqlDbType.Money)]
        private decimal? _lineRecyclingFee;

        [Column("LineGiftMsg",SqlDbType.NVarChar)]
        private string _lineGiftMsg;

        [Column("LineGiftNotes",SqlDbType.NVarChar)]
        private string _lineGiftNotes;

        [Column("LineGiftAmount",SqlDbType.Money)]
        private decimal? _lineGiftAmount;

        [Column("LineGiftTaxAmount",SqlDbType.Money)]
        private decimal? _lineGiftTaxAmount;

        [Column("LinePromotionCodes",SqlDbType.NVarChar)]
        private string _linePromotionCodes;

        [Column("LinePromotionAmount",SqlDbType.Money)]
        private decimal? _linePromotionAmount;

        [Column("LinePromotionTaxAmount",SqlDbType.Money)]
        private decimal? _linePromotionTaxAmount;

        [Column("BundleStatus",SqlDbType.TinyInt)]
        private byte? _bundleStatus;

        [Column("HarmonizedCode",SqlDbType.VarChar)]
        private string _harmonizedCode;

        [Column("UPC",SqlDbType.VarChar)]
        private string _uPC;

        [Column("EAN",SqlDbType.VarChar)]
        private string _eAN;

        [Column("UnitOfMeasure",SqlDbType.VarChar)]
        private string _unitOfMeasure;

        [Column("DBChannelOrderLineRowID",SqlDbType.VarChar)]
        private string _dBChannelOrderLineRowID;

        [Column("CentralOrderUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _centralOrderUuid;

        [Column("CentralOrderLineUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _centralOrderLineUuid;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => CentralOrderLineUuid; 
		public void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(CentralOrderLineUuid)) 
				CentralOrderLineUuid = Guid.NewGuid().ToString(); 
		}
		/// <summary>
		/// Each database has its own default value.
		/// </summary>
        public virtual int DatabaseNum
        {
            get
            {
				return _databaseNum; 
            }
            set
            {
				_databaseNum = value; 
				OnPropertyChanged("DatabaseNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual long CentralOrderNum
        {
            get
            {
				return _centralOrderNum; 
            }
            set
            {
				_centralOrderNum = value; 
				OnPropertyChanged("CentralOrderNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual int MasterAccountNum
        {
            get
            {
				return _masterAccountNum; 
            }
            set
            {
				_masterAccountNum = value; 
				OnPropertyChanged("MasterAccountNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual int ProfileNum
        {
            get
            {
				return _profileNum; 
            }
            set
            {
				_profileNum = value; 
				OnPropertyChanged("ProfileNum", value);
            }
        }

		/// <summary>
		/// The channel which sells the item. Refer to Master Account Channel Setting
		/// </summary>
        public virtual int ChannelNum
        {
            get
            {
				return _channelNum; 
            }
            set
            {
				_channelNum = value; 
				OnPropertyChanged("ChannelNum", value);
            }
        }

		/// <summary>
		/// The unique number of this profileâ€™s channel account
		/// </summary>
        public virtual int ChannelAccountNum
        {
            get
            {
				return _channelAccountNum; 
            }
            set
            {
				_channelAccountNum = value; 
				OnPropertyChanged("ChannelAccountNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ChannelOrderID
        {
            get
            {
				return _channelOrderID?.TrimEnd(); 
            }
            set
            {
				_channelOrderID = value.TruncateTo(130); 
				OnPropertyChanged("ChannelOrderID", value);
            }
        }

		/// <summary>
		/// Unique product (item) number
		/// </summary>
        public virtual long? CentralProductNum
        {
            get
            {
				if (!AllowNull && _centralProductNum is null) 
					_centralProductNum = default(long); 
				return _centralProductNum; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_centralProductNum = value; 
					OnPropertyChanged("CentralProductNum", value);
				}
            }
        }

		/// <summary>
		/// The item ID on channel, which mostly is not the SKU unless it is the webstore order.
		/// </summary>
        public virtual string ChannelItemID
        {
            get
            {
				if (!AllowNull && _channelItemID is null) 
					_channelItemID = String.Empty; 
				return _channelItemID?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_channelItemID = value.TruncateTo(50); 
					OnPropertyChanged("ChannelItemID", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string SKU
        {
            get
            {
				if (!AllowNull && _sKU is null) 
					_sKU = String.Empty; 
				return _sKU?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_sKU = value.TruncateTo(100); 
					OnPropertyChanged("SKU", value);
				}
            }
        }

		/// <summary>
		/// The title comes with the original order. If the original title is longer, it will be truncated.
		/// </summary>
        public virtual string ItemTitle
        {
            get
            {
				if (!AllowNull && _itemTitle is null) 
					_itemTitle = String.Empty; 
				return _itemTitle?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_itemTitle = value.TruncateTo(200); 
					OnPropertyChanged("ItemTitle", value);
				}
            }
        }

		/// <summary>
		/// Use int here to be consistent with the majority of the channels.
		/// </summary>
        public virtual decimal? OrderQty
        {
            get
            {
				if (!AllowNull && _orderQty is null) 
					_orderQty = default(decimal); 
				return _orderQty; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_orderQty = value; 
					OnPropertyChanged("OrderQty", value);
				}
            }
        }

		/// <summary>
		/// For dropship, The cost, to the merchant, per unit (wholesale price).
		/// </summary>
        public virtual decimal? UnitPrice
        {
            get
            {
				if (!AllowNull && _unitPrice is null) 
					_unitPrice = default(decimal); 
				return _unitPrice; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_unitPrice = value; 
					OnPropertyChanged("UnitPrice", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal? LineItemTaxAmount
        {
            get
            {
				if (!AllowNull && _lineItemTaxAmount is null) 
					_lineItemTaxAmount = default(decimal); 
				return _lineItemTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineItemTaxAmount = value; 
					OnPropertyChanged("LineItemTaxAmount", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal? LineShippingAmount
        {
            get
            {
				if (!AllowNull && _lineShippingAmount is null) 
					_lineShippingAmount = default(decimal); 
				return _lineShippingAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineShippingAmount = value; 
					OnPropertyChanged("LineShippingAmount", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal? LineShippingTaxAmount
        {
            get
            {
				if (!AllowNull && _lineShippingTaxAmount is null) 
					_lineShippingTaxAmount = default(decimal); 
				return _lineShippingTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineShippingTaxAmount = value; 
					OnPropertyChanged("LineShippingTaxAmount", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal? LineShippingDiscount
        {
            get
            {
				if (!AllowNull && _lineShippingDiscount is null) 
					_lineShippingDiscount = default(decimal); 
				return _lineShippingDiscount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineShippingDiscount = value; 
					OnPropertyChanged("LineShippingDiscount", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal? LineShippingDiscountTaxAmount
        {
            get
            {
				if (!AllowNull && _lineShippingDiscountTaxAmount is null) 
					_lineShippingDiscountTaxAmount = default(decimal); 
				return _lineShippingDiscountTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineShippingDiscountTaxAmount = value; 
					OnPropertyChanged("LineShippingDiscountTaxAmount", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal? LineRecyclingFee
        {
            get
            {
				if (!AllowNull && _lineRecyclingFee is null) 
					_lineRecyclingFee = default(decimal); 
				return _lineRecyclingFee; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineRecyclingFee = value; 
					OnPropertyChanged("LineRecyclingFee", value);
				}
            }
        }

		/// <summary>
		/// Gift message printed on the line level.
		/// </summary>
        public virtual string LineGiftMsg
        {
            get
            {
				if (!AllowNull && _lineGiftMsg is null) 
					_lineGiftMsg = String.Empty; 
				return _lineGiftMsg?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineGiftMsg = value.TruncateTo(500); 
					OnPropertyChanged("LineGiftMsg", value);
				}
            }
        }

		/// <summary>
		/// Description of the gift wrapping.
		/// </summary>
        public virtual string LineGiftNotes
        {
            get
            {
				if (!AllowNull && _lineGiftNotes is null) 
					_lineGiftNotes = String.Empty; 
				return _lineGiftNotes?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineGiftNotes = value.TruncateTo(400); 
					OnPropertyChanged("LineGiftNotes", value);
				}
            }
        }

		/// <summary>
		/// The gift wrapping cost for all quantity.
		/// </summary>
        public virtual decimal? LineGiftAmount
        {
            get
            {
				if (!AllowNull && _lineGiftAmount is null) 
					_lineGiftAmount = default(decimal); 
				return _lineGiftAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineGiftAmount = value; 
					OnPropertyChanged("LineGiftAmount", value);
				}
            }
        }

		/// <summary>
		/// The gift wrapping tax cost for all quantity.
		/// </summary>
        public virtual decimal? LineGiftTaxAmount
        {
            get
            {
				if (!AllowNull && _lineGiftTaxAmount is null) 
					_lineGiftTaxAmount = default(decimal); 
				return _lineGiftTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lineGiftTaxAmount = value; 
					OnPropertyChanged("LineGiftTaxAmount", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string LinePromotionCodes
        {
            get
            {
				if (!AllowNull && _linePromotionCodes is null) 
					_linePromotionCodes = String.Empty; 
				return _linePromotionCodes?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_linePromotionCodes = value.TruncateTo(500); 
					OnPropertyChanged("LinePromotionCodes", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal? LinePromotionAmount
        {
            get
            {
				if (!AllowNull && _linePromotionAmount is null) 
					_linePromotionAmount = default(decimal); 
				return _linePromotionAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_linePromotionAmount = value; 
					OnPropertyChanged("LinePromotionAmount", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal? LinePromotionTaxAmount
        {
            get
            {
				if (!AllowNull && _linePromotionTaxAmount is null) 
					_linePromotionTaxAmount = default(decimal); 
				return _linePromotionTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_linePromotionTaxAmount = value; 
					OnPropertyChanged("LinePromotionTaxAmount", value);
				}
            }
        }

		/// <summary>
		/// Indicates if the order item is a bundle.
		/// </summary>
        public virtual bool BundleStatus
        {
            get
            {
				if (!AllowNull && _bundleStatus is null) 
					_bundleStatus = default(byte); 
				return (_bundleStatus == 1); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_bundleStatus = value ? (byte)1 : (byte)0; 
					OnPropertyChanged("BundleStatus", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string HarmonizedCode
        {
            get
            {
				if (!AllowNull && _harmonizedCode is null) 
					_harmonizedCode = String.Empty; 
				return _harmonizedCode?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_harmonizedCode = value.TruncateTo(20); 
					OnPropertyChanged("HarmonizedCode", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string UPC
        {
            get
            {
				if (!AllowNull && _uPC is null) 
					_uPC = String.Empty; 
				return _uPC?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_uPC = value.TruncateTo(20); 
					OnPropertyChanged("UPC", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string EAN
        {
            get
            {
				if (!AllowNull && _eAN is null) 
					_eAN = String.Empty; 
				return _eAN?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_eAN = value.TruncateTo(20); 
					OnPropertyChanged("EAN", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string UnitOfMeasure
        {
            get
            {
				if (!AllowNull && _unitOfMeasure is null) 
					_unitOfMeasure = String.Empty; 
				return _unitOfMeasure?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_unitOfMeasure = value.TruncateTo(20); 
					OnPropertyChanged("UnitOfMeasure", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string DBChannelOrderLineRowID
        {
            get
            {
				if (!AllowNull && _dBChannelOrderLineRowID is null) 
					_dBChannelOrderLineRowID = String.Empty; 
				return _dBChannelOrderLineRowID?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_dBChannelOrderLineRowID = value.TruncateTo(50); 
					OnPropertyChanged("DBChannelOrderLineRowID", value);
				}
            }
        }

		/// <summary>
		/// Global Unique Guid for CentralOrder
		/// </summary>
        public virtual string CentralOrderUuid
        {
            get
            {
				return _centralOrderUuid?.TrimEnd(); 
            }
            set
            {
				_centralOrderUuid = value.TruncateTo(50); 
				OnPropertyChanged("CentralOrderUuid", value);
            }
        }

		/// <summary>
		/// Global Unique Guid for CentralOrder line
		/// </summary>
        public virtual string CentralOrderLineUuid
        {
            get
            {
				return _centralOrderLineUuid?.TrimEnd(); 
            }
            set
            {
				_centralOrderLineUuid = value.TruncateTo(50); 
				OnPropertyChanged("CentralOrderLineUuid", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private ChannelOrderData Parent { get; set; }
		public ChannelOrderData GetParent() => Parent;
		public OrderLine SetParent(ChannelOrderData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			CentralOrderLineUuid = Guid.NewGuid().ToString(); 
			_centralOrderLineNum = 0; 
            return;
        }

        public override OrderLine Clear()
        {
            base.Clear();
			_centralOrderLineNum = default(long); 
			_databaseNum = default(int); 
			_centralOrderNum = default(long); 
			_masterAccountNum = default(int); 
			_profileNum = default(int); 
			_channelNum = default(int); 
			_channelAccountNum = default(int); 
			_channelOrderID = String.Empty; 
			_centralProductNum = AllowNull ? (long?)null : default(long); 
			_channelItemID = AllowNull ? (string)null : String.Empty; 
			_sKU = AllowNull ? (string)null : String.Empty; 
			_itemTitle = AllowNull ? (string)null : String.Empty; 
			_orderQty = AllowNull ? (decimal?)null : default(decimal); 
			_unitPrice = AllowNull ? (decimal?)null : default(decimal); 
			_lineItemTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_lineShippingAmount = AllowNull ? (decimal?)null : default(decimal); 
			_lineShippingTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_lineShippingDiscount = AllowNull ? (decimal?)null : default(decimal); 
			_lineShippingDiscountTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_lineRecyclingFee = AllowNull ? (decimal?)null : default(decimal); 
			_lineGiftMsg = AllowNull ? (string)null : String.Empty; 
			_lineGiftNotes = AllowNull ? (string)null : String.Empty; 
			_lineGiftAmount = AllowNull ? (decimal?)null : default(decimal); 
			_lineGiftTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_linePromotionCodes = AllowNull ? (string)null : String.Empty; 
			_linePromotionAmount = AllowNull ? (decimal?)null : default(decimal); 
			_linePromotionTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_bundleStatus = AllowNull ? (byte?)null : default(byte); 
			_harmonizedCode = AllowNull ? (string)null : String.Empty; 
			_uPC = AllowNull ? (string)null : String.Empty; 
			_eAN = AllowNull ? (string)null : String.Empty; 
			_unitOfMeasure = AllowNull ? (string)null : String.Empty; 
			_dBChannelOrderLineRowID = AllowNull ? (string)null : String.Empty; 
			_centralOrderUuid = String.Empty; 
			_centralOrderLineUuid = String.Empty; 
            ClearChildren();
            return this;
        }

        public virtual OrderLine CheckIntegrity()
        {
            return this;
        }

        public virtual OrderLine ClearChildren()
        {
            return this;
        }

        public virtual OrderLine NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(OrderLine data)
        {
            if (data is null) return;
            return;
        }

		public static IList<OrderLine> FindByCentralOrderNum(IDataBaseFactory dbFactory, long centralOrderNum)
		{
			return dbFactory.Find<OrderLine>("WHERE CentralOrderNum = @0 ", centralOrderNum).ToList();
		}
		public static long CountByCentralOrderNum(IDataBaseFactory dbFactory, long centralOrderNum)
		{
			return dbFactory.Count<OrderLine>("WHERE CentralOrderNum = @0 ", centralOrderNum);
		}
		public static async Task<IList<OrderLine>> FindByAsyncCentralOrderNum(IDataBaseFactory dbFactory, long centralOrderNum)
		{
			return (await dbFactory.FindAsync<OrderLine>("WHERE CentralOrderNum = @0 ", centralOrderNum)).ToList();
		}
		public static async Task<long> CountByAsyncCentralOrderNum(IDataBaseFactory dbFactory, long centralOrderNum)
		{
			return await dbFactory.CountAsync<OrderLine>("WHERE CentralOrderNum = @0 ", centralOrderNum);
		}


        #endregion Methods - Generated 
    }
}



