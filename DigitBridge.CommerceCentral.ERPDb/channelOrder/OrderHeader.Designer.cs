

              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderHeader.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("OrderHeader")]
    [PrimaryKey("CentralOrderNum", AutoIncrement = true)]
    [UniqueId("CentralOrderUuid")]
    [DtoName("OrderHeaderDto")]
    public partial class OrderHeader : TableRepository<OrderHeader, long>
    {

        public OrderHeader() : base() {}
        public OrderHeader(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("DatabaseNum",SqlDbType.Int,NotNull=true)]
        private int _databaseNum;

		[ResultColumn(Name = "CentralOrderNum", IncludeInAutoSelect = IncludeInAutoSelect.Yes)] 
		protected long _centralOrderNum; 
		[XmlIgnore, IgnoreCompare] 
		public virtual long CentralOrderNum
		{
			get => _centralOrderNum;
			set => _centralOrderNum = value;
		}
		[XmlIgnore, IgnoreCompare] 
		public override long RowNum
		{
			get => CentralOrderNum.ToLong();
			set => CentralOrderNum = value.ToLong();
		}
		[JsonIgnore, XmlIgnore, IgnoreCompare] 
		public override bool IsNew => CentralOrderNum <= 0; 
        [Column("MasterAccountNum",SqlDbType.Int,NotNull=true)]
        private int _masterAccountNum;

        [Column("ProfileNum",SqlDbType.Int,NotNull=true)]
        private int _profileNum;

        [Column("ChannelNum",SqlDbType.Int,NotNull=true)]
        private int _channelNum;

        [Column("ChannelAccountNum",SqlDbType.Int,NotNull=true)]
        private int _channelAccountNum;

        [Column("UserDataPresent",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _userDataPresent;

        [Column("UserDataRemoveDateUtc",SqlDbType.DateTime)]
        private DateTime? _userDataRemoveDateUtc;

        [Column("ChannelOrderID",SqlDbType.VarChar,NotNull=true)]
        private string _channelOrderID;

        [Column("SecondaryChannelOrderID",SqlDbType.VarChar)]
        private string _secondaryChannelOrderID;

        [Column("SellerOrderID",SqlDbType.VarChar)]
        private string _sellerOrderID;

        [Column("Currency",SqlDbType.VarChar)]
        private string _currency;

        [Column("OriginalOrderDateUtc",SqlDbType.DateTime,NotNull=true)]
        private DateTime _originalOrderDateUtc;

        [Column("SellerPublicNote",SqlDbType.VarChar)]
        private string _sellerPublicNote;

        [Column("SellerPrivateNote",SqlDbType.VarChar)]
        private string _sellerPrivateNote;

        [Column("EndBuyerInstruction",SqlDbType.VarChar)]
        private string _endBuyerInstruction;

        [Column("TotalOrderAmount",SqlDbType.Money)]
        private decimal? _totalOrderAmount;

        [Column("TotalTaxAmount",SqlDbType.Money)]
        private decimal? _totalTaxAmount;

        [Column("TotalShippingAmount",SqlDbType.Money)]
        private decimal? _totalShippingAmount;

        [Column("TotalShippingTaxAmount",SqlDbType.Money)]
        private decimal? _totalShippingTaxAmount;

        [Column("TotalShippingDiscount",SqlDbType.Money)]
        private decimal? _totalShippingDiscount;

        [Column("TotalShippingDiscountTaxAmount",SqlDbType.Money)]
        private decimal? _totalShippingDiscountTaxAmount;

        [Column("TotalInsuranceAmount",SqlDbType.Money)]
        private decimal? _totalInsuranceAmount;

        [Column("TotalGiftOptionAmount",SqlDbType.Money)]
        private decimal? _totalGiftOptionAmount;

        [Column("TotalGiftOptionTaxAmount",SqlDbType.Money)]
        private decimal? _totalGiftOptionTaxAmount;

        [Column("AdditionalCostOrDiscount",SqlDbType.Money)]
        private decimal? _additionalCostOrDiscount;

        [Column("PromotionAmount",SqlDbType.Money)]
        private decimal? _promotionAmount;

        [Column("EstimatedShipDateUtc",SqlDbType.DateTime)]
        private DateTime? _estimatedShipDateUtc;

        [Column("DeliverByDateUtc",SqlDbType.DateTime)]
        private DateTime? _deliverByDateUtc;

        [Column("RequestedShippingCarrier",SqlDbType.VarChar)]
        private string _requestedShippingCarrier;

        [Column("RequestedShippingClass",SqlDbType.VarChar)]
        private string _requestedShippingClass;

        [Column("ResellerID",SqlDbType.VarChar)]
        private string _resellerID;

        [Column("FlagNum",SqlDbType.SmallInt)]
        private short? _flagNum;

        [Column("FlagDesc",SqlDbType.VarChar)]
        private string _flagDesc;

        [Column("PaymentStatus",SqlDbType.TinyInt)]
        private byte? _paymentStatus;

        [Column("PaymentUpdateUtc",SqlDbType.DateTime)]
        private DateTime? _paymentUpdateUtc;

        [Column("ShippingUpdateUtc",SqlDbType.DateTime)]
        private DateTime? _shippingUpdateUtc;

        [Column("EndBuyerUserID",SqlDbType.VarChar)]
        private string _endBuyerUserID;

        [Column("EndBuyerEmail",SqlDbType.VarChar)]
        private string _endBuyerEmail;

        [Column("PaymentMethod",SqlDbType.NVarChar)]
        private string _paymentMethod;

        [Column("ShipToName",SqlDbType.NVarChar)]
        private string _shipToName;

        [Column("ShipToFirstName",SqlDbType.NVarChar)]
        private string _shipToFirstName;

        [Column("ShipToLastName",SqlDbType.NVarChar)]
        private string _shipToLastName;

        [Column("ShipToSuffix",SqlDbType.NVarChar)]
        private string _shipToSuffix;

        [Column("ShipToCompany",SqlDbType.NVarChar)]
        private string _shipToCompany;

        [Column("ShipToCompanyJobTitle",SqlDbType.NVarChar)]
        private string _shipToCompanyJobTitle;

        [Column("ShipToAttention",SqlDbType.NVarChar)]
        private string _shipToAttention;

        [Column("ShipToDaytimePhone",SqlDbType.VarChar)]
        private string _shipToDaytimePhone;

        [Column("ShipToNightPhone",SqlDbType.VarChar)]
        private string _shipToNightPhone;

        [Column("ShipToAddressLine1",SqlDbType.NVarChar)]
        private string _shipToAddressLine1;

        [Column("ShipToAddressLine2",SqlDbType.NVarChar)]
        private string _shipToAddressLine2;

        [Column("ShipToAddressLine3",SqlDbType.NVarChar)]
        private string _shipToAddressLine3;

        [Column("ShipToCity",SqlDbType.NVarChar)]
        private string _shipToCity;

        [Column("ShipToState",SqlDbType.NVarChar)]
        private string _shipToState;

        [Column("ShipToStateFullName",SqlDbType.NVarChar)]
        private string _shipToStateFullName;

        [Column("ShipToPostalCode",SqlDbType.NVarChar)]
        private string _shipToPostalCode;

        [Column("ShipToPostalCodeExt",SqlDbType.NVarChar)]
        private string _shipToPostalCodeExt;

        [Column("ShipToCounty",SqlDbType.NVarChar)]
        private string _shipToCounty;

        [Column("ShipToCountry",SqlDbType.NVarChar)]
        private string _shipToCountry;

        [Column("ShipToEmail",SqlDbType.NVarChar)]
        private string _shipToEmail;

        [Column("BillToName",SqlDbType.NVarChar)]
        private string _billToName;

        [Column("BillToFirstName",SqlDbType.NVarChar)]
        private string _billToFirstName;

        [Column("BillToLastName",SqlDbType.NVarChar)]
        private string _billToLastName;

        [Column("BillToSuffix",SqlDbType.NVarChar)]
        private string _billToSuffix;

        [Column("BillToCompany",SqlDbType.NVarChar)]
        private string _billToCompany;

        [Column("BillToCompanyJobTitle",SqlDbType.NVarChar)]
        private string _billToCompanyJobTitle;

        [Column("BillToAttention",SqlDbType.NVarChar)]
        private string _billToAttention;

        [Column("BillToAddressLine1",SqlDbType.NVarChar)]
        private string _billToAddressLine1;

        [Column("BillToAddressLine2",SqlDbType.NVarChar)]
        private string _billToAddressLine2;

        [Column("BillToAddressLine3",SqlDbType.NVarChar)]
        private string _billToAddressLine3;

        [Column("BillToCity",SqlDbType.NVarChar)]
        private string _billToCity;

        [Column("BillToState",SqlDbType.NVarChar)]
        private string _billToState;

        [Column("BillToStateFullName",SqlDbType.NVarChar)]
        private string _billToStateFullName;

        [Column("BillToPostalCode",SqlDbType.NVarChar)]
        private string _billToPostalCode;

        [Column("BillToPostalCodeExt",SqlDbType.NVarChar)]
        private string _billToPostalCodeExt;

        [Column("BillToCounty",SqlDbType.NVarChar)]
        private string _billToCounty;

        [Column("BillToCountry",SqlDbType.NVarChar)]
        private string _billToCountry;

        [Column("BillToEmail",SqlDbType.NVarChar)]
        private string _billToEmail;

        [Column("BillToDaytimePhone",SqlDbType.VarChar)]
        private string _billToDaytimePhone;

        [Column("BillToNightPhone",SqlDbType.VarChar)]
        private string _billToNightPhone;

        [Column("SignatureFlag",SqlDbType.VarChar)]
        private string _signatureFlag;

        [Column("PickupFlag",SqlDbType.VarChar)]
        private string _pickupFlag;

        [Column("MerchantDivision",SqlDbType.VarChar)]
        private string _merchantDivision;

        [Column("MerchantBatchNumber",SqlDbType.VarChar)]
        private string _merchantBatchNumber;

        [Column("MerchantDepartmentSiteID",SqlDbType.VarChar)]
        private string _merchantDepartmentSiteID;

        [Column("ReservationNumber",SqlDbType.VarChar)]
        private string _reservationNumber;

        [Column("MerchantShipToAddressType",SqlDbType.VarChar)]
        private string _merchantShipToAddressType;

        [Column("CustomerOrganizationType",SqlDbType.TinyInt)]
        private byte? _customerOrganizationType;

        [Column("OrderMark",SqlDbType.TinyInt)]
        private byte? _orderMark;

        [Column("OrderMark2",SqlDbType.TinyInt)]
        private byte? _orderMark2;

        [Column("OrderStatus",SqlDbType.TinyInt)]
        private byte? _orderStatus;

        [Column("OrderStatusUpdateDateUtc",SqlDbType.DateTime)]
        private DateTime? _orderStatusUpdateDateUtc;

        [Column("DBChannelOrderHeaderRowID",SqlDbType.VarChar)]
        private string _dBChannelOrderHeaderRowID;

        [Column("DCAssignmentStatus",SqlDbType.Int)]
        private int? _dCAssignmentStatus;

        [Column("DCAssignmentDateUtc",SqlDbType.DateTime)]
        private DateTime? _dCAssignmentDateUtc;

        [Column("CentralOrderUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _centralOrderUuid;

        [Column("TotalDueSellerAmount",SqlDbType.Money,NotNull=true,IsDefault=true)]
        private decimal _totalDueSellerAmount;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => CentralOrderUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(CentralOrderUuid)) 
				CentralOrderUuid = Guid.NewGuid().ToString(); 
		}
		/// <summary>
		/// Database Number. Required, Title: Database Number, Display: false, Editable: false--
		/// </summary>
        public virtual int DatabaseNum
        {
            get
            {
				return _databaseNum; 
            }
            set
            {
				_databaseNum = value; 
				OnPropertyChanged("DatabaseNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual int MasterAccountNum
        {
            get
            {
				return _masterAccountNum; 
            }
            set
            {
				_masterAccountNum = value; 
				OnPropertyChanged("MasterAccountNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual int ProfileNum
        {
            get
            {
				return _profileNum; 
            }
            set
            {
				_profileNum = value; 
				OnPropertyChanged("ProfileNum", value);
            }
        }

		/// <summary>
		/// The channel which sells the item. Refer to Master Account Channel Setting
		/// </summary>
        public virtual int ChannelNum
        {
            get
            {
				return _channelNum; 
            }
            set
            {
				_channelNum = value; 
				OnPropertyChanged("ChannelNum", value);
            }
        }

		/// <summary>
		/// The unique number of this profile’s channel account
		/// </summary>
        public virtual int ChannelAccountNum
        {
            get
            {
				return _channelAccountNum; 
            }
            set
            {
				_channelAccountNum = value; 
				OnPropertyChanged("ChannelAccountNum", value);
            }
        }

		/// <summary>
		/// Default 1 Has User data. Some channel may require to remove the user data after a certain time frame. 0, unknow. 1, Present. 255, Removed. Default 0.
		/// </summary>
        public virtual bool UserDataPresent
        {
            get
            {
				return (_userDataPresent == 1); 
            }
            set
            {
				_userDataPresent = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("UserDataPresent", value);
            }
        }

		/// <summary>
		/// The UTC date user data was removed
		/// </summary>
        public virtual DateTime? UserDataRemoveDateUtc
        {
            get
            {
				if (!AllowNull && _userDataRemoveDateUtc is null) 
					_userDataRemoveDateUtc = new DateTime().MinValueSql(); 
				return _userDataRemoveDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_userDataRemoveDateUtc = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("UserDataRemoveDateUtc", value);
				}
            }
        }

		/// <summary>
		/// This usually is the marketplace order ID, or merchant PO Number
		/// </summary>
        public virtual string ChannelOrderID
        {
            get
            {
				return _channelOrderID?.TrimEnd(); 
            }
            set
            {
				_channelOrderID = value.TruncateTo(130); 
				OnPropertyChanged("ChannelOrderID", value);
            }
        }

		/// <summary>
		/// Secondary identifier provided by the channel. This is a secondary marketplace-generated Order ID. It is not populated most of the time.
		/// </summary>
        public virtual string SecondaryChannelOrderID
        {
            get
            {
				if (!AllowNull && _secondaryChannelOrderID is null) 
					_secondaryChannelOrderID = String.Empty; 
				return _secondaryChannelOrderID?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_secondaryChannelOrderID = value.TruncateTo(200); 
					OnPropertyChanged("SecondaryChannelOrderID", value);
				}
            }
        }

		/// <summary>
		/// Order identifier assigned by the seller. Usually it is not used.
		/// </summary>
        public virtual string SellerOrderID
        {
            get
            {
				if (!AllowNull && _sellerOrderID is null) 
					_sellerOrderID = String.Empty; 
				return _sellerOrderID?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_sellerOrderID = value.TruncateTo(30); 
					OnPropertyChanged("SellerOrderID", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string Currency
        {
            get
            {
				if (!AllowNull && _currency is null) 
					_currency = String.Empty; 
				return _currency?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_currency = value.TruncateTo(10); 
					OnPropertyChanged("Currency", value);
				}
            }
        }

		/// <summary>
		/// Timestamp when the order was created at the original channel
		/// </summary>
        public virtual DateTime OriginalOrderDateUtc
        {
            get
            {
				return _originalOrderDateUtc; 
            }
            set
            {
				_originalOrderDateUtc = value.ToSqlSafeValue(); 
				OnPropertyChanged("OriginalOrderDateUtc", value);
            }
        }

		/// <summary>
		/// The note from the seller may be included on the invoice or packing list
		/// </summary>
        public virtual string SellerPublicNote
        {
            get
            {
				if (!AllowNull && _sellerPublicNote is null) 
					_sellerPublicNote = String.Empty; 
				return _sellerPublicNote?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_sellerPublicNote = value.TruncateTo(4500); 
					OnPropertyChanged("SellerPublicNote", value);
				}
            }
        }

		/// <summary>
		/// The note from the seller for internal use. Cannot be printed on invoice or packing listing
		/// </summary>
        public virtual string SellerPrivateNote
        {
            get
            {
				if (!AllowNull && _sellerPrivateNote is null) 
					_sellerPrivateNote = String.Empty; 
				return _sellerPrivateNote?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_sellerPrivateNote = value.TruncateTo(4500); 
					OnPropertyChanged("SellerPrivateNote", value);
				}
            }
        }

		/// <summary>
		/// Usually it is related to shipping instruction
		/// </summary>
        public virtual string EndBuyerInstruction
        {
            get
            {
				if (!AllowNull && _endBuyerInstruction is null) 
					_endBuyerInstruction = String.Empty; 
				return _endBuyerInstruction?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_endBuyerInstruction = value.TruncateTo(4500); 
					OnPropertyChanged("EndBuyerInstruction", value);
				}
            }
        }

		/// <summary>
		/// Total order amount. Include every charge. Related to VAT. For US orders, tax should not be included. Refer to tax info to find more detail. Reference calculation
		/// </summary>
        public virtual decimal? TotalOrderAmount
        {
            get
            {
				if (!AllowNull && _totalOrderAmount is null) 
					_totalOrderAmount = default(decimal); 
				return _totalOrderAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_totalOrderAmount = value; 
					OnPropertyChanged("TotalOrderAmount", value);
				}
            }
        }

		/// <summary>
		/// Reference calculation. The real amount is provided by the channel.
		/// </summary>
        public virtual decimal? TotalTaxAmount
        {
            get
            {
				if (!AllowNull && _totalTaxAmount is null) 
					_totalTaxAmount = default(decimal); 
				return _totalTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_totalTaxAmount = value; 
					OnPropertyChanged("TotalTaxAmount", value);
				}
            }
        }

		/// <summary>
		/// Sum of all OrderItems ShippingPrice (Related to VAT. Refer to tax info for more detail) Does not include shipping item-level shipping promotions.
		/// </summary>
        public virtual decimal? TotalShippingAmount
        {
            get
            {
				if (!AllowNull && _totalShippingAmount is null) 
					_totalShippingAmount = default(decimal); 
				return _totalShippingAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_totalShippingAmount = value; 
					OnPropertyChanged("TotalShippingAmount", value);
				}
            }
        }

		/// <summary>
		/// Sum of all OrderItems ShippingTaxPrice. Number generated here is estimate based on tax (VAT) settings in the profile. For representation only. No actual data provided by channels.
		/// </summary>
        public virtual decimal? TotalShippingTaxAmount
        {
            get
            {
				if (!AllowNull && _totalShippingTaxAmount is null) 
					_totalShippingTaxAmount = default(decimal); 
				return _totalShippingTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_totalShippingTaxAmount = value; 
					OnPropertyChanged("TotalShippingTaxAmount", value);
				}
            }
        }

		/// <summary>
		/// Sum of all OrderItems ShippingDiscount Negative.
		/// </summary>
        public virtual decimal? TotalShippingDiscount
        {
            get
            {
				if (!AllowNull && _totalShippingDiscount is null) 
					_totalShippingDiscount = default(decimal); 
				return _totalShippingDiscount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_totalShippingDiscount = value; 
					OnPropertyChanged("TotalShippingDiscount", value);
				}
            }
        }

		/// <summary>
		/// Sum of all OrderItems ShippingDiscount Negative.
		/// </summary>
        public virtual decimal? TotalShippingDiscountTaxAmount
        {
            get
            {
				if (!AllowNull && _totalShippingDiscountTaxAmount is null) 
					_totalShippingDiscountTaxAmount = default(decimal); 
				return _totalShippingDiscountTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_totalShippingDiscountTaxAmount = value; 
					OnPropertyChanged("TotalShippingDiscountTaxAmount", value);
				}
            }
        }

		/// <summary>
		/// TotalInsurancePrice data - provided at order level only.
		/// </summary>
        public virtual decimal? TotalInsuranceAmount
        {
            get
            {
				if (!AllowNull && _totalInsuranceAmount is null) 
					_totalInsuranceAmount = default(decimal); 
				return _totalInsuranceAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_totalInsuranceAmount = value; 
					OnPropertyChanged("TotalInsuranceAmount", value);
				}
            }
        }

		/// <summary>
		/// Sum of all OrderItems GiftPrice (Related to VAT setting)
		/// </summary>
        public virtual decimal? TotalGiftOptionAmount
        {
            get
            {
				if (!AllowNull && _totalGiftOptionAmount is null) 
					_totalGiftOptionAmount = default(decimal); 
				return _totalGiftOptionAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_totalGiftOptionAmount = value; 
					OnPropertyChanged("TotalGiftOptionAmount", value);
				}
            }
        }

		/// <summary>
		/// Number generated here is estimate based on VAT settings in the profile. For representation only. No actual data provided by channels.
		/// </summary>
        public virtual decimal? TotalGiftOptionTaxAmount
        {
            get
            {
				if (!AllowNull && _totalGiftOptionTaxAmount is null) 
					_totalGiftOptionTaxAmount = default(decimal); 
				return _totalGiftOptionTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_totalGiftOptionTaxAmount = value; 
					OnPropertyChanged("TotalGiftOptionTaxAmount", value);
				}
            }
        }

		/// <summary>
		/// provided at order level only. Not commonly populated. Miscellaneous cost modification which may be positive to indicate a cost or negative to indicate a discount.
		/// </summary>
        public virtual decimal? AdditionalCostOrDiscount
        {
            get
            {
				if (!AllowNull && _additionalCostOrDiscount is null) 
					_additionalCostOrDiscount = default(decimal); 
				return _additionalCostOrDiscount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_additionalCostOrDiscount = value; 
					OnPropertyChanged("AdditionalCostOrDiscount", value);
				}
            }
        }

		/// <summary>
		/// provided at order level. Not a sum of Promotion Level pricing. A negative decimal. Will not be populated if item level promotions exist.
		/// </summary>
        public virtual decimal? PromotionAmount
        {
            get
            {
				if (!AllowNull && _promotionAmount is null) 
					_promotionAmount = default(decimal); 
				return _promotionAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_promotionAmount = value; 
					OnPropertyChanged("PromotionAmount", value);
				}
            }
        }

		/// <summary>
		/// Timestamp estimating when the order will be fulfilled.
		/// </summary>
        public virtual DateTime? EstimatedShipDateUtc
        {
            get
            {
				if (!AllowNull && _estimatedShipDateUtc is null) 
					_estimatedShipDateUtc = new DateTime().MinValueSql(); 
				return _estimatedShipDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_estimatedShipDateUtc = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("EstimatedShipDateUtc", value);
				}
            }
        }

		/// <summary>
		/// Timestamp indicating the deadline for fulfilling the order.
		/// </summary>
        public virtual DateTime? DeliverByDateUtc
        {
            get
            {
				if (!AllowNull && _deliverByDateUtc is null) 
					_deliverByDateUtc = new DateTime().MinValueSql(); 
				return _deliverByDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_deliverByDateUtc = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("DeliverByDateUtc", value);
				}
            }
        }

		/// <summary>
		/// Original requested shipping carrier from the channel.
		/// </summary>
        public virtual string RequestedShippingCarrier
        {
            get
            {
				if (!AllowNull && _requestedShippingCarrier is null) 
					_requestedShippingCarrier = String.Empty; 
				return _requestedShippingCarrier?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_requestedShippingCarrier = value.TruncateTo(50); 
					OnPropertyChanged("RequestedShippingCarrier", value);
				}
            }
        }

		/// <summary>
		/// Original requested shipping class provided from the channel
		/// </summary>
        public virtual string RequestedShippingClass
        {
            get
            {
				if (!AllowNull && _requestedShippingClass is null) 
					_requestedShippingClass = String.Empty; 
				return _requestedShippingClass?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_requestedShippingClass = value.TruncateTo(50); 
					OnPropertyChanged("RequestedShippingClass", value);
				}
            }
        }

		/// <summary>
		/// Identifier for a reseller agency. Amazon: FulfillmentChannel(AFN/MFN)
		/// </summary>
        public virtual string ResellerID
        {
            get
            {
				if (!AllowNull && _resellerID is null) 
					_resellerID = String.Empty; 
				return _resellerID?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_resellerID = value.TruncateTo(300); 
					OnPropertyChanged("ResellerID", value);
				}
            }
        }

		/// <summary>
		/// Enum. Identify the flag of an order, which may signal special attention is required.
		/// </summary>
        public virtual short? FlagNum
        {
            get
            {
				if (!AllowNull && _flagNum is null) 
					_flagNum = default(short); 
				return _flagNum; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_flagNum = value; 
					OnPropertyChanged("FlagNum", value);
				}
            }
        }

		/// <summary>
		/// Describe the flag reason or other notice
		/// </summary>
        public virtual string FlagDesc
        {
            get
            {
				if (!AllowNull && _flagDesc is null) 
					_flagDesc = String.Empty; 
				return _flagDesc?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_flagDesc = value.TruncateTo(100); 
					OnPropertyChanged("FlagDesc", value);
				}
            }
        }

		/// <summary>
		/// Enum. 0, unknown. 1, Paid. 200, NotPaid.
		/// </summary>
        public virtual bool PaymentStatus
        {
            get
            {
				if (!AllowNull && _paymentStatus is null) 
					_paymentStatus = default(byte); 
				return (_paymentStatus == 1); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_paymentStatus = value ? (byte)1 : (byte)0; 
					OnPropertyChanged("PaymentStatus", value);
				}
            }
        }

		/// <summary>
		/// Timestamp indicating the latest update to PaymentStatus.
		/// </summary>
        public virtual DateTime? PaymentUpdateUtc
        {
            get
            {
				if (!AllowNull && _paymentUpdateUtc is null) 
					_paymentUpdateUtc = new DateTime().MinValueSql(); 
				return _paymentUpdateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_paymentUpdateUtc = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("PaymentUpdateUtc", value);
				}
            }
        }

		/// <summary>
		/// Timestamp indicating the latest update to ShippingStatus.
		/// </summary>
        public virtual DateTime? ShippingUpdateUtc
        {
            get
            {
				if (!AllowNull && _shippingUpdateUtc is null) 
					_shippingUpdateUtc = new DateTime().MinValueSql(); 
				return _shippingUpdateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shippingUpdateUtc = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("ShippingUpdateUtc", value);
				}
            }
        }

		/// <summary>
		/// The marketplace user ID of the customer. Don’t use “Buyer” alone to avoid confusion with retailer buyer from the purchase department.
		/// </summary>
        public virtual string EndBuyerUserID
        {
            get
            {
				if (!AllowNull && _endBuyerUserID is null) 
					_endBuyerUserID = String.Empty; 
				return _endBuyerUserID?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_endBuyerUserID = value.TruncateTo(255); 
					OnPropertyChanged("EndBuyerUserID", value);
				}
            }
        }

		/// <summary>
		/// The email of the end customer
		/// </summary>
        public virtual string EndBuyerEmail
        {
            get
            {
				if (!AllowNull && _endBuyerEmail is null) 
					_endBuyerEmail = String.Empty; 
				return _endBuyerEmail?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_endBuyerEmail = value.TruncateTo(255); 
					OnPropertyChanged("EndBuyerEmail", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string PaymentMethod
        {
            get
            {
				if (!AllowNull && _paymentMethod is null) 
					_paymentMethod = String.Empty; 
				return _paymentMethod?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_paymentMethod = value.TruncateTo(50); 
					OnPropertyChanged("PaymentMethod", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToName
        {
            get
            {
				if (!AllowNull && _shipToName is null) 
					_shipToName = String.Empty; 
				return _shipToName?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToName = value.TruncateTo(100); 
					OnPropertyChanged("ShipToName", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToFirstName
        {
            get
            {
				if (!AllowNull && _shipToFirstName is null) 
					_shipToFirstName = String.Empty; 
				return _shipToFirstName?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToFirstName = value.TruncateTo(50); 
					OnPropertyChanged("ShipToFirstName", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToLastName
        {
            get
            {
				if (!AllowNull && _shipToLastName is null) 
					_shipToLastName = String.Empty; 
				return _shipToLastName?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToLastName = value.TruncateTo(50); 
					OnPropertyChanged("ShipToLastName", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToSuffix
        {
            get
            {
				if (!AllowNull && _shipToSuffix is null) 
					_shipToSuffix = String.Empty; 
				return _shipToSuffix?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToSuffix = value.TruncateTo(50); 
					OnPropertyChanged("ShipToSuffix", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToCompany
        {
            get
            {
				if (!AllowNull && _shipToCompany is null) 
					_shipToCompany = String.Empty; 
				return _shipToCompany?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToCompany = value.TruncateTo(100); 
					OnPropertyChanged("ShipToCompany", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToCompanyJobTitle
        {
            get
            {
				if (!AllowNull && _shipToCompanyJobTitle is null) 
					_shipToCompanyJobTitle = String.Empty; 
				return _shipToCompanyJobTitle?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToCompanyJobTitle = value.TruncateTo(100); 
					OnPropertyChanged("ShipToCompanyJobTitle", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToAttention
        {
            get
            {
				if (!AllowNull && _shipToAttention is null) 
					_shipToAttention = String.Empty; 
				return _shipToAttention?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToAttention = value.TruncateTo(100); 
					OnPropertyChanged("ShipToAttention", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToDaytimePhone
        {
            get
            {
				if (!AllowNull && _shipToDaytimePhone is null) 
					_shipToDaytimePhone = String.Empty; 
				return _shipToDaytimePhone?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToDaytimePhone = value.TruncateTo(50); 
					OnPropertyChanged("ShipToDaytimePhone", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToNightPhone
        {
            get
            {
				if (!AllowNull && _shipToNightPhone is null) 
					_shipToNightPhone = String.Empty; 
				return _shipToNightPhone?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToNightPhone = value.TruncateTo(50); 
					OnPropertyChanged("ShipToNightPhone", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToAddressLine1
        {
            get
            {
				if (!AllowNull && _shipToAddressLine1 is null) 
					_shipToAddressLine1 = String.Empty; 
				return _shipToAddressLine1?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToAddressLine1 = value.TruncateTo(100); 
					OnPropertyChanged("ShipToAddressLine1", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToAddressLine2
        {
            get
            {
				if (!AllowNull && _shipToAddressLine2 is null) 
					_shipToAddressLine2 = String.Empty; 
				return _shipToAddressLine2?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToAddressLine2 = value.TruncateTo(100); 
					OnPropertyChanged("ShipToAddressLine2", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToAddressLine3
        {
            get
            {
				if (!AllowNull && _shipToAddressLine3 is null) 
					_shipToAddressLine3 = String.Empty; 
				return _shipToAddressLine3?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToAddressLine3 = value.TruncateTo(100); 
					OnPropertyChanged("ShipToAddressLine3", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToCity
        {
            get
            {
				if (!AllowNull && _shipToCity is null) 
					_shipToCity = String.Empty; 
				return _shipToCity?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToCity = value.TruncateTo(50); 
					OnPropertyChanged("ShipToCity", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToState
        {
            get
            {
				if (!AllowNull && _shipToState is null) 
					_shipToState = String.Empty; 
				return _shipToState?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToState = value.TruncateTo(50); 
					OnPropertyChanged("ShipToState", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToStateFullName
        {
            get
            {
				if (!AllowNull && _shipToStateFullName is null) 
					_shipToStateFullName = String.Empty; 
				return _shipToStateFullName?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToStateFullName = value.TruncateTo(100); 
					OnPropertyChanged("ShipToStateFullName", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToPostalCode
        {
            get
            {
				if (!AllowNull && _shipToPostalCode is null) 
					_shipToPostalCode = String.Empty; 
				return _shipToPostalCode?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToPostalCode = value.TruncateTo(50); 
					OnPropertyChanged("ShipToPostalCode", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToPostalCodeExt
        {
            get
            {
				if (!AllowNull && _shipToPostalCodeExt is null) 
					_shipToPostalCodeExt = String.Empty; 
				return _shipToPostalCodeExt?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToPostalCodeExt = value.TruncateTo(50); 
					OnPropertyChanged("ShipToPostalCodeExt", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToCounty
        {
            get
            {
				if (!AllowNull && _shipToCounty is null) 
					_shipToCounty = String.Empty; 
				return _shipToCounty?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToCounty = value.TruncateTo(50); 
					OnPropertyChanged("ShipToCounty", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToCountry
        {
            get
            {
				if (!AllowNull && _shipToCountry is null) 
					_shipToCountry = String.Empty; 
				return _shipToCountry?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToCountry = value.TruncateTo(50); 
					OnPropertyChanged("ShipToCountry", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShipToEmail
        {
            get
            {
				if (!AllowNull && _shipToEmail is null) 
					_shipToEmail = String.Empty; 
				return _shipToEmail?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shipToEmail = value.TruncateTo(100); 
					OnPropertyChanged("ShipToEmail", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToName
        {
            get
            {
				if (!AllowNull && _billToName is null) 
					_billToName = String.Empty; 
				return _billToName?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToName = value.TruncateTo(100); 
					OnPropertyChanged("BillToName", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToFirstName
        {
            get
            {
				if (!AllowNull && _billToFirstName is null) 
					_billToFirstName = String.Empty; 
				return _billToFirstName?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToFirstName = value.TruncateTo(50); 
					OnPropertyChanged("BillToFirstName", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToLastName
        {
            get
            {
				if (!AllowNull && _billToLastName is null) 
					_billToLastName = String.Empty; 
				return _billToLastName?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToLastName = value.TruncateTo(50); 
					OnPropertyChanged("BillToLastName", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToSuffix
        {
            get
            {
				if (!AllowNull && _billToSuffix is null) 
					_billToSuffix = String.Empty; 
				return _billToSuffix?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToSuffix = value.TruncateTo(50); 
					OnPropertyChanged("BillToSuffix", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToCompany
        {
            get
            {
				if (!AllowNull && _billToCompany is null) 
					_billToCompany = String.Empty; 
				return _billToCompany?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToCompany = value.TruncateTo(100); 
					OnPropertyChanged("BillToCompany", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToCompanyJobTitle
        {
            get
            {
				if (!AllowNull && _billToCompanyJobTitle is null) 
					_billToCompanyJobTitle = String.Empty; 
				return _billToCompanyJobTitle?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToCompanyJobTitle = value.TruncateTo(100); 
					OnPropertyChanged("BillToCompanyJobTitle", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToAttention
        {
            get
            {
				if (!AllowNull && _billToAttention is null) 
					_billToAttention = String.Empty; 
				return _billToAttention?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToAttention = value.TruncateTo(100); 
					OnPropertyChanged("BillToAttention", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToAddressLine1
        {
            get
            {
				if (!AllowNull && _billToAddressLine1 is null) 
					_billToAddressLine1 = String.Empty; 
				return _billToAddressLine1?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToAddressLine1 = value.TruncateTo(100); 
					OnPropertyChanged("BillToAddressLine1", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToAddressLine2
        {
            get
            {
				if (!AllowNull && _billToAddressLine2 is null) 
					_billToAddressLine2 = String.Empty; 
				return _billToAddressLine2?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToAddressLine2 = value.TruncateTo(100); 
					OnPropertyChanged("BillToAddressLine2", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToAddressLine3
        {
            get
            {
				if (!AllowNull && _billToAddressLine3 is null) 
					_billToAddressLine3 = String.Empty; 
				return _billToAddressLine3?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToAddressLine3 = value.TruncateTo(100); 
					OnPropertyChanged("BillToAddressLine3", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToCity
        {
            get
            {
				if (!AllowNull && _billToCity is null) 
					_billToCity = String.Empty; 
				return _billToCity?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToCity = value.TruncateTo(50); 
					OnPropertyChanged("BillToCity", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToState
        {
            get
            {
				if (!AllowNull && _billToState is null) 
					_billToState = String.Empty; 
				return _billToState?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToState = value.TruncateTo(50); 
					OnPropertyChanged("BillToState", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToStateFullName
        {
            get
            {
				if (!AllowNull && _billToStateFullName is null) 
					_billToStateFullName = String.Empty; 
				return _billToStateFullName?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToStateFullName = value.TruncateTo(100); 
					OnPropertyChanged("BillToStateFullName", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToPostalCode
        {
            get
            {
				if (!AllowNull && _billToPostalCode is null) 
					_billToPostalCode = String.Empty; 
				return _billToPostalCode?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToPostalCode = value.TruncateTo(50); 
					OnPropertyChanged("BillToPostalCode", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToPostalCodeExt
        {
            get
            {
				if (!AllowNull && _billToPostalCodeExt is null) 
					_billToPostalCodeExt = String.Empty; 
				return _billToPostalCodeExt?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToPostalCodeExt = value.TruncateTo(50); 
					OnPropertyChanged("BillToPostalCodeExt", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToCounty
        {
            get
            {
				if (!AllowNull && _billToCounty is null) 
					_billToCounty = String.Empty; 
				return _billToCounty?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToCounty = value.TruncateTo(50); 
					OnPropertyChanged("BillToCounty", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToCountry
        {
            get
            {
				if (!AllowNull && _billToCountry is null) 
					_billToCountry = String.Empty; 
				return _billToCountry?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToCountry = value.TruncateTo(50); 
					OnPropertyChanged("BillToCountry", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToEmail
        {
            get
            {
				if (!AllowNull && _billToEmail is null) 
					_billToEmail = String.Empty; 
				return _billToEmail?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToEmail = value.TruncateTo(100); 
					OnPropertyChanged("BillToEmail", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToDaytimePhone
        {
            get
            {
				if (!AllowNull && _billToDaytimePhone is null) 
					_billToDaytimePhone = String.Empty; 
				return _billToDaytimePhone?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToDaytimePhone = value.TruncateTo(50); 
					OnPropertyChanged("BillToDaytimePhone", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BillToNightPhone
        {
            get
            {
				if (!AllowNull && _billToNightPhone is null) 
					_billToNightPhone = String.Empty; 
				return _billToNightPhone?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_billToNightPhone = value.TruncateTo(50); 
					OnPropertyChanged("BillToNightPhone", value);
				}
            }
        }

		/// <summary>
		/// Shipping signature
		/// </summary>
        public virtual string SignatureFlag
        {
            get
            {
				if (!AllowNull && _signatureFlag is null) 
					_signatureFlag = String.Empty; 
				return _signatureFlag?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_signatureFlag = value.TruncateTo(15); 
					OnPropertyChanged("SignatureFlag", value);
				}
            }
        }

		/// <summary>
		/// Flag if a customer will pick up the order.
		/// </summary>
        public virtual string PickupFlag
        {
            get
            {
				if (!AllowNull && _pickupFlag is null) 
					_pickupFlag = String.Empty; 
				return _pickupFlag?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_pickupFlag = value.TruncateTo(15); 
					OnPropertyChanged("PickupFlag", value);
				}
            }
        }

		/// <summary>
		/// The merchant’s division ID or name.
		/// </summary>
        public virtual string MerchantDivision
        {
            get
            {
				if (!AllowNull && _merchantDivision is null) 
					_merchantDivision = String.Empty; 
				return _merchantDivision?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_merchantDivision = value.TruncateTo(30); 
					OnPropertyChanged("MerchantDivision", value);
				}
            }
        }

		/// <summary>
		/// The merchant assigned batch number from which the purchase order came.
		/// </summary>
        public virtual string MerchantBatchNumber
        {
            get
            {
				if (!AllowNull && _merchantBatchNumber is null) 
					_merchantBatchNumber = String.Empty; 
				return _merchantBatchNumber?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_merchantBatchNumber = value.TruncateTo(30); 
					OnPropertyChanged("MerchantBatchNumber", value);
				}
            }
        }

		/// <summary>
		/// This field is used to identify the merchant’s sales department or web site.
		/// </summary>
        public virtual string MerchantDepartmentSiteID
        {
            get
            {
				if (!AllowNull && _merchantDepartmentSiteID is null) 
					_merchantDepartmentSiteID = String.Empty; 
				return _merchantDepartmentSiteID?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_merchantDepartmentSiteID = value.TruncateTo(50); 
					OnPropertyChanged("MerchantDepartmentSiteID", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ReservationNumber
        {
            get
            {
				if (!AllowNull && _reservationNumber is null) 
					_reservationNumber = String.Empty; 
				return _reservationNumber?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_reservationNumber = value.TruncateTo(100); 
					OnPropertyChanged("ReservationNumber", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string MerchantShipToAddressType
        {
            get
            {
				if (!AllowNull && _merchantShipToAddressType is null) 
					_merchantShipToAddressType = String.Empty; 
				return _merchantShipToAddressType?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_merchantShipToAddressType = value.TruncateTo(50); 
					OnPropertyChanged("MerchantShipToAddressType", value);
				}
            }
        }

		/// <summary>
		/// 0-Consumer Order, 1-Businees Order
		/// </summary>
        public virtual bool CustomerOrganizationType
        {
            get
            {
				if (!AllowNull && _customerOrganizationType is null) 
					_customerOrganizationType = default(byte); 
				return (_customerOrganizationType == 1); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_customerOrganizationType = value ? (byte)1 : (byte)0; 
					OnPropertyChanged("CustomerOrganizationType", value);
				}
            }
        }

		/// <summary>
		/// 0-NotPrime Order(Amazon) 1-Prime Order(Amazon)
		/// </summary>
        public virtual bool OrderMark
        {
            get
            {
				if (!AllowNull && _orderMark is null) 
					_orderMark = default(byte); 
				return (_orderMark == 1); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_orderMark = value ? (byte)1 : (byte)0; 
					OnPropertyChanged("OrderMark", value);
				}
            }
        }

		/// <summary>
		/// 0-ThirdPartyFulfilled (AFN) 1-SellerFulfilled (MFN) 2 Pickup 3 ShipToStore
		/// </summary>
        public virtual bool OrderMark2
        {
            get
            {
				if (!AllowNull && _orderMark2 is null) 
					_orderMark2 = default(byte); 
				return (_orderMark2 == 1); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_orderMark2 = value ? (byte)1 : (byte)0; 
					OnPropertyChanged("OrderMark2", value);
				}
            }
        }

		/// <summary>
		/// 0 Processing (Unshipped default), 1 Shipped, 2 PartiallyShipped, 4 PendingShipment, 8 ReadyToPickup, 16 Canceled, 100 OnHold
		/// </summary>
        public virtual bool OrderStatus
        {
            get
            {
				if (!AllowNull && _orderStatus is null) 
					_orderStatus = default(byte); 
				return (_orderStatus == 1); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_orderStatus = value ? (byte)1 : (byte)0; 
					OnPropertyChanged("OrderStatus", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual DateTime? OrderStatusUpdateDateUtc
        {
            get
            {
				if (!AllowNull && _orderStatusUpdateDateUtc is null) 
					_orderStatusUpdateDateUtc = new DateTime().MinValueSql(); 
				return _orderStatusUpdateDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_orderStatusUpdateDateUtc = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("OrderStatusUpdateDateUtc", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string DBChannelOrderHeaderRowID
        {
            get
            {
				if (!AllowNull && _dBChannelOrderHeaderRowID is null) 
					_dBChannelOrderHeaderRowID = String.Empty; 
				return _dBChannelOrderHeaderRowID?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_dBChannelOrderHeaderRowID = value.TruncateTo(50); 
					OnPropertyChanged("DBChannelOrderHeaderRowID", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual int? DCAssignmentStatus
        {
            get
            {
				if (!AllowNull && _dCAssignmentStatus is null) 
					_dCAssignmentStatus = default(int); 
				return _dCAssignmentStatus; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_dCAssignmentStatus = value; 
					OnPropertyChanged("DCAssignmentStatus", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual DateTime? DCAssignmentDateUtc
        {
            get
            {
				if (!AllowNull && _dCAssignmentDateUtc is null) 
					_dCAssignmentDateUtc = new DateTime().MinValueSql(); 
				return _dCAssignmentDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_dCAssignmentDateUtc = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("DCAssignmentDateUtc", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string CentralOrderUuid
        {
            get
            {
				return _centralOrderUuid?.TrimEnd(); 
            }
            set
            {
				_centralOrderUuid = value.TruncateTo(50); 
				OnPropertyChanged("CentralOrderUuid", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual decimal TotalDueSellerAmount
        {
            get
            {
				return _totalDueSellerAmount; 
            }
            set
            {
				_totalDueSellerAmount = value; 
				OnPropertyChanged("TotalDueSellerAmount", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private ChannelOrderData Parent { get; set; }
		public ChannelOrderData GetParent() => Parent;
		public OrderHeader SetParent(ChannelOrderData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			CentralOrderUuid = Guid.NewGuid().ToString(); 
			_centralOrderNum = 0; 
            return;
        }

        public override OrderHeader Clear()
        {
            base.Clear();
			_databaseNum = default(int); 
			_centralOrderNum = default(long); 
			_masterAccountNum = default(int); 
			_profileNum = default(int); 
			_channelNum = default(int); 
			_channelAccountNum = default(int); 
			_userDataPresent = default(byte); 
			_userDataRemoveDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_channelOrderID = String.Empty; 
			_secondaryChannelOrderID = AllowNull ? (string)null : String.Empty; 
			_sellerOrderID = AllowNull ? (string)null : String.Empty; 
			_currency = AllowNull ? (string)null : String.Empty; 
			_originalOrderDateUtc = new DateTime().MinValueSql(); 
			_sellerPublicNote = AllowNull ? (string)null : String.Empty; 
			_sellerPrivateNote = AllowNull ? (string)null : String.Empty; 
			_endBuyerInstruction = AllowNull ? (string)null : String.Empty; 
			_totalOrderAmount = AllowNull ? (decimal?)null : default(decimal); 
			_totalTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_totalShippingAmount = AllowNull ? (decimal?)null : default(decimal); 
			_totalShippingTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_totalShippingDiscount = AllowNull ? (decimal?)null : default(decimal); 
			_totalShippingDiscountTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_totalInsuranceAmount = AllowNull ? (decimal?)null : default(decimal); 
			_totalGiftOptionAmount = AllowNull ? (decimal?)null : default(decimal); 
			_totalGiftOptionTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_additionalCostOrDiscount = AllowNull ? (decimal?)null : default(decimal); 
			_promotionAmount = AllowNull ? (decimal?)null : default(decimal); 
			_estimatedShipDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_deliverByDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_requestedShippingCarrier = AllowNull ? (string)null : String.Empty; 
			_requestedShippingClass = AllowNull ? (string)null : String.Empty; 
			_resellerID = AllowNull ? (string)null : String.Empty; 
			_flagNum = AllowNull ? (short?)null : default(short); 
			_flagDesc = AllowNull ? (string)null : String.Empty; 
			_paymentStatus = AllowNull ? (byte?)null : default(byte); 
			_paymentUpdateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_shippingUpdateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_endBuyerUserID = AllowNull ? (string)null : String.Empty; 
			_endBuyerEmail = AllowNull ? (string)null : String.Empty; 
			_paymentMethod = AllowNull ? (string)null : String.Empty; 
			_shipToName = AllowNull ? (string)null : String.Empty; 
			_shipToFirstName = AllowNull ? (string)null : String.Empty; 
			_shipToLastName = AllowNull ? (string)null : String.Empty; 
			_shipToSuffix = AllowNull ? (string)null : String.Empty; 
			_shipToCompany = AllowNull ? (string)null : String.Empty; 
			_shipToCompanyJobTitle = AllowNull ? (string)null : String.Empty; 
			_shipToAttention = AllowNull ? (string)null : String.Empty; 
			_shipToDaytimePhone = AllowNull ? (string)null : String.Empty; 
			_shipToNightPhone = AllowNull ? (string)null : String.Empty; 
			_shipToAddressLine1 = AllowNull ? (string)null : String.Empty; 
			_shipToAddressLine2 = AllowNull ? (string)null : String.Empty; 
			_shipToAddressLine3 = AllowNull ? (string)null : String.Empty; 
			_shipToCity = AllowNull ? (string)null : String.Empty; 
			_shipToState = AllowNull ? (string)null : String.Empty; 
			_shipToStateFullName = AllowNull ? (string)null : String.Empty; 
			_shipToPostalCode = AllowNull ? (string)null : String.Empty; 
			_shipToPostalCodeExt = AllowNull ? (string)null : String.Empty; 
			_shipToCounty = AllowNull ? (string)null : String.Empty; 
			_shipToCountry = AllowNull ? (string)null : String.Empty; 
			_shipToEmail = AllowNull ? (string)null : String.Empty; 
			_billToName = AllowNull ? (string)null : String.Empty; 
			_billToFirstName = AllowNull ? (string)null : String.Empty; 
			_billToLastName = AllowNull ? (string)null : String.Empty; 
			_billToSuffix = AllowNull ? (string)null : String.Empty; 
			_billToCompany = AllowNull ? (string)null : String.Empty; 
			_billToCompanyJobTitle = AllowNull ? (string)null : String.Empty; 
			_billToAttention = AllowNull ? (string)null : String.Empty; 
			_billToAddressLine1 = AllowNull ? (string)null : String.Empty; 
			_billToAddressLine2 = AllowNull ? (string)null : String.Empty; 
			_billToAddressLine3 = AllowNull ? (string)null : String.Empty; 
			_billToCity = AllowNull ? (string)null : String.Empty; 
			_billToState = AllowNull ? (string)null : String.Empty; 
			_billToStateFullName = AllowNull ? (string)null : String.Empty; 
			_billToPostalCode = AllowNull ? (string)null : String.Empty; 
			_billToPostalCodeExt = AllowNull ? (string)null : String.Empty; 
			_billToCounty = AllowNull ? (string)null : String.Empty; 
			_billToCountry = AllowNull ? (string)null : String.Empty; 
			_billToEmail = AllowNull ? (string)null : String.Empty; 
			_billToDaytimePhone = AllowNull ? (string)null : String.Empty; 
			_billToNightPhone = AllowNull ? (string)null : String.Empty; 
			_signatureFlag = AllowNull ? (string)null : String.Empty; 
			_pickupFlag = AllowNull ? (string)null : String.Empty; 
			_merchantDivision = AllowNull ? (string)null : String.Empty; 
			_merchantBatchNumber = AllowNull ? (string)null : String.Empty; 
			_merchantDepartmentSiteID = AllowNull ? (string)null : String.Empty; 
			_reservationNumber = AllowNull ? (string)null : String.Empty; 
			_merchantShipToAddressType = AllowNull ? (string)null : String.Empty; 
			_customerOrganizationType = AllowNull ? (byte?)null : default(byte); 
			_orderMark = AllowNull ? (byte?)null : default(byte); 
			_orderMark2 = AllowNull ? (byte?)null : default(byte); 
			_orderStatus = AllowNull ? (byte?)null : default(byte); 
			_orderStatusUpdateDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_dBChannelOrderHeaderRowID = AllowNull ? (string)null : String.Empty; 
			_dCAssignmentStatus = AllowNull ? (int?)null : default(int); 
			_dCAssignmentDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_centralOrderUuid = String.Empty; 
			_totalDueSellerAmount = default(decimal); 
            ClearChildren();
            return this;
        }

        public override OrderHeader CheckIntegrity()
        {
            CheckUniqueId();
            CheckIntegrityOthers();
            return this;
        }

        public virtual OrderHeader ClearChildren()
        {
            return this;
        }

        public virtual OrderHeader NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(OrderHeader data)
        {
            if (data is null) return;
            return;
        }


		public override OrderHeader ConvertDbFieldsToData()
		{
			base.ConvertDbFieldsToData();
			return this;
		}
		public override OrderHeader ConvertDataFieldsToDb()
		{
			base.ConvertDataFieldsToDb();
			return this;
		}

        #endregion Methods - Generated 
    }
}



