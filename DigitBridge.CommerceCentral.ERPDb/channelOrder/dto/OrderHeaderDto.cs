
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a OrderHeader Dto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class OrderHeaderDto
    {
        public long? RowNum { get; set; }
        public string UniqueId { get; set; }
        public DateTime? EnterDateUtc { get; set; }
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

        public int? DatabaseNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDatabaseNum => DatabaseNum != null;

        public long? CentralOrderNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCentralOrderNum => CentralOrderNum != null;

        public int? MasterAccountNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMasterAccountNum => MasterAccountNum != null;

        public int? ProfileNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasProfileNum => ProfileNum != null;

        public int? ChannelNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasChannelNum => ChannelNum != null;

        public int? ChannelAccountNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasChannelAccountNum => ChannelAccountNum != null;

        public bool? UserDataPresent { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUserDataPresent => UserDataPresent != null;

        [DataType(DataType.DateTime)]
        public DateTime? UserDataRemoveDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUserDataRemoveDateUtc => UserDataRemoveDateUtc != null;

        [StringLength(130, ErrorMessage = "The ChannelOrderID value cannot exceed 130 characters. ")]
        public string ChannelOrderID { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasChannelOrderID => ChannelOrderID != null;

        [StringLength(200, ErrorMessage = "The SecondaryChannelOrderID value cannot exceed 200 characters. ")]
        public string SecondaryChannelOrderID { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSecondaryChannelOrderID => SecondaryChannelOrderID != null;

        [StringLength(30, ErrorMessage = "The SellerOrderID value cannot exceed 30 characters. ")]
        public string SellerOrderID { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSellerOrderID => SellerOrderID != null;

        [StringLength(10, ErrorMessage = "The Currency value cannot exceed 10 characters. ")]
        public string Currency { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCurrency => Currency != null;

        [DataType(DataType.DateTime)]
        public DateTime? OriginalOrderDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOriginalOrderDateUtc => OriginalOrderDateUtc != null;

        [StringLength(4500, ErrorMessage = "The SellerPublicNote value cannot exceed 4500 characters. ")]
        public string SellerPublicNote { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSellerPublicNote => SellerPublicNote != null;

        [StringLength(4500, ErrorMessage = "The SellerPrivateNote value cannot exceed 4500 characters. ")]
        public string SellerPrivateNote { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSellerPrivateNote => SellerPrivateNote != null;

        [StringLength(4500, ErrorMessage = "The EndBuyerInstruction value cannot exceed 4500 characters. ")]
        public string EndBuyerInstruction { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEndBuyerInstruction => EndBuyerInstruction != null;

        public decimal? TotalOrderAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTotalOrderAmount => TotalOrderAmount != null;

        public decimal? TotalTaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTotalTaxAmount => TotalTaxAmount != null;

        public decimal? TotalShippingAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTotalShippingAmount => TotalShippingAmount != null;

        public decimal? TotalShippingTaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTotalShippingTaxAmount => TotalShippingTaxAmount != null;

        public decimal? TotalShippingDiscount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTotalShippingDiscount => TotalShippingDiscount != null;

        public decimal? TotalShippingDiscountTaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTotalShippingDiscountTaxAmount => TotalShippingDiscountTaxAmount != null;

        public decimal? TotalInsuranceAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTotalInsuranceAmount => TotalInsuranceAmount != null;

        public decimal? TotalGiftOptionAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTotalGiftOptionAmount => TotalGiftOptionAmount != null;

        public decimal? TotalGiftOptionTaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTotalGiftOptionTaxAmount => TotalGiftOptionTaxAmount != null;

        public decimal? AdditionalCostOrDiscount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAdditionalCostOrDiscount => AdditionalCostOrDiscount != null;

        public decimal? PromotionAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPromotionAmount => PromotionAmount != null;

        [DataType(DataType.DateTime)]
        public DateTime? EstimatedShipDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEstimatedShipDateUtc => EstimatedShipDateUtc != null;

        [DataType(DataType.DateTime)]
        public DateTime? DeliverByDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDeliverByDateUtc => DeliverByDateUtc != null;

        [StringLength(50, ErrorMessage = "The RequestedShippingCarrier value cannot exceed 50 characters. ")]
        public string RequestedShippingCarrier { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasRequestedShippingCarrier => RequestedShippingCarrier != null;

        [StringLength(50, ErrorMessage = "The RequestedShippingClass value cannot exceed 50 characters. ")]
        public string RequestedShippingClass { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasRequestedShippingClass => RequestedShippingClass != null;

        [StringLength(300, ErrorMessage = "The ResellerID value cannot exceed 300 characters. ")]
        public string ResellerID { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasResellerID => ResellerID != null;

        public short? FlagNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasFlagNum => FlagNum != null;

        [StringLength(100, ErrorMessage = "The FlagDesc value cannot exceed 100 characters. ")]
        public string FlagDesc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasFlagDesc => FlagDesc != null;

        public bool? PaymentStatus { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPaymentStatus => PaymentStatus != null;

        [DataType(DataType.DateTime)]
        public DateTime? PaymentUpdateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPaymentUpdateUtc => PaymentUpdateUtc != null;

        [DataType(DataType.DateTime)]
        public DateTime? ShippingUpdateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingUpdateUtc => ShippingUpdateUtc != null;

        [StringLength(255, ErrorMessage = "The EndBuyerUserID value cannot exceed 255 characters. ")]
        public string EndBuyerUserID { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEndBuyerUserID => EndBuyerUserID != null;

        [StringLength(255, ErrorMessage = "The EndBuyerEmail value cannot exceed 255 characters. ")]
        public string EndBuyerEmail { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEndBuyerEmail => EndBuyerEmail != null;

        [StringLength(50, ErrorMessage = "The PaymentMethod value cannot exceed 50 characters. ")]
        public string PaymentMethod { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPaymentMethod => PaymentMethod != null;

        [StringLength(100, ErrorMessage = "The ShipToName value cannot exceed 100 characters. ")]
        public string ShipToName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToName => ShipToName != null;

        [StringLength(50, ErrorMessage = "The ShipToFirstName value cannot exceed 50 characters. ")]
        public string ShipToFirstName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToFirstName => ShipToFirstName != null;

        [StringLength(50, ErrorMessage = "The ShipToLastName value cannot exceed 50 characters. ")]
        public string ShipToLastName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToLastName => ShipToLastName != null;

        [StringLength(50, ErrorMessage = "The ShipToSuffix value cannot exceed 50 characters. ")]
        public string ShipToSuffix { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToSuffix => ShipToSuffix != null;

        [StringLength(100, ErrorMessage = "The ShipToCompany value cannot exceed 100 characters. ")]
        public string ShipToCompany { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCompany => ShipToCompany != null;

        [StringLength(100, ErrorMessage = "The ShipToCompanyJobTitle value cannot exceed 100 characters. ")]
        public string ShipToCompanyJobTitle { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCompanyJobTitle => ShipToCompanyJobTitle != null;

        [StringLength(100, ErrorMessage = "The ShipToAttention value cannot exceed 100 characters. ")]
        public string ShipToAttention { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToAttention => ShipToAttention != null;

        [StringLength(50, ErrorMessage = "The ShipToDaytimePhone value cannot exceed 50 characters. ")]
        public string ShipToDaytimePhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToDaytimePhone => ShipToDaytimePhone != null;

        [StringLength(50, ErrorMessage = "The ShipToNightPhone value cannot exceed 50 characters. ")]
        public string ShipToNightPhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToNightPhone => ShipToNightPhone != null;

        [StringLength(100, ErrorMessage = "The ShipToAddressLine1 value cannot exceed 100 characters. ")]
        public string ShipToAddressLine1 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToAddressLine1 => ShipToAddressLine1 != null;

        [StringLength(100, ErrorMessage = "The ShipToAddressLine2 value cannot exceed 100 characters. ")]
        public string ShipToAddressLine2 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToAddressLine2 => ShipToAddressLine2 != null;

        [StringLength(100, ErrorMessage = "The ShipToAddressLine3 value cannot exceed 100 characters. ")]
        public string ShipToAddressLine3 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToAddressLine3 => ShipToAddressLine3 != null;

        [StringLength(50, ErrorMessage = "The ShipToCity value cannot exceed 50 characters. ")]
        public string ShipToCity { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCity => ShipToCity != null;

        [StringLength(50, ErrorMessage = "The ShipToState value cannot exceed 50 characters. ")]
        public string ShipToState { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToState => ShipToState != null;

        [StringLength(100, ErrorMessage = "The ShipToStateFullName value cannot exceed 100 characters. ")]
        public string ShipToStateFullName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToStateFullName => ShipToStateFullName != null;

        [StringLength(50, ErrorMessage = "The ShipToPostalCode value cannot exceed 50 characters. ")]
        public string ShipToPostalCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToPostalCode => ShipToPostalCode != null;

        [StringLength(50, ErrorMessage = "The ShipToPostalCodeExt value cannot exceed 50 characters. ")]
        public string ShipToPostalCodeExt { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToPostalCodeExt => ShipToPostalCodeExt != null;

        [StringLength(50, ErrorMessage = "The ShipToCounty value cannot exceed 50 characters. ")]
        public string ShipToCounty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCounty => ShipToCounty != null;

        [StringLength(50, ErrorMessage = "The ShipToCountry value cannot exceed 50 characters. ")]
        public string ShipToCountry { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCountry => ShipToCountry != null;

        [StringLength(100, ErrorMessage = "The ShipToEmail value cannot exceed 100 characters. ")]
        public string ShipToEmail { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToEmail => ShipToEmail != null;

        [StringLength(100, ErrorMessage = "The BillToName value cannot exceed 100 characters. ")]
        public string BillToName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToName => BillToName != null;

        [StringLength(50, ErrorMessage = "The BillToFirstName value cannot exceed 50 characters. ")]
        public string BillToFirstName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToFirstName => BillToFirstName != null;

        [StringLength(50, ErrorMessage = "The BillToLastName value cannot exceed 50 characters. ")]
        public string BillToLastName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToLastName => BillToLastName != null;

        [StringLength(50, ErrorMessage = "The BillToSuffix value cannot exceed 50 characters. ")]
        public string BillToSuffix { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToSuffix => BillToSuffix != null;

        [StringLength(100, ErrorMessage = "The BillToCompany value cannot exceed 100 characters. ")]
        public string BillToCompany { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToCompany => BillToCompany != null;

        [StringLength(100, ErrorMessage = "The BillToCompanyJobTitle value cannot exceed 100 characters. ")]
        public string BillToCompanyJobTitle { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToCompanyJobTitle => BillToCompanyJobTitle != null;

        [StringLength(100, ErrorMessage = "The BillToAttention value cannot exceed 100 characters. ")]
        public string BillToAttention { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToAttention => BillToAttention != null;

        [StringLength(100, ErrorMessage = "The BillToAddressLine1 value cannot exceed 100 characters. ")]
        public string BillToAddressLine1 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToAddressLine1 => BillToAddressLine1 != null;

        [StringLength(100, ErrorMessage = "The BillToAddressLine2 value cannot exceed 100 characters. ")]
        public string BillToAddressLine2 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToAddressLine2 => BillToAddressLine2 != null;

        [StringLength(100, ErrorMessage = "The BillToAddressLine3 value cannot exceed 100 characters. ")]
        public string BillToAddressLine3 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToAddressLine3 => BillToAddressLine3 != null;

        [StringLength(50, ErrorMessage = "The BillToCity value cannot exceed 50 characters. ")]
        public string BillToCity { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToCity => BillToCity != null;

        [StringLength(50, ErrorMessage = "The BillToState value cannot exceed 50 characters. ")]
        public string BillToState { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToState => BillToState != null;

        [StringLength(100, ErrorMessage = "The BillToStateFullName value cannot exceed 100 characters. ")]
        public string BillToStateFullName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToStateFullName => BillToStateFullName != null;

        [StringLength(50, ErrorMessage = "The BillToPostalCode value cannot exceed 50 characters. ")]
        public string BillToPostalCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToPostalCode => BillToPostalCode != null;

        [StringLength(50, ErrorMessage = "The BillToPostalCodeExt value cannot exceed 50 characters. ")]
        public string BillToPostalCodeExt { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToPostalCodeExt => BillToPostalCodeExt != null;

        [StringLength(50, ErrorMessage = "The BillToCounty value cannot exceed 50 characters. ")]
        public string BillToCounty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToCounty => BillToCounty != null;

        [StringLength(50, ErrorMessage = "The BillToCountry value cannot exceed 50 characters. ")]
        public string BillToCountry { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToCountry => BillToCountry != null;

        [StringLength(100, ErrorMessage = "The BillToEmail value cannot exceed 100 characters. ")]
        public string BillToEmail { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToEmail => BillToEmail != null;

        [StringLength(50, ErrorMessage = "The BillToDaytimePhone value cannot exceed 50 characters. ")]
        public string BillToDaytimePhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToDaytimePhone => BillToDaytimePhone != null;

        [StringLength(50, ErrorMessage = "The BillToNightPhone value cannot exceed 50 characters. ")]
        public string BillToNightPhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBillToNightPhone => BillToNightPhone != null;

        [StringLength(15, ErrorMessage = "The SignatureFlag value cannot exceed 15 characters. ")]
        public string SignatureFlag { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSignatureFlag => SignatureFlag != null;

        [StringLength(15, ErrorMessage = "The PickupFlag value cannot exceed 15 characters. ")]
        public string PickupFlag { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPickupFlag => PickupFlag != null;

        [StringLength(30, ErrorMessage = "The MerchantDivision value cannot exceed 30 characters. ")]
        public string MerchantDivision { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMerchantDivision => MerchantDivision != null;

        [StringLength(30, ErrorMessage = "The MerchantBatchNumber value cannot exceed 30 characters. ")]
        public string MerchantBatchNumber { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMerchantBatchNumber => MerchantBatchNumber != null;

        [StringLength(50, ErrorMessage = "The MerchantDepartmentSiteID value cannot exceed 50 characters. ")]
        public string MerchantDepartmentSiteID { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMerchantDepartmentSiteID => MerchantDepartmentSiteID != null;

        [StringLength(100, ErrorMessage = "The ReservationNumber value cannot exceed 100 characters. ")]
        public string ReservationNumber { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReservationNumber => ReservationNumber != null;

        [StringLength(50, ErrorMessage = "The MerchantShipToAddressType value cannot exceed 50 characters. ")]
        public string MerchantShipToAddressType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMerchantShipToAddressType => MerchantShipToAddressType != null;

        public bool? CustomerOrganizationType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCustomerOrganizationType => CustomerOrganizationType != null;

        public bool? OrderMark { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOrderMark => OrderMark != null;

        public bool? OrderMark2 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOrderMark2 => OrderMark2 != null;

        public bool? OrderStatus { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOrderStatus => OrderStatus != null;

        [DataType(DataType.DateTime)]
        public DateTime? OrderStatusUpdateDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOrderStatusUpdateDateUtc => OrderStatusUpdateDateUtc != null;

        [StringLength(50, ErrorMessage = "The DBChannelOrderHeaderRowID value cannot exceed 50 characters. ")]
        public string DBChannelOrderHeaderRowID { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDBChannelOrderHeaderRowID => DBChannelOrderHeaderRowID != null;

        public int? DCAssignmentStatus { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDCAssignmentStatus => DCAssignmentStatus != null;

        [DataType(DataType.DateTime)]
        public DateTime? DCAssignmentDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDCAssignmentDateUtc => DCAssignmentDateUtc != null;

        [StringLength(50, ErrorMessage = "The CentralOrderUuid value cannot exceed 50 characters. ")]
        public string CentralOrderUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCentralOrderUuid => CentralOrderUuid != null;



        #endregion Properties - Generated 

        #region Children - Generated 

        #endregion Children - Generated 

    }
}



