    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a ChannelOrderDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class ChannelOrderDataDtoMapperDefault : IDtoMapper<ChannelOrderData, ChannelOrderDataDto> 
    {
        #region read from dto to data

        public virtual ChannelOrderData ReadDto(ChannelOrderData data, ChannelOrderDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new ChannelOrderData();
                data.New();
            }

			if (dto.OrderHeader != null)
			{
				if (data.OrderHeader is null)
					data.OrderHeader = data.NewOrderHeader();
				ReadOrderHeader(data.OrderHeader, dto.OrderHeader);
			}
			if (dto.OrderLine != null)
			{
				if (data.OrderLine is null)
					data.OrderLine = new List<OrderLine>();
				var deleted = ReadOrderLine(data.OrderLine, dto.OrderLine);
				data.SetOrderLineDeleted(deleted);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadOrderHeader(OrderHeader data, OrderHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasChannelNum) data.ChannelNum = dto.ChannelNum.ToInt();
			if (dto.HasChannelAccountNum) data.ChannelAccountNum = dto.ChannelAccountNum.ToInt();
			if (dto.HasUserDataPresent) data.UserDataPresent = dto.UserDataPresent.ToBool();
			if (dto.HasUserDataRemoveDateUtc) data.UserDataRemoveDateUtc = dto.UserDataRemoveDateUtc;
			if (dto.HasChannelOrderID) data.ChannelOrderID = dto.ChannelOrderID;
			if (dto.HasSecondaryChannelOrderID) data.SecondaryChannelOrderID = dto.SecondaryChannelOrderID;
			if (dto.HasSellerOrderID) data.SellerOrderID = dto.SellerOrderID;
			if (dto.HasCurrency) data.Currency = dto.Currency;
			if (dto.HasOriginalOrderDateUtc) data.OriginalOrderDateUtc = dto.OriginalOrderDateUtc.ToDateTime();
			if (dto.HasSellerPublicNote) data.SellerPublicNote = dto.SellerPublicNote;
			if (dto.HasSellerPrivateNote) data.SellerPrivateNote = dto.SellerPrivateNote;
			if (dto.HasEndBuyerInstruction) data.EndBuyerInstruction = dto.EndBuyerInstruction;
			if (dto.HasTotalOrderAmount) data.TotalOrderAmount = dto.TotalOrderAmount;
			if (dto.HasTotalTaxAmount) data.TotalTaxAmount = dto.TotalTaxAmount;
			if (dto.HasTotalShippingAmount) data.TotalShippingAmount = dto.TotalShippingAmount;
			if (dto.HasTotalShippingTaxAmount) data.TotalShippingTaxAmount = dto.TotalShippingTaxAmount;
			if (dto.HasTotalShippingDiscount) data.TotalShippingDiscount = dto.TotalShippingDiscount;
			if (dto.HasTotalShippingDiscountTaxAmount) data.TotalShippingDiscountTaxAmount = dto.TotalShippingDiscountTaxAmount;
			if (dto.HasTotalInsuranceAmount) data.TotalInsuranceAmount = dto.TotalInsuranceAmount;
			if (dto.HasTotalGiftOptionAmount) data.TotalGiftOptionAmount = dto.TotalGiftOptionAmount;
			if (dto.HasTotalGiftOptionTaxAmount) data.TotalGiftOptionTaxAmount = dto.TotalGiftOptionTaxAmount;
			if (dto.HasAdditionalCostOrDiscount) data.AdditionalCostOrDiscount = dto.AdditionalCostOrDiscount;
			if (dto.HasPromotionAmount) data.PromotionAmount = dto.PromotionAmount;
			if (dto.HasEstimatedShipDateUtc) data.EstimatedShipDateUtc = dto.EstimatedShipDateUtc;
			if (dto.HasDeliverByDateUtc) data.DeliverByDateUtc = dto.DeliverByDateUtc;
			if (dto.HasRequestedShippingCarrier) data.RequestedShippingCarrier = dto.RequestedShippingCarrier;
			if (dto.HasRequestedShippingClass) data.RequestedShippingClass = dto.RequestedShippingClass;
			if (dto.HasResellerID) data.ResellerID = dto.ResellerID;
			if (dto.HasFlagNum) data.FlagNum = dto.FlagNum;
			if (dto.HasFlagDesc) data.FlagDesc = dto.FlagDesc;
			if (dto.HasPaymentStatus) data.PaymentStatus = dto.PaymentStatus.ToBool();
			if (dto.HasPaymentUpdateUtc) data.PaymentUpdateUtc = dto.PaymentUpdateUtc;
			if (dto.HasShippingUpdateUtc) data.ShippingUpdateUtc = dto.ShippingUpdateUtc;
			if (dto.HasEndBuyerUserID) data.EndBuyerUserID = dto.EndBuyerUserID;
			if (dto.HasEndBuyerEmail) data.EndBuyerEmail = dto.EndBuyerEmail;
			if (dto.HasPaymentMethod) data.PaymentMethod = dto.PaymentMethod;
			if (dto.HasShipToName) data.ShipToName = dto.ShipToName;
			if (dto.HasShipToFirstName) data.ShipToFirstName = dto.ShipToFirstName;
			if (dto.HasShipToLastName) data.ShipToLastName = dto.ShipToLastName;
			if (dto.HasShipToSuffix) data.ShipToSuffix = dto.ShipToSuffix;
			if (dto.HasShipToCompany) data.ShipToCompany = dto.ShipToCompany;
			if (dto.HasShipToCompanyJobTitle) data.ShipToCompanyJobTitle = dto.ShipToCompanyJobTitle;
			if (dto.HasShipToAttention) data.ShipToAttention = dto.ShipToAttention;
			if (dto.HasShipToDaytimePhone) data.ShipToDaytimePhone = dto.ShipToDaytimePhone;
			if (dto.HasShipToNightPhone) data.ShipToNightPhone = dto.ShipToNightPhone;
			if (dto.HasShipToAddressLine1) data.ShipToAddressLine1 = dto.ShipToAddressLine1;
			if (dto.HasShipToAddressLine2) data.ShipToAddressLine2 = dto.ShipToAddressLine2;
			if (dto.HasShipToAddressLine3) data.ShipToAddressLine3 = dto.ShipToAddressLine3;
			if (dto.HasShipToCity) data.ShipToCity = dto.ShipToCity;
			if (dto.HasShipToState) data.ShipToState = dto.ShipToState;
			if (dto.HasShipToStateFullName) data.ShipToStateFullName = dto.ShipToStateFullName;
			if (dto.HasShipToPostalCode) data.ShipToPostalCode = dto.ShipToPostalCode;
			if (dto.HasShipToPostalCodeExt) data.ShipToPostalCodeExt = dto.ShipToPostalCodeExt;
			if (dto.HasShipToCounty) data.ShipToCounty = dto.ShipToCounty;
			if (dto.HasShipToCountry) data.ShipToCountry = dto.ShipToCountry;
			if (dto.HasShipToEmail) data.ShipToEmail = dto.ShipToEmail;
			if (dto.HasBillToName) data.BillToName = dto.BillToName;
			if (dto.HasBillToFirstName) data.BillToFirstName = dto.BillToFirstName;
			if (dto.HasBillToLastName) data.BillToLastName = dto.BillToLastName;
			if (dto.HasBillToSuffix) data.BillToSuffix = dto.BillToSuffix;
			if (dto.HasBillToCompany) data.BillToCompany = dto.BillToCompany;
			if (dto.HasBillToCompanyJobTitle) data.BillToCompanyJobTitle = dto.BillToCompanyJobTitle;
			if (dto.HasBillToAttention) data.BillToAttention = dto.BillToAttention;
			if (dto.HasBillToAddressLine1) data.BillToAddressLine1 = dto.BillToAddressLine1;
			if (dto.HasBillToAddressLine2) data.BillToAddressLine2 = dto.BillToAddressLine2;
			if (dto.HasBillToAddressLine3) data.BillToAddressLine3 = dto.BillToAddressLine3;
			if (dto.HasBillToCity) data.BillToCity = dto.BillToCity;
			if (dto.HasBillToState) data.BillToState = dto.BillToState;
			if (dto.HasBillToStateFullName) data.BillToStateFullName = dto.BillToStateFullName;
			if (dto.HasBillToPostalCode) data.BillToPostalCode = dto.BillToPostalCode;
			if (dto.HasBillToPostalCodeExt) data.BillToPostalCodeExt = dto.BillToPostalCodeExt;
			if (dto.HasBillToCounty) data.BillToCounty = dto.BillToCounty;
			if (dto.HasBillToCountry) data.BillToCountry = dto.BillToCountry;
			if (dto.HasBillToEmail) data.BillToEmail = dto.BillToEmail;
			if (dto.HasBillToDaytimePhone) data.BillToDaytimePhone = dto.BillToDaytimePhone;
			if (dto.HasBillToNightPhone) data.BillToNightPhone = dto.BillToNightPhone;
			if (dto.HasSignatureFlag) data.SignatureFlag = dto.SignatureFlag;
			if (dto.HasPickupFlag) data.PickupFlag = dto.PickupFlag;
			if (dto.HasMerchantDivision) data.MerchantDivision = dto.MerchantDivision;
			if (dto.HasMerchantBatchNumber) data.MerchantBatchNumber = dto.MerchantBatchNumber;
			if (dto.HasMerchantDepartmentSiteID) data.MerchantDepartmentSiteID = dto.MerchantDepartmentSiteID;
			if (dto.HasReservationNumber) data.ReservationNumber = dto.ReservationNumber;
			if (dto.HasMerchantShipToAddressType) data.MerchantShipToAddressType = dto.MerchantShipToAddressType;
			if (dto.HasCustomerOrganizationType) data.CustomerOrganizationType = dto.CustomerOrganizationType.ToBool();
			if (dto.HasOrderMark) data.OrderMark = dto.OrderMark.ToBool();
			if (dto.HasOrderMark2) data.OrderMark2 = dto.OrderMark2.ToBool();
			if (dto.HasOrderStatus) data.OrderStatus = dto.OrderStatus.ToBool();
			if (dto.HasOrderStatusUpdateDateUtc) data.OrderStatusUpdateDateUtc = dto.OrderStatusUpdateDateUtc;
			if (dto.HasDBChannelOrderHeaderRowID) data.DBChannelOrderHeaderRowID = dto.DBChannelOrderHeaderRowID;
			if (dto.HasDCAssignmentStatus) data.DCAssignmentStatus = dto.DCAssignmentStatus;
			if (dto.HasDCAssignmentDateUtc) data.DCAssignmentDateUtc = dto.DCAssignmentDateUtc;
			if (dto.HasCentralOrderUuid) data.CentralOrderUuid = dto.CentralOrderUuid;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}


		protected virtual void ReadOrderLine(OrderLine data, OrderLineDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasCentralOrderNum) data.CentralOrderNum = dto.CentralOrderNum.ToLong();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasChannelNum) data.ChannelNum = dto.ChannelNum.ToInt();
			if (dto.HasChannelAccountNum) data.ChannelAccountNum = dto.ChannelAccountNum.ToInt();
			if (dto.HasChannelOrderID) data.ChannelOrderID = dto.ChannelOrderID;
			if (dto.HasCentralProductNum) data.CentralProductNum = dto.CentralProductNum;
			if (dto.HasChannelItemID) data.ChannelItemID = dto.ChannelItemID;
			if (dto.HasSKU) data.SKU = dto.SKU;
			if (dto.HasItemTitle) data.ItemTitle = dto.ItemTitle;
			if (dto.HasOrderQty) data.OrderQty = dto.OrderQty;
			if (dto.HasUnitPrice) data.UnitPrice = dto.UnitPrice;
			if (dto.HasLineItemTaxAmount) data.LineItemTaxAmount = dto.LineItemTaxAmount;
			if (dto.HasLineShippingAmount) data.LineShippingAmount = dto.LineShippingAmount;
			if (dto.HasLineShippingTaxAmount) data.LineShippingTaxAmount = dto.LineShippingTaxAmount;
			if (dto.HasLineShippingDiscount) data.LineShippingDiscount = dto.LineShippingDiscount;
			if (dto.HasLineShippingDiscountTaxAmount) data.LineShippingDiscountTaxAmount = dto.LineShippingDiscountTaxAmount;
			if (dto.HasLineRecyclingFee) data.LineRecyclingFee = dto.LineRecyclingFee;
			if (dto.HasLineGiftMsg) data.LineGiftMsg = dto.LineGiftMsg;
			if (dto.HasLineGiftNotes) data.LineGiftNotes = dto.LineGiftNotes;
			if (dto.HasLineGiftAmount) data.LineGiftAmount = dto.LineGiftAmount;
			if (dto.HasLineGiftTaxAmount) data.LineGiftTaxAmount = dto.LineGiftTaxAmount;
			if (dto.HasLinePromotionCodes) data.LinePromotionCodes = dto.LinePromotionCodes;
			if (dto.HasLinePromotionAmount) data.LinePromotionAmount = dto.LinePromotionAmount;
			if (dto.HasLinePromotionTaxAmount) data.LinePromotionTaxAmount = dto.LinePromotionTaxAmount;
			if (dto.HasBundleStatus) data.BundleStatus = dto.BundleStatus.ToBool();
			if (dto.HasHarmonizedCode) data.HarmonizedCode = dto.HarmonizedCode;
			if (dto.HasUPC) data.UPC = dto.UPC;
			if (dto.HasEAN) data.EAN = dto.EAN;
			if (dto.HasUnitOfMeasure) data.UnitOfMeasure = dto.UnitOfMeasure;
			if (dto.HasDBChannelOrderLineRowID) data.DBChannelOrderLineRowID = dto.DBChannelOrderLineRowID;
			if (dto.HasCentralOrderUuid) data.CentralOrderUuid = dto.CentralOrderUuid;
			if (dto.HasCentralOrderLineUuid) data.CentralOrderLineUuid = dto.CentralOrderLineUuid;

			#endregion read properties

			#region read all grand children object

			if (dto.OrderLineMerchantExt != null)
			{
				if (data.OrderLineMerchantExt is null)
					data.OrderLineMerchantExt = new OrderLineMerchantExt();
				ReadOrderLineMerchantExt(data.OrderLineMerchantExt, dto.OrderLineMerchantExt);
			}

			#endregion read all grand children object

			data.CheckIntegrity();
			return;
		}

		protected virtual IList<OrderLine> ReadOrderLine(IList<OrderLine> data, IList<OrderLineDto> dto)
		{
			if (data is null || dto is null)
				return null;
			var lstOrig = new List<OrderLine>(data.Where(x => x != null).ToList());
			data.Clear();
			foreach (var itemDto in dto)
			{
				if (itemDto == null) continue;

				var obj = itemDto.RowNum > 0
					? lstOrig.Find(x => x.RowNum == itemDto.RowNum)
					: lstOrig.Find(x => x.CentralOrderLineUuid == itemDto.CentralOrderLineUuid);
				if (obj is null)
					obj = new OrderLine().SetAllowNull(false);
				else
					lstOrig.Remove(obj);

				data.Add(obj);

				ReadOrderLine(obj, itemDto);

			}
			return lstOrig;
		}

		protected virtual void ReadOrderLineMerchantExt(OrderLineMerchantExt data, OrderLineMerchantExtDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasCentralOrderLineNum) data.CentralOrderLineNum = dto.CentralOrderLineNum.ToLong();
			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasCentralOrderNum) data.CentralOrderNum = dto.CentralOrderNum.ToLong();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasChannelNum) data.ChannelNum = dto.ChannelNum.ToInt();
			if (dto.HasChannelAccountNum) data.ChannelAccountNum = dto.ChannelAccountNum.ToInt();
			if (dto.HasChannelOrderID) data.ChannelOrderID = dto.ChannelOrderID;
			if (dto.HasChannelOrderLineNum) data.ChannelOrderLineNum = dto.ChannelOrderLineNum.ToInt();
			if (dto.HasMerchantLineNumber) data.MerchantLineNumber = dto.MerchantLineNumber.ToInt();
			if (dto.HasCustomerOrderLineNumber) data.CustomerOrderLineNumber = dto.CustomerOrderLineNumber.ToInt();
			if (dto.HasHubLineID) data.HubLineID = dto.HubLineID;
			if (dto.HasMerchantNRProductID) data.MerchantNRProductID = dto.MerchantNRProductID;
			if (dto.HasMerchantSKU) data.MerchantSKU = dto.MerchantSKU;
			if (dto.HasVendorSKU) data.VendorSKU = dto.VendorSKU;
			if (dto.HasManufacturerSKU) data.ManufacturerSKU = dto.ManufacturerSKU;
			if (dto.HasShoppingCartSKU) data.ShoppingCartSKU = dto.ShoppingCartSKU;
			if (dto.HasVendorDescription) data.VendorDescription = dto.VendorDescription;
			if (dto.HasVendorStyleNumber) data.VendorStyleNumber = dto.VendorStyleNumber;
			if (dto.HasVendorColorDescription) data.VendorColorDescription = dto.VendorColorDescription;
			if (dto.HasVendorSizeDescription) data.VendorSizeDescription = dto.VendorSizeDescription;
			if (dto.HasMerchantColorCode) data.MerchantColorCode = dto.MerchantColorCode;
			if (dto.HasMerchantSizeCode) data.MerchantSizeCode = dto.MerchantSizeCode;
			if (dto.HasMerchantSetCode) data.MerchantSetCode = dto.MerchantSetCode;
			if (dto.HasMerchantDescription) data.MerchantDescription = dto.MerchantDescription;
			if (dto.HasMerchantDescription2) data.MerchantDescription2 = dto.MerchantDescription2;
			if (dto.HasMerchantDescription3) data.MerchantDescription3 = dto.MerchantDescription3;
			if (dto.HasMerchantColorSizeDescription) data.MerchantColorSizeDescription = dto.MerchantColorSizeDescription;
			if (dto.HasFullRetailPrice) data.FullRetailPrice = dto.FullRetailPrice.ToDecimal();
			if (dto.HasEncodedPrice) data.EncodedPrice = dto.EncodedPrice;
			if (dto.HasUnitShippingWeight) data.UnitShippingWeight = dto.UnitShippingWeight.ToDecimal();
			if (dto.HasWeightUnit) data.WeightUnit = dto.WeightUnit;
			if (dto.HasCustomerUnitPrice) data.CustomerUnitPrice = dto.CustomerUnitPrice.ToDecimal();
			if (dto.HasUnitCostToMerchant) data.UnitCostToMerchant = dto.UnitCostToMerchant.ToDecimal();
			if (dto.HasLineMerchandiseCost) data.LineMerchandiseCost = dto.LineMerchandiseCost.ToDecimal();
			if (dto.HasCustomerMerchandiseAmount) data.CustomerMerchandiseAmount = dto.CustomerMerchandiseAmount.ToDecimal();
			if (dto.HasCustomerLineShippingAmount) data.CustomerLineShippingAmount = dto.CustomerLineShippingAmount.ToDecimal();
			if (dto.HasCustomerLineHandlingAmount) data.CustomerLineHandlingAmount = dto.CustomerLineHandlingAmount.ToDecimal();
			if (dto.HasCustomerLineSubTotalAmount) data.CustomerLineSubTotalAmount = dto.CustomerLineSubTotalAmount.ToDecimal();
			if (dto.HasCustomerLineTaxAmount) data.CustomerLineTaxAmount = dto.CustomerLineTaxAmount.ToDecimal();
			if (dto.HasCustomerLineTotalAmount) data.CustomerLineTotalAmount = dto.CustomerLineTotalAmount.ToDecimal();
			if (dto.HasCustomerLineCredits) data.CustomerLineCredits = dto.CustomerLineCredits.ToDecimal();
			if (dto.HasCustomerLineBalanceDue) data.CustomerLineBalanceDue = dto.CustomerLineBalanceDue.ToDecimal();
			if (dto.HasLineDiscountAmount) data.LineDiscountAmount = dto.LineDiscountAmount.ToDecimal();
			if (dto.HasVendorWareshoueID) data.VendorWareshoueID = dto.VendorWareshoueID;
			if (dto.HasExpectedShipDateUtc) data.ExpectedShipDateUtc = dto.ExpectedShipDateUtc;
			if (dto.HasPackingSlipLineMessage) data.PackingSlipLineMessage = dto.PackingSlipLineMessage;
			if (dto.HasVendorLineNotes) data.VendorLineNotes = dto.VendorLineNotes;
			if (dto.HasStoreName) data.StoreName = dto.StoreName;
			if (dto.HasPersonalizationData) data.PersonalizationData = dto.PersonalizationData;
			if (dto.HasFacgtoryOrderNum) data.FacgtoryOrderNum = dto.FacgtoryOrderNum;
			if (dto.HasSubUnitQty) data.SubUnitQty = dto.SubUnitQty.ToDecimal();
			if (dto.HasGiftWrapIndicator) data.GiftWrapIndicator = dto.GiftWrapIndicator;
			if (dto.HasHoldUntilDateUtc) data.HoldUntilDateUtc = dto.HoldUntilDateUtc;
			if (dto.HasRequiredShipDateUtc) data.RequiredShipDateUtc = dto.RequiredShipDateUtc;
			if (dto.HasRequiredDeliveryDateUtc) data.RequiredDeliveryDateUtc = dto.RequiredDeliveryDateUtc;
			if (dto.HasCustomerRequestedArrivalDateUtc) data.CustomerRequestedArrivalDateUtc = dto.CustomerRequestedArrivalDateUtc;
			if (dto.HasShipperHubCode) data.ShipperHubCode = dto.ShipperHubCode;
			if (dto.HasShippingHub) data.ShippingHub = dto.ShippingHub;
			if (dto.HasSerializedProduct) data.SerializedProduct = dto.SerializedProduct;
			if (dto.HasCustomerSKU) data.CustomerSKU = dto.CustomerSKU;
			if (dto.HasVendorQuoteNumber) data.VendorQuoteNumber = dto.VendorQuoteNumber;
			if (dto.HasGiftRegistryID) data.GiftRegistryID = dto.GiftRegistryID;
			if (dto.HasMerchantDepartment) data.MerchantDepartment = dto.MerchantDepartment;
			if (dto.HasNdcNumber) data.NdcNumber = dto.NdcNumber;
			if (dto.HasVendorPatternCode) data.VendorPatternCode = dto.VendorPatternCode;
			if (dto.HasVendorFinishCode) data.VendorFinishCode = dto.VendorFinishCode;
			if (dto.HasCentralOrderUuid) data.CentralOrderUuid = dto.CentralOrderUuid;
			if (dto.HasCentralOrderLineUuid) data.CentralOrderLineUuid = dto.CentralOrderLineUuid;
			if (dto.HasCentralOrderLineMerchantExtUuid) data.CentralOrderLineMerchantExtUuid = dto.CentralOrderLineMerchantExtUuid;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}


        #endregion read from dto to data

        #region write to dto from data

        public virtual ChannelOrderDataDto WriteDto(ChannelOrderData data, ChannelOrderDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new ChannelOrderDataDto();

            data.CheckIntegrity();

			if (data.OrderHeader != null)
			{
				dto.OrderHeader = new OrderHeaderDto();
				WriteOrderHeader(data.OrderHeader, dto.OrderHeader);
			}
			if (data.OrderLine != null)
			{
				dto.OrderLine = new List<OrderLineDto>();
				WriteOrderLine(data.OrderLine, dto.OrderLine);
			}
            return dto;
        }

		protected virtual void WriteOrderHeader(OrderHeader data, OrderHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.DatabaseNum = data.DatabaseNum;
			dto.CentralOrderNum = data.CentralOrderNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.ChannelNum = data.ChannelNum;
			dto.ChannelAccountNum = data.ChannelAccountNum;
			dto.UserDataPresent = data.UserDataPresent;
			dto.UserDataRemoveDateUtc = data.UserDataRemoveDateUtc;
			dto.ChannelOrderID = data.ChannelOrderID;
			dto.SecondaryChannelOrderID = data.SecondaryChannelOrderID;
			dto.SellerOrderID = data.SellerOrderID;
			dto.Currency = data.Currency;
			dto.OriginalOrderDateUtc = data.OriginalOrderDateUtc;
			dto.SellerPublicNote = data.SellerPublicNote;
			dto.SellerPrivateNote = data.SellerPrivateNote;
			dto.EndBuyerInstruction = data.EndBuyerInstruction;
			dto.TotalOrderAmount = data.TotalOrderAmount;
			dto.TotalTaxAmount = data.TotalTaxAmount;
			dto.TotalShippingAmount = data.TotalShippingAmount;
			dto.TotalShippingTaxAmount = data.TotalShippingTaxAmount;
			dto.TotalShippingDiscount = data.TotalShippingDiscount;
			dto.TotalShippingDiscountTaxAmount = data.TotalShippingDiscountTaxAmount;
			dto.TotalInsuranceAmount = data.TotalInsuranceAmount;
			dto.TotalGiftOptionAmount = data.TotalGiftOptionAmount;
			dto.TotalGiftOptionTaxAmount = data.TotalGiftOptionTaxAmount;
			dto.AdditionalCostOrDiscount = data.AdditionalCostOrDiscount;
			dto.PromotionAmount = data.PromotionAmount;
			dto.EstimatedShipDateUtc = data.EstimatedShipDateUtc;
			dto.DeliverByDateUtc = data.DeliverByDateUtc;
			dto.RequestedShippingCarrier = data.RequestedShippingCarrier;
			dto.RequestedShippingClass = data.RequestedShippingClass;
			dto.ResellerID = data.ResellerID;
			dto.FlagNum = data.FlagNum;
			dto.FlagDesc = data.FlagDesc;
			dto.PaymentStatus = data.PaymentStatus;
			dto.PaymentUpdateUtc = data.PaymentUpdateUtc;
			dto.ShippingUpdateUtc = data.ShippingUpdateUtc;
			dto.EndBuyerUserID = data.EndBuyerUserID;
			dto.EndBuyerEmail = data.EndBuyerEmail;
			dto.PaymentMethod = data.PaymentMethod;
			dto.ShipToName = data.ShipToName;
			dto.ShipToFirstName = data.ShipToFirstName;
			dto.ShipToLastName = data.ShipToLastName;
			dto.ShipToSuffix = data.ShipToSuffix;
			dto.ShipToCompany = data.ShipToCompany;
			dto.ShipToCompanyJobTitle = data.ShipToCompanyJobTitle;
			dto.ShipToAttention = data.ShipToAttention;
			dto.ShipToDaytimePhone = data.ShipToDaytimePhone;
			dto.ShipToNightPhone = data.ShipToNightPhone;
			dto.ShipToAddressLine1 = data.ShipToAddressLine1;
			dto.ShipToAddressLine2 = data.ShipToAddressLine2;
			dto.ShipToAddressLine3 = data.ShipToAddressLine3;
			dto.ShipToCity = data.ShipToCity;
			dto.ShipToState = data.ShipToState;
			dto.ShipToStateFullName = data.ShipToStateFullName;
			dto.ShipToPostalCode = data.ShipToPostalCode;
			dto.ShipToPostalCodeExt = data.ShipToPostalCodeExt;
			dto.ShipToCounty = data.ShipToCounty;
			dto.ShipToCountry = data.ShipToCountry;
			dto.ShipToEmail = data.ShipToEmail;
			dto.BillToName = data.BillToName;
			dto.BillToFirstName = data.BillToFirstName;
			dto.BillToLastName = data.BillToLastName;
			dto.BillToSuffix = data.BillToSuffix;
			dto.BillToCompany = data.BillToCompany;
			dto.BillToCompanyJobTitle = data.BillToCompanyJobTitle;
			dto.BillToAttention = data.BillToAttention;
			dto.BillToAddressLine1 = data.BillToAddressLine1;
			dto.BillToAddressLine2 = data.BillToAddressLine2;
			dto.BillToAddressLine3 = data.BillToAddressLine3;
			dto.BillToCity = data.BillToCity;
			dto.BillToState = data.BillToState;
			dto.BillToStateFullName = data.BillToStateFullName;
			dto.BillToPostalCode = data.BillToPostalCode;
			dto.BillToPostalCodeExt = data.BillToPostalCodeExt;
			dto.BillToCounty = data.BillToCounty;
			dto.BillToCountry = data.BillToCountry;
			dto.BillToEmail = data.BillToEmail;
			dto.BillToDaytimePhone = data.BillToDaytimePhone;
			dto.BillToNightPhone = data.BillToNightPhone;
			dto.SignatureFlag = data.SignatureFlag;
			dto.PickupFlag = data.PickupFlag;
			dto.MerchantDivision = data.MerchantDivision;
			dto.MerchantBatchNumber = data.MerchantBatchNumber;
			dto.MerchantDepartmentSiteID = data.MerchantDepartmentSiteID;
			dto.ReservationNumber = data.ReservationNumber;
			dto.MerchantShipToAddressType = data.MerchantShipToAddressType;
			dto.CustomerOrganizationType = data.CustomerOrganizationType;
			dto.OrderMark = data.OrderMark;
			dto.OrderMark2 = data.OrderMark2;
			dto.OrderStatus = data.OrderStatus;
			dto.OrderStatusUpdateDateUtc = data.OrderStatusUpdateDateUtc;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;
			dto.DBChannelOrderHeaderRowID = data.DBChannelOrderHeaderRowID;
			dto.DCAssignmentStatus = data.DCAssignmentStatus;
			dto.DCAssignmentDateUtc = data.DCAssignmentDateUtc;
			dto.RowNum = data.RowNum;
			dto.CentralOrderUuid = data.CentralOrderUuid;

			#endregion read properties

			return;
		}

		protected virtual void WriteOrderLine(OrderLine data, OrderLineDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.CentralOrderLineNum = data.CentralOrderLineNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.CentralOrderNum = data.CentralOrderNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.ChannelNum = data.ChannelNum;
			dto.ChannelAccountNum = data.ChannelAccountNum;
			dto.ChannelOrderID = data.ChannelOrderID;
			dto.CentralProductNum = data.CentralProductNum;
			dto.ChannelItemID = data.ChannelItemID;
			dto.SKU = data.SKU;
			dto.ItemTitle = data.ItemTitle;
			dto.OrderQty = data.OrderQty;
			dto.UnitPrice = data.UnitPrice;
			dto.LineItemTaxAmount = data.LineItemTaxAmount;
			dto.LineShippingAmount = data.LineShippingAmount;
			dto.LineShippingTaxAmount = data.LineShippingTaxAmount;
			dto.LineShippingDiscount = data.LineShippingDiscount;
			dto.LineShippingDiscountTaxAmount = data.LineShippingDiscountTaxAmount;
			dto.LineRecyclingFee = data.LineRecyclingFee;
			dto.LineGiftMsg = data.LineGiftMsg;
			dto.LineGiftNotes = data.LineGiftNotes;
			dto.LineGiftAmount = data.LineGiftAmount;
			dto.LineGiftTaxAmount = data.LineGiftTaxAmount;
			dto.LinePromotionCodes = data.LinePromotionCodes;
			dto.LinePromotionAmount = data.LinePromotionAmount;
			dto.LinePromotionTaxAmount = data.LinePromotionTaxAmount;
			dto.BundleStatus = data.BundleStatus;
			dto.HarmonizedCode = data.HarmonizedCode;
			dto.UPC = data.UPC;
			dto.EAN = data.EAN;
			dto.UnitOfMeasure = data.UnitOfMeasure;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;
			dto.DBChannelOrderLineRowID = data.DBChannelOrderLineRowID;
			dto.RowNum = data.RowNum;
			dto.CentralOrderUuid = data.CentralOrderUuid;
			dto.CentralOrderLineUuid = data.CentralOrderLineUuid;

			#endregion read properties

			#region write all grand children object

			if (data.OrderLineMerchantExt != null)
			{
				dto.OrderLineMerchantExt = new OrderLineMerchantExtDto();
				WriteOrderLineMerchantExt(data.OrderLineMerchantExt, dto.OrderLineMerchantExt);
			}

			#endregion write all grand children object

			return;
		}
		protected virtual void WriteOrderLine(IList<OrderLine> data, IList<OrderLineDto> dto)
		{
			if (data is null || dto is null)
				return;

			dto.Clear();

			#region write all list items and properties with null

			foreach (var itemData in data)
			{
				if (itemData is null) continue;
				var obj = new OrderLineDto();
				dto.Add(obj);
				WriteOrderLine(itemData, obj);
			}

			#endregion write all list items and properties with null
			return;
		}


		protected virtual void WriteOrderLineMerchantExt(OrderLineMerchantExt data, OrderLineMerchantExtDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.CentralOrderLineNum = data.CentralOrderLineNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.CentralOrderNum = data.CentralOrderNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.ChannelNum = data.ChannelNum;
			dto.ChannelAccountNum = data.ChannelAccountNum;
			dto.ChannelOrderID = data.ChannelOrderID;
			dto.ChannelOrderLineNum = data.ChannelOrderLineNum;
			dto.MerchantLineNumber = data.MerchantLineNumber;
			dto.CustomerOrderLineNumber = data.CustomerOrderLineNumber;
			dto.HubLineID = data.HubLineID;
			dto.MerchantNRProductID = data.MerchantNRProductID;
			dto.MerchantSKU = data.MerchantSKU;
			dto.VendorSKU = data.VendorSKU;
			dto.ManufacturerSKU = data.ManufacturerSKU;
			dto.ShoppingCartSKU = data.ShoppingCartSKU;
			dto.VendorDescription = data.VendorDescription;
			dto.VendorStyleNumber = data.VendorStyleNumber;
			dto.VendorColorDescription = data.VendorColorDescription;
			dto.VendorSizeDescription = data.VendorSizeDescription;
			dto.MerchantColorCode = data.MerchantColorCode;
			dto.MerchantSizeCode = data.MerchantSizeCode;
			dto.MerchantSetCode = data.MerchantSetCode;
			dto.MerchantDescription = data.MerchantDescription;
			dto.MerchantDescription2 = data.MerchantDescription2;
			dto.MerchantDescription3 = data.MerchantDescription3;
			dto.MerchantColorSizeDescription = data.MerchantColorSizeDescription;
			dto.FullRetailPrice = data.FullRetailPrice;
			dto.EncodedPrice = data.EncodedPrice;
			dto.UnitShippingWeight = data.UnitShippingWeight;
			dto.WeightUnit = data.WeightUnit;
			dto.CustomerUnitPrice = data.CustomerUnitPrice;
			dto.UnitCostToMerchant = data.UnitCostToMerchant;
			dto.LineMerchandiseCost = data.LineMerchandiseCost;
			dto.CustomerMerchandiseAmount = data.CustomerMerchandiseAmount;
			dto.CustomerLineShippingAmount = data.CustomerLineShippingAmount;
			dto.CustomerLineHandlingAmount = data.CustomerLineHandlingAmount;
			dto.CustomerLineSubTotalAmount = data.CustomerLineSubTotalAmount;
			dto.CustomerLineTaxAmount = data.CustomerLineTaxAmount;
			dto.CustomerLineTotalAmount = data.CustomerLineTotalAmount;
			dto.CustomerLineCredits = data.CustomerLineCredits;
			dto.CustomerLineBalanceDue = data.CustomerLineBalanceDue;
			dto.LineDiscountAmount = data.LineDiscountAmount;
			dto.VendorWareshoueID = data.VendorWareshoueID;
			dto.ExpectedShipDateUtc = data.ExpectedShipDateUtc;
			dto.PackingSlipLineMessage = data.PackingSlipLineMessage;
			dto.VendorLineNotes = data.VendorLineNotes;
			dto.StoreName = data.StoreName;
			dto.PersonalizationData = data.PersonalizationData;
			dto.FacgtoryOrderNum = data.FacgtoryOrderNum;
			dto.SubUnitQty = data.SubUnitQty;
			dto.GiftWrapIndicator = data.GiftWrapIndicator;
			dto.HoldUntilDateUtc = data.HoldUntilDateUtc;
			dto.RequiredShipDateUtc = data.RequiredShipDateUtc;
			dto.RequiredDeliveryDateUtc = data.RequiredDeliveryDateUtc;
			dto.CustomerRequestedArrivalDateUtc = data.CustomerRequestedArrivalDateUtc;
			dto.ShipperHubCode = data.ShipperHubCode;
			dto.ShippingHub = data.ShippingHub;
			dto.SerializedProduct = data.SerializedProduct;
			dto.CustomerSKU = data.CustomerSKU;
			dto.VendorQuoteNumber = data.VendorQuoteNumber;
			dto.GiftRegistryID = data.GiftRegistryID;
			dto.MerchantDepartment = data.MerchantDepartment;
			dto.NdcNumber = data.NdcNumber;
			dto.VendorPatternCode = data.VendorPatternCode;
			dto.VendorFinishCode = data.VendorFinishCode;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;
			dto.CentralOrderUuid = data.CentralOrderUuid;
			dto.CentralOrderLineUuid = data.CentralOrderLineUuid;
			dto.CentralOrderLineMerchantExtUuid = data.CentralOrderLineMerchantExtUuid;

			#endregion read properties

			return;
		}

        #endregion write to dto from data

    }
}



