    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a DCAssignmentDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class DCAssignmentDataDtoMapperDefault : IDtoMapper<DCAssignmentData, DCAssignmentDataDto> 
    {
        #region read from dto to data

        public virtual DCAssignmentData ReadDto(DCAssignmentData data, DCAssignmentDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new DCAssignmentData();
                data.New();
            }

			if (dto.OrderDCAssignmentHeader != null)
			{
				if (data.OrderDCAssignmentHeader is null)
					data.OrderDCAssignmentHeader = data.NewOrderDCAssignmentHeader();
				ReadOrderDCAssignmentHeader(data.OrderDCAssignmentHeader, dto.OrderDCAssignmentHeader);
			}
			if (dto.OrderDCAssignmentLine != null)
			{
				if (data.OrderDCAssignmentLine is null)
					data.OrderDCAssignmentLine = new List<OrderDCAssignmentLine>();
				var deleted = ReadOrderDCAssignmentLine(data.OrderDCAssignmentLine, dto.OrderDCAssignmentLine);
				data.SetOrderDCAssignmentLineDeleted(deleted);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadOrderDCAssignmentHeader(OrderDCAssignmentHeader data, OrderDCAssignmentHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasChannelNum) data.ChannelNum = dto.ChannelNum.ToInt();
			if (dto.HasChannelAccountNum) data.ChannelAccountNum = dto.ChannelAccountNum.ToInt();
			if (dto.HasCentralOrderNum) data.CentralOrderNum = dto.CentralOrderNum.ToLong();
			if (dto.HasChannelOrderID) data.ChannelOrderID = dto.ChannelOrderID;
			if (dto.HasShippingCost) data.ShippingCost = dto.ShippingCost.ToDecimal();
			if (dto.HasInsuranceCost) data.InsuranceCost = dto.InsuranceCost.ToDecimal();
			if (dto.HasTaxCost) data.TaxCost = dto.TaxCost.ToDecimal();
			if (dto.HasFulfillmentType) data.FulfillmentType = dto.FulfillmentType.ToInt();
			if (dto.HasDistributionCenterNum) data.DistributionCenterNum = dto.DistributionCenterNum.ToInt();
			if (dto.HasSellerWarehouseID) data.SellerWarehouseID = dto.SellerWarehouseID;
			if (dto.HasUseSystemShippingLabel) data.UseSystemShippingLabel = dto.UseSystemShippingLabel.ToInt();
			if (dto.HasUseChannelPackingSlip) data.UseChannelPackingSlip = dto.UseChannelPackingSlip.ToInt();
			if (dto.HasUseSystemReturnLabel) data.UseSystemReturnLabel = dto.UseSystemReturnLabel.ToInt();
			if (dto.HasShippingLabelFormat) data.ShippingLabelFormat = dto.ShippingLabelFormat.ToInt();
			if (dto.HasReturnLabelFormat) data.ReturnLabelFormat = dto.ReturnLabelFormat.ToInt();
			if (dto.HasDBChannelOrderHeaderRowID) data.DBChannelOrderHeaderRowID = dto.DBChannelOrderHeaderRowID;
			if (dto.HasFulfillmentProcessStatus) data.FulfillmentProcessStatus = dto.FulfillmentProcessStatus.ToInt();
			if (dto.HasIntegrationStatus) data.IntegrationStatus = dto.IntegrationStatus.ToInt();
			if (dto.HasIntegrationDateUtc) data.IntegrationDateUtc = dto.IntegrationDateUtc;
			if (dto.HasCentralOrderUuid) data.CentralOrderUuid = dto.CentralOrderUuid;
			if (dto.HasOrderDCAssignmentUuid) data.OrderDCAssignmentUuid = dto.OrderDCAssignmentUuid;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}


		protected virtual void ReadOrderDCAssignmentLine(OrderDCAssignmentLine data, OrderDCAssignmentLineDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasChannelNum) data.ChannelNum = dto.ChannelNum.ToInt();
			if (dto.HasChannelAccountNum) data.ChannelAccountNum = dto.ChannelAccountNum.ToInt();
			if (dto.HasOrderDCAssignmentNum) data.OrderDCAssignmentNum = dto.OrderDCAssignmentNum.ToLong();
			if (dto.HasCentralOrderNum) data.CentralOrderNum = dto.CentralOrderNum.ToLong();
			if (dto.HasCentralOrderLineNum) data.CentralOrderLineNum = dto.CentralOrderLineNum.ToLong();
			if (dto.HasChannelOrderID) data.ChannelOrderID = dto.ChannelOrderID;
			if (dto.HasCentralProductNum) data.CentralProductNum = dto.CentralProductNum.ToLong();
			if (dto.HasDistributionProductNum) data.DistributionProductNum = dto.DistributionProductNum.ToLong();
			if (dto.HasSKU) data.SKU = dto.SKU;
			if (dto.HasChannelItemID) data.ChannelItemID = dto.ChannelItemID;
			if (dto.HasOrderQty) data.OrderQty = dto.OrderQty.ToDecimal();
			if (dto.HasDBChannelOrderLineRowID) data.DBChannelOrderLineRowID = dto.DBChannelOrderLineRowID;
			if (dto.HasCentralOrderUuid) data.CentralOrderUuid = dto.CentralOrderUuid;
			if (dto.HasCentralOrderLineUuid) data.CentralOrderLineUuid = dto.CentralOrderLineUuid;
			if (dto.HasOrderDCAssignmentUuid) data.OrderDCAssignmentUuid = dto.OrderDCAssignmentUuid;
			if (dto.HasOrderDCAssignmentLineUuid) data.OrderDCAssignmentLineUuid = dto.OrderDCAssignmentLineUuid;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}

		protected virtual IList<OrderDCAssignmentLine> ReadOrderDCAssignmentLine(IList<OrderDCAssignmentLine> data, IList<OrderDCAssignmentLineDto> dto)
		{
			if (data is null || dto is null)
				return null;
			var lstOrig = new List<OrderDCAssignmentLine>(data.Where(x => x != null).ToList());
			data.Clear();
			foreach (var itemDto in dto)
			{
				if (itemDto == null) continue;

				var obj = itemDto.RowNum > 0
					? lstOrig.Find(x => x.RowNum == itemDto.RowNum)
					: lstOrig.Find(x => x.OrderDCAssignmentLineUuid == itemDto.OrderDCAssignmentLineUuid);
				if (obj is null)
					obj = new OrderDCAssignmentLine().SetAllowNull(false);
				else
					lstOrig.Remove(obj);

				data.Add(obj);

				ReadOrderDCAssignmentLine(obj, itemDto);

			}
			return lstOrig;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual DCAssignmentDataDto WriteDto(DCAssignmentData data, DCAssignmentDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new DCAssignmentDataDto();

            data.CheckIntegrity();

			if (data.OrderDCAssignmentHeader != null)
			{
				dto.OrderDCAssignmentHeader = new OrderDCAssignmentHeaderDto();
				WriteOrderDCAssignmentHeader(data.OrderDCAssignmentHeader, dto.OrderDCAssignmentHeader);
			}
			if (data.OrderDCAssignmentLine != null)
			{
				dto.OrderDCAssignmentLine = new List<OrderDCAssignmentLineDto>();
				WriteOrderDCAssignmentLine(data.OrderDCAssignmentLine, dto.OrderDCAssignmentLine);
			}
            return dto;
        }

		protected virtual void WriteOrderDCAssignmentHeader(OrderDCAssignmentHeader data, OrderDCAssignmentHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.OrderDCAssignmentNum = data.OrderDCAssignmentNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.ChannelNum = data.ChannelNum;
			dto.ChannelAccountNum = data.ChannelAccountNum;
			dto.CentralOrderNum = data.CentralOrderNum;
			dto.ChannelOrderID = data.ChannelOrderID;
			dto.ShippingCost = data.ShippingCost;
			dto.InsuranceCost = data.InsuranceCost;
			dto.TaxCost = data.TaxCost;
			dto.FulfillmentType = data.FulfillmentType;
			dto.DistributionCenterNum = data.DistributionCenterNum;
			dto.SellerWarehouseID = data.SellerWarehouseID;
			dto.UseSystemShippingLabel = data.UseSystemShippingLabel;
			dto.UseChannelPackingSlip = data.UseChannelPackingSlip;
			dto.UseSystemReturnLabel = data.UseSystemReturnLabel;
			dto.ShippingLabelFormat = data.ShippingLabelFormat;
			dto.ReturnLabelFormat = data.ReturnLabelFormat;
			dto.DBChannelOrderHeaderRowID = data.DBChannelOrderHeaderRowID;
			dto.FulfillmentProcessStatus = data.FulfillmentProcessStatus;
			dto.IntegrationStatus = data.IntegrationStatus;
			dto.IntegrationDateUtc = data.IntegrationDateUtc;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.CentralOrderUuid = data.CentralOrderUuid;
			dto.OrderDCAssignmentUuid = data.OrderDCAssignmentUuid;
			dto.RowNum = data.RowNum;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}

		protected virtual void WriteOrderDCAssignmentLine(OrderDCAssignmentLine data, OrderDCAssignmentLineDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.OrderDCAssignmentLineNum = data.OrderDCAssignmentLineNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.ChannelNum = data.ChannelNum;
			dto.ChannelAccountNum = data.ChannelAccountNum;
			dto.OrderDCAssignmentNum = data.OrderDCAssignmentNum;
			dto.CentralOrderNum = data.CentralOrderNum;
			dto.CentralOrderLineNum = data.CentralOrderLineNum;
			dto.ChannelOrderID = data.ChannelOrderID;
			dto.CentralProductNum = data.CentralProductNum;
			dto.DistributionProductNum = data.DistributionProductNum;
			dto.SKU = data.SKU;
			dto.ChannelItemID = data.ChannelItemID;
			dto.OrderQty = data.OrderQty;
			dto.DBChannelOrderLineRowID = data.DBChannelOrderLineRowID;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.CentralOrderUuid = data.CentralOrderUuid;
			dto.CentralOrderLineUuid = data.CentralOrderLineUuid;
			dto.OrderDCAssignmentUuid = data.OrderDCAssignmentUuid;
			dto.OrderDCAssignmentLineUuid = data.OrderDCAssignmentLineUuid;
			dto.RowNum = data.RowNum;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}
		protected virtual void WriteOrderDCAssignmentLine(IList<OrderDCAssignmentLine> data, IList<OrderDCAssignmentLineDto> dto)
		{
			if (data is null || dto is null)
				return;

			dto.Clear();

			#region write all list items and properties with null

			foreach (var itemData in data)
			{
				if (itemData is null) continue;
				var obj = new OrderDCAssignmentLineDto();
				dto.Add(obj);
				WriteOrderDCAssignmentLine(itemData, obj);
			}

			#endregion write all list items and properties with null
			return;
		}



        #endregion write to dto from data

    }
}



