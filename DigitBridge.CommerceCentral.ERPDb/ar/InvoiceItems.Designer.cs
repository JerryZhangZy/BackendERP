
              

              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InvoiceItems.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("InvoiceItems")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("InvoiceItemsId")]
    [DtoName("InvoiceItemsDto")]
    public partial class InvoiceItems : TableRepository<InvoiceItems, long>
    {

        public InvoiceItems() : base() {}
        public InvoiceItems(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("InvoiceItemsId",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _invoiceItemsId;

        [Column("InvoiceId",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _invoiceId;

        [Column("Seq",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _seq;

        [Column("InvoiceItemType",SqlDbType.Int,IsDefault=true)]
        private int? _invoiceItemType;

        [Column("InvoiceItemStatus",SqlDbType.Int,IsDefault=true)]
        private int? _invoiceItemStatus;

        [Column("ItemDate",SqlDbType.Date,NotNull=true)]
        private DateTime _itemDate;

        [Column("ItemTime",SqlDbType.Time,NotNull=true)]
        private TimeSpan _itemTime;

        [Column("ShipDate",SqlDbType.Date)]
        private DateTime? _shipDate;

        [Column("EtaArrivalDate",SqlDbType.Date)]
        private DateTime? _etaArrivalDate;

        [Column("SKU",SqlDbType.VarChar,NotNull=true)]
        private string _sKU;

        [Column("InventoryId",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _inventoryId;

        [Column("WarehouseID",SqlDbType.VarChar)]
        private string _warehouseID;

        [Column("LotNum",SqlDbType.VarChar,NotNull=true)]
        private string _lotNum;

        [Column("Description",SqlDbType.NVarChar,NotNull=true)]
        private string _description;

        [Column("Notes",SqlDbType.NVarChar,NotNull=true)]
        private string _notes;

        [Column("Currency",SqlDbType.VarChar)]
        private string _currency;

        [Column("UOM",SqlDbType.VarChar)]
        private string _uOM;

        [Column("PackType",SqlDbType.VarChar)]
        private string _packType;

        [Column("PackQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _packQty;

        [Column("OrderPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _orderPack;

        [Column("ShipPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shipPack;

        [Column("CancelledPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _cancelledPack;

        [Column("OrderQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _orderQty;

        [Column("ShipQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shipQty;

        [Column("CancelledQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _cancelledQty;

        [Column("PriceRule",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _priceRule;

        [Column("Price",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _price;

        [Column("DiscountRate",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _discountRate;

        [Column("DiscountAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _discountAmount;

        [Column("DiscountPrice",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountPrice;

        [Column("ExtAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _extAmount;

        [Column("TaxRate",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _taxRate;

        [Column("TaxAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _taxAmount;

        [Column("ShippingAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _shippingAmount;

        [Column("ShippingTaxAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _shippingTaxAmount;

        [Column("MiscAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _miscAmount;

        [Column("MiscTaxAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _miscTaxAmount;

        [Column("ChargeAndAllowanceAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _chargeAndAllowanceAmount;

        [Column("ItemTotalAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _itemTotalAmount;

        [Column("Stockable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _stockable;

        [Column("IsAr",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _isAr;

        [Column("Taxable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _taxable;

        [Column("Costable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _costable;

        [Column("UnitCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _unitCost;

        [Column("AvgCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _avgCost;

        [Column("LotCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _lotCost;

        [Column("LotInDate",SqlDbType.Date)]
        private DateTime? _lotInDate;

        [Column("LotExpDate",SqlDbType.Date)]
        private DateTime? _lotExpDate;

        [Column("UpdateDateUtc",SqlDbType.DateTime)]
        private DateTime? _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		public override string UniqueId => InvoiceItemsId; 
		public void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(InvoiceItemsId)) 
				InvoiceItemsId = Guid.NewGuid().ToString(); 
		}
		public override bool IsEmpty => ( string.IsNullOrWhiteSpace(SKU) );
        public virtual string InvoiceItemsId
        {
            get
            {
				return _invoiceItemsId?.TrimEnd(); 
            }
            set
            {
				_invoiceItemsId = value.TruncateTo(50); 
            }
        }

        public virtual string InvoiceId
        {
            get
            {
				return _invoiceId?.TrimEnd(); 
            }
            set
            {
				_invoiceId = value.TruncateTo(50); 
            }
        }

        public virtual int Seq
        {
            get
            {
				return _seq; 
            }
            set
            {
				_seq = value; 
            }
        }

        public virtual int? InvoiceItemType
        {
            get
            {
				if (!AllowNull && _invoiceItemType is null) 
					_invoiceItemType = default(int); 
				return _invoiceItemType; 
            }
            set
            {
				if (value != null || AllowNull) 
					_invoiceItemType = value; 
            }
        }

        public virtual int? InvoiceItemStatus
        {
            get
            {
				if (!AllowNull && _invoiceItemStatus is null) 
					_invoiceItemStatus = default(int); 
				return _invoiceItemStatus; 
            }
            set
            {
				if (value != null || AllowNull) 
					_invoiceItemStatus = value; 
            }
        }

        public virtual DateTime ItemDate
        {
            get
            {
				return _itemDate; 
            }
            set
            {
				_itemDate = value.Date.ToSqlSafeValue(); 
            }
        }

        public virtual TimeSpan ItemTime
        {
            get
            {
				return _itemTime; 
            }
            set
            {
				_itemTime = value.ToSqlSafeValue(); 
            }
        }

        public virtual DateTime? ShipDate
        {
            get
            {
				if (!AllowNull && _shipDate is null) 
					_shipDate = new DateTime().MinValueSql(); 
				return _shipDate; 
            }
            set
            {
				if (value != null || AllowNull) 
					_shipDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
            }
        }

        public virtual DateTime? EtaArrivalDate
        {
            get
            {
				if (!AllowNull && _etaArrivalDate is null) 
					_etaArrivalDate = new DateTime().MinValueSql(); 
				return _etaArrivalDate; 
            }
            set
            {
				if (value != null || AllowNull) 
					_etaArrivalDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
            }
        }

        public virtual string SKU
        {
            get
            {
				return _sKU?.TrimEnd(); 
            }
            set
            {
				_sKU = value.TruncateTo(100); 
            }
        }

        public virtual string InventoryId
        {
            get
            {
				return _inventoryId?.TrimEnd(); 
            }
            set
            {
				_inventoryId = value.TruncateTo(50); 
            }
        }

        public virtual string WarehouseID
        {
            get
            {
				if (!AllowNull && _warehouseID is null) 
					_warehouseID = String.Empty; 
				return _warehouseID?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
					_warehouseID = value.TruncateTo(50); 
            }
        }

        public virtual string LotNum
        {
            get
            {
				return _lotNum?.TrimEnd(); 
            }
            set
            {
				_lotNum = value.TruncateTo(100); 
            }
        }

        public virtual string Description
        {
            get
            {
				return _description?.TrimEnd(); 
            }
            set
            {
				_description = value.TruncateTo(200); 
            }
        }

        public virtual string Notes
        {
            get
            {
				return _notes?.TrimEnd(); 
            }
            set
            {
				_notes = value.TruncateTo(500); 
            }
        }

        public virtual string Currency
        {
            get
            {
				if (!AllowNull && _currency is null) 
					_currency = String.Empty; 
				return _currency?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
					_currency = value.TruncateTo(10); 
            }
        }

        public virtual string UOM
        {
            get
            {
				if (!AllowNull && _uOM is null) 
					_uOM = String.Empty; 
				return _uOM?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
					_uOM = value.TruncateTo(50); 
            }
        }

        public virtual string PackType
        {
            get
            {
				if (!AllowNull && _packType is null) 
					_packType = String.Empty; 
				return _packType?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
					_packType = value.TruncateTo(50); 
            }
        }

        public virtual decimal PackQty
        {
            get
            {
				return _packQty; 
            }
            set
            {
				_packQty = value; 
            }
        }

        public virtual decimal OrderPack
        {
            get
            {
				return _orderPack; 
            }
            set
            {
				_orderPack = value; 
            }
        }

        public virtual decimal ShipPack
        {
            get
            {
				return _shipPack; 
            }
            set
            {
				_shipPack = value; 
            }
        }

        public virtual decimal CancelledPack
        {
            get
            {
				return _cancelledPack; 
            }
            set
            {
				_cancelledPack = value; 
            }
        }

        public virtual decimal OrderQty
        {
            get
            {
				return _orderQty; 
            }
            set
            {
				_orderQty = value; 
            }
        }

        public virtual decimal ShipQty
        {
            get
            {
				return _shipQty; 
            }
            set
            {
				_shipQty = value; 
            }
        }

        public virtual decimal CancelledQty
        {
            get
            {
				return _cancelledQty; 
            }
            set
            {
				_cancelledQty = value; 
            }
        }

        public virtual string PriceRule
        {
            get
            {
				return _priceRule?.TrimEnd(); 
            }
            set
            {
				_priceRule = value.TruncateTo(50); 
            }
        }

        public virtual decimal Price
        {
            get
            {
				return _price; 
            }
            set
            {
				_price = value; 
            }
        }

        public virtual decimal? DiscountRate
        {
            get
            {
				if (!AllowNull && _discountRate is null) 
					_discountRate = default(decimal); 
				return _discountRate; 
            }
            set
            {
				if (value != null || AllowNull) 
					_discountRate = value; 
            }
        }

        public virtual decimal? DiscountAmount
        {
            get
            {
				if (!AllowNull && _discountAmount is null) 
					_discountAmount = default(decimal); 
				return _discountAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
					_discountAmount = value; 
            }
        }

        public virtual decimal DiscountPrice
        {
            get
            {
				return _discountPrice; 
            }
            set
            {
				_discountPrice = value; 
            }
        }

        public virtual decimal ExtAmount
        {
            get
            {
				return _extAmount; 
            }
            set
            {
				_extAmount = value; 
            }
        }

        public virtual decimal? TaxRate
        {
            get
            {
				if (!AllowNull && _taxRate is null) 
					_taxRate = default(decimal); 
				return _taxRate; 
            }
            set
            {
				if (value != null || AllowNull) 
					_taxRate = value; 
            }
        }

        public virtual decimal? TaxAmount
        {
            get
            {
				if (!AllowNull && _taxAmount is null) 
					_taxAmount = default(decimal); 
				return _taxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
					_taxAmount = value; 
            }
        }

        public virtual decimal? ShippingAmount
        {
            get
            {
				if (!AllowNull && _shippingAmount is null) 
					_shippingAmount = default(decimal); 
				return _shippingAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
					_shippingAmount = value; 
            }
        }

        public virtual decimal? ShippingTaxAmount
        {
            get
            {
				if (!AllowNull && _shippingTaxAmount is null) 
					_shippingTaxAmount = default(decimal); 
				return _shippingTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
					_shippingTaxAmount = value; 
            }
        }

        public virtual decimal? MiscAmount
        {
            get
            {
				if (!AllowNull && _miscAmount is null) 
					_miscAmount = default(decimal); 
				return _miscAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
					_miscAmount = value; 
            }
        }

        public virtual decimal? MiscTaxAmount
        {
            get
            {
				if (!AllowNull && _miscTaxAmount is null) 
					_miscTaxAmount = default(decimal); 
				return _miscTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
					_miscTaxAmount = value; 
            }
        }

        public virtual decimal? ChargeAndAllowanceAmount
        {
            get
            {
				if (!AllowNull && _chargeAndAllowanceAmount is null) 
					_chargeAndAllowanceAmount = default(decimal); 
				return _chargeAndAllowanceAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
					_chargeAndAllowanceAmount = value; 
            }
        }

        public virtual decimal ItemTotalAmount
        {
            get
            {
				return _itemTotalAmount; 
            }
            set
            {
				_itemTotalAmount = value; 
            }
        }

        public virtual bool Stockable
        {
            get
            {
				return (_stockable == 1); 
            }
            set
            {
				_stockable = value ? (byte)1 : (byte)0; 
            }
        }

        public virtual bool IsAr
        {
            get
            {
				return (_isAr == 1); 
            }
            set
            {
				_isAr = value ? (byte)1 : (byte)0; 
            }
        }

        public virtual bool Taxable
        {
            get
            {
				return (_taxable == 1); 
            }
            set
            {
				_taxable = value ? (byte)1 : (byte)0; 
            }
        }

        public virtual bool Costable
        {
            get
            {
				return (_costable == 1); 
            }
            set
            {
				_costable = value ? (byte)1 : (byte)0; 
            }
        }

        public virtual decimal UnitCost
        {
            get
            {
				return _unitCost; 
            }
            set
            {
				_unitCost = value; 
            }
        }

        public virtual decimal AvgCost
        {
            get
            {
				return _avgCost; 
            }
            set
            {
				_avgCost = value; 
            }
        }

        public virtual decimal LotCost
        {
            get
            {
				return _lotCost; 
            }
            set
            {
				_lotCost = value; 
            }
        }

        public virtual DateTime? LotInDate
        {
            get
            {
				if (!AllowNull && _lotInDate is null) 
					_lotInDate = new DateTime().MinValueSql(); 
				return _lotInDate; 
            }
            set
            {
				if (value != null || AllowNull) 
					_lotInDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
            }
        }

        public virtual DateTime? LotExpDate
        {
            get
            {
				if (!AllowNull && _lotExpDate is null) 
					_lotExpDate = new DateTime().MinValueSql(); 
				return _lotExpDate; 
            }
            set
            {
				if (value != null || AllowNull) 
					_lotExpDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
            }
        }

        public virtual DateTime? UpdateDateUtc
        {
            get
            {
				if (!AllowNull && _updateDateUtc is null) 
					_updateDateUtc = new DateTime().MinValueSql(); 
				return _updateDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
					_updateDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
            }
        }

        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
            }
        }

        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
            }
        }

        #endregion Properties - Generated 

        #region Methods - Parent

		[XmlIgnore, JsonIgnore, IgnoreCompare]
		private InvoiceData Parent { get; set; }
		public InvoiceData GetParent() => Parent;
		public InvoiceItems SetParent(InvoiceData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent

		#region Methods - Children InvoiceItemsAttributes
		protected InvoiceItemsAttributes _InvoiceItemsAttributes;
		[IgnoreCompare]
		public InvoiceItemsAttributes InvoiceItemsAttributes
		{
			get
			{
				return _InvoiceItemsAttributes;
			}
			set
			{
				_InvoiceItemsAttributes = value;
				CheckIntegrityInvoiceItemsAttributes();
			}
		}
		public InvoiceItemsAttributes SetChildrenInvoiceItemsAttributes(IEnumerable<InvoiceItemsAttributes> children)
		{
			var childrenList = children.ToList();
			InvoiceItemsAttributes = childrenList.FirstOrDefault(x => !string.IsNullOrEmpty(InvoiceItemsId) && x.InvoiceItemsId == InvoiceItemsId);
			return InvoiceItemsAttributes;
		}
		public IEnumerable<InvoiceItemsAttributes> GetChildrenInvoiceItemsAttributes()
		{
			return new List<InvoiceItemsAttributes>() { InvoiceItemsAttributes };
		}
		public InvoiceItemsAttributes CheckIntegrityInvoiceItemsAttributes()
		{
			if (InvoiceItemsAttributes == null)
				return InvoiceItemsAttributes;
			CheckUniqueId();
			InvoiceItemsAttributes.SetParent(Parent);
			if (InvoiceItemsAttributes.InvoiceItemsId != InvoiceItemsId) InvoiceItemsAttributes.InvoiceItemsId = InvoiceItemsId;
			return InvoiceItemsAttributes;
		}
		public InvoiceItemsAttributes LoadInvoiceItemsAttributes()
		{
			InvoiceItemsAttributes = dbFactory.GetById<InvoiceItemsAttributes>(InvoiceItemsId);
			return InvoiceItemsAttributes;
		}
		public async Task<InvoiceItemsAttributes> LoadInvoiceItemsAttributesAsync()
		{
			InvoiceItemsAttributes = await dbFactory.GetByIdAsync<InvoiceItemsAttributes>(InvoiceItemsId);
			return InvoiceItemsAttributes;
		}
		public InvoiceItemsAttributes NewInvoiceItemsAttributes()
		{
			CheckUniqueId();
			var child = new InvoiceItemsAttributes(dbFactory);
			child.SetParent(Parent);
			child.InvoiceItemsId = InvoiceItemsId;
			return child;
		}
		public InvoiceItemsAttributes AddInvoiceItemsAttributes(InvoiceItemsAttributes child)
		{
			if (child == null)
				child = NewInvoiceItemsAttributes();
			InvoiceItemsAttributes = child;
			return InvoiceItemsAttributes;
		}
		#endregion Methods - Children InvoiceItemsAttributes

        #region Methods - Generated 

        public override InvoiceItems Clear()
        {
			_invoiceItemsId = String.Empty; 
			_invoiceId = String.Empty; 
			_seq = default(int); 
			_invoiceItemType = AllowNull ? (int?)null : default(int); 
			_invoiceItemStatus = AllowNull ? (int?)null : default(int); 
			_itemDate = new DateTime().MinValueSql(); 
			_itemTime = new TimeSpan().MinValueSql(); 
			_shipDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_etaArrivalDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_sKU = String.Empty; 
			_inventoryId = String.Empty; 
			_warehouseID = AllowNull ? (string)null : String.Empty; 
			_lotNum = String.Empty; 
			_description = String.Empty; 
			_notes = String.Empty; 
			_currency = AllowNull ? (string)null : String.Empty; 
			_uOM = AllowNull ? (string)null : String.Empty; 
			_packType = AllowNull ? (string)null : String.Empty; 
			_packQty = default(decimal); 
			_orderPack = default(decimal); 
			_shipPack = default(decimal); 
			_cancelledPack = default(decimal); 
			_orderQty = default(decimal); 
			_shipQty = default(decimal); 
			_cancelledQty = default(decimal); 
			_priceRule = String.Empty; 
			_price = default(decimal); 
			_discountRate = AllowNull ? (decimal?)null : default(decimal); 
			_discountAmount = AllowNull ? (decimal?)null : default(decimal); 
			_discountPrice = default(decimal); 
			_extAmount = default(decimal); 
			_taxRate = AllowNull ? (decimal?)null : default(decimal); 
			_taxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_shippingAmount = AllowNull ? (decimal?)null : default(decimal); 
			_shippingTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_miscAmount = AllowNull ? (decimal?)null : default(decimal); 
			_miscTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_chargeAndAllowanceAmount = AllowNull ? (decimal?)null : default(decimal); 
			_itemTotalAmount = default(decimal); 
			_stockable = default(byte); 
			_isAr = default(byte); 
			_taxable = default(byte); 
			_costable = default(byte); 
			_unitCost = default(decimal); 
			_avgCost = default(decimal); 
			_lotCost = default(decimal); 
			_lotInDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_lotExpDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_updateDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public virtual InvoiceItems ClearChildren()
        {
			InvoiceItemsAttributes.Clear();
            return this;
        }

        public virtual InvoiceItems NewChildren()
        {
			AddInvoiceItemsAttributes(NewInvoiceItemsAttributes());
            return this;
        }

        public virtual void CopyChildrenFrom(InvoiceItems data)
        {
			InvoiceItemsAttributes.CopyFrom(data.InvoiceItemsAttributes);
			CheckIntegrityInvoiceItemsAttributes(); 
            return;
        }

		public IEnumerable<InvoiceItems> FindByInvoiceId(string invoiceId)
		{
			return dbFactory.Find<InvoiceItems>("WHERE InvoiceId = @0 ORDER BY Seq ", invoiceId);
		}
		public long CountByInvoiceId(string invoiceId)
		{
			return dbFactory.Count<InvoiceItems>("WHERE InvoiceId = @0 ", invoiceId);
		}
		public async Task<IEnumerable<InvoiceItems>> FindByAsyncInvoiceId(string invoiceId)
		{
			return await dbFactory.FindAsync<InvoiceItems>("WHERE InvoiceId = @0 ORDER BY Seq ", invoiceId);
		}
		public async Task<long> CountByAsyncInvoiceId(string invoiceId)
		{
			return await dbFactory.CountAsync<InvoiceItems>("WHERE InvoiceId = @0 ", invoiceId);
		}
        #endregion Methods - Generated 
    }
}



