





              

              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InvoiceReturnItems.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("InvoiceReturnItems")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("ReturnItemUuid")]
    [DtoName("InvoiceReturnItemsDto")]
    public partial class InvoiceReturnItems : TableRepository<InvoiceReturnItems, long>
    {

        public InvoiceReturnItems() : base() {}
        public InvoiceReturnItems(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("ReturnItemUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _returnItemUuid;

        [Column("TransUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _transUuid;

        [Column("Seq",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _seq;

        [Column("InvoiceUuid",SqlDbType.VarChar,NotNull=true)]
        private string _invoiceUuid;

        [Column("InvoiceItemsUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _invoiceItemsUuid;

        [Column("ReturnItemType",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _returnItemType;

        [Column("ReturnItemStatus",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _returnItemStatus;

        [Column("ReturnDate",SqlDbType.Date,NotNull=true)]
        private DateTime _returnDate;

        [Column("ReturnTime",SqlDbType.Time,NotNull=true)]
        private TimeSpan _returnTime;

        [Column("ReceiveDate",SqlDbType.Date)]
        private DateTime? _receiveDate;

        [Column("StockDate",SqlDbType.Date)]
        private DateTime? _stockDate;

        [Column("SKU",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _sKU;

        [Column("ProductUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _productUuid;

        [Column("InventoryUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _inventoryUuid;

        [Column("WarehouseUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _warehouseUuid;

        [Column("LotNum",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _lotNum;

        [Column("Description",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _description;

        [Column("Notes",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _notes;

        [Column("Currency",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _currency;

        [Column("UOM",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _uOM;

        [Column("PackType",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _packType;

        [Column("PackQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _packQty;

        [Column("ReturnPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _returnPack;

        [Column("ReceivePack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _receivePack;

        [Column("StockPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _stockPack;

        [Column("NonStockPack",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _nonStockPack;

        [Column("ReturnQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _returnQty;

        [Column("ReceiveQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _receiveQty;

        [Column("StockQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _stockQty;

        [Column("NonStockQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _nonStockQty;

        [Column("Price",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _price;

        [Column("DiscountRate",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountRate;

        [Column("DiscountAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountAmount;

        [Column("DiscountPrice",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountPrice;

        [Column("ExtAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _extAmount;

        [Column("TaxableAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxableAmount;

        [Column("NonTaxableAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _nonTaxableAmount;

        [Column("TaxRate",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxRate;

        [Column("TaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxAmount;

        [Column("ShippingAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shippingAmount;

        [Column("ShippingTaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shippingTaxAmount;

        [Column("MiscAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _miscAmount;

        [Column("MiscTaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _miscTaxAmount;

        [Column("ChargeAndAllowanceAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _chargeAndAllowanceAmount;

        [Column("Stockable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _stockable;

        [Column("IsAr",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _isAr;

        [Column("Taxable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _taxable;

        [Column("UpdateDateUtc",SqlDbType.DateTime)]
        private DateTime? _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => ReturnItemUuid; 
		public void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(ReturnItemUuid)) 
				ReturnItemUuid = Guid.NewGuid().ToString(); 
		}
        public virtual string ReturnItemUuid
        {
            get
            {
				return _returnItemUuid?.TrimEnd(); 
            }
            set
            {
				_returnItemUuid = value.TruncateTo(50); 
				OnPropertyChanged("ReturnItemUuid", value);
            }
        }

        public virtual string TransUuid
        {
            get
            {
				return _transUuid?.TrimEnd(); 
            }
            set
            {
				_transUuid = value.TruncateTo(50); 
				OnPropertyChanged("TransUuid", value);
            }
        }

        public virtual int Seq
        {
            get
            {
				return _seq; 
            }
            set
            {
				_seq = value; 
				OnPropertyChanged("Seq", value);
            }
        }

        public virtual string InvoiceUuid
        {
            get
            {
				return _invoiceUuid?.TrimEnd(); 
            }
            set
            {
				_invoiceUuid = value.TruncateTo(50); 
				OnPropertyChanged("InvoiceUuid", value);
            }
        }

        public virtual string InvoiceItemsUuid
        {
            get
            {
				return _invoiceItemsUuid?.TrimEnd(); 
            }
            set
            {
				_invoiceItemsUuid = value.TruncateTo(50); 
				OnPropertyChanged("InvoiceItemsUuid", value);
            }
        }

        public virtual int ReturnItemType
        {
            get
            {
				return _returnItemType; 
            }
            set
            {
				_returnItemType = value; 
				OnPropertyChanged("ReturnItemType", value);
            }
        }

        public virtual int ReturnItemStatus
        {
            get
            {
				return _returnItemStatus; 
            }
            set
            {
				_returnItemStatus = value; 
				OnPropertyChanged("ReturnItemStatus", value);
            }
        }

        public virtual DateTime ReturnDate
        {
            get
            {
				return _returnDate; 
            }
            set
            {
				_returnDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("ReturnDate", value);
            }
        }

        public virtual TimeSpan ReturnTime
        {
            get
            {
				return _returnTime; 
            }
            set
            {
				_returnTime = value.ToSqlSafeValue(); 
				OnPropertyChanged("ReturnTime", value);
            }
        }

        public virtual DateTime? ReceiveDate
        {
            get
            {
				if (!AllowNull && _receiveDate is null) 
					_receiveDate = new DateTime().MinValueSql(); 
				return _receiveDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_receiveDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("ReceiveDate", value);
				}
            }
        }

        public virtual DateTime? StockDate
        {
            get
            {
				if (!AllowNull && _stockDate is null) 
					_stockDate = new DateTime().MinValueSql(); 
				return _stockDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_stockDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("StockDate", value);
				}
            }
        }

        public virtual string SKU
        {
            get
            {
				return _sKU?.TrimEnd(); 
            }
            set
            {
				_sKU = value.TruncateTo(100); 
				OnPropertyChanged("SKU", value);
            }
        }

        public virtual string ProductUuid
        {
            get
            {
				return _productUuid?.TrimEnd(); 
            }
            set
            {
				_productUuid = value.TruncateTo(50); 
				OnPropertyChanged("ProductUuid", value);
            }
        }

        public virtual string InventoryUuid
        {
            get
            {
				return _inventoryUuid?.TrimEnd(); 
            }
            set
            {
				_inventoryUuid = value.TruncateTo(50); 
				OnPropertyChanged("InventoryUuid", value);
            }
        }

        public virtual string WarehouseUuid
        {
            get
            {
				return _warehouseUuid?.TrimEnd(); 
            }
            set
            {
				_warehouseUuid = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseUuid", value);
            }
        }

        public virtual string LotNum
        {
            get
            {
				return _lotNum?.TrimEnd(); 
            }
            set
            {
				_lotNum = value.TruncateTo(100); 
				OnPropertyChanged("LotNum", value);
            }
        }

        public virtual string Description
        {
            get
            {
				return _description?.TrimEnd(); 
            }
            set
            {
				_description = value.TruncateTo(200); 
				OnPropertyChanged("Description", value);
            }
        }

        public virtual string Notes
        {
            get
            {
				return _notes?.TrimEnd(); 
            }
            set
            {
				_notes = value.TruncateTo(500); 
				OnPropertyChanged("Notes", value);
            }
        }

        public virtual string Currency
        {
            get
            {
				return _currency?.TrimEnd(); 
            }
            set
            {
				_currency = value.TruncateTo(10); 
				OnPropertyChanged("Currency", value);
            }
        }

        public virtual string UOM
        {
            get
            {
				return _uOM?.TrimEnd(); 
            }
            set
            {
				_uOM = value.TruncateTo(50); 
				OnPropertyChanged("UOM", value);
            }
        }

        public virtual string PackType
        {
            get
            {
				return _packType?.TrimEnd(); 
            }
            set
            {
				_packType = value.TruncateTo(50); 
				OnPropertyChanged("PackType", value);
            }
        }

        public virtual decimal PackQty
        {
            get
            {
				return _packQty; 
            }
            set
            {
				_packQty = value; 
				OnPropertyChanged("PackQty", value);
            }
        }

        public virtual decimal ReturnPack
        {
            get
            {
				return _returnPack; 
            }
            set
            {
				_returnPack = value; 
				OnPropertyChanged("ReturnPack", value);
            }
        }

        public virtual decimal ReceivePack
        {
            get
            {
				return _receivePack; 
            }
            set
            {
				_receivePack = value; 
				OnPropertyChanged("ReceivePack", value);
            }
        }

        public virtual decimal StockPack
        {
            get
            {
				return _stockPack; 
            }
            set
            {
				_stockPack = value; 
				OnPropertyChanged("StockPack", value);
            }
        }

        public virtual decimal NonStockPack
        {
            get
            {
				return _nonStockPack; 
            }
            set
            {
				_nonStockPack = value; 
				OnPropertyChanged("NonStockPack", value);
            }
        }

        public virtual decimal ReturnQty
        {
            get
            {
				return _returnQty; 
            }
            set
            {
				_returnQty = value; 
				OnPropertyChanged("ReturnQty", value);
            }
        }

        public virtual decimal ReceiveQty
        {
            get
            {
				return _receiveQty; 
            }
            set
            {
				_receiveQty = value; 
				OnPropertyChanged("ReceiveQty", value);
            }
        }

        public virtual decimal StockQty
        {
            get
            {
				return _stockQty; 
            }
            set
            {
				_stockQty = value; 
				OnPropertyChanged("StockQty", value);
            }
        }

        public virtual decimal NonStockQty
        {
            get
            {
				return _nonStockQty; 
            }
            set
            {
				_nonStockQty = value; 
				OnPropertyChanged("NonStockQty", value);
            }
        }

        public virtual decimal Price
        {
            get
            {
				return _price; 
            }
            set
            {
				_price = value; 
				OnPropertyChanged("Price", value);
            }
        }

        public virtual decimal DiscountRate
        {
            get
            {
				return _discountRate; 
            }
            set
            {
				_discountRate = value; 
				OnPropertyChanged("DiscountRate", value);
            }
        }

        public virtual decimal DiscountAmount
        {
            get
            {
				return _discountAmount; 
            }
            set
            {
				_discountAmount = value; 
				OnPropertyChanged("DiscountAmount", value);
            }
        }

        public virtual decimal DiscountPrice
        {
            get
            {
				return _discountPrice; 
            }
            set
            {
				_discountPrice = value; 
				OnPropertyChanged("DiscountPrice", value);
            }
        }

        public virtual decimal ExtAmount
        {
            get
            {
				return _extAmount; 
            }
            set
            {
				_extAmount = value; 
				OnPropertyChanged("ExtAmount", value);
            }
        }

        public virtual decimal TaxableAmount
        {
            get
            {
				return _taxableAmount; 
            }
            set
            {
				_taxableAmount = value; 
				OnPropertyChanged("TaxableAmount", value);
            }
        }

        public virtual decimal NonTaxableAmount
        {
            get
            {
				return _nonTaxableAmount; 
            }
            set
            {
				_nonTaxableAmount = value; 
				OnPropertyChanged("NonTaxableAmount", value);
            }
        }

        public virtual decimal TaxRate
        {
            get
            {
				return _taxRate; 
            }
            set
            {
				_taxRate = value; 
				OnPropertyChanged("TaxRate", value);
            }
        }

        public virtual decimal TaxAmount
        {
            get
            {
				return _taxAmount; 
            }
            set
            {
				_taxAmount = value; 
				OnPropertyChanged("TaxAmount", value);
            }
        }

        public virtual decimal ShippingAmount
        {
            get
            {
				return _shippingAmount; 
            }
            set
            {
				_shippingAmount = value; 
				OnPropertyChanged("ShippingAmount", value);
            }
        }

        public virtual decimal ShippingTaxAmount
        {
            get
            {
				return _shippingTaxAmount; 
            }
            set
            {
				_shippingTaxAmount = value; 
				OnPropertyChanged("ShippingTaxAmount", value);
            }
        }

        public virtual decimal MiscAmount
        {
            get
            {
				return _miscAmount; 
            }
            set
            {
				_miscAmount = value; 
				OnPropertyChanged("MiscAmount", value);
            }
        }

        public virtual decimal MiscTaxAmount
        {
            get
            {
				return _miscTaxAmount; 
            }
            set
            {
				_miscTaxAmount = value; 
				OnPropertyChanged("MiscTaxAmount", value);
            }
        }

        public virtual decimal ChargeAndAllowanceAmount
        {
            get
            {
				return _chargeAndAllowanceAmount; 
            }
            set
            {
				_chargeAndAllowanceAmount = value; 
				OnPropertyChanged("ChargeAndAllowanceAmount", value);
            }
        }

        public virtual bool Stockable
        {
            get
            {
				return (_stockable == 1); 
            }
            set
            {
				_stockable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Stockable", value);
            }
        }

        public virtual bool IsAr
        {
            get
            {
				return (_isAr == 1); 
            }
            set
            {
				_isAr = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("IsAr", value);
            }
        }

        public virtual bool Taxable
        {
            get
            {
				return (_taxable == 1); 
            }
            set
            {
				_taxable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Taxable", value);
            }
        }

        public virtual DateTime? UpdateDateUtc
        {
            get
            {
				if (!AllowNull && _updateDateUtc is null) 
					_updateDateUtc = new DateTime().MinValueSql(); 
				return _updateDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_updateDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("UpdateDateUtc", value);
				}
            }
        }

        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }

        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
				OnPropertyChanged("UpdateBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[XmlIgnore, JsonIgnore, IgnoreCompare]
		private InvoiceTransactionData Parent { get; set; }
		public InvoiceTransactionData GetParent() => Parent;
		public InvoiceReturnItems SetParent(InvoiceTransactionData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			ReturnItemUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override InvoiceReturnItems Clear()
        {
            base.Clear();
			_returnItemUuid = String.Empty; 
			_transUuid = String.Empty; 
			_seq = default(int); 
			_invoiceUuid = String.Empty; 
			_invoiceItemsUuid = String.Empty; 
			_returnItemType = default(int); 
			_returnItemStatus = default(int); 
			_returnDate = new DateTime().MinValueSql(); 
			_returnTime = new TimeSpan().MinValueSql(); 
			_receiveDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_stockDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_sKU = String.Empty; 
			_productUuid = String.Empty; 
			_inventoryUuid = String.Empty; 
			_warehouseUuid = String.Empty; 
			_lotNum = String.Empty; 
			_description = String.Empty; 
			_notes = String.Empty; 
			_currency = String.Empty; 
			_uOM = String.Empty; 
			_packType = String.Empty; 
			_packQty = default(decimal); 
			_returnPack = default(decimal); 
			_receivePack = default(decimal); 
			_stockPack = default(decimal); 
			_nonStockPack = default(decimal); 
			_returnQty = default(decimal); 
			_receiveQty = default(decimal); 
			_stockQty = default(decimal); 
			_nonStockQty = default(decimal); 
			_price = default(decimal); 
			_discountRate = default(decimal); 
			_discountAmount = default(decimal); 
			_discountPrice = default(decimal); 
			_extAmount = default(decimal); 
			_taxableAmount = default(decimal); 
			_nonTaxableAmount = default(decimal); 
			_taxRate = default(decimal); 
			_taxAmount = default(decimal); 
			_shippingAmount = default(decimal); 
			_shippingTaxAmount = default(decimal); 
			_miscAmount = default(decimal); 
			_miscTaxAmount = default(decimal); 
			_chargeAndAllowanceAmount = default(decimal); 
			_stockable = default(byte); 
			_isAr = default(byte); 
			_taxable = default(byte); 
			_updateDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public virtual InvoiceReturnItems ClearChildren()
        {
            return this;
        }

        public virtual InvoiceReturnItems NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(InvoiceReturnItems data)
        {
            if (data is null) return;
            return;
        }

		public static IList<InvoiceReturnItems> FindByTransUuid(IDataBaseFactory dbFactory, string transUuid)
		{
			return dbFactory.Find<InvoiceReturnItems>("WHERE TransUuid = @0 ORDER BY Seq ", transUuid).ToList();
		}
		public static long CountByTransUuid(IDataBaseFactory dbFactory, string transUuid)
		{
			return dbFactory.Count<InvoiceReturnItems>("WHERE TransUuid = @0 ", transUuid);
		}
		public static async Task<IList<InvoiceReturnItems>> FindByAsyncTransUuid(IDataBaseFactory dbFactory, string transUuid)
		{
			return (await dbFactory.FindAsync<InvoiceReturnItems>("WHERE TransUuid = @0 ORDER BY Seq ", transUuid)).ToList();
		}
		public static async Task<long> CountByAsyncTransUuid(IDataBaseFactory dbFactory, string transUuid)
		{
			return await dbFactory.CountAsync<InvoiceReturnItems>("WHERE TransUuid = @0 ", transUuid);
		}
		public static IList<InvoiceReturnItems> FindByInvoiceUuid(IDataBaseFactory dbFactory, string invoiceUuid)
		{
			return dbFactory.Find<InvoiceReturnItems>("WHERE InvoiceUuid = @0 ORDER BY Seq ", invoiceUuid).ToList();
		}
		public static long CountByInvoiceUuid(IDataBaseFactory dbFactory, string invoiceUuid)
		{
			return dbFactory.Count<InvoiceReturnItems>("WHERE InvoiceUuid = @0 ", invoiceUuid);
		}
		public static async Task<IList<InvoiceReturnItems>> FindByAsyncInvoiceUuid(IDataBaseFactory dbFactory, string invoiceUuid)
		{
			return (await dbFactory.FindAsync<InvoiceReturnItems>("WHERE InvoiceUuid = @0 ORDER BY Seq ", invoiceUuid)).ToList();
		}
		public static async Task<long> CountByAsyncInvoiceUuid(IDataBaseFactory dbFactory, string invoiceUuid)
		{
			return await dbFactory.CountAsync<InvoiceReturnItems>("WHERE InvoiceUuid = @0 ", invoiceUuid);
		}
		public static IList<InvoiceReturnItems> FindByInvoiceItemsUuid(IDataBaseFactory dbFactory, string invoiceItemsUuid)
		{
			return dbFactory.Find<InvoiceReturnItems>("WHERE InvoiceItemsUuid = @0 ", invoiceItemsUuid).ToList();
		}
		public static long CountByInvoiceItemsUuid(IDataBaseFactory dbFactory, string invoiceItemsUuid)
		{
			return dbFactory.Count<InvoiceReturnItems>("WHERE InvoiceItemsUuid = @0 ", invoiceItemsUuid);
		}
		public static async Task<IList<InvoiceReturnItems>> FindByAsyncInvoiceItemsUuid(IDataBaseFactory dbFactory, string invoiceItemsUuid)
		{
			return (await dbFactory.FindAsync<InvoiceReturnItems>("WHERE InvoiceItemsUuid = @0 ", invoiceItemsUuid)).ToList();
		}
		public static async Task<long> CountByAsyncInvoiceItemsUuid(IDataBaseFactory dbFactory, string invoiceItemsUuid)
		{
			return await dbFactory.CountAsync<InvoiceReturnItems>("WHERE InvoiceItemsUuid = @0 ", invoiceItemsUuid);
		}


        #endregion Methods - Generated 
    }
}



