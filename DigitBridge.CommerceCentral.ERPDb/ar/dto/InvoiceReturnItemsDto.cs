
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Xml.Serialization;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InvoiceReturnItems Dto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class InvoiceReturnItemsDto
    {
        public long? RowNum { get; set; }
        public string UniqueId { get; set; }
        public DateTime? EnterDateUtc { get; set; }
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

        [StringLength(50, ErrorMessage = "The ReturnItemUuid value cannot exceed 50 characters. ")]
        public string ReturnItemUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReturnItemUuid => ReturnItemUuid != null;

        [StringLength(50, ErrorMessage = "The TransUuid value cannot exceed 50 characters. ")]
        public string TransUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTransUuid => TransUuid != null;

        public int? Seq { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSeq => Seq != null;

        [StringLength(50, ErrorMessage = "The InvoiceUuid value cannot exceed 50 characters. ")]
        public string InvoiceUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasInvoiceUuid => InvoiceUuid != null;

        [StringLength(50, ErrorMessage = "The InvoiceItemsUuid value cannot exceed 50 characters. ")]
        public string InvoiceItemsUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasInvoiceItemsUuid => InvoiceItemsUuid != null;

        public int? ReturnItemType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReturnItemType => ReturnItemType != null;

        public int? ReturnItemStatus { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReturnItemStatus => ReturnItemStatus != null;

        [DataType(DataType.DateTime)]
        public DateTime? ReturnDate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReturnDate => ReturnDate != null;

        [DataType(DataType.DateTime)]
        public DateTime? ReturnTime { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReturnTime => ReturnTime != null;

        [DataType(DataType.DateTime)]
        public DateTime? ReceiveDate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReceiveDate => ReceiveDate != null;

        [DataType(DataType.DateTime)]
        public DateTime? StockDate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasStockDate => StockDate != null;

        [StringLength(100, ErrorMessage = "The SKU value cannot exceed 100 characters. ")]
        public string SKU { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSKU => SKU != null;

        [StringLength(50, ErrorMessage = "The ProductUuid value cannot exceed 50 characters. ")]
        public string ProductUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasProductUuid => ProductUuid != null;

        [StringLength(50, ErrorMessage = "The InventoryUuid value cannot exceed 50 characters. ")]
        public string InventoryUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasInventoryUuid => InventoryUuid != null;

        [StringLength(50, ErrorMessage = "The WarehouseUuid value cannot exceed 50 characters. ")]
        public string WarehouseUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseUuid => WarehouseUuid != null;

        [StringLength(100, ErrorMessage = "The LotNum value cannot exceed 100 characters. ")]
        public string LotNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLotNum => LotNum != null;

        [StringLength(200, ErrorMessage = "The Description value cannot exceed 200 characters. ")]
        public string Description { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDescription => Description != null;

        [StringLength(500, ErrorMessage = "The Notes value cannot exceed 500 characters. ")]
        public string Notes { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasNotes => Notes != null;

        [StringLength(10, ErrorMessage = "The Currency value cannot exceed 10 characters. ")]
        public string Currency { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCurrency => Currency != null;

        [StringLength(50, ErrorMessage = "The UOM value cannot exceed 50 characters. ")]
        public string UOM { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUOM => UOM != null;

        [StringLength(50, ErrorMessage = "The PackType value cannot exceed 50 characters. ")]
        public string PackType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPackType => PackType != null;

        public decimal? PackQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPackQty => PackQty != null;

        public decimal? ReturnPack { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReturnPack => ReturnPack != null;

        public decimal? ReceivePack { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReceivePack => ReceivePack != null;

        public decimal? StockPack { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasStockPack => StockPack != null;

        public decimal? NonStockPack { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasNonStockPack => NonStockPack != null;

        public decimal? ReturnQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReturnQty => ReturnQty != null;

        public decimal? ReceiveQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasReceiveQty => ReceiveQty != null;

        public decimal? StockQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasStockQty => StockQty != null;

        public decimal? NonStockQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasNonStockQty => NonStockQty != null;

        public decimal? Price { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPrice => Price != null;

        public decimal? DiscountRate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDiscountRate => DiscountRate != null;

        public decimal? DiscountAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDiscountAmount => DiscountAmount != null;

        public decimal? DiscountPrice { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDiscountPrice => DiscountPrice != null;

        public decimal? ExtAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasExtAmount => ExtAmount != null;

        public decimal? TaxableAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTaxableAmount => TaxableAmount != null;

        public decimal? NonTaxableAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasNonTaxableAmount => NonTaxableAmount != null;

        public decimal? TaxRate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTaxRate => TaxRate != null;

        public decimal? TaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTaxAmount => TaxAmount != null;

        public decimal? ShippingAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingAmount => ShippingAmount != null;

        public decimal? ShippingTaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingTaxAmount => ShippingTaxAmount != null;

        public decimal? MiscAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMiscAmount => MiscAmount != null;

        public decimal? MiscTaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMiscTaxAmount => MiscTaxAmount != null;

        public decimal? ChargeAndAllowanceAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasChargeAndAllowanceAmount => ChargeAndAllowanceAmount != null;

        public bool? Stockable { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasStockable => Stockable != null;

        public bool? IsAr { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasIsAr => IsAr != null;

        public bool? Taxable { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTaxable => Taxable != null;

        [DataType(DataType.DateTime)]
        public DateTime? UpdateDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateDateUtc => UpdateDateUtc != null;

        [StringLength(100, ErrorMessage = "The EnterBy value cannot exceed 100 characters. ")]
        public string EnterBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEnterBy => EnterBy != null;

        [StringLength(100, ErrorMessage = "The UpdateBy value cannot exceed 100 characters. ")]
        public string UpdateBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateBy => UpdateBy != null;



        #endregion Properties - Generated 

        #region Children - Generated 

        #endregion Children - Generated 

    }
}



