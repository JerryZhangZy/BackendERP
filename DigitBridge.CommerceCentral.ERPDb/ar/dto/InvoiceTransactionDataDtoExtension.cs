//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using CsvHelper;
using System.IO;

using Bogus;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InvoiceTransactionDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class InvoiceTransactionDataDtoExtension
    {
        /// <summary>
        /// Merge InvoiceTransactionDataDto header objects to one dynamic object
        /// </summary>
        /// <param name="dto">InvoiceTransactionDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>Single dynamic object include all properties of Dto header objects</returns>
        public static IEnumerable<dynamic> MergeHeaderRecord(this InvoiceTransactionDataDto dto, bool withHeaderText = false)
        {
            var result = new List<dynamic>();
            //TODO change to merge Dto children object
            if (withHeaderText)
                result.Add(dto.InvoiceTransaction.MergeName(dto.InvoiceTransaction));
            result.Add(dto.InvoiceTransaction.Merge(dto.InvoiceTransaction));
            return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeDetailRecord(this InvoiceTransactionDataDto dto, bool withHeaderText = false)
        {
			//TODO change to merge Dto children object
			var result = new List<dynamic>();
			if (!dto.HasInvoiceReturnItems)
                return result;

			var invoiceReturnItems = new InvoiceReturnItems();

            if (withHeaderText)
                result.Add(invoiceReturnItems.MergeName(invoiceReturnItems));

            foreach (var item in dto.InvoiceReturnItems)
            {
                result.Add(item.Merge(item));
            }
            return result;
        }


        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <param name="count">Generate multiple fake data</param>
        /// <returns>list for Fake data</returns>
        public static IList<InvoiceTransactionDataDto> GetFakerData(this InvoiceTransactionDataDto dto, int count)
        {
            var obj = new InvoiceTransactionDataDto();
            var datas = new List<InvoiceTransactionDataDto>();
            for (int i = 0; i < count; i++)
                datas.Add(obj.GetFakerData());
            return datas;
        }

        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <returns>single Fake data</returns>
        public static InvoiceTransactionDataDto GetFakerData(this InvoiceTransactionDataDto dto)
        {
            var data = new InvoiceTransactionDataDto();
			data.InvoiceTransaction = new InvoiceTransactionDto().GetFaker().Generate();
			data.InvoiceReturnItems = new InvoiceReturnItemsDto().GetFaker().Generate(3);
            return data;
        }


		/// <summary>
		/// Get faker object for InvoiceTransactionDto
		/// </summary>
		/// <param name="dto">InvoiceTransactionDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<InvoiceTransactionDto> GetFaker(this InvoiceTransactionDto dto)
		{
			#region faker data rules
			return new Faker<InvoiceTransactionDto>()
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.TransUuid, f => null)
				.RuleFor(u => u.TransNum, f => f.Random.Int(1, 100))
				.RuleFor(u => u.InvoiceUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.InvoiceNumber, f => f.Random.Int(1, 100).ToString())
				.RuleFor(u => u.TransType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.TransStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.TransDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.TransTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.Description, f => f.Commerce.ProductName())
				.RuleFor(u => u.Notes, f => f.Lorem.Sentence().TruncateTo(500))
				.RuleFor(u => u.PaidBy, f => f.Random.Int(1, 100))
				.RuleFor(u => u.BankAccountUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.BankAccountCode, f => f.Lorem.Word())
				.RuleFor(u => u.CheckNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.AuthCode, f => f.Lorem.Word())
				.RuleFor(u => u.Currency, f => f.Lorem.Sentence().TruncateTo(10))
				.RuleFor(u => u.ExchangeRate, f => f.Random.Decimal(0.01m, 0.99m, 2))
				.RuleFor(u => u.SubTotalAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.SalesAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TotalAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TaxableAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.NonTaxableAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TaxRate, f => f.Random.Decimal(0.01m, 0.99m, 2))
				.RuleFor(u => u.TaxAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.DiscountRate, f => f.Random.Decimal(0.01m, 0.99m, 2))
				.RuleFor(u => u.DiscountAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ShippingAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ShippingTaxAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.MiscAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.MiscTaxAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ChargeAndAllowanceAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.CreditAccount, f => default(long))
				.RuleFor(u => u.DebitAccount, f => default(long))
				.RuleFor(u => u.TransSourceCode, f => f.Lorem.Word())
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				.RuleFor(u => u.DigitBridgeGuid, f => new Guid())
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for InvoiceReturnItemsDto
		/// </summary>
		/// <param name="dto">InvoiceReturnItemsDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<InvoiceReturnItemsDto> GetFaker(this InvoiceReturnItemsDto dto)
		{
			#region faker data rules
			return new Faker<InvoiceReturnItemsDto>()
				.RuleFor(u => u.ReturnItemUuid, f => String.Empty)
				.RuleFor(u => u.TransUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.Seq, f => f.Random.Int(1, 100))
				.RuleFor(u => u.InvoiceUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.InvoiceItemsUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ReturnItemType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ReturnItemStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ReturnDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.ReturnTime, f => f.Date.Timespan().ToDateTime())
				.RuleFor(u => u.ReceiveDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.StockDate, f => f.Date.Past(0).Date)
				.RuleFor(u => u.SKU, f => f.Commerce.Product())
				.RuleFor(u => u.ProductUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.InventoryUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.InvoiceWarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.InvoiceWarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.WarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.WarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.LotNum, f => f.Lorem.Sentence().TruncateTo(100))
				.RuleFor(u => u.Reason, f => f.Lorem.Sentence().TruncateTo(200))
				.RuleFor(u => u.Description, f => f.Commerce.ProductName())
				.RuleFor(u => u.Notes, f => f.Lorem.Sentence().TruncateTo(500))
				.RuleFor(u => u.Currency, f => f.Lorem.Sentence().TruncateTo(10))
				.RuleFor(u => u.UOM, f => f.PickRandom(FakerExtension.UOM))
				.RuleFor(u => u.PackType, f => f.PickRandom(FakerExtension.PackType))
				.RuleFor(u => u.PackQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ReturnPack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ReceivePack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.StockPack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.NonStockPack, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ReturnQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ReceiveQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.StockQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.NonStockQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.PutBackWarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.PutBackWarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.DamageWarehouseUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.DamageWarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.InvoiceDiscountPrice, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.Price, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ExtAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TaxableAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.NonTaxableAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.TaxRate, f => f.Random.Decimal(0.01m, 0.99m, 2))
				.RuleFor(u => u.TaxAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ShippingAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ShippingTaxAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.MiscAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.MiscTaxAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.ChargeAndAllowanceAmount, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.Stockable, f => f.Random.Bool())
				.RuleFor(u => u.IsAr, f => f.Random.Bool())
				.RuleFor(u => u.Taxable, f => f.Random.Bool())
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}

    }
}


