    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InvoiceDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class InvoiceDataDtoMapperDefault : IDtoMapper<InvoiceData, InvoiceDataDto> 
    {
        #region read from dto to data

        public virtual InvoiceData ReadDto(InvoiceData data, InvoiceDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new InvoiceData();
                data.New();
            }

			if (dto.InvoiceHeader != null)
			{
				if (data.InvoiceHeader is null)
					data.InvoiceHeader = data.NewInvoiceHeader();
				ReadInvoiceHeader(data.InvoiceHeader, dto.InvoiceHeader);
			}
			if (dto.InvoiceHeaderInfo != null)
			{
				if (data.InvoiceHeaderInfo is null)
					data.InvoiceHeaderInfo = data.NewInvoiceHeaderInfo();
				ReadInvoiceHeaderInfo(data.InvoiceHeaderInfo, dto.InvoiceHeaderInfo);
			}
			if (dto.InvoiceHeaderAttributes != null)
			{
				if (data.InvoiceHeaderAttributes is null)
					data.InvoiceHeaderAttributes = data.NewInvoiceHeaderAttributes();
				ReadInvoiceHeaderAttributes(data.InvoiceHeaderAttributes, dto.InvoiceHeaderAttributes);
			}
			if (dto.InvoiceItems != null)
			{
				if (data.InvoiceItems is null)
					data.InvoiceItems = new List<InvoiceItems>();
				ReadInvoiceItems(data.InvoiceItems, dto.InvoiceItems);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadInvoiceHeader(InvoiceHeader data, InvoiceHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasInvoiceUuid) data.InvoiceUuid = dto.InvoiceUuid;
			if (dto.HasInvoiceNumber) data.InvoiceNumber = dto.InvoiceNumber;
			if (dto.HasInvoiceType) data.InvoiceType = dto.InvoiceType;
			if (dto.HasInvoiceStatus) data.InvoiceStatus = dto.InvoiceStatus;
			if (dto.HasInvoiceDate) data.InvoiceDate = dto.InvoiceDate.ToDateTime();
			if (dto.HasInvoiceTime) data.InvoiceTime = dto.InvoiceTime.ToTimeSpan();
			if (dto.HasDueDate) data.DueDate = dto.DueDate;
			if (dto.HasBillDate) data.BillDate = dto.BillDate;
			if (dto.HasCustomerUuid) data.CustomerUuid = dto.CustomerUuid;
			if (dto.HasCustomerNum) data.CustomerNum = dto.CustomerNum;
			if (dto.HasCustomerName) data.CustomerName = dto.CustomerName;
			if (dto.HasCurrency) data.Currency = dto.Currency;
			if (dto.HasSubTotalAmount) data.SubTotalAmount = dto.SubTotalAmount.ToDecimal();
			if (dto.HasTotalAmount) data.TotalAmount = dto.TotalAmount.ToDecimal();
			if (dto.HasTaxRate) data.TaxRate = dto.TaxRate;
			if (dto.HasTaxAmount) data.TaxAmount = dto.TaxAmount;
			if (dto.HasDiscountRate) data.DiscountRate = dto.DiscountRate;
			if (dto.HasDiscountAmount) data.DiscountAmount = dto.DiscountAmount;
			if (dto.HasShippingAmount) data.ShippingAmount = dto.ShippingAmount;
			if (dto.HasShippingTaxAmount) data.ShippingTaxAmount = dto.ShippingTaxAmount;
			if (dto.HasMiscAmount) data.MiscAmount = dto.MiscAmount;
			if (dto.HasMiscTaxAmount) data.MiscTaxAmount = dto.MiscTaxAmount;
			if (dto.HasChargeAndAllowanceAmount) data.ChargeAndAllowanceAmount = dto.ChargeAndAllowanceAmount;
			if (dto.HasPaidAmount) data.PaidAmount = dto.PaidAmount;
			if (dto.HasCreditAmount) data.CreditAmount = dto.CreditAmount;
			if (dto.HasBalance) data.Balance = dto.Balance;
			if (dto.HasUnitCost) data.UnitCost = dto.UnitCost.ToDecimal();
			if (dto.HasAvgCost) data.AvgCost = dto.AvgCost.ToDecimal();
			if (dto.HasLotCost) data.LotCost = dto.LotCost.ToDecimal();
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			return;
		}
		protected virtual void ReadInvoiceHeaderInfo(InvoiceHeaderInfo data, InvoiceHeaderInfoDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasInvoiceUuid) data.InvoiceUuid = dto.InvoiceUuid;
			if (dto.HasCentralFulfillmentNum) data.CentralFulfillmentNum = dto.CentralFulfillmentNum;
			if (dto.HasShippingCarrier) data.ShippingCarrier = dto.ShippingCarrier;
			if (dto.HasShippingClass) data.ShippingClass = dto.ShippingClass;
			if (dto.HasDistributionCenterNum) data.DistributionCenterNum = dto.DistributionCenterNum;
			if (dto.HasCentralOrderNum) data.CentralOrderNum = dto.CentralOrderNum;
			if (dto.HasChannelNum) data.ChannelNum = dto.ChannelNum.ToInt();
			if (dto.HasChannelAccountNum) data.ChannelAccountNum = dto.ChannelAccountNum.ToInt();
			if (dto.HasChannelOrderID) data.ChannelOrderID = dto.ChannelOrderID;
			if (dto.HasSecondaryChannelOrderID) data.SecondaryChannelOrderID = dto.SecondaryChannelOrderID;
			if (dto.HasShippingAccount) data.ShippingAccount = dto.ShippingAccount;
			if (dto.HasWarehouseUuid) data.WarehouseUuid = dto.WarehouseUuid;
			if (dto.HasRefNum) data.RefNum = dto.RefNum;
			if (dto.HasCustomerPoNum) data.CustomerPoNum = dto.CustomerPoNum;
			if (dto.HasEndBuyerUserId) data.EndBuyerUserId = dto.EndBuyerUserId;
			if (dto.HasEndBuyerName) data.EndBuyerName = dto.EndBuyerName;
			if (dto.HasEndBuyerEmail) data.EndBuyerEmail = dto.EndBuyerEmail;
			if (dto.HasShipToName) data.ShipToName = dto.ShipToName;
			if (dto.HasShipToFirstName) data.ShipToFirstName = dto.ShipToFirstName;
			if (dto.HasShipToLastName) data.ShipToLastName = dto.ShipToLastName;
			if (dto.HasShipToSuffix) data.ShipToSuffix = dto.ShipToSuffix;
			if (dto.HasShipToCompany) data.ShipToCompany = dto.ShipToCompany;
			if (dto.HasShipToCompanyJobTitle) data.ShipToCompanyJobTitle = dto.ShipToCompanyJobTitle;
			if (dto.HasShipToAttention) data.ShipToAttention = dto.ShipToAttention;
			if (dto.HasShipToAddressLine1) data.ShipToAddressLine1 = dto.ShipToAddressLine1;
			if (dto.HasShipToAddressLine2) data.ShipToAddressLine2 = dto.ShipToAddressLine2;
			if (dto.HasShipToAddressLine3) data.ShipToAddressLine3 = dto.ShipToAddressLine3;
			if (dto.HasShipToCity) data.ShipToCity = dto.ShipToCity;
			if (dto.HasShipToState) data.ShipToState = dto.ShipToState;
			if (dto.HasShipToStateFullName) data.ShipToStateFullName = dto.ShipToStateFullName;
			if (dto.HasShipToPostalCode) data.ShipToPostalCode = dto.ShipToPostalCode;
			if (dto.HasShipToPostalCodeExt) data.ShipToPostalCodeExt = dto.ShipToPostalCodeExt;
			if (dto.HasShipToCounty) data.ShipToCounty = dto.ShipToCounty;
			if (dto.HasShipToCountry) data.ShipToCountry = dto.ShipToCountry;
			if (dto.HasShipToEmail) data.ShipToEmail = dto.ShipToEmail;
			if (dto.HasShipToDaytimePhone) data.ShipToDaytimePhone = dto.ShipToDaytimePhone;
			if (dto.HasShipToNightPhone) data.ShipToNightPhone = dto.ShipToNightPhone;
			if (dto.HasBillToName) data.BillToName = dto.BillToName;
			if (dto.HasBillToFirstName) data.BillToFirstName = dto.BillToFirstName;
			if (dto.HasBillToLastName) data.BillToLastName = dto.BillToLastName;
			if (dto.HasBillToSuffix) data.BillToSuffix = dto.BillToSuffix;
			if (dto.HasBillToCompany) data.BillToCompany = dto.BillToCompany;
			if (dto.HasBillToCompanyJobTitle) data.BillToCompanyJobTitle = dto.BillToCompanyJobTitle;
			if (dto.HasBillToAttention) data.BillToAttention = dto.BillToAttention;
			if (dto.HasBillToAddressLine1) data.BillToAddressLine1 = dto.BillToAddressLine1;
			if (dto.HasBillToAddressLine2) data.BillToAddressLine2 = dto.BillToAddressLine2;
			if (dto.HasBillToAddressLine3) data.BillToAddressLine3 = dto.BillToAddressLine3;
			if (dto.HasBillToCity) data.BillToCity = dto.BillToCity;
			if (dto.HasBillToState) data.BillToState = dto.BillToState;
			if (dto.HasBillToStateFullName) data.BillToStateFullName = dto.BillToStateFullName;
			if (dto.HasBillToPostalCode) data.BillToPostalCode = dto.BillToPostalCode;
			if (dto.HasBillToPostalCodeExt) data.BillToPostalCodeExt = dto.BillToPostalCodeExt;
			if (dto.HasBillToCounty) data.BillToCounty = dto.BillToCounty;
			if (dto.HasBillToCountry) data.BillToCountry = dto.BillToCountry;
			if (dto.HasBillToEmail) data.BillToEmail = dto.BillToEmail;
			if (dto.HasBillToDaytimePhone) data.BillToDaytimePhone = dto.BillToDaytimePhone;
			if (dto.HasBillToNightPhone) data.BillToNightPhone = dto.BillToNightPhone;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			return;
		}
		protected virtual void ReadInvoiceHeaderAttributes(InvoiceHeaderAttributes data, InvoiceHeaderAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasInvoiceUuid) data.InvoiceUuid = dto.InvoiceUuid;
			if (dto.HasJsonFields) data.JsonFields = dto.JsonFields;

			#endregion read properties

			return;
		}
		protected virtual void ReadInvoiceItems(IEnumerable<InvoiceItems> data, IEnumerable<InvoiceItemsDto> dto)
		{
			if (data is null || dto is null)
				return;
			return;
		}

        #endregion read from dto to data

        #region write to dto from data

        public virtual InvoiceDataDto WriteDto(InvoiceData data, InvoiceDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new InvoiceDataDto();

            data.CheckIntegrity();

			if (data.InvoiceHeader != null)
			{
				dto.InvoiceHeader = new InvoiceHeaderDto();
				WriteInvoiceHeader(data.InvoiceHeader, dto.InvoiceHeader);
			}
			if (data.InvoiceHeaderInfo != null)
			{
				dto.InvoiceHeaderInfo = new InvoiceHeaderInfoDto();
				WriteInvoiceHeaderInfo(data.InvoiceHeaderInfo, dto.InvoiceHeaderInfo);
			}
			if (data.InvoiceHeaderAttributes != null)
			{
				dto.InvoiceHeaderAttributes = new InvoiceHeaderAttributesDto();
				WriteInvoiceHeaderAttributes(data.InvoiceHeaderAttributes, dto.InvoiceHeaderAttributes);
			}
			if (data.InvoiceItems != null)
			{
				dto.InvoiceItems = new List<InvoiceItemsDto>();
				WriteInvoiceItems(data.InvoiceItems, dto.InvoiceItems);
			}
            return dto;
        }

		protected virtual void WriteInvoiceHeader(InvoiceHeader data, InvoiceHeaderDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.InvoiceUuid = data.InvoiceUuid;
			dto.InvoiceNumber = data.InvoiceNumber;
			dto.InvoiceType = data.InvoiceType;
			dto.InvoiceStatus = data.InvoiceStatus;
			dto.InvoiceDate = data.InvoiceDate;
			dto.InvoiceTime = data.InvoiceTime.ToDateTime();
			dto.DueDate = data.DueDate;
			dto.BillDate = data.BillDate;
			dto.CustomerUuid = data.CustomerUuid;
			dto.CustomerNum = data.CustomerNum;
			dto.CustomerName = data.CustomerName;
			dto.Currency = data.Currency;
			dto.SubTotalAmount = data.SubTotalAmount;
			dto.TotalAmount = data.TotalAmount;
			dto.TaxRate = data.TaxRate;
			dto.TaxAmount = data.TaxAmount;
			dto.DiscountRate = data.DiscountRate;
			dto.DiscountAmount = data.DiscountAmount;
			dto.ShippingAmount = data.ShippingAmount;
			dto.ShippingTaxAmount = data.ShippingTaxAmount;
			dto.MiscAmount = data.MiscAmount;
			dto.MiscTaxAmount = data.MiscTaxAmount;
			dto.ChargeAndAllowanceAmount = data.ChargeAndAllowanceAmount;
			dto.PaidAmount = data.PaidAmount;
			dto.CreditAmount = data.CreditAmount;
			dto.Balance = data.Balance;
			dto.UnitCost = data.UnitCost;
			dto.AvgCost = data.AvgCost;
			dto.LotCost = data.LotCost;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}
		protected virtual void WriteInvoiceHeaderInfo(InvoiceHeaderInfo data, InvoiceHeaderInfoDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.InvoiceUuid = data.InvoiceUuid;
			dto.CentralFulfillmentNum = data.CentralFulfillmentNum;
			dto.ShippingCarrier = data.ShippingCarrier;
			dto.ShippingClass = data.ShippingClass;
			dto.DistributionCenterNum = data.DistributionCenterNum;
			dto.CentralOrderNum = data.CentralOrderNum;
			dto.ChannelNum = data.ChannelNum;
			dto.ChannelAccountNum = data.ChannelAccountNum;
			dto.ChannelOrderID = data.ChannelOrderID;
			dto.SecondaryChannelOrderID = data.SecondaryChannelOrderID;
			dto.ShippingAccount = data.ShippingAccount;
			dto.WarehouseUuid = data.WarehouseUuid;
			dto.RefNum = data.RefNum;
			dto.CustomerPoNum = data.CustomerPoNum;
			dto.EndBuyerUserId = data.EndBuyerUserId;
			dto.EndBuyerName = data.EndBuyerName;
			dto.EndBuyerEmail = data.EndBuyerEmail;
			dto.ShipToName = data.ShipToName;
			dto.ShipToFirstName = data.ShipToFirstName;
			dto.ShipToLastName = data.ShipToLastName;
			dto.ShipToSuffix = data.ShipToSuffix;
			dto.ShipToCompany = data.ShipToCompany;
			dto.ShipToCompanyJobTitle = data.ShipToCompanyJobTitle;
			dto.ShipToAttention = data.ShipToAttention;
			dto.ShipToAddressLine1 = data.ShipToAddressLine1;
			dto.ShipToAddressLine2 = data.ShipToAddressLine2;
			dto.ShipToAddressLine3 = data.ShipToAddressLine3;
			dto.ShipToCity = data.ShipToCity;
			dto.ShipToState = data.ShipToState;
			dto.ShipToStateFullName = data.ShipToStateFullName;
			dto.ShipToPostalCode = data.ShipToPostalCode;
			dto.ShipToPostalCodeExt = data.ShipToPostalCodeExt;
			dto.ShipToCounty = data.ShipToCounty;
			dto.ShipToCountry = data.ShipToCountry;
			dto.ShipToEmail = data.ShipToEmail;
			dto.ShipToDaytimePhone = data.ShipToDaytimePhone;
			dto.ShipToNightPhone = data.ShipToNightPhone;
			dto.BillToName = data.BillToName;
			dto.BillToFirstName = data.BillToFirstName;
			dto.BillToLastName = data.BillToLastName;
			dto.BillToSuffix = data.BillToSuffix;
			dto.BillToCompany = data.BillToCompany;
			dto.BillToCompanyJobTitle = data.BillToCompanyJobTitle;
			dto.BillToAttention = data.BillToAttention;
			dto.BillToAddressLine1 = data.BillToAddressLine1;
			dto.BillToAddressLine2 = data.BillToAddressLine2;
			dto.BillToAddressLine3 = data.BillToAddressLine3;
			dto.BillToCity = data.BillToCity;
			dto.BillToState = data.BillToState;
			dto.BillToStateFullName = data.BillToStateFullName;
			dto.BillToPostalCode = data.BillToPostalCode;
			dto.BillToPostalCodeExt = data.BillToPostalCodeExt;
			dto.BillToCounty = data.BillToCounty;
			dto.BillToCountry = data.BillToCountry;
			dto.BillToEmail = data.BillToEmail;
			dto.BillToDaytimePhone = data.BillToDaytimePhone;
			dto.BillToNightPhone = data.BillToNightPhone;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}
		protected virtual void WriteInvoiceHeaderAttributes(InvoiceHeaderAttributes data, InvoiceHeaderAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.InvoiceUuid = data.InvoiceUuid;
			dto.JsonFields = data.JsonFields;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}
		protected virtual void WriteInvoiceItems(IEnumerable<InvoiceItems> data, IEnumerable<InvoiceItemsDto> dto)
		{
			if (data is null || dto is null)
				return;

			var dataList = data.ToList();
			var dtoList = dto.ToList();
			dtoList.Clear();

			#region write all list items and properties with null

			foreach (var itemData in dataList)
			{
				if (itemData is null) continue;
				var obj = new InvoiceItemsDto()
				{
					RowNum = itemData.RowNum,
					InvoiceItemsUuid = itemData.InvoiceItemsUuid,
					InvoiceUuid = itemData.InvoiceUuid,
					Seq = itemData.Seq,
					InvoiceItemType = itemData.InvoiceItemType,
					InvoiceItemStatus = itemData.InvoiceItemStatus,
					ItemDate = itemData.ItemDate,
					ItemTime = itemData.ItemTime.ToDateTime(),
					ShipDate = itemData.ShipDate,
					EtaArrivalDate = itemData.EtaArrivalDate,
					SKU = itemData.SKU,
					ProductUuid = itemData.ProductUuid,
					InventoryUuid = itemData.InventoryUuid,
					WarehouseUuid = itemData.WarehouseUuid,
					LotNum = itemData.LotNum,
					Description = itemData.Description,
					Notes = itemData.Notes,
					Currency = itemData.Currency,
					UOM = itemData.UOM,
					PackType = itemData.PackType,
					PackQty = itemData.PackQty,
					OrderPack = itemData.OrderPack,
					ShipPack = itemData.ShipPack,
					CancelledPack = itemData.CancelledPack,
					OrderQty = itemData.OrderQty,
					ShipQty = itemData.ShipQty,
					CancelledQty = itemData.CancelledQty,
					PriceRule = itemData.PriceRule,
					Price = itemData.Price,
					DiscountRate = itemData.DiscountRate,
					DiscountAmount = itemData.DiscountAmount,
					DiscountPrice = itemData.DiscountPrice,
					ExtAmount = itemData.ExtAmount,
					TaxRate = itemData.TaxRate,
					TaxAmount = itemData.TaxAmount,
					ShippingAmount = itemData.ShippingAmount,
					ShippingTaxAmount = itemData.ShippingTaxAmount,
					MiscAmount = itemData.MiscAmount,
					MiscTaxAmount = itemData.MiscTaxAmount,
					ChargeAndAllowanceAmount = itemData.ChargeAndAllowanceAmount,
					ItemTotalAmount = itemData.ItemTotalAmount,
					Stockable = itemData.Stockable,
					IsAr = itemData.IsAr,
					Taxable = itemData.Taxable,
					Costable = itemData.Costable,
					UnitCost = itemData.UnitCost,
					AvgCost = itemData.AvgCost,
					LotCost = itemData.LotCost,
					LotInDate = itemData.LotInDate,
					LotExpDate = itemData.LotExpDate,
					UpdateDateUtc = itemData.UpdateDateUtc,
					EnterBy = itemData.EnterBy,
					UpdateBy = itemData.UpdateBy,
					EnterDateUtc = itemData.EnterDateUtc,
					DigitBridgeGuid = itemData.DigitBridgeGuid,
				};
				dtoList.Add(obj);
				#region write all grand children object

				if (itemData.InvoiceItemsAttributes != null)
				{
					obj.InvoiceItemsAttributes = new InvoiceItemsAttributesDto();
					WriteInvoiceItemsAttributes(itemData.InvoiceItemsAttributes, obj.InvoiceItemsAttributes);
				}

				#endregion write all grand children object

			}

			#endregion write all list items and properties with null
			return;
		}
		protected virtual void WriteInvoiceItemsAttributes(InvoiceItemsAttributes data, InvoiceItemsAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.InvoiceItemsUuid = data.InvoiceItemsUuid;
			dto.InvoiceUuid = data.InvoiceUuid;
			dto.JsonFields = data.JsonFields;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}

        #endregion write to dto from data

    }
}



