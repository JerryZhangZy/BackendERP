
              

              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InvoiceItemsAttributes.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("InvoiceItemsAttributes")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("InvoiceItemsId")]
    [DtoName("InvoiceItemsAttributesDto")]
    public partial class InvoiceItemsAttributes : TableRepository<InvoiceItemsAttributes, long>
    {

        public InvoiceItemsAttributes() : base() {}
        public InvoiceItemsAttributes(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("InvoiceItemsId",SqlDbType.VarChar,NotNull=true)]
        private string _invoiceItemsId;

        [Column("InvoiceId",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _invoiceId;

        [Column("Fields",SqlDbType.VarChar)]
        private string _fields;

        #endregion Fields - Generated 

        #region Properties - Generated 
		public override string UniqueId => InvoiceItemsId; 
		public void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(InvoiceItemsId)) 
				InvoiceItemsId = Guid.NewGuid().ToString(); 
		}
        public virtual string InvoiceItemsId
        {
            get
            {
				return _invoiceItemsId?.TrimEnd(); 
            }
            set
            {
				_invoiceItemsId = value.TruncateTo(50); 
            }
        }

        public virtual string InvoiceId
        {
            get
            {
				return _invoiceId?.TrimEnd(); 
            }
            set
            {
				_invoiceId = value.TruncateTo(50); 
            }
        }

        public virtual string Fields
        {
            get
            {
				if (!AllowNull && _fields is null) 
					_fields = String.Empty; 
				return _fields?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
					_fields = value.TrimEnd(); 
            }
        }

        #endregion Properties - Generated 

        #region Methods - Parent

		[XmlIgnore, JsonIgnore, IgnoreCompare]
		private InvoiceData Parent { get; set; }
		public InvoiceData GetParent() => Parent;
		public InvoiceItemsAttributes SetParent(InvoiceData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 

        public override InvoiceItemsAttributes Clear()
        {
			_invoiceItemsId = String.Empty; 
			_invoiceId = String.Empty; 
			_fields = AllowNull ? (string)null : String.Empty; 
            ClearChildren();
            return this;
        }

        public virtual InvoiceItemsAttributes ClearChildren()
        {
            return this;
        }

        public virtual InvoiceItemsAttributes NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(InvoiceItemsAttributes data)
        {
            return;
        }

		public IEnumerable<InvoiceItemsAttributes> FindByInvoiceId(string invoiceId)
		{
			return dbFactory.Find<InvoiceItemsAttributes>("WHERE InvoiceId = @0 ", invoiceId);
		}
		public long CountByInvoiceId(string invoiceId)
		{
			return dbFactory.Count<InvoiceItemsAttributes>("WHERE InvoiceId = @0 ", invoiceId);
		}
		public async Task<IEnumerable<InvoiceItemsAttributes>> FindByAsyncInvoiceId(string invoiceId)
		{
			return await dbFactory.FindAsync<InvoiceItemsAttributes>("WHERE InvoiceId = @0 ", invoiceId);
		}
		public async Task<long> CountByAsyncInvoiceId(string invoiceId)
		{
			return await dbFactory.CountAsync<InvoiceItemsAttributes>("WHERE InvoiceId = @0 ", invoiceId);
		}
        #endregion Methods - Generated 
    }
}



