              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a MiscInvoiceData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class MiscInvoiceData : StructureRepository<MiscInvoiceData>
    {
        public MiscInvoiceData() : base() {}
        public MiscInvoiceData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => MiscInvoiceHeader.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => MiscInvoiceHeader.UniqueId;
        
		 [JsonIgnore, XmlIgnore] 
		public static string MiscInvoiceHeaderTable ="MiscInvoiceHeader ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string MiscInvoiceTransactionTable ="MiscInvoiceTransaction ";
		
        #region CRUD Methods

        public override bool Equals(MiscInvoiceData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(MiscInvoiceData other)
        {
			if (MiscInvoiceHeader == null && other.MiscInvoiceHeader != null || MiscInvoiceHeader != null && other.MiscInvoiceHeader == null) 
				return false; 
			if (MiscInvoiceHeader != null && other.MiscInvoiceHeader != null && !MiscInvoiceHeader.Equals(other.MiscInvoiceHeader)) 
				return false; 
			if (MiscInvoiceTransaction == null && other.MiscInvoiceTransaction != null || MiscInvoiceTransaction != null && other.MiscInvoiceTransaction == null) 
				return false; 
			if (MiscInvoiceTransaction != null && other.MiscInvoiceTransaction != null && !MiscInvoiceTransaction.EqualsList(other.MiscInvoiceTransaction)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override MiscInvoiceData CheckIntegrity()
        {
			if (MiscInvoiceHeader is null) return this; 
			MiscInvoiceHeader.CheckIntegrity(); 
			CheckIntegrityMiscInvoiceTransaction(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			MiscInvoiceHeader?.Clear(); 
			MiscInvoiceTransaction = new List<MiscInvoiceTransaction>(); 
			ClearMiscInvoiceTransactionDeleted(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			MiscInvoiceHeader = NewMiscInvoiceHeader(); 
			MiscInvoiceTransaction = new List<MiscInvoiceTransaction>(); 
			AddMiscInvoiceTransaction(NewMiscInvoiceTransaction()); 
			ClearMiscInvoiceTransactionDeleted(); 
            return;
        }

        public virtual void CopyFrom(MiscInvoiceData data)
        {
			CopyMiscInvoiceHeaderFrom(data); 
			CopyMiscInvoiceTransactionFrom(data); 
            CheckIntegrity();
            return;
        }

        public override MiscInvoiceData Clone()
        {
			var newData = new MiscInvoiceData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.MiscInvoiceHeader.ClearMetaData(); 
			newData.MiscInvoiceTransaction.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetMiscInvoiceHeader(RowNum); 
			if (obj is null) return false; 
			MiscInvoiceHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string MiscInvoiceUuid)
        {
			var obj = GetMiscInvoiceHeaderByMiscInvoiceUuid(MiscInvoiceUuid); 
			if (obj is null) return false; 
			MiscInvoiceHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(MiscInvoiceHeader.MiscInvoiceUuid)) return; 
			MiscInvoiceTransaction = GetMiscInvoiceTransactionByMiscInvoiceUuid(MiscInvoiceHeader.MiscInvoiceUuid); 
        }

        public override bool Save()
        {
			if (MiscInvoiceHeader is null || string.IsNullOrEmpty(MiscInvoiceHeader.MiscInvoiceUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(MiscInvoiceHeaderTable))
			{
				MiscInvoiceHeader.SetDataBaseFactory(dbFactory);
				if (!MiscInvoiceHeader.Save()) return false;
			}

			 if (NeedSave(MiscInvoiceTransactionTable))
			{
				if (MiscInvoiceTransaction != null) 
					MiscInvoiceTransaction.SetDataBaseFactory(dbFactory)?.Save();
				var delMiscInvoiceTransaction = _MiscInvoiceTransactionDeleted;
				if (delMiscInvoiceTransaction != null)
					delMiscInvoiceTransaction.SetDataBaseFactory(dbFactory)?.Delete();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (MiscInvoiceHeader is null || string.IsNullOrEmpty(MiscInvoiceHeader.MiscInvoiceUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(MiscInvoiceHeaderTable))
			{
				MiscInvoiceHeader.SetDataBaseFactory(dbFactory); 
				if (MiscInvoiceHeader.Delete() <= 0) return false; 
			}
			 if (NeedDelete(MiscInvoiceTransactionTable))
			{
				if (MiscInvoiceTransaction != null) 
					MiscInvoiceTransaction?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetMiscInvoiceHeaderAsync(RowNum); 
			if (obj is null) return false; 
			MiscInvoiceHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string MiscInvoiceUuid)
        {
			var obj = await GetMiscInvoiceHeaderByMiscInvoiceUuidAsync(MiscInvoiceUuid); 
			if (obj is null) return false; 
			MiscInvoiceHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(MiscInvoiceHeader.MiscInvoiceUuid)) return; 
			MiscInvoiceTransaction = await GetMiscInvoiceTransactionByMiscInvoiceUuidAsync(MiscInvoiceHeader.MiscInvoiceUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (MiscInvoiceHeader is null || string.IsNullOrEmpty(MiscInvoiceHeader.MiscInvoiceUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(MiscInvoiceHeaderTable))
			{
				MiscInvoiceHeader.SetDataBaseFactory(dbFactory); 
				if (!(await MiscInvoiceHeader.SaveAsync())) return false; 
			}
			 if (NeedSave(MiscInvoiceTransactionTable))
			{
				if (MiscInvoiceTransaction != null) 
					await MiscInvoiceTransaction.SetDataBaseFactory(dbFactory).SaveAsync(); 
				var delMiscInvoiceTransaction = _MiscInvoiceTransactionDeleted;
				if (delMiscInvoiceTransaction != null)
					await delMiscInvoiceTransaction.SetDataBaseFactory(dbFactory).DeleteAsync();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (MiscInvoiceHeader is null || string.IsNullOrEmpty(MiscInvoiceHeader.MiscInvoiceUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(MiscInvoiceHeaderTable))
			{
			MiscInvoiceHeader.SetDataBaseFactory(dbFactory); 
			if ((await MiscInvoiceHeader.DeleteAsync()) <= 0) return false; 
			}
			 if (NeedDelete(MiscInvoiceTransactionTable))
			{
				if (MiscInvoiceTransaction != null) 
					await MiscInvoiceTransaction.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region MiscInvoiceHeader - Generated 
    

        // one to one children
        protected MiscInvoiceHeader _MiscInvoiceHeader;

        public virtual MiscInvoiceHeader MiscInvoiceHeader 
        { 
            get => _MiscInvoiceHeader;
            set => _MiscInvoiceHeader = value?.SetParent(this); 
        }

        public virtual void CopyMiscInvoiceHeaderFrom(MiscInvoiceData data) => 
            MiscInvoiceHeader?.CopyFrom(data.MiscInvoiceHeader, new string[] {"MiscInvoiceUuid"});

        public virtual MiscInvoiceHeader NewMiscInvoiceHeader() => new MiscInvoiceHeader(dbFactory).SetParent(this);

        public virtual MiscInvoiceHeader GetMiscInvoiceHeader(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<MiscInvoiceHeader>(RowNum);

        public virtual MiscInvoiceHeader GetMiscInvoiceHeaderByMiscInvoiceUuid(string MiscInvoiceUuid) =>
            (string.IsNullOrEmpty(MiscInvoiceUuid)) ? null : dbFactory.GetById<MiscInvoiceHeader>(MiscInvoiceUuid);

        public virtual bool SaveMiscInvoiceHeader(MiscInvoiceHeader data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteMiscInvoiceHeader(MiscInvoiceHeader data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<MiscInvoiceHeader> GetMiscInvoiceHeaderAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<MiscInvoiceHeader>(RowNum);

        public virtual async Task<MiscInvoiceHeader> GetMiscInvoiceHeaderByMiscInvoiceUuidAsync(string MiscInvoiceUuid) =>
            (string.IsNullOrEmpty(MiscInvoiceUuid)) ? null : await dbFactory.GetByIdAsync<MiscInvoiceHeader>(MiscInvoiceUuid);

        public virtual async Task<bool> SaveMiscInvoiceHeaderAsync(MiscInvoiceHeader data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteMiscInvoiceHeaderAsync(MiscInvoiceHeader data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion MiscInvoiceHeader - Generated 

        #region MiscInvoiceTransaction - Generated 
        // One to many children
        protected IList<MiscInvoiceTransaction> _MiscInvoiceTransactionDeleted;
        public virtual MiscInvoiceTransaction AddMiscInvoiceTransactionDeleted(MiscInvoiceTransaction del) 
        {
            if (_MiscInvoiceTransactionDeleted is null)
                _MiscInvoiceTransactionDeleted = new List<MiscInvoiceTransaction>();
            var lst = _MiscInvoiceTransactionDeleted.ToList();
            lst.Add(del);
            _MiscInvoiceTransactionDeleted = lst;
            return del;
        } 

        public virtual IList<MiscInvoiceTransaction> AddMiscInvoiceTransactionDeleted(IList<MiscInvoiceTransaction> del) 
        {
            if (_MiscInvoiceTransactionDeleted is null)
                _MiscInvoiceTransactionDeleted = new List<MiscInvoiceTransaction>();
            var lst = _MiscInvoiceTransactionDeleted.ToList();
            lst.AddRange(del);
            _MiscInvoiceTransactionDeleted = lst;
            return del;
        } 

        public virtual void SetMiscInvoiceTransactionDeleted(IList<MiscInvoiceTransaction> del) =>
            _MiscInvoiceTransactionDeleted = del;

        public virtual void ClearMiscInvoiceTransactionDeleted() =>
            _MiscInvoiceTransactionDeleted = null;


        protected IList<MiscInvoiceTransaction> _MiscInvoiceTransaction;

        public virtual IList<MiscInvoiceTransaction> MiscInvoiceTransaction 
        { 
            get 
            {
                if (_MiscInvoiceTransaction is null)
                    _MiscInvoiceTransaction = new List<MiscInvoiceTransaction>();
                return _MiscInvoiceTransaction;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _MiscInvoiceTransaction = valueList;
                }
                else
                    _MiscInvoiceTransaction = null;
            } 
        }

        public virtual void CopyMiscInvoiceTransactionFrom(MiscInvoiceData data) 
        {
            if  (data is null) return;
            var lstDeleted = MiscInvoiceTransaction?.CopyFrom(data.MiscInvoiceTransaction, new string[] {"MiscInvoiceUuid"});
            SetMiscInvoiceTransactionDeleted(lstDeleted);
            foreach (var c in MiscInvoiceTransaction)
                c?.CopyChildrenFrom(data.MiscInvoiceTransaction?.FindByRowNum(c.RowNum));
        } 

        public virtual MiscInvoiceTransaction NewMiscInvoiceTransaction() => new MiscInvoiceTransaction(dbFactory);

        public virtual MiscInvoiceTransaction AddMiscInvoiceTransaction(MiscInvoiceTransaction obj) => 
            MiscInvoiceTransaction.AddOrReplace(obj.SetParent(this));

        public virtual MiscInvoiceTransaction RemoveMiscInvoiceTransaction(MiscInvoiceTransaction obj) => 
            AddMiscInvoiceTransactionDeleted(MiscInvoiceTransaction.RemoveObject(obj.SetParent(this)));

        public virtual IList<MiscInvoiceTransaction> GetMiscInvoiceTransactionByMiscInvoiceUuid(string MiscInvoiceUuid) =>
            (string.IsNullOrEmpty(MiscInvoiceUuid)) 
                ? null 
                : dbFactory.Find<MiscInvoiceTransaction>("WHERE MiscInvoiceUuid = @0 ORDER BY RowNum ", MiscInvoiceUuid).ToList();

        public virtual bool SaveMiscInvoiceTransaction(IList<MiscInvoiceTransaction> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteMiscInvoiceTransaction(IList<MiscInvoiceTransaction> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<MiscInvoiceTransaction>> GetMiscInvoiceTransactionByMiscInvoiceUuidAsync(string MiscInvoiceUuid) =>
            (string.IsNullOrEmpty(MiscInvoiceUuid)) 
                ? null
                : (await dbFactory.FindAsync<MiscInvoiceTransaction>("WHERE MiscInvoiceUuid = @0 ORDER BY RowNum ", MiscInvoiceUuid)).ToList();

        public virtual async Task<bool> SaveMiscInvoiceTransactionAsync(IList<MiscInvoiceTransaction> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteMiscInvoiceTransactionAsync(IList<MiscInvoiceTransaction> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<MiscInvoiceTransaction> CheckIntegrityMiscInvoiceTransaction()
        {
            if (MiscInvoiceTransaction is null || MiscInvoiceHeader is null) 
                return MiscInvoiceTransaction;
            var seq = 0;
            MiscInvoiceTransaction.RemoveEmpty();
            var children = MiscInvoiceTransaction.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.MiscInvoiceUuid != MiscInvoiceHeader.MiscInvoiceUuid)
                    child.MiscInvoiceUuid = MiscInvoiceHeader.MiscInvoiceUuid;
                child.CheckIntegrity();
            }
            return children;
        }



        #endregion MiscInvoiceTransaction - Generated 


    }
}



