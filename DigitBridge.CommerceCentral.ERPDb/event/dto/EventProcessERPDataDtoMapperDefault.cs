    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a EventProcessERPDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class EventProcessERPDataDtoMapperDefault : IDtoMapper<EventProcessERPData, EventProcessERPDataDto> 
    {
        #region read from dto to data

        public virtual EventProcessERPData ReadDto(EventProcessERPData data, EventProcessERPDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new EventProcessERPData();
                data.New();
            }

			if (dto.EventProcessERP != null)
			{
				if (data.EventProcessERP is null)
					data.EventProcessERP = data.NewEventProcessERP();
				ReadEventProcessERP(data.EventProcessERP, dto.EventProcessERP);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadEventProcessERP(EventProcessERP data, EventProcessERPDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasEventUuid) data.EventUuid = dto.EventUuid;
			if (dto.HasChannelNum) data.ChannelNum = dto.ChannelNum.ToInt();
			if (dto.HasChannelAccountNum) data.ChannelAccountNum = dto.ChannelAccountNum.ToInt();
			if (dto.HasERPEventProcessType) data.ERPEventProcessType = dto.ERPEventProcessType.ToInt();
			if (dto.HasProcessSource) data.ProcessSource = dto.ProcessSource;
			if (dto.HasProcessUuid) data.ProcessUuid = dto.ProcessUuid;
			if (dto.HasProcessData) data.ProcessData = dto.ProcessData;
			if (dto.HasEventMessage) data.EventMessage = dto.EventMessage;
			if (dto.HasActionStatus) data.ActionStatus = dto.ActionStatus.ToInt();
			if (dto.HasActionDate) data.ActionDate = dto.ActionDate.ToDateTime();
			if (dto.HasProcessStatus) data.ProcessStatus = dto.ProcessStatus.ToInt();
			if (dto.HasProcessDate) data.ProcessDate = dto.ProcessDate.ToDateTime();
			if (dto.HasCloseStatus) data.CloseStatus = dto.CloseStatus.ToInt();
			if (dto.HasCloseDate) data.CloseDate = dto.CloseDate.ToDateTime();
			if (dto.HasLastUpdateDate) data.LastUpdateDate = dto.LastUpdateDate.ToDateTime();
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc.ToDateTime();
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual EventProcessERPDataDto WriteDto(EventProcessERPData data, EventProcessERPDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new EventProcessERPDataDto();

            data.CheckIntegrity();

			if (data.EventProcessERP != null)
			{
				dto.EventProcessERP = new EventProcessERPDto();
				WriteEventProcessERP(data.EventProcessERP, dto.EventProcessERP);
			}
            return dto;
        }

		protected virtual void WriteEventProcessERP(EventProcessERP data, EventProcessERPDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.EventUuid = data.EventUuid;
			dto.ChannelNum = data.ChannelNum;
			dto.ChannelAccountNum = data.ChannelAccountNum;
			dto.ERPEventProcessType = data.ERPEventProcessType;
			dto.ProcessSource = data.ProcessSource;
			dto.ProcessUuid = data.ProcessUuid;
			dto.ProcessData = data.ProcessData;
			dto.EventMessage = data.EventMessage;
			dto.ActionStatus = data.ActionStatus;
			dto.ActionDate = data.ActionDate;
			dto.ProcessStatus = data.ProcessStatus;
			dto.ProcessDate = data.ProcessDate;
			dto.CloseStatus = data.CloseStatus;
			dto.CloseDate = data.CloseDate;
			dto.LastUpdateDate = data.LastUpdateDate;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}


        #endregion write to dto from data

    }
}



