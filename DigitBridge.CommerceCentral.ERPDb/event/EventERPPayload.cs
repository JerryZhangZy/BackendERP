
//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Request and Response payload object
    /// </summary>
    [Serializable()]
    public class EventERPPayload : PayloadBase
    {
        /// <summary>
        /// Delegate function to load request parameter to payload property.
        /// </summary>
        public override IDictionary<string, Action<string>> GetOtherParameters()
        {
            return new Dictionary<string, Action<string>>
            {
                { "eventUuids", val => EventUuids = val.Split(",").Where(i=>!i.IsZero()).Distinct().ToList() }
            };
        }

        #region multiple Dto list 

        /// <summary>
        /// (Response Data) Array of EventERP entity object which load by uuid array.
        /// </summary>
        [OpenApiPropertyDescription("(Response Data) Array of entity object which load by uuid array.")]
        public IList<EventERPDataDto> EventERPs { get; set; }
        [JsonIgnore] public virtual bool HasEventERPs => EventERPs != null && EventERPs.Count > 0;
        public bool ShouldSerializeEventERPs() => HasEventERPs;

        #endregion multiple Dto list


        #region single Dto object

        /// <summary>
        /// (Request and Response Data) Single EventERP entity object which load by Number.
        /// </summary>
        [OpenApiPropertyDescription("(Response Data) Single entity object which load by Number.")]
        public EventERPDataDto EventERP { get; set; }
        [JsonIgnore] public virtual bool HasEventERP => EventERP != null;
        public bool ShouldSerializeEventERP() => HasEventERP;

        #endregion single Dto object


        #region list service

        /// <summary>
        /// (Response Data) List result which load filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response Data) List result which load filter and paging.")]
        [JsonConverter(typeof(StringBuilderConverter))]
        public StringBuilder EventERPList { get; set; }
        [JsonIgnore] public virtual bool HasEventERPList => EventERPList != null && EventERPList.Length > 0;
        public bool ShouldSerializeEventERPList() => HasEventERPList;

        /// <summary>
        /// (Response Data) List result count which load filter and paging.
        /// </summary>
        public int EventERPListCount { get; set; }
        [JsonIgnore] public virtual bool HasEventERPListCount => EventERPListCount > 0;
        public bool ShouldSerializeEventERPListCount() => HasEventERPListCount;

        #endregion list service


        #region Resend event

        /// <summary>
        /// (Request Parameter) Array of uuid to load multiple EventERP dto data.
        /// </summary>
        [OpenApiPropertyDescription("(Request Parameter) Array of uuid to load multiple EventERP dto data.")]
        public IList<string> EventUuids { get; set; } = new List<string>();
        [JsonIgnore]
        public virtual bool HasEventUuids => EventUuids != null && EventUuids.Count > 0;
        public bool ShouldSerializeEventUuids() => HasEventUuids;


        /// <summary>
        /// (Request Parameter) Array of uuid to load multiple EventERP dto data.
        /// </summary>
        [OpenApiPropertyDescription("(Request Parameter) Array of sent uuid.")]
        public IList<string> SentEventUuids { get; set; } = new List<string>();
        [JsonIgnore]
        public virtual bool HasSentEventUuids => SentEventUuids != null && SentEventUuids.Count > 0;
        public bool ShouldSerializeSentEventUuids() => HasSentEventUuids;

        #endregion
    }
}

