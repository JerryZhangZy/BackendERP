

              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a ActivityLog.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("ActivityLog")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("LogUuid")]
    [DtoName("ActivityLogDto")]
    public partial class ActivityLog : TableRepository<ActivityLog, long>
    {

        public ActivityLog() : base() {}
        public ActivityLog(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("DatabaseNum",SqlDbType.Int,NotNull=true)]
        private int _databaseNum;

        [Column("MasterAccountNum",SqlDbType.Int,NotNull=true)]
        private int _masterAccountNum;

        [Column("ProfileNum",SqlDbType.Int,NotNull=true)]
        private int _profileNum;

        [Column("LogUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _logUuid;

        [Column("LogDate",SqlDbType.DateTime,NotNull=true,IsDefault=true)]
        private DateTime _logDate;

        [Column("Type",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _type;

        [Column("Action",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _action;

        [Column("ProcessUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _processUuid;

        [Column("ProcessNumber",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _processNumber;

        [Column("LogMessage",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _logMessage;

        [Column("LogSource",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _logSource;

        [Column("UpdateDateUtc",SqlDbType.DateTime,NotNull=true,IsDefault=true)]
        private DateTime _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => LogUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(LogUuid)) 
				LogUuid = Guid.NewGuid().ToString(); 
		}
		/// <summary>
		/// (Readonly) Database Number. <br> Display: false, Editable: false.
		/// </summary>
        public virtual int DatabaseNum
        {
            get
            {
				return _databaseNum; 
            }
            set
            {
				_databaseNum = value; 
				OnPropertyChanged("DatabaseNum", value);
            }
        }

		/// <summary>
		/// (Readonly) Login user account. <br> Display: false, Editable: false.
		/// </summary>
        public virtual int MasterAccountNum
        {
            get
            {
				return _masterAccountNum; 
            }
            set
            {
				_masterAccountNum = value; 
				OnPropertyChanged("MasterAccountNum", value);
            }
        }

		/// <summary>
		/// (Readonly) Login user profile. <br> Display: false, Editable: false.
		/// </summary>
        public virtual int ProfileNum
        {
            get
            {
				return _profileNum; 
            }
            set
            {
				_profileNum = value; 
				OnPropertyChanged("ProfileNum", value);
            }
        }

		/// <summary>
		/// log uuid. <br> Display: false, Editable: false.
		/// </summary>
        public virtual string LogUuid
        {
            get
            {
				return _logUuid?.TrimEnd(); 
            }
            set
            {
				_logUuid = value.TruncateTo(50); 
				OnPropertyChanged("LogUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) log date time. <br> Title: Update At, Display: true, Editable: false
		/// </summary>
        public virtual DateTime LogDate
        {
            get
            {
				return _logDate; 
            }
            set
            {
				_logDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("LogDate", value);
            }
        }

		/// <summary>
		/// process type (S/O, invoice). <br> Display: false, Editable: false.
		/// </summary>
        public virtual int Type
        {
            get
            {
				return _type; 
            }
            set
            {
				_type = value; 
				OnPropertyChanged("Type", value);
            }
        }

		/// <summary>
		/// process Action (Add, Update). <br> Display: false, Editable: false.
		/// </summary>
        public virtual int Action
        {
            get
            {
				return _action; 
            }
            set
            {
				_action = value; 
				OnPropertyChanged("Action", value);
            }
        }

		/// <summary>
		/// process uuid. <br> Display: false, Editable: false.
		/// </summary>
        public virtual string ProcessUuid
        {
            get
            {
				return _processUuid?.TrimEnd(); 
            }
            set
            {
				_processUuid = value.TruncateTo(50); 
				OnPropertyChanged("ProcessUuid", value);
            }
        }

		/// <summary>
		/// process uuid. <br> Display: false, Editable: false.
		/// </summary>
        public virtual string ProcessNumber
        {
            get
            {
				return _processNumber?.TrimEnd(); 
            }
            set
            {
				_processNumber = value.TruncateTo(50); 
				OnPropertyChanged("ProcessNumber", value);
            }
        }

		/// <summary>
		/// process number. <br> Display: false, Editable: false.
		/// </summary>
        public virtual string LogMessage
        {
            get
            {
				return _logMessage?.TrimEnd(); 
            }
            set
            {
				_logMessage = value.TrimEnd(); 
				OnPropertyChanged("LogMessage", value);
            }
        }

		/// <summary>
		/// Call stack class. <br> Display: false, Editable: false.
		/// </summary>
        public virtual string LogSource
        {
            get
            {
				return _logSource?.TrimEnd(); 
            }
            set
            {
				_logSource = value.TruncateTo(200); 
				OnPropertyChanged("LogSource", value);
            }
        }

		/// <summary>
		/// (Readonly) Last update date time. <br> Title: Update At, Display: true, Editable: false
		/// </summary>
        public virtual DateTime UpdateDateUtc
        {
            get
            {
				return _updateDateUtc; 
            }
            set
            {
				_updateDateUtc = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("UpdateDateUtc", value);
            }
        }

		/// <summary>
		/// (Readonly) User who created this order. <br> Title: Created By, Display: true, Editable: false
		/// </summary>
        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }

		/// <summary>
		/// (Readonly) Last updated user. <br> Title: Update By, Display: true, Editable: false
		/// </summary>
        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
				OnPropertyChanged("UpdateBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private ActivityLogData Parent { get; set; }
		public ActivityLogData GetParent() => Parent;
		public ActivityLog SetParent(ActivityLogData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			LogUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override ActivityLog Clear()
        {
            base.Clear();
			_databaseNum = default(int); 
			_masterAccountNum = default(int); 
			_profileNum = default(int); 
			_logUuid = String.Empty; 
			_logDate = new DateTime().MinValueSql(); 
			_type = default(int); 
			_action = default(int); 
			_processUuid = String.Empty; 
			_processNumber = String.Empty; 
			_logMessage = String.Empty; 
			_logSource = String.Empty; 
			_updateDateUtc = new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public override ActivityLog CheckIntegrity()
        {
            CheckUniqueId();
            CheckIntegrityOthers();
            return this;
        }

        public virtual ActivityLog ClearChildren()
        {
            return this;
        }

        public virtual ActivityLog NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(ActivityLog data)
        {
            if (data is null) return;
            return;
        }



        #endregion Methods - Generated 
    }
}



