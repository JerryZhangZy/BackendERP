

              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a PoTransaction.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("PoTransaction")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("TransUuid")]
    [DtoName("PoTransactionDto")]
    public partial class PoTransaction : TableRepository<PoTransaction, long>
    {

        public PoTransaction() : base() {}
        public PoTransaction(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("DatabaseNum",SqlDbType.Int,NotNull=true)]
        private int _databaseNum;

        [Column("MasterAccountNum",SqlDbType.Int,NotNull=true)]
        private int _masterAccountNum;

        [Column("ProfileNum",SqlDbType.Int,NotNull=true)]
        private int _profileNum;

        [Column("TransUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _transUuid;

        [Column("TransNum",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _transNum;

        [Column("PoUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _poUuid;

        [Column("PoNum",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _poNum;

        [Column("TransType",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _transType;

        [Column("TransStatus",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _transStatus;

        [Column("TransDate",SqlDbType.Date,NotNull=true)]
        private DateTime _transDate;

        [Column("TransTime",SqlDbType.Time)]
        private TimeSpan? _transTime;

        [Column("Description",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _description;

        [Column("Notes",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _notes;

        [Column("VendorUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorUuid;

        [Column("VendorCode",SqlDbType.VarChar,NotNull=true)]
        private string _vendorCode;

        [Column("VendorName",SqlDbType.NVarChar,NotNull=true)]
        private string _vendorName;

        [Column("VendorInvoiceNum",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorInvoiceNum;

        [Column("VendorInvoiceDate",SqlDbType.Date,NotNull=true)]
        private DateTime _vendorInvoiceDate;

        [Column("DueDate",SqlDbType.Date)]
        private DateTime? _dueDate;

        [Column("Currency",SqlDbType.VarChar,NotNull=true)]
        private string _currency;

        [Column("SubTotalAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _subTotalAmount;

        [Column("TotalAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _totalAmount;

        [Column("TaxRate",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxRate;

        [Column("TaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxAmount;

        [Column("DiscountRate",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountRate;

        [Column("DiscountAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountAmount;

        [Column("ShippingAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shippingAmount;

        [Column("ShippingTaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shippingTaxAmount;

        [Column("MiscAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _miscAmount;

        [Column("MiscTaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _miscTaxAmount;

        [Column("ChargeAndAllowanceAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _chargeAndAllowanceAmount;

        [Column("ShippingAmountAssign",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _shippingAmountAssign;

        [Column("MiscAmountAssign",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _miscAmountAssign;

        [Column("WMSBatchNum",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _wMSBatchNum;

        [Column("UpdateDateUtc",SqlDbType.DateTime,NotNull=true)]
        private DateTime _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => TransUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(TransUuid)) 
				TransUuid = Guid.NewGuid().ToString(); 
		}
		/// <summary>
		/// (Readonly) Database Number. <br> Display: false, Editable: false.
		/// </summary>
        public virtual int DatabaseNum
        {
            get
            {
				return _databaseNum; 
            }
            set
            {
				_databaseNum = value; 
				OnPropertyChanged("DatabaseNum", value);
            }
        }

		/// <summary>
		/// (Readonly) Login user account. <br> Display: false, Editable: false.
		/// </summary>
        public virtual int MasterAccountNum
        {
            get
            {
				return _masterAccountNum; 
            }
            set
            {
				_masterAccountNum = value; 
				OnPropertyChanged("MasterAccountNum", value);
            }
        }

		/// <summary>
		/// (Readonly) Login user profile. <br> Display: false, Editable: false.
		/// </summary>
        public virtual int ProfileNum
        {
            get
            {
				return _profileNum; 
            }
            set
            {
				_profileNum = value; 
				OnPropertyChanged("ProfileNum", value);
            }
        }

		/// <summary>
		/// Global Unique Guid for purchase order Transaction
		/// </summary>
        public virtual string TransUuid
        {
            get
            {
				return _transUuid?.TrimEnd(); 
            }
            set
            {
				_transUuid = value.TruncateTo(50); 
				OnPropertyChanged("TransUuid", value);
            }
        }

		/// <summary>
		/// Transaction number
		/// </summary>
        public virtual int TransNum
        {
            get
            {
				return _transNum; 
            }
            set
            {
				_transNum = value; 
				OnPropertyChanged("TransNum", value);
            }
        }

		/// <summary>
		/// Global Unique Guid for P/O, '0' for multiple P/O
		/// </summary>
        public virtual string PoUuid
        {
            get
            {
				return _poUuid?.TrimEnd(); 
            }
            set
            {
				_poUuid = value.TruncateTo(50); 
				OnPropertyChanged("PoUuid", value);
            }
        }

		/// <summary>
		/// Readable invoice number, unique in same database and profile. <br> Parameter should pass ProfileNum-OrderNumber. <br> Title: Order Number, Display: true, Editable: true
		/// </summary>
        public virtual string PoNum
        {
            get
            {
				return _poNum?.TrimEnd(); 
            }
            set
            {
				_poNum = value.TruncateTo(50); 
				OnPropertyChanged("PoNum", value);
            }
        }

		/// <summary>
		/// P/O Transaction type (Receive, return, cancel)
		/// </summary>
        public virtual int TransType
        {
            get
            {
				return _transType; 
            }
            set
            {
				_transType = value; 
				OnPropertyChanged("TransType", value);
            }
        }

		/// <summary>
		/// P/O Transaction status, new, close
		/// </summary>
        public virtual int TransStatus
        {
            get
            {
				return _transStatus; 
            }
            set
            {
				_transStatus = value; 
				OnPropertyChanged("TransStatus", value);
            }
        }

		/// <summary>
		/// Transaction date
		/// </summary>
        public virtual DateTime TransDate
        {
            get
            {
				return _transDate; 
            }
            set
            {
				_transDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("TransDate", value);
            }
        }

		/// <summary>
		/// Transaction time
		/// </summary>
        public virtual TimeSpan? TransTime
        {
            get
            {
				if (!AllowNull && _transTime is null) 
					_transTime = new TimeSpan().MinValueSql(); 
				return _transTime; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_transTime = (value is null) ? (TimeSpan?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("TransTime", value);
				}
            }
        }

		/// <summary>
		/// Description of purchase order Transaction
		/// </summary>
        public virtual string Description
        {
            get
            {
				return _description?.TrimEnd(); 
            }
            set
            {
				_description = value.TruncateTo(200); 
				OnPropertyChanged("Description", value);
            }
        }

		/// <summary>
		/// Notes of Invoice Transaction
		/// </summary>
        public virtual string Notes
        {
            get
            {
				return _notes?.TrimEnd(); 
            }
            set
            {
				_notes = value.TruncateTo(500); 
				OnPropertyChanged("Notes", value);
            }
        }

		/// <summary>
		/// reference Vendor Unique Guid
		/// </summary>
        public virtual string VendorUuid
        {
            get
            {
				return _vendorUuid?.TrimEnd(); 
            }
            set
            {
				_vendorUuid = value.TruncateTo(50); 
				OnPropertyChanged("VendorUuid", value);
            }
        }

		/// <summary>
		/// Vendor readable number, DatabaseNum + VendorCode is DigitBridgeVendorCode, which is global unique
		/// </summary>
        public virtual string VendorCode
        {
            get
            {
				return _vendorCode?.TrimEnd(); 
            }
            set
            {
				_vendorCode = value.TruncateTo(50); 
				OnPropertyChanged("VendorCode", value);
            }
        }

		/// <summary>
		/// Vendor name
		/// </summary>
        public virtual string VendorName
        {
            get
            {
				return _vendorName?.TrimEnd(); 
            }
            set
            {
				_vendorName = value.TruncateTo(200); 
				OnPropertyChanged("VendorName", value);
            }
        }

		/// <summary>
		/// Vendor Invoice number
		/// </summary>
        public virtual string VendorInvoiceNum
        {
            get
            {
				return _vendorInvoiceNum?.TrimEnd(); 
            }
            set
            {
				_vendorInvoiceNum = value.TruncateTo(50); 
				OnPropertyChanged("VendorInvoiceNum", value);
            }
        }

		/// <summary>
		/// Vendor Invoice date
		/// </summary>
        public virtual DateTime VendorInvoiceDate
        {
            get
            {
				return _vendorInvoiceDate; 
            }
            set
            {
				_vendorInvoiceDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("VendorInvoiceDate", value);
            }
        }

		/// <summary>
		/// Balance Due date
		/// </summary>
        public virtual DateTime? DueDate
        {
            get
            {
				if (!AllowNull && _dueDate is null) 
					_dueDate = new DateTime().MinValueSql(); 
				return _dueDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_dueDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("DueDate", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string Currency
        {
            get
            {
				return _currency?.TrimEnd(); 
            }
            set
            {
				_currency = value.TruncateTo(10); 
				OnPropertyChanged("Currency", value);
            }
        }

		/// <summary>
		/// Sub total amount is sumary items amount.
		/// </summary>
        public virtual decimal SubTotalAmount
        {
            get
            {
				return _subTotalAmount; 
            }
            set
            {
				_subTotalAmount = value; 
				OnPropertyChanged("SubTotalAmount", value);
            }
        }

		/// <summary>
		/// Total order amount. Include every charge. Related to VAT. For US orders, tax should not be included. Refer to tax info to find more detail. Reference calculation
		/// </summary>
        public virtual decimal TotalAmount
        {
            get
            {
				return _totalAmount; 
            }
            set
            {
				_totalAmount = value; 
				OnPropertyChanged("TotalAmount", value);
            }
        }

		/// <summary>
		/// Default Tax rate for P/O items.
		/// </summary>
        public virtual decimal TaxRate
        {
            get
            {
				return _taxRate; 
            }
            set
            {
				_taxRate = value; 
				OnPropertyChanged("TaxRate", value);
            }
        }

		/// <summary>
		/// Total P/O tax amount (include shipping tax and misc tax)
		/// </summary>
        public virtual decimal TaxAmount
        {
            get
            {
				return _taxAmount; 
            }
            set
            {
				_taxAmount = value; 
				OnPropertyChanged("TaxAmount", value);
            }
        }

		/// <summary>
		/// P/O level discount rate.
		/// </summary>
        public virtual decimal DiscountRate
        {
            get
            {
				return _discountRate; 
            }
            set
            {
				_discountRate = value; 
				OnPropertyChanged("DiscountRate", value);
            }
        }

		/// <summary>
		/// P/O level discount amount, base on SubTotalAmount
		/// </summary>
        public virtual decimal DiscountAmount
        {
            get
            {
				return _discountAmount; 
            }
            set
            {
				_discountAmount = value; 
				OnPropertyChanged("DiscountAmount", value);
            }
        }

		/// <summary>
		/// Total shipping fee for all items
		/// </summary>
        public virtual decimal ShippingAmount
        {
            get
            {
				return _shippingAmount; 
            }
            set
            {
				_shippingAmount = value; 
				OnPropertyChanged("ShippingAmount", value);
            }
        }

		/// <summary>
		/// tax amount of shipping fee
		/// </summary>
        public virtual decimal ShippingTaxAmount
        {
            get
            {
				return _shippingTaxAmount; 
            }
            set
            {
				_shippingTaxAmount = value; 
				OnPropertyChanged("ShippingTaxAmount", value);
            }
        }

		/// <summary>
		/// P/O handling charge
		/// </summary>
        public virtual decimal MiscAmount
        {
            get
            {
				return _miscAmount; 
            }
            set
            {
				_miscAmount = value; 
				OnPropertyChanged("MiscAmount", value);
            }
        }

		/// <summary>
		/// tax amount of handling charge
		/// </summary>
        public virtual decimal MiscTaxAmount
        {
            get
            {
				return _miscTaxAmount; 
            }
            set
            {
				_miscTaxAmount = value; 
				OnPropertyChanged("MiscTaxAmount", value);
            }
        }

		/// <summary>
		/// P/O total Charg Allowance Amount
		/// </summary>
        public virtual decimal ChargeAndAllowanceAmount
        {
            get
            {
				return _chargeAndAllowanceAmount; 
            }
            set
            {
				_chargeAndAllowanceAmount = value; 
				OnPropertyChanged("ChargeAndAllowanceAmount", value);
            }
        }

		/// <summary>
		/// How to assign shipping fee to each item
		/// </summary>
        public virtual int ShippingAmountAssign
        {
            get
            {
				return _shippingAmountAssign; 
            }
            set
            {
				_shippingAmountAssign = value; 
				OnPropertyChanged("ShippingAmountAssign", value);
            }
        }

		/// <summary>
		/// How to assign MiscAmount fee to each item
		/// </summary>
        public virtual int MiscAmountAssign
        {
            get
            {
				return _miscAmountAssign; 
            }
            set
            {
				_miscAmountAssign = value; 
				OnPropertyChanged("MiscAmountAssign", value);
            }
        }

		/// <summary>
		/// (Readonly) WMS po rececived batch number. <br> Title: Update By, Display: true, Editable: false
		/// </summary>
        public virtual string WMSBatchNum
        {
            get
            {
				return _wMSBatchNum?.TrimEnd(); 
            }
            set
            {
				_wMSBatchNum = value.TruncateTo(50); 
				OnPropertyChanged("WMSBatchNum", value);
            }
        }

		/// <summary>
		/// (Readonly) Last update date time. <br> Title: Update At, Display: true, Editable: false
		/// </summary>
        public virtual DateTime UpdateDateUtc
        {
            get
            {
				return _updateDateUtc; 
            }
            set
            {
				_updateDateUtc = value.ToSqlSafeValue(); 
				OnPropertyChanged("UpdateDateUtc", value);
            }
        }

		/// <summary>
		/// (Readonly) User who created this order. <br> Title: Created By, Display: true, Editable: false
		/// </summary>
        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }

		/// <summary>
		/// (Readonly) Last updated user. <br> Title: Update By, Display: true, Editable: false
		/// </summary>
        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
				OnPropertyChanged("UpdateBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private PoTransactionData Parent { get; set; }
		public PoTransactionData GetParent() => Parent;
		public PoTransaction SetParent(PoTransactionData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			TransUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override PoTransaction Clear()
        {
            base.Clear();
			_databaseNum = default(int); 
			_masterAccountNum = default(int); 
			_profileNum = default(int); 
			_transUuid = String.Empty; 
			_transNum = default(int); 
			_poUuid = String.Empty; 
			_poNum = String.Empty; 
			_transType = default(int); 
			_transStatus = default(int); 
			_transDate = new DateTime().MinValueSql(); 
			_transTime = AllowNull ? (TimeSpan?)null : new TimeSpan().MinValueSql(); 
			_description = String.Empty; 
			_notes = String.Empty; 
			_vendorUuid = String.Empty; 
			_vendorCode = String.Empty; 
			_vendorName = String.Empty; 
			_vendorInvoiceNum = String.Empty; 
			_vendorInvoiceDate = new DateTime().MinValueSql(); 
			_dueDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_currency = String.Empty; 
			_subTotalAmount = default(decimal); 
			_totalAmount = default(decimal); 
			_taxRate = default(decimal); 
			_taxAmount = default(decimal); 
			_discountRate = default(decimal); 
			_discountAmount = default(decimal); 
			_shippingAmount = default(decimal); 
			_shippingTaxAmount = default(decimal); 
			_miscAmount = default(decimal); 
			_miscTaxAmount = default(decimal); 
			_chargeAndAllowanceAmount = default(decimal); 
			_shippingAmountAssign = default(int); 
			_miscAmountAssign = default(int); 
			_wMSBatchNum = String.Empty; 
			_updateDateUtc = new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public override PoTransaction CheckIntegrity()
        {
            CheckUniqueId();
            CheckIntegrityOthers();
            return this;
        }

        public virtual PoTransaction ClearChildren()
        {
            return this;
        }

        public virtual PoTransaction NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(PoTransaction data)
        {
            if (data is null) return;
            return;
        }

		public static IList<PoTransaction> FindByPoUuid(IDataBaseFactory dbFactory, string poUuid)
		{
			return dbFactory.Find<PoTransaction>("WHERE PoUuid = @0 ", poUuid).ToList();
		}
		public static long CountByPoUuid(IDataBaseFactory dbFactory, string poUuid)
		{
			return dbFactory.Count<PoTransaction>("WHERE PoUuid = @0 ", poUuid);
		}
		public static async Task<IList<PoTransaction>> FindByAsyncPoUuid(IDataBaseFactory dbFactory, string poUuid)
		{
			return (await dbFactory.FindAsync<PoTransaction>("WHERE PoUuid = @0 ", poUuid)).ToList();
		}
		public static async Task<long> CountByAsyncPoUuid(IDataBaseFactory dbFactory, string poUuid)
		{
			return await dbFactory.CountAsync<PoTransaction>("WHERE PoUuid = @0 ", poUuid);
		}

		public override PoTransaction ConvertDbFieldsToData()
		{
			base.ConvertDbFieldsToData();
			return this;
		}
		public override PoTransaction ConvertDataFieldsToDb()
		{
			base.ConvertDataFieldsToDb();
			UpdateDateUtc =DateTime.UtcNow;
			return this;
		}

        #endregion Methods - Generated 
    }
}



