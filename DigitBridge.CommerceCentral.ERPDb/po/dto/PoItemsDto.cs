              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Enums;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;

using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a PoItems Dto Class.
    /// NOTE: This class is generated from a T4 template Once - if you want re-generate it, you need delete cs file and generate again
    /// </summary>
    [Serializable()]
    public class PoItemsDto
    {
        public long? RowNum { get; set; }
        [JsonIgnore,XmlIgnore]
        public string UniqueId { get; set; }
        [JsonIgnore,XmlIgnore]
        public DateTime? EnterDateUtc { get; set; }
        [JsonIgnore,XmlIgnore]
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

		/// <summary>
		/// Global Unique Guid for P/O Item Line. <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("Global Unique Guid for P/O Item Line. <br> Display: false, Editable: false")]
        [StringLength(50, ErrorMessage = "The PoItemUuid value cannot exceed 50 characters. ")]
        public string PoItemUuid { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPoItemUuid => PoItemUuid != null;

		/// <summary>
		/// Global Unique Guid for P/O. <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("Global Unique Guid for P/O. <br> Display: false, Editable: false")]
        [StringLength(50, ErrorMessage = "The PoUuid value cannot exceed 50 characters. ")]
        public string PoUuid { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPoUuid => PoUuid != null;

		/// <summary>
		/// P/O Item Line sort sequence. <br> Title: Line#, Display: true, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("P/O Item Line sort sequence. <br> Title: Line#, Display: true, Editable: false")]
        public int? Seq { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasSeq => Seq != null;

		/// <summary>
		/// P/O item type.<br> Title: Type, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("P/O item type.<br> Title: Type, Display: true, Editable: true")]
        public int? PoItemType { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPoItemType => PoItemType != null;

		/// <summary>
		/// P/O item status. <br> Title: Status, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("P/O item status. <br> Title: Status, Display: true, Editable: true")]
        public int? PoItemStatus { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPoItemStatus => PoItemStatus != null;

		/// <summary>
		/// (Ignore) P/O date
		/// </summary>
		[OpenApiPropertyDescription("(Ignore) P/O date")]
        [DataType(DataType.DateTime)]
        public DateTime? PoDate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPoDate => PoDate != null;

		/// <summary>
		/// (Ignore) P/O time
		/// </summary>
		[OpenApiPropertyDescription("(Ignore) P/O time")]
        [DataType(DataType.DateTime)]
        public DateTime? PoTime { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPoTime => PoTime != null;

		/// <summary>
		/// Estimated vendor ship date . <br> Title: Ship Date, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Estimated vendor ship date . <br> Title: Ship Date, Display: true, Editable: true")]
        [DataType(DataType.DateTime)]
        public DateTime? EtaShipDate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasEtaShipDate => EtaShipDate != null;

		/// <summary>
		/// Estimated date when item arrival to buyer. <br> Title: Arrival Date, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Estimated date when item arrival to buyer. <br> Title: Arrival Date, Display: true, Editable: true")]
        [DataType(DataType.DateTime)]
        public DateTime? EtaArrivalDate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasEtaArrivalDate => EtaArrivalDate != null;

		/// <summary>
		/// Usually it is related to shipping instruction. <br> Title: Cancel Date, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Usually it is related to shipping instruction. <br> Title: Cancel Date, Display: true, Editable: true")]
        [DataType(DataType.DateTime)]
        public DateTime? CancelDate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCancelDate => CancelDate != null;

		/// <summary>
		/// (Readonly) Product uuid. load from ProductBasic data. <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Product uuid. load from ProductBasic data. <br> Display: false, Editable: false")]
        [StringLength(50, ErrorMessage = "The ProductUuid value cannot exceed 50 characters. ")]
        public string ProductUuid { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasProductUuid => ProductUuid != null;

		/// <summary>
		/// (Readonly) Inventory Item Line uuid, load from inventory data. <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Inventory Item Line uuid, load from inventory data. <br> Display: false, Editable: false")]
        [StringLength(50, ErrorMessage = "The InventoryUuid value cannot exceed 50 characters. ")]
        public string InventoryUuid { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasInventoryUuid => InventoryUuid != null;

		/// <summary>
		/// Product SKU. <br> Title: SKU, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Product SKU. <br> Title: SKU, Display: true, Editable: true")]
        [StringLength(100, ErrorMessage = "The SKU value cannot exceed 100 characters. ")]
        public string SKU { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasSKU => SKU != null;

		/// <summary>
		/// Item line description, default from ProductBasic data. <br> Title: Description, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Item line description, default from ProductBasic data. <br> Title: Description, Display: true, Editable: true")]
        [StringLength(200, ErrorMessage = "The Description value cannot exceed 200 characters. ")]
        public string Description { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDescription => Description != null;

		/// <summary>
		/// P/O item notes . <br> Title: Notes, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("P/O item notes . <br> Title: Notes, Display: true, Editable: true")]
        [StringLength(500, ErrorMessage = "The Notes value cannot exceed 500 characters. ")]
        public string Notes { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasNotes => Notes != null;

		/// <summary>
		/// (Ignore)
		/// </summary>
		[OpenApiPropertyDescription("(Ignore)")]
        [StringLength(10, ErrorMessage = "The Currency value cannot exceed 10 characters. ")]
        public string Currency { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCurrency => Currency != null;

		/// <summary>
		/// (Ignore) Item P/O Qty.
		/// </summary>
		[OpenApiPropertyDescription("(Ignore) Item P/O Qty.")]
        public decimal? PoQty { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPoQty => PoQty != null;

		/// <summary>
		/// (Ignore) Item Received Qty.
		/// </summary>
		[OpenApiPropertyDescription("(Ignore) Item Received Qty.")]
        public decimal? ReceivedQty { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasReceivedQty => ReceivedQty != null;

		/// <summary>
		/// (Ignore) Item Cancelled Qty.
		/// </summary>
		[OpenApiPropertyDescription("(Ignore) Item Cancelled Qty.")]
        public decimal? CancelledQty { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCancelledQty => CancelledQty != null;

		/// <summary>
		/// Item P/O price rule. <br> Title: Price Type, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Item P/O price rule. <br> Title: Price Type, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The PriceRule value cannot exceed 50 characters. ")]
        public string PriceRule { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPriceRule => PriceRule != null;

		/// <summary>
		/// Item P/O price.  <br> Title: Unit Price, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Item P/O price.  <br> Title: Unit Price, Display: true, Editable: true")]
        public decimal? Price { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasPrice => Price != null;

		/// <summary>
		/// Item total amount.  <br> Title: Ext.Amount, Display: true, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("Item total amount.  <br> Title: Ext.Amount, Display: true, Editable: false")]
        public decimal? ExtAmount { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasExtAmount => ExtAmount != null;

		/// <summary>
		/// Default Tax rate for P/O items.  <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("Default Tax rate for P/O items.  <br> Display: false, Editable: false")]
        public decimal? TaxRate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasTaxRate => TaxRate != null;

		/// <summary>
		/// Total P/O tax amount (include shipping tax and misc tax) . <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("Total P/O tax amount (include shipping tax and misc tax) . <br> Display: false, Editable: false")]
        public decimal? TaxAmount { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasTaxAmount => TaxAmount != null;

		/// <summary>
		/// P/O level discount rate. <br> Title: Discount Rate, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("P/O level discount rate. <br> Title: Discount Rate, Display: true, Editable: true")]
        public decimal? DiscountRate { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDiscountRate => DiscountRate != null;

		/// <summary>
		/// P/O level discount amount, base on SubTotalAmount.<br> Title: Discount Amount, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("P/O level discount amount, base on SubTotalAmount.<br> Title: Discount Amount, Display: true, Editable: true")]
        public decimal? DiscountAmount { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasDiscountAmount => DiscountAmount != null;

		/// <summary>
		/// Total shipping fee for all items. <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("Total shipping fee for all items. <br> Display: false, Editable: false")]
        public decimal? ShippingAmount { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasShippingAmount => ShippingAmount != null;

		/// <summary>
		/// tax amount of shipping fee. <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("tax amount of shipping fee. <br> Display: false, Editable: false")]
        public decimal? ShippingTaxAmount { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasShippingTaxAmount => ShippingTaxAmount != null;

		/// <summary>
		/// P/O handling charge . <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("P/O handling charge . <br> Display: false, Editable: false")]
        public decimal? MiscAmount { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasMiscAmount => MiscAmount != null;

		/// <summary>
		/// tax amount of handling charge. <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("tax amount of handling charge. <br> Display: false, Editable: false")]
        public decimal? MiscTaxAmount { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasMiscTaxAmount => MiscTaxAmount != null;

		/// <summary>
		/// P/O total Charg Allowance Amount. <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("P/O total Charg Allowance Amount. <br> Display: false, Editable: false")]
        public decimal? ChargeAndAllowanceAmount { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasChargeAndAllowanceAmount => ChargeAndAllowanceAmount != null;

		/// <summary>
		/// P/O item will update inventory instock qty . <br> Title: Stockable, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("P/O item will update inventory instock qty . <br> Title: Stockable, Display: true, Editable: true")]
        public bool? Stockable { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasStockable => Stockable != null;

		/// <summary>
		/// P/O item will update inventory cost. <br> Title: Apply Cost, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("P/O item will update inventory cost. <br> Title: Apply Cost, Display: true, Editable: true")]
        public bool? Costable { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasCostable => Costable != null;

		/// <summary>
		/// P/O item will apply tax. <br> Title: Taxable, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("P/O item will apply tax. <br> Title: Taxable, Display: true, Editable: true")]
        public bool? Taxable { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasTaxable => Taxable != null;

		/// <summary>
		/// P/O item will apply to total amount . <br> Title: A/P, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("P/O item will apply to total amount . <br> Title: A/P, Display: true, Editable: true")]
        public bool? IsAp { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasIsAp => IsAp != null;

		/// <summary>
		/// (Readonly) Warehouse uuid, load from inventory data. <br> Display: false, Editable: false
		/// </summary>
		[OpenApiPropertyDescription("(Readonly) Warehouse uuid, load from inventory data. <br> Display: false, Editable: false")]
        [StringLength(50, ErrorMessage = "The WarehouseUuid value cannot exceed 50 characters. ")]
        public string WarehouseUuid { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasWarehouseUuid => WarehouseUuid != null;

		/// <summary>
		/// Readable warehouse code, load from inventory data. <br> Title: Warehouse Code, Display: true, Editable: true
		/// </summary>
		[OpenApiPropertyDescription("Readable warehouse code, load from inventory data. <br> Title: Warehouse Code, Display: true, Editable: true")]
        [StringLength(50, ErrorMessage = "The WarehouseCode value cannot exceed 50 characters. ")]
        public string WarehouseCode { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasWarehouseCode => WarehouseCode != null;

		/// <summary>
		/// (Ignore)
		/// </summary>
		[OpenApiPropertyDescription("(Ignore)")]
        [DataType(DataType.DateTime)]
        public DateTime? UpdateDateUtc { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasUpdateDateUtc => UpdateDateUtc != null;

		/// <summary>
		/// (Ignore)
		/// </summary>
		[OpenApiPropertyDescription("(Ignore)")]
        [StringLength(100, ErrorMessage = "The EnterBy value cannot exceed 100 characters. ")]
        public string EnterBy { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasEnterBy => EnterBy != null;

		/// <summary>
		/// (Ignore)
		/// </summary>
		[OpenApiPropertyDescription("(Ignore)")]
        [StringLength(100, ErrorMessage = "The UpdateBy value cannot exceed 100 characters. ")]
        public string UpdateBy { get; set; }
        [JsonIgnore, XmlIgnore, IgnoreCompare]
        [OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
        public bool HasUpdateBy => UpdateBy != null;



        #endregion Properties - Generated 

        #region Children - Generated 

		public PoItemsAttributesDto PoItemsAttributes { get; set; }
		[JsonIgnore, XmlIgnore, IgnoreCompare]
		[OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
		public bool HasPoItemsAttributes => PoItemsAttributes != null;
		
		public PoItemsRefDto PoItemsRef { get; set; }
		[JsonIgnore, XmlIgnore, IgnoreCompare]
		[OpenApiSchemaVisibility(OpenApiVisibilityType.Internal)]
		public bool HasPoItemsRef => PoItemsRef != null;
		
        #endregion Children - Generated 

    }
}



