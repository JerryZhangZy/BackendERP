              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a PoTransactionItems.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("PoTransactionItems")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("TransItemUuid")]
    [DtoName("PoTransactionItemsDto")]
    public partial class PoTransactionItems : TableRepository<PoTransactionItems, long>
    {

        public PoTransactionItems() : base() {}
        public PoTransactionItems(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("TransItemUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _transItemUuid;

        [Column("TransUuid",SqlDbType.VarChar,NotNull=true)]
        private string _transUuid;

        [Column("Seq",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _seq;

        [Column("PoUuid",SqlDbType.VarChar,NotNull=true)]
        private string _poUuid;

        [Column("PoNum",SqlDbType.VarChar,NotNull=true)]
        private string _poNum;

        [Column("PoItemUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _poItemUuid;

        [Column("ItemType",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _itemType;

        [Column("ItemStatus",SqlDbType.Int,NotNull=true,IsDefault=true)]
        private int _itemStatus;

        [Column("ItemDate",SqlDbType.Date,NotNull=true)]
        private DateTime _itemDate;

        [Column("ItemTime",SqlDbType.Time,NotNull=true)]
        private TimeSpan _itemTime;

        [Column("ProductUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _productUuid;

        [Column("InventoryUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _inventoryUuid;

        [Column("SKU",SqlDbType.VarChar,NotNull=true)]
        private string _sku;

        [Column("WarehouseUuid",SqlDbType.VarChar,NotNull=true)]
        private string _warehouseUuid;

        [Column("WarehouseCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _warehouseCode;

        [Column("LotNum",SqlDbType.VarChar,NotNull=true)]
        private string _lotNum;

        [Column("LotDescription",SqlDbType.NVarChar,NotNull=true)]
        private string _lotDescription;

        [Column("LotInDate",SqlDbType.Date)]
        private DateTime? _lotInDate;

        [Column("LotExpDate",SqlDbType.Date)]
        private DateTime? _lotExpDate;

        [Column("Description",SqlDbType.NVarChar,NotNull=true)]
        private string _description;

        [Column("Notes",SqlDbType.NVarChar,NotNull=true)]
        private string _notes;

        [Column("Currency",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _currency;

        [Column("UOM",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _uom;

        [Column("TransQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _transQty;

        [Column("PoPrice",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _poPrice;

        [Column("Price",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _price;

        [Column("ExtAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _extAmount;

        [Column("TaxRate",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxRate;

        [Column("TaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _taxAmount;

        [Column("DiscountRate",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountRate;

        [Column("DiscountPrice",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountPrice;

        [Column("DiscountAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _discountAmount;

        [Column("ShippingAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shippingAmount;

        [Column("ShippingTaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _shippingTaxAmount;

        [Column("MiscAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _miscAmount;

        [Column("MiscTaxAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _miscTaxAmount;

        [Column("ChargeAndAllowanceAmount",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _chargeAndAllowanceAmount;

        [Column("BaseCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _baseCost;

        [Column("UnitCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _unitCost;

        [Column("Stockable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _stockable;

        [Column("IsAp",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _isAp;

        [Column("Taxable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _taxable;

        [Column("Costable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _costable;

        [Column("UpdateDateUtc",SqlDbType.DateTime,NotNull=true)]
        private DateTime _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => TransItemUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(TransItemUuid)) 
				TransItemUuid = Guid.NewGuid().ToString(); 
		}
		/// <summary>
		/// Global Unique Guid for Invoice Return Item Line
		/// </summary>
        public virtual string TransItemUuid
        {
            get
            {
				return _transItemUuid?.TrimEnd(); 
            }
            set
            {
				_transItemUuid = value.TruncateTo(50); 
				OnPropertyChanged("TransItemUuid", value);
            }
        }

		/// <summary>
		/// Global Unique Guid for Invoice Transaction
		/// </summary>
        public virtual string TransUuid
        {
            get
            {
				return _transUuid?.TrimEnd(); 
            }
            set
            {
				_transUuid = value.TruncateTo(50); 
				OnPropertyChanged("TransUuid", value);
            }
        }

		/// <summary>
		/// Invoice Item Line sort sequence
		/// </summary>
        public virtual int Seq
        {
            get
            {
				return _seq; 
            }
            set
            {
				_seq = value; 
				OnPropertyChanged("Seq", value);
            }
        }

		/// <summary>
		/// Global Unique Guid for Invoice
		/// </summary>
        public virtual string PoUuid
        {
            get
            {
				return _poUuid?.TrimEnd(); 
            }
            set
            {
				_poUuid = value.TruncateTo(50); 
				OnPropertyChanged("PoUuid", value);
            }
        }

		/// <summary>
		/// Unique in this database. <br> ProfileNum + PoNum is DigitBridgePoNum, which is global unique. <br> Title: PoNum, Display: true, Editable: true
		/// </summary>
        public virtual string PoNum
        {
            get
            {
				return _poNum?.TrimEnd(); 
            }
            set
            {
				_poNum = value.TruncateTo(50); 
				OnPropertyChanged("PoNum", value);
            }
        }

		/// <summary>
		/// Global Unique Guid for Invoice
		/// </summary>
        public virtual string PoItemUuid
        {
            get
            {
				return _poItemUuid?.TrimEnd(); 
            }
            set
            {
				_poItemUuid = value.TruncateTo(50); 
				OnPropertyChanged("PoItemUuid", value);
            }
        }

		/// <summary>
		/// Invoice item type
		/// </summary>
        public virtual int ItemType
        {
            get
            {
				return _itemType; 
            }
            set
            {
				_itemType = value; 
				OnPropertyChanged("ItemType", value);
            }
        }

		/// <summary>
		/// Invoice item status
		/// </summary>
        public virtual int ItemStatus
        {
            get
            {
				return _itemStatus; 
            }
            set
            {
				_itemStatus = value; 
				OnPropertyChanged("ItemStatus", value);
            }
        }

		/// <summary>
		/// Invoice date
		/// </summary>
        public virtual DateTime ItemDate
        {
            get
            {
				return _itemDate; 
            }
            set
            {
				_itemDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("ItemDate", value);
            }
        }

		/// <summary>
		/// Invoice time
		/// </summary>
        public virtual TimeSpan ItemTime
        {
            get
            {
				return _itemTime; 
            }
            set
            {
				_itemTime = value.ToSqlSafeValue(); 
				OnPropertyChanged("ItemTime", value);
            }
        }

		/// <summary>
		/// (Readonly) Product uuid. load from ProductBasic data. <br> Display: false, Editable: false
		/// </summary>
        public virtual string ProductUuid
        {
            get
            {
				return _productUuid?.TrimEnd(); 
            }
            set
            {
				_productUuid = value.TruncateTo(50); 
				OnPropertyChanged("ProductUuid", value);
            }
        }

		/// <summary>
		/// (Readonly) Inventory uuid. <br> Display: false, Editable: false
		/// </summary>
        public virtual string InventoryUuid
        {
            get
            {
				return _inventoryUuid?.TrimEnd(); 
            }
            set
            {
				_inventoryUuid = value.TruncateTo(50); 
				OnPropertyChanged("InventoryUuid", value);
            }
        }

		/// <summary>
		/// Product SKU
		/// </summary>
        public virtual string SKU
        {
            get
            {
				return _sku?.TrimEnd(); 
            }
            set
            {
				_sku = value.TruncateTo(100); 
				OnPropertyChanged("SKU", value);
            }
        }

		/// <summary>
		/// Warehouse Guid
		/// </summary>
        public virtual string WarehouseUuid
        {
            get
            {
				return _warehouseUuid?.TrimEnd(); 
            }
            set
            {
				_warehouseUuid = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseUuid", value);
            }
        }

		/// <summary>
		/// Readable warehouse code, load from inventory data. <br> Title: Warehouse Code, Display: true, Editable: true
		/// </summary>
        public virtual string WarehouseCode
        {
            get
            {
				return _warehouseCode?.TrimEnd(); 
            }
            set
            {
				_warehouseCode = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseCode", value);
            }
        }

		/// <summary>
		/// Product SKU Lot Number
		/// </summary>
        public virtual string LotNum
        {
            get
            {
				return _lotNum?.TrimEnd(); 
            }
            set
            {
				_lotNum = value.TruncateTo(100); 
				OnPropertyChanged("LotNum", value);
            }
        }

		/// <summary>
		/// Invoice item description
		/// </summary>
        public virtual string LotDescription
        {
            get
            {
				return _lotDescription?.TrimEnd(); 
            }
            set
            {
				_lotDescription = value.TruncateTo(200); 
				OnPropertyChanged("LotDescription", value);
            }
        }

		/// <summary>
		/// Lot receive Date
		/// </summary>
        public virtual DateTime? LotInDate
        {
            get
            {
				if (!AllowNull && _lotInDate is null) 
					_lotInDate = new DateTime().MinValueSql(); 
				return _lotInDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotInDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotInDate", value);
				}
            }
        }

		/// <summary>
		/// Lot Expiration date
		/// </summary>
        public virtual DateTime? LotExpDate
        {
            get
            {
				if (!AllowNull && _lotExpDate is null) 
					_lotExpDate = new DateTime().MinValueSql(); 
				return _lotExpDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotExpDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotExpDate", value);
				}
            }
        }

		/// <summary>
		/// Invoice item description
		/// </summary>
        public virtual string Description
        {
            get
            {
				return _description?.TrimEnd(); 
            }
            set
            {
				_description = value.TruncateTo(200); 
				OnPropertyChanged("Description", value);
            }
        }

		/// <summary>
		/// Invoice item notes
		/// </summary>
        public virtual string Notes
        {
            get
            {
				return _notes?.TrimEnd(); 
            }
            set
            {
				_notes = value.TruncateTo(500); 
				OnPropertyChanged("Notes", value);
            }
        }

		/// <summary>
		/// (Ignore) po transaction price in currency. <br> Title: Currency, Display: false, Editable: false
		/// </summary>
        public virtual string Currency
        {
            get
            {
				return _currency?.TrimEnd(); 
            }
            set
            {
				_currency = value.TruncateTo(10); 
				OnPropertyChanged("Currency", value);
            }
        }

		/// <summary>
		/// Product SKU Qty unit of measure
		/// </summary>
        public virtual string UOM
        {
            get
            {
				return _uom?.TrimEnd(); 
            }
            set
            {
				_uom = value.TruncateTo(50); 
				OnPropertyChanged("UOM", value);
            }
        }

		/// <summary>
		/// Claim return Qty.
		/// </summary>
        public virtual decimal TransQty
        {
            get
            {
				return _transQty; 
            }
            set
            {
				_transQty = value; 
				OnPropertyChanged("TransQty", value);
            }
        }

		/// <summary>
		/// Item P/O price.  <br> Title: Unit Price, Display: true, Editable: true
		/// </summary>
        public virtual decimal PoPrice
        {
            get
            {
				return _poPrice; 
            }
            set
            {
				_poPrice = value; 
				OnPropertyChanged("PoPrice", value);
            }
        }

		/// <summary>
		/// Item Invoice price.
		/// </summary>
        public virtual decimal Price
        {
            get
            {
				return _price; 
            }
            set
            {
				_price = value; 
				OnPropertyChanged("Price", value);
            }
        }

		/// <summary>
		/// Item total amount.
		/// </summary>
        public virtual decimal ExtAmount
        {
            get
            {
				return _extAmount; 
            }
            set
            {
				_extAmount = value; 
				OnPropertyChanged("ExtAmount", value);
            }
        }

		/// <summary>
		/// Default Tax rate for Invoice items.
		/// </summary>
        public virtual decimal TaxRate
        {
            get
            {
				return _taxRate; 
            }
            set
            {
				_taxRate = value; 
				OnPropertyChanged("TaxRate", value);
            }
        }

		/// <summary>
		/// Total Invoice tax amount (include shipping tax and misc tax)
		/// </summary>
        public virtual decimal TaxAmount
        {
            get
            {
				return _taxAmount; 
            }
            set
            {
				_taxAmount = value; 
				OnPropertyChanged("TaxAmount", value);
            }
        }

		/// <summary>
		/// Invoice level discount rate.
		/// </summary>
        public virtual decimal DiscountRate
        {
            get
            {
				return _discountRate; 
            }
            set
            {
				_discountRate = value; 
				OnPropertyChanged("DiscountRate", value);
            }
        }

		/// <summary>
		/// Item after discount price. <br> Title: Discount Price, Display: true, Editable: false
		/// </summary>
        public virtual decimal DiscountPrice
        {
            get
            {
				return _discountPrice; 
            }
            set
            {
				_discountPrice = value; 
				OnPropertyChanged("DiscountPrice", value);
            }
        }

		/// <summary>
		/// Invoice level discount amount, base on SubTotalAmount
		/// </summary>
        public virtual decimal DiscountAmount
        {
            get
            {
				return _discountAmount; 
            }
            set
            {
				_discountAmount = value; 
				OnPropertyChanged("DiscountAmount", value);
            }
        }

		/// <summary>
		/// Total shipping fee for all items
		/// </summary>
        public virtual decimal ShippingAmount
        {
            get
            {
				return _shippingAmount; 
            }
            set
            {
				_shippingAmount = value; 
				OnPropertyChanged("ShippingAmount", value);
            }
        }

		/// <summary>
		/// tax amount of shipping fee
		/// </summary>
        public virtual decimal ShippingTaxAmount
        {
            get
            {
				return _shippingTaxAmount; 
            }
            set
            {
				_shippingTaxAmount = value; 
				OnPropertyChanged("ShippingTaxAmount", value);
            }
        }

		/// <summary>
		/// Invoice handling charge
		/// </summary>
        public virtual decimal MiscAmount
        {
            get
            {
				return _miscAmount; 
            }
            set
            {
				_miscAmount = value; 
				OnPropertyChanged("MiscAmount", value);
            }
        }

		/// <summary>
		/// tax amount of handling charge
		/// </summary>
        public virtual decimal MiscTaxAmount
        {
            get
            {
				return _miscTaxAmount; 
            }
            set
            {
				_miscTaxAmount = value; 
				OnPropertyChanged("MiscTaxAmount", value);
            }
        }

		/// <summary>
		/// Invoice total Charg Allowance Amount
		/// </summary>
        public virtual decimal ChargeAndAllowanceAmount
        {
            get
            {
				return _chargeAndAllowanceAmount; 
            }
            set
            {
				_chargeAndAllowanceAmount = value; 
				OnPropertyChanged("ChargeAndAllowanceAmount", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Unit Cost.
		/// </summary>
        public virtual decimal BaseCost
        {
            get
            {
				return _baseCost; 
            }
            set
            {
				_baseCost = value; 
				OnPropertyChanged("BaseCost", value);
            }
        }

		/// <summary>
		/// (Ignore) Item Avg.Cost.
		/// </summary>
        public virtual decimal UnitCost
        {
            get
            {
				return _unitCost; 
            }
            set
            {
				_unitCost = value; 
				OnPropertyChanged("UnitCost", value);
            }
        }

		/// <summary>
		/// Invoice item will update inventory instock qty
		/// </summary>
        public virtual bool Stockable
        {
            get
            {
				return (_stockable == 1); 
            }
            set
            {
				_stockable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Stockable", value);
            }
        }

		/// <summary>
		/// Invoice item will add to invoice total amount
		/// </summary>
        public virtual bool IsAp
        {
            get
            {
				return (_isAp == 1); 
            }
            set
            {
				_isAp = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("IsAp", value);
            }
        }

		/// <summary>
		/// Invoice item will apply tax
		/// </summary>
        public virtual bool Taxable
        {
            get
            {
				return (_taxable == 1); 
            }
            set
            {
				_taxable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Taxable", value);
            }
        }

		/// <summary>
		/// Invoice item will apply tax
		/// </summary>
        public virtual bool Costable
        {
            get
            {
				return (_costable == 1); 
            }
            set
            {
				_costable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Costable", value);
            }
        }

		/// <summary>
		/// (Readonly) Last update date time. <br> Title: Update At, Display: true, Editable: false
		/// </summary>
        public virtual DateTime UpdateDateUtc
        {
            get
            {
				return _updateDateUtc; 
            }
            set
            {
				_updateDateUtc = value.ToSqlSafeValue(); 
				OnPropertyChanged("UpdateDateUtc", value);
            }
        }

		/// <summary>
		/// (Readonly) User who created this transaction. <br> Title: Created By, Display: true, Editable: false
		/// </summary>
        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }

		/// <summary>
		/// (Readonly) Last updated user. <br> Title: Update By, Display: true, Editable: false
		/// </summary>
        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
				OnPropertyChanged("UpdateBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private PoTransactionData Parent { get; set; }
		public PoTransactionData GetParent() => Parent;
		public PoTransactionItems SetParent(PoTransactionData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			TransItemUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override PoTransactionItems Clear()
        {
            base.Clear();
			_transItemUuid = String.Empty; 
			_transUuid = String.Empty; 
			_seq = default(int); 
			_poUuid = String.Empty; 
			_poNum = String.Empty; 
			_poItemUuid = String.Empty; 
			_itemType = default(int); 
			_itemStatus = default(int); 
			_itemDate = new DateTime().MinValueSql(); 
			_itemTime = new TimeSpan().MinValueSql(); 
			_productUuid = String.Empty; 
			_inventoryUuid = String.Empty; 
			_sku = String.Empty; 
			_warehouseUuid = String.Empty; 
			_warehouseCode = String.Empty; 
			_lotNum = String.Empty; 
			_lotDescription = String.Empty; 
			_lotInDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_lotExpDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_description = String.Empty; 
			_notes = String.Empty; 
			_currency = String.Empty; 
			_uom = String.Empty; 
			_transQty = default(decimal); 
			_poPrice = default(decimal); 
			_price = default(decimal); 
			_extAmount = default(decimal); 
			_taxRate = default(decimal); 
			_taxAmount = default(decimal); 
			_discountRate = default(decimal); 
			_discountPrice = default(decimal); 
			_discountAmount = default(decimal); 
			_shippingAmount = default(decimal); 
			_shippingTaxAmount = default(decimal); 
			_miscAmount = default(decimal); 
			_miscTaxAmount = default(decimal); 
			_chargeAndAllowanceAmount = default(decimal); 
			_baseCost = default(decimal); 
			_unitCost = default(decimal); 
			_stockable = default(byte); 
			_isAp = default(byte); 
			_taxable = default(byte); 
			_costable = default(byte); 
			_updateDateUtc = new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public override PoTransactionItems CheckIntegrity()
        {
            CheckUniqueId();
            CheckIntegrityOthers();
            return this;
        }

        public virtual PoTransactionItems ClearChildren()
        {
            return this;
        }

        public virtual PoTransactionItems NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(PoTransactionItems data)
        {
            if (data is null) return;
            return;
        }


		public override PoTransactionItems ConvertDbFieldsToData()
		{
			base.ConvertDbFieldsToData();
			return this;
		}
		public override PoTransactionItems ConvertDataFieldsToDb()
		{
			base.ConvertDataFieldsToDb();
			UpdateDateUtc =DateTime.UtcNow;
			return this;
		}

        #endregion Methods - Generated 
    }
}



