

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Request and Response payload object
    /// </summary>
    [Serializable()]
    public class PoReceivePayload : PoTransactionPayload
    {
        // #region Set transtype to payment
        // /// <summary>
        // /// always load transtype=TransTypeEnum.Payment for all query
        // /// </summary>
        // [JsonIgnore]
        // public override int TransType => (int)TransTypeEnum.Payment;
        //
        // #endregion 

        public PoHeaderDto PoHeader { get; set; }




        #region summary service 

        [OpenApiPropertyDescription("(Response Data) summary result which load filter")]
        [JsonConverter(typeof(StringBuilderConverter))]
        public StringBuilder PoReceiveSummary { get; set; }
        [JsonIgnore] public virtual bool HasPoReceiveSummary => PoReceiveSummary != null;
        public bool ShouldSerializePoReceiveSummary() => HasPoReceiveSummary;
        #endregion

        /// <summary>
        /// Delegate function to load request parameter to payload property.
        /// </summary>
        public override IDictionary<string, Action<string>> GetOtherParameters()
        {
            return new Dictionary<string, Action<string>>
            {
                { "applyInvoices", val => ApplyInvoices = val.JsonToObject<List<ApplyInvoice>>()}
            };
        }


        #region multiple payment list

        /// <summary>
        /// (Request Parameter) Array of uuid to load multiple Invoice dto data.
        /// </summary>
        [OpenApiPropertyDescription("(Request Parameter) Array of applyInvoice  to add multi payments")]
        public IList<ApplyInvoice> ApplyInvoices { get; set; } = new List<ApplyInvoice>();
        [JsonIgnore]
        public virtual bool HasApplyInvoices => ApplyInvoices != null && ApplyInvoices.Count > 0;
        public bool ShouldSerializeApplyInvoices() => HasApplyInvoices;

        #endregion



        /// <summary>
        /// (Response Data) List result count which load filter and paging.
        /// </summary>
        public int PoReceiveListCount { get; set; }
        [JsonIgnore] public virtual bool HasPoReceiveListCount => PoReceiveListCount > 0;
        public bool ShouldSerializePoReceiveListCount() => HasPoReceiveListCount;

        /// <summary>
        /// (Response Data) List result which load filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response Data) List summary result which load filter.")]
        [JsonConverter(typeof(StringBuilderConverter))]
        public StringBuilder PoReceiveListSummary { get; set; }
        [JsonIgnore] public virtual bool HasPoReceiveListSummary => PoReceiveListSummary != null && PoReceiveListSummary.Length > 0;
        public bool ShouldSerializePoReceiveListSummary() => HasPoReceiveListSummary;

        #region List

        public IList<WMSPoReceiveItem> WMSPoReceiveItems { get; set; }

        [JsonIgnore]
        public virtual bool HasWMSPoReceiveItems => WMSPoReceiveItems != null && WMSPoReceiveItems.Count > 0;
        public bool ShouldSerializeWMSPoReceiveItems() => HasWMSPoReceiveItems;

        #endregion
    }
}

