              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a PurchaseOrderData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class PurchaseOrderData : StructureRepository<PurchaseOrderData>
    {
        public PurchaseOrderData() : base() {}
        public PurchaseOrderData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => PoHeader.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => PoHeader.UniqueId;
        
		 [JsonIgnore, XmlIgnore] 
		public static string PoHeaderTable ="PoHeader ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string PoHeaderInfoTable ="PoHeaderInfo ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string PoHeaderAttributesTable ="PoHeaderAttributes ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string PoItemsTable ="PoItems ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string PoItemsAttributesTable ="PoItemsAttributes ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string PoItemsRefTable ="PoItemsRef ";
		
        #region CRUD Methods

        public override bool Equals(PurchaseOrderData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(PurchaseOrderData other)
        {
			if (PoHeader == null && other.PoHeader != null || PoHeader != null && other.PoHeader == null) 
				return false; 
			if (PoHeader != null && other.PoHeader != null && !PoHeader.Equals(other.PoHeader)) 
				return false; 
			if (PoHeaderInfo == null && other.PoHeaderInfo != null || PoHeaderInfo != null && other.PoHeaderInfo == null) 
				return false; 
			if (PoHeaderInfo != null && other.PoHeaderInfo != null && !PoHeaderInfo.Equals(other.PoHeaderInfo)) 
				return false; 
			if (PoHeaderAttributes == null && other.PoHeaderAttributes != null || PoHeaderAttributes != null && other.PoHeaderAttributes == null) 
				return false; 
			if (PoHeaderAttributes != null && other.PoHeaderAttributes != null && !PoHeaderAttributes.Equals(other.PoHeaderAttributes)) 
				return false; 
			if (PoItems == null && other.PoItems != null || PoItems != null && other.PoItems == null) 
				return false; 
			if (PoItems != null && other.PoItems != null && !PoItems.EqualsList(other.PoItems)) 
				return false; 
			if (PoItemsAttributes == null && other.PoItemsAttributes != null || PoItemsAttributes != null && other.PoItemsAttributes == null) 
				return false; 
			if (PoItemsAttributes != null && other.PoItemsAttributes != null && !PoItemsAttributes.EqualsList(other.PoItemsAttributes)) 
				return false; 
			if (PoItemsRef == null && other.PoItemsRef != null || PoItemsRef != null && other.PoItemsRef == null) 
				return false; 
			if (PoItemsRef != null && other.PoItemsRef != null && !PoItemsRef.EqualsList(other.PoItemsRef)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override PurchaseOrderData CheckIntegrity()
        {
			if (PoHeader is null) return this; 
			PoHeader.CheckIntegrity(); 
			CheckIntegrityPoHeaderInfo(); 
			CheckIntegrityPoHeaderAttributes(); 
			CheckIntegrityPoItems(); 
			CheckIntegrityPoItemsAttributes(); 
			CheckIntegrityPoItemsRef(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			PoHeader?.Clear(); 
			PoHeaderInfo?.Clear(); 
			PoHeaderAttributes?.Clear(); 
			PoItems = new List<PoItems>(); 
			ClearPoItemsDeleted(); 
			PoItemsAttributes = new List<PoItemsAttributes>(); 
			PoItemsRef = new List<PoItemsRef>(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			PoHeader = NewPoHeader(); 
			PoHeaderInfo = NewPoHeaderInfo(); 
			PoHeaderAttributes = NewPoHeaderAttributes(); 
			PoItems = new List<PoItems>(); 
			AddPoItems(NewPoItems()); 
			PoItems.ToList().ForEach(x => x?.NewChildren()); 
			ClearPoItemsDeleted(); 
            return;
        }

        public virtual void CopyFrom(PurchaseOrderData data)
        {
			CopyPoHeaderFrom(data); 
			CopyPoHeaderInfoFrom(data); 
			CopyPoHeaderAttributesFrom(data); 
			CopyPoItemsFrom(data); 
            CheckIntegrity();
            return;
        }

        public override PurchaseOrderData Clone()
        {
			var newData = new PurchaseOrderData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.PoHeader.ClearMetaData(); 
			newData.PoHeaderInfo.ClearMetaData(); 
			newData.PoHeaderAttributes.ClearMetaData(); 
			newData.PoItems.ClearMetaData(); 
			newData.PoItemsAttributes.ClearMetaData(); 
			newData.PoItemsRef.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetPoHeader(RowNum); 
			if (obj is null) return false; 
			PoHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string PoUuid)
        {
			var obj = GetPoHeaderByPoUuid(PoUuid); 
			if (obj is null) return false; 
			PoHeader = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(PoHeader.PoUuid)) return; 
			PoHeaderInfo = GetPoHeaderInfoByPoUuid(PoHeader.PoUuid); 
			PoHeaderAttributes = GetPoHeaderAttributesByPoUuid(PoHeader.PoUuid); 
			PoItems = GetPoItemsByPoUuid(PoHeader.PoUuid); 
			PoItemsAttributes = GetPoItemsAttributesByPoUuid(PoHeader.PoUuid); 
			PoItemsRef = GetPoItemsRefByPoUuid(PoHeader.PoUuid); 
        }

        public override bool Save()
        {
			if (PoHeader is null || string.IsNullOrEmpty(PoHeader.PoUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(PoHeaderTable))
			{
				PoHeader.SetDataBaseFactory(dbFactory);
				if (!PoHeader.Save()) return false;
			}

			 if (NeedSave(PoHeaderInfoTable))
			{
				if (PoHeaderInfo != null) 
					PoHeaderInfo.SetDataBaseFactory(dbFactory)?.Save();
			}

			 if (NeedSave(PoHeaderAttributesTable))
			{
				if (PoHeaderAttributes != null) 
					PoHeaderAttributes.SetDataBaseFactory(dbFactory)?.Save();
			}

			 if (NeedSave(PoItemsTable))
			{
				if (PoItems != null) 
					PoItems.SetDataBaseFactory(dbFactory)?.Save();
				var delPoItems = _PoItemsDeleted;
				if (delPoItems != null)
					delPoItems.SetDataBaseFactory(dbFactory)?.Delete();
			}

			 if (NeedSave(PoItemsAttributesTable))
			{
				if (PoItemsAttributes != null) 
					PoItemsAttributes.SetDataBaseFactory(dbFactory)?.Save();
				var delChildrenPoItemsAttributes = PoItemsAttributesDeleted;
				if (delChildrenPoItemsAttributes != null)
					delChildrenPoItemsAttributes.SetDataBaseFactory(dbFactory)?.Delete();
			}

			 if (NeedSave(PoItemsRefTable))
			{
				if (PoItemsRef != null) 
					PoItemsRef.SetDataBaseFactory(dbFactory)?.Save();
				var delChildrenPoItemsRef = PoItemsRefDeleted;
				if (delChildrenPoItemsRef != null)
					delChildrenPoItemsRef.SetDataBaseFactory(dbFactory)?.Delete();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (PoHeader is null || string.IsNullOrEmpty(PoHeader.PoUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(PoHeaderTable))
			{
				PoHeader.SetDataBaseFactory(dbFactory); 
				if (PoHeader.Delete() <= 0) return false; 
			}
			 if (NeedDelete(PoHeaderInfoTable))
			{
				if (PoHeaderInfo != null) 
					PoHeaderInfo?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			 if (NeedDelete(PoHeaderAttributesTable))
			{
				if (PoHeaderAttributes != null) 
					PoHeaderAttributes?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			 if (NeedDelete(PoItemsTable))
			{
				if (PoItems != null) 
					PoItems?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			 if (NeedDelete(PoItemsAttributesTable))
			{
				if (PoItemsAttributes != null) 
					PoItemsAttributes?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			 if (NeedDelete(PoItemsRefTable))
			{
				if (PoItemsRef != null) 
					PoItemsRef?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetPoHeaderAsync(RowNum); 
			if (obj is null) return false; 
			PoHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string PoUuid)
        {
			var obj = await GetPoHeaderByPoUuidAsync(PoUuid); 
			if (obj is null) return false; 
			PoHeader = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(PoHeader.PoUuid)) return; 
			PoHeaderInfo = await GetPoHeaderInfoByPoUuidAsync(PoHeader.PoUuid); 
			PoHeaderAttributes = await GetPoHeaderAttributesByPoUuidAsync(PoHeader.PoUuid); 
			PoItems = await GetPoItemsByPoUuidAsync(PoHeader.PoUuid); 
			PoItemsAttributes = await GetPoItemsAttributesByPoUuidAsync(PoHeader.PoUuid); 
			PoItemsRef = await GetPoItemsRefByPoUuidAsync(PoHeader.PoUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (PoHeader is null || string.IsNullOrEmpty(PoHeader.PoUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(PoHeaderTable))
			{
				PoHeader.SetDataBaseFactory(dbFactory); 
				if (!(await PoHeader.SaveAsync())) return false; 
			}
			 if (NeedSave(PoHeaderInfoTable))
			{
				if (PoHeaderInfo != null) 
					await PoHeaderInfo.SetDataBaseFactory(dbFactory).SaveAsync(); 
			}

			 if (NeedSave(PoHeaderAttributesTable))
			{
				if (PoHeaderAttributes != null) 
					await PoHeaderAttributes.SetDataBaseFactory(dbFactory).SaveAsync(); 
			}

			 if (NeedSave(PoItemsTable))
			{
				if (PoItems != null) 
					await PoItems.SetDataBaseFactory(dbFactory).SaveAsync(); 
				var delPoItems = _PoItemsDeleted;
				if (delPoItems != null)
					await delPoItems.SetDataBaseFactory(dbFactory).DeleteAsync();
			}

			 if (NeedSave(PoItemsAttributesTable))
			{
				if (PoItemsAttributes != null) 
					await PoItemsAttributes.SetDataBaseFactory(dbFactory).SaveAsync(); 
				var delPoItemsAttributes = PoItemsAttributesDeleted;
				if (delPoItemsAttributes != null)
					await delPoItemsAttributes.SetDataBaseFactory(dbFactory).DeleteAsync();
			}

			 if (NeedSave(PoItemsRefTable))
			{
				if (PoItemsRef != null) 
					await PoItemsRef.SetDataBaseFactory(dbFactory).SaveAsync(); 
				var delPoItemsRef = PoItemsRefDeleted;
				if (delPoItemsRef != null)
					await delPoItemsRef.SetDataBaseFactory(dbFactory).DeleteAsync();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (PoHeader is null || string.IsNullOrEmpty(PoHeader.PoUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(PoHeaderTable))
			{
			PoHeader.SetDataBaseFactory(dbFactory); 
			if ((await PoHeader.DeleteAsync()) <= 0) return false; 
			}
			 if (NeedDelete(PoHeaderInfoTable))
			{
				if (PoHeaderInfo != null) 
					await PoHeaderInfo.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			 if (NeedDelete(PoHeaderAttributesTable))
			{
				if (PoHeaderAttributes != null) 
					await PoHeaderAttributes.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			 if (NeedDelete(PoItemsTable))
			{
				if (PoItems != null) 
					await PoItems.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			 if (NeedDelete(PoItemsAttributesTable))
			{
				if (PoItemsAttributes != null) 
					await PoItemsAttributes.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			 if (NeedDelete(PoItemsRefTable))
			{
				if (PoItemsRef != null) 
					await PoItemsRef.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region PoHeader - Generated 
    

        // one to one children
        protected PoHeader _PoHeader;

        public virtual PoHeader PoHeader 
        { 
            get => _PoHeader;
            set => _PoHeader = value?.SetParent(this); 
        }

        public virtual void CopyPoHeaderFrom(PurchaseOrderData data) => 
            PoHeader?.CopyFrom(data.PoHeader, new string[] {"PoUuid"});

        public virtual PoHeader NewPoHeader() => new PoHeader(dbFactory).SetParent(this);

        public virtual PoHeader GetPoHeader(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<PoHeader>(RowNum);

        public virtual PoHeader GetPoHeaderByPoUuid(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) ? null : dbFactory.GetById<PoHeader>(PoUuid);

        public virtual bool SavePoHeader(PoHeader data) =>
            (data is null) ? false : data.Save();

        public virtual int DeletePoHeader(PoHeader data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<PoHeader> GetPoHeaderAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<PoHeader>(RowNum);

        public virtual async Task<PoHeader> GetPoHeaderByPoUuidAsync(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) ? null : await dbFactory.GetByIdAsync<PoHeader>(PoUuid);

        public virtual async Task<bool> SavePoHeaderAsync(PoHeader data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeletePoHeaderAsync(PoHeader data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion PoHeader - Generated 

        #region PoHeaderInfo - Generated 
    

        // one to one children
        protected PoHeaderInfo _PoHeaderInfo;

        public virtual PoHeaderInfo PoHeaderInfo 
        { 
            get => _PoHeaderInfo;
            set => _PoHeaderInfo = value?.SetParent(this); 
        }

        public virtual void CopyPoHeaderInfoFrom(PurchaseOrderData data) => 
            PoHeaderInfo?.CopyFrom(data.PoHeaderInfo, new string[] {"PoUuid"});

        public virtual PoHeaderInfo NewPoHeaderInfo() => new PoHeaderInfo(dbFactory).SetParent(this);

        public virtual PoHeaderInfo GetPoHeaderInfo(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<PoHeaderInfo>(RowNum);

        public virtual PoHeaderInfo GetPoHeaderInfoByPoUuid(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) ? null : dbFactory.GetById<PoHeaderInfo>(PoUuid);

        public virtual bool SavePoHeaderInfo(PoHeaderInfo data) =>
            (data is null) ? false : data.Save();

        public virtual int DeletePoHeaderInfo(PoHeaderInfo data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<PoHeaderInfo> GetPoHeaderInfoAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<PoHeaderInfo>(RowNum);

        public virtual async Task<PoHeaderInfo> GetPoHeaderInfoByPoUuidAsync(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) ? null : await dbFactory.GetByIdAsync<PoHeaderInfo>(PoUuid);

        public virtual async Task<bool> SavePoHeaderInfoAsync(PoHeaderInfo data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeletePoHeaderInfoAsync(PoHeaderInfo data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual PoHeaderInfo CheckIntegrityPoHeaderInfo()
        {
            if (PoHeaderInfo is null || PoHeader is null) 
                return PoHeaderInfo;
            PoHeaderInfo.SetParent(this);
            if (PoHeaderInfo.PoUuid != PoHeader.PoUuid)
                PoHeaderInfo.PoUuid = PoHeader.PoUuid;
            PoHeaderInfo.CheckIntegrity();
            return PoHeaderInfo;
        }



        #endregion PoHeaderInfo - Generated 

        #region PoHeaderAttributes - Generated 
    

        // one to one children
        protected PoHeaderAttributes _PoHeaderAttributes;

        public virtual PoHeaderAttributes PoHeaderAttributes 
        { 
            get => _PoHeaderAttributes;
            set => _PoHeaderAttributes = value?.SetParent(this); 
        }

        public virtual void CopyPoHeaderAttributesFrom(PurchaseOrderData data) => 
            PoHeaderAttributes?.CopyFrom(data.PoHeaderAttributes, new string[] {"PoUuid"});

        public virtual PoHeaderAttributes NewPoHeaderAttributes() => new PoHeaderAttributes(dbFactory).SetParent(this);

        public virtual PoHeaderAttributes GetPoHeaderAttributes(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<PoHeaderAttributes>(RowNum);

        public virtual PoHeaderAttributes GetPoHeaderAttributesByPoUuid(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) ? null : dbFactory.GetById<PoHeaderAttributes>(PoUuid);

        public virtual bool SavePoHeaderAttributes(PoHeaderAttributes data) =>
            (data is null) ? false : data.Save();

        public virtual int DeletePoHeaderAttributes(PoHeaderAttributes data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<PoHeaderAttributes> GetPoHeaderAttributesAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<PoHeaderAttributes>(RowNum);

        public virtual async Task<PoHeaderAttributes> GetPoHeaderAttributesByPoUuidAsync(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) ? null : await dbFactory.GetByIdAsync<PoHeaderAttributes>(PoUuid);

        public virtual async Task<bool> SavePoHeaderAttributesAsync(PoHeaderAttributes data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeletePoHeaderAttributesAsync(PoHeaderAttributes data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual PoHeaderAttributes CheckIntegrityPoHeaderAttributes()
        {
            if (PoHeaderAttributes is null || PoHeader is null) 
                return PoHeaderAttributes;
            PoHeaderAttributes.SetParent(this);
            if (PoHeaderAttributes.PoUuid != PoHeader.PoUuid)
                PoHeaderAttributes.PoUuid = PoHeader.PoUuid;
            PoHeaderAttributes.CheckIntegrity();
            return PoHeaderAttributes;
        }



        #endregion PoHeaderAttributes - Generated 

        #region PoItems - Generated 
        // One to many children
        protected IList<PoItems> _PoItemsDeleted;
        public virtual PoItems AddPoItemsDeleted(PoItems del) 
        {
            if (_PoItemsDeleted is null)
                _PoItemsDeleted = new List<PoItems>();
            var lst = _PoItemsDeleted.ToList();
            lst.Add(del);
            _PoItemsDeleted = lst;
            return del;
        } 

        public virtual IList<PoItems> AddPoItemsDeleted(IList<PoItems> del) 
        {
            if (_PoItemsDeleted is null)
                _PoItemsDeleted = new List<PoItems>();
            var lst = _PoItemsDeleted.ToList();
            lst.AddRange(del);
            _PoItemsDeleted = lst;
            return del;
        } 

        public virtual void SetPoItemsDeleted(IList<PoItems> del) =>
            _PoItemsDeleted = del;

        public virtual void ClearPoItemsDeleted() =>
            _PoItemsDeleted = null;


        protected IList<PoItems> _PoItems;

        public virtual IList<PoItems> PoItems 
        { 
            get 
            {
                if (_PoItems is null)
                    _PoItems = new List<PoItems>();
                return _PoItems;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _PoItems = valueList;
                }
                else
                    _PoItems = null;
            } 
        }

        public virtual void CopyPoItemsFrom(PurchaseOrderData data) 
        {
            if  (data is null) return;
            var lstDeleted = PoItems?.CopyFrom(data.PoItems, new string[] {"PoUuid"});
            SetPoItemsDeleted(lstDeleted);
            foreach (var c in PoItems)
                c?.CopyChildrenFrom(data.PoItems?.FindByRowNum(c.RowNum));
        } 

        public virtual PoItems NewPoItems() => new PoItems(dbFactory);

        public virtual PoItems AddPoItems(PoItems obj) => 
            PoItems.AddOrReplace(obj.SetParent(this));

        public virtual PoItems RemovePoItems(PoItems obj) => 
            AddPoItemsDeleted(PoItems.RemoveObject(obj.SetParent(this)));

        public virtual IList<PoItems> GetPoItemsByPoUuid(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) 
                ? null 
                : dbFactory.Find<PoItems>("WHERE PoUuid = @0 ORDER BY Seq ", PoUuid).ToList();

        public virtual bool SavePoItems(IList<PoItems> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeletePoItems(IList<PoItems> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<PoItems>> GetPoItemsByPoUuidAsync(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) 
                ? null
                : (await dbFactory.FindAsync<PoItems>("WHERE PoUuid = @0 ORDER BY Seq ", PoUuid)).ToList();

        public virtual async Task<bool> SavePoItemsAsync(IList<PoItems> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeletePoItemsAsync(IList<PoItems> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<PoItems> CheckIntegrityPoItems()
        {
            if (PoItems is null || PoHeader is null) 
                return PoItems;
            var seq = 0;
            PoItems.RemoveEmpty();
            var children = PoItems.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.PoUuid != PoHeader.PoUuid)
                    child.PoUuid = PoHeader.PoUuid;
                seq += 1;
                child.Seq = seq;
                child.CheckIntegrity();
            }
            return children;
        }



        #endregion PoItems - Generated 

        #region PoItemsAttributes - Generated 
        // grand children
        protected IList<PoItemsAttributes> _PoItemsAttributes;

        public IList<PoItemsAttributes> PoItemsAttributes 
        { 
            get 
            {
                _PoItemsAttributes = PoItems is null ? null : PoItems.SelectMany(x => x.GetChildrenPoItemsAttributes()).ToList();
                return _PoItemsAttributes;
            } 
            set
            {
                _PoItemsAttributes = value;
                if (PoItems != null)
                    foreach (var par in PoItems)
                        par.SetChildrenPoItemsAttributes(_PoItemsAttributes);
            } 
        }

        protected IList<PoItemsAttributes> PoItemsAttributesDeleted 
        { 
            get 
            {
                var deleted = new List<PoItemsAttributes>();
                if (_PoItemsDeleted != null)
                {
                    var del = _PoItemsDeleted
                            .Where(x => x?.GetChildrenPoItemsAttributes() != null)
                            .SelectMany(x => x?.GetChildrenPoItemsAttributes());
                    if (del.Any())
                        deleted.AddRange(del.ToList());
                }
                if (PoItems != null)
                {
                    var delChildren = PoItems
                                    .Where(x => x?.GetChildrenDeletedPoItemsAttributes() != null)
                                    .SelectMany(x => x?.GetChildrenDeletedPoItemsAttributes());
                    if (delChildren.Any())
                        deleted.AddRange(delChildren.ToList());
                }
                return deleted;
            } 
        }

        public virtual IList<PoItemsAttributes> GetPoItemsAttributesByPoUuid(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) 
                ? null 
                : dbFactory.Find<PoItemsAttributes>("WHERE PoUuid = @0 ORDER BY RowNum ", PoUuid).ToList();

        public virtual bool SavePoItemsAttributes(IList<PoItemsAttributes> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeletePoItemsAttributes(IList<PoItemsAttributes> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<PoItemsAttributes>> GetPoItemsAttributesByPoUuidAsync(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) 
                ? null
                : (await dbFactory.FindAsync<PoItemsAttributes>("WHERE PoUuid = @0 ORDER BY RowNum ", PoUuid)).ToList();

        public virtual async Task<bool> SavePoItemsAttributesAsync(IList<PoItemsAttributes> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeletePoItemsAttributesAsync(IList<PoItemsAttributes> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<PoItemsAttributes> CheckIntegrityPoItemsAttributes()
        {
            if (PoItemsAttributes is null || PoHeader is null) 
                return PoItemsAttributes;
            var seq = 0;
            PoItemsAttributes.RemoveEmpty();
            var children = PoItemsAttributes.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.PoUuid != PoHeader.PoUuid)
                    child.PoUuid = PoHeader.PoUuid;
                child.CheckIntegrity();
            }
            return children;
        }


        #endregion PoItemsAttributes - Generated 

        #region PoItemsRef - Generated 
        // grand children
        protected IList<PoItemsRef> _PoItemsRef;

        public IList<PoItemsRef> PoItemsRef 
        { 
            get 
            {
                _PoItemsRef = PoItems is null ? null : PoItems.SelectMany(x => x.GetChildrenPoItemsRef()).ToList();
                return _PoItemsRef;
            } 
            set
            {
                _PoItemsRef = value;
                if (PoItems != null)
                    foreach (var par in PoItems)
                        par.SetChildrenPoItemsRef(_PoItemsRef);
            } 
        }

        protected IList<PoItemsRef> PoItemsRefDeleted 
        { 
            get 
            {
                var deleted = new List<PoItemsRef>();
                if (_PoItemsDeleted != null)
                {
                    var del = _PoItemsDeleted
                            .Where(x => x?.GetChildrenPoItemsRef() != null)
                            .SelectMany(x => x?.GetChildrenPoItemsRef());
                    if (del.Any())
                        deleted.AddRange(del.ToList());
                }
                if (PoItems != null)
                {
                    var delChildren = PoItems
                                    .Where(x => x?.GetChildrenDeletedPoItemsRef() != null)
                                    .SelectMany(x => x?.GetChildrenDeletedPoItemsRef());
                    if (delChildren.Any())
                        deleted.AddRange(delChildren.ToList());
                }
                return deleted;
            } 
        }

        public virtual IList<PoItemsRef> GetPoItemsRefByPoUuid(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) 
                ? null 
                : dbFactory.Find<PoItemsRef>("WHERE PoUuid = @0 ORDER BY RowNum ", PoUuid).ToList();

        public virtual bool SavePoItemsRef(IList<PoItemsRef> data) =>
            (data is null) ? false : data.Save();

        public virtual int DeletePoItemsRef(IList<PoItemsRef> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IList<PoItemsRef>> GetPoItemsRefByPoUuidAsync(string PoUuid) =>
            (string.IsNullOrEmpty(PoUuid)) 
                ? null
                : (await dbFactory.FindAsync<PoItemsRef>("WHERE PoUuid = @0 ORDER BY RowNum ", PoUuid)).ToList();

        public virtual async Task<bool> SavePoItemsRefAsync(IList<PoItemsRef> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeletePoItemsRefAsync(IList<PoItemsRef> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual IList<PoItemsRef> CheckIntegrityPoItemsRef()
        {
            if (PoItemsRef is null || PoHeader is null) 
                return PoItemsRef;
            var seq = 0;
            PoItemsRef.RemoveEmpty();
            var children = PoItemsRef.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.PoUuid != PoHeader.PoUuid)
                    child.PoUuid = PoHeader.PoUuid;
                child.CheckIntegrity();
            }
            return children;
        }


        #endregion PoItemsRef - Generated 


    }
}



