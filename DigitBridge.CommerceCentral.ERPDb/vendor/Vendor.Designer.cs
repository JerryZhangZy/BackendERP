

              
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a Vendor.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("Vendor")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("VendorUuid")]
    [DtoName("VendorDto")]
    public partial class Vendor : TableRepository<Vendor, long>
    {

        public Vendor() : base() {}
        public Vendor(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("DatabaseNum",SqlDbType.Int,NotNull=true)]
        private int _databaseNum;

        [Column("MasterAccountNum",SqlDbType.Int,NotNull=true)]
        private int _masterAccountNum;

        [Column("ProfileNum",SqlDbType.Int,NotNull=true)]
        private int _profileNum;

        [Column("Digit_supplier_id",SqlDbType.VarChar,IsDefault=true)]
        private string _digit_supplier_id;

        [Column("VendorUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _vendorUuid;

        [Column("VendorCode",SqlDbType.VarChar)]
        private string _vendorCode;

        [Column("VendorName",SqlDbType.NVarChar)]
        private string _vendorName;

        [Column("Contact",SqlDbType.NVarChar)]
        private string _contact;

        [Column("Phone1",SqlDbType.VarChar)]
        private string _phone1;

        [Column("Phone2",SqlDbType.VarChar)]
        private string _phone2;

        [Column("Phone3",SqlDbType.VarChar)]
        private string _phone3;

        [Column("Phone4",SqlDbType.VarChar)]
        private string _phone4;

        [Column("Email",SqlDbType.VarChar)]
        private string _email;

        [Column("VendorType",SqlDbType.Int,IsDefault=true)]
        private int? _vendorType;

        [Column("VendorStatus",SqlDbType.Int,IsDefault=true)]
        private int? _vendorStatus;

        [Column("BusinessType",SqlDbType.VarChar)]
        private string _businessType;

        [Column("PriceRule",SqlDbType.VarChar)]
        private string _priceRule;

        [Column("FirstDate",SqlDbType.Date,NotNull=true)]
        private DateTime _firstDate;

        [Column("Currency",SqlDbType.VarChar)]
        private string _currency;

        [Column("TaxRate",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _taxRate;

        [Column("DiscountRate",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _discountRate;

        [Column("ShippingCarrier",SqlDbType.VarChar)]
        private string _shippingCarrier;

        [Column("ShippingClass",SqlDbType.VarChar)]
        private string _shippingClass;

        [Column("ShippingAccount",SqlDbType.VarChar)]
        private string _shippingAccount;

        [Column("Priority",SqlDbType.VarChar)]
        private string _priority;

        [Column("Area",SqlDbType.VarChar)]
        private string _area;

        [Column("TaxId",SqlDbType.VarChar)]
        private string _taxId;

        [Column("ResaleLicense",SqlDbType.VarChar)]
        private string _resaleLicense;

        [Column("ClassCode",SqlDbType.VarChar)]
        private string _classCode;

        [Column("DepartmentCode",SqlDbType.VarChar)]
        private string _departmentCode;

        [Column("CreditAccount",SqlDbType.BigInt,IsDefault=true)]
        private long? _creditAccount;

        [Column("DebitAccount",SqlDbType.BigInt,IsDefault=true)]
        private long? _debitAccount;

        [Column("UpdateDateUtc",SqlDbType.DateTime)]
        private DateTime? _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => VendorUuid; 
		public override void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(VendorUuid)) 
				VendorUuid = Guid.NewGuid().ToString(); 
		}
		/// <summary>
		/// Each database has its own default value.
		/// </summary>
        public virtual int DatabaseNum
        {
            get
            {
				return _databaseNum; 
            }
            set
            {
				_databaseNum = value; 
				OnPropertyChanged("DatabaseNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual int MasterAccountNum
        {
            get
            {
				return _masterAccountNum; 
            }
            set
            {
				_masterAccountNum = value; 
				OnPropertyChanged("MasterAccountNum", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual int ProfileNum
        {
            get
            {
				return _profileNum; 
            }
            set
            {
				_profileNum = value; 
				OnPropertyChanged("ProfileNum", value);
            }
        }

		/// <summary>
		/// Digit bridge supplier_id
		/// </summary>
        public virtual string Digit_supplier_id
        {
            get
            {
				if (!AllowNull && _digit_supplier_id is null) 
					_digit_supplier_id = String.Empty; 
				return _digit_supplier_id?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_digit_supplier_id = value.TruncateTo(50); 
					OnPropertyChanged("Digit_supplier_id", value);
				}
            }
        }

		/// <summary>
		/// Global Unique Guid for Vendor
		/// </summary>
        public virtual string VendorUuid
        {
            get
            {
				return _vendorUuid?.TrimEnd(); 
            }
            set
            {
				_vendorUuid = value.TruncateTo(50); 
				OnPropertyChanged("VendorUuid", value);
            }
        }

		/// <summary>
		/// Vendor readable number, DatabaseNum + VendorCode is DigitBridgeVendorCode, which is global unique
		/// </summary>
        public virtual string VendorCode
        {
            get
            {
				if (!AllowNull && _vendorCode is null) 
					_vendorCode = String.Empty; 
				return _vendorCode?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_vendorCode = value.TruncateTo(50); 
					OnPropertyChanged("VendorCode", value);
				}
            }
        }

		/// <summary>
		/// Vendor name
		/// </summary>
        public virtual string VendorName
        {
            get
            {
				if (!AllowNull && _vendorName is null) 
					_vendorName = String.Empty; 
				return _vendorName?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_vendorName = value.TruncateTo(200); 
					OnPropertyChanged("VendorName", value);
				}
            }
        }

		/// <summary>
		/// Vendor contact person
		/// </summary>
        public virtual string Contact
        {
            get
            {
				if (!AllowNull && _contact is null) 
					_contact = String.Empty; 
				return _contact?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_contact = value.TruncateTo(200); 
					OnPropertyChanged("Contact", value);
				}
            }
        }

		/// <summary>
		/// Vendor phone 1
		/// </summary>
        public virtual string Phone1
        {
            get
            {
				if (!AllowNull && _phone1 is null) 
					_phone1 = String.Empty; 
				return _phone1?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_phone1 = value.TruncateTo(50); 
					OnPropertyChanged("Phone1", value);
				}
            }
        }

		/// <summary>
		/// Vendor phone 2
		/// </summary>
        public virtual string Phone2
        {
            get
            {
				if (!AllowNull && _phone2 is null) 
					_phone2 = String.Empty; 
				return _phone2?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_phone2 = value.TruncateTo(50); 
					OnPropertyChanged("Phone2", value);
				}
            }
        }

		/// <summary>
		/// Vendor phone 3
		/// </summary>
        public virtual string Phone3
        {
            get
            {
				if (!AllowNull && _phone3 is null) 
					_phone3 = String.Empty; 
				return _phone3?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_phone3 = value.TruncateTo(50); 
					OnPropertyChanged("Phone3", value);
				}
            }
        }

		/// <summary>
		/// Vendor phone 4
		/// </summary>
        public virtual string Phone4
        {
            get
            {
				if (!AllowNull && _phone4 is null) 
					_phone4 = String.Empty; 
				return _phone4?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_phone4 = value.TruncateTo(50); 
					OnPropertyChanged("Phone4", value);
				}
            }
        }

		/// <summary>
		/// Vendor email
		/// </summary>
        public virtual string Email
        {
            get
            {
				if (!AllowNull && _email is null) 
					_email = String.Empty; 
				return _email?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_email = value.TruncateTo(200); 
					OnPropertyChanged("Email", value);
				}
            }
        }

		/// <summary>
		/// Vendor type
		/// </summary>
        public virtual int? VendorType
        {
            get
            {
				if (!AllowNull && _vendorType is null) 
					_vendorType = default(int); 
				return _vendorType; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_vendorType = value; 
					OnPropertyChanged("VendorType", value);
				}
            }
        }

		/// <summary>
		/// Vendor status
		/// </summary>
        public virtual int? VendorStatus
        {
            get
            {
				if (!AllowNull && _vendorStatus is null) 
					_vendorStatus = default(int); 
				return _vendorStatus; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_vendorStatus = value; 
					OnPropertyChanged("VendorStatus", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string BusinessType
        {
            get
            {
				if (!AllowNull && _businessType is null) 
					_businessType = String.Empty; 
				return _businessType?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_businessType = value.TruncateTo(50); 
					OnPropertyChanged("BusinessType", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string PriceRule
        {
            get
            {
				if (!AllowNull && _priceRule is null) 
					_priceRule = String.Empty; 
				return _priceRule?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_priceRule = value.TruncateTo(50); 
					OnPropertyChanged("PriceRule", value);
				}
            }
        }

		/// <summary>
		/// Vendor create date
		/// </summary>
        public virtual DateTime FirstDate
        {
            get
            {
				return _firstDate; 
            }
            set
            {
				_firstDate = value.Date.ToSqlSafeValue(); 
				OnPropertyChanged("FirstDate", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string Currency
        {
            get
            {
				if (!AllowNull && _currency is null) 
					_currency = String.Empty; 
				return _currency?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_currency = value.TruncateTo(10); 
					OnPropertyChanged("Currency", value);
				}
            }
        }

		/// <summary>
		/// Default Tax rate
		/// </summary>
        public virtual decimal? TaxRate
        {
            get
            {
				if (!AllowNull && _taxRate is null) 
					_taxRate = default(decimal); 
				return _taxRate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_taxRate = value; 
					OnPropertyChanged("TaxRate", value);
				}
            }
        }

		/// <summary>
		/// Vendor default discount rate.
		/// </summary>
        public virtual decimal? DiscountRate
        {
            get
            {
				if (!AllowNull && _discountRate is null) 
					_discountRate = default(decimal); 
				return _discountRate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_discountRate = value; 
					OnPropertyChanged("DiscountRate", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShippingCarrier
        {
            get
            {
				if (!AllowNull && _shippingCarrier is null) 
					_shippingCarrier = String.Empty; 
				return _shippingCarrier?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shippingCarrier = value.TruncateTo(50); 
					OnPropertyChanged("ShippingCarrier", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShippingClass
        {
            get
            {
				if (!AllowNull && _shippingClass is null) 
					_shippingClass = String.Empty; 
				return _shippingClass?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shippingClass = value.TruncateTo(50); 
					OnPropertyChanged("ShippingClass", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ShippingAccount
        {
            get
            {
				if (!AllowNull && _shippingAccount is null) 
					_shippingAccount = String.Empty; 
				return _shippingAccount?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shippingAccount = value.TruncateTo(50); 
					OnPropertyChanged("ShippingAccount", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string Priority
        {
            get
            {
				if (!AllowNull && _priority is null) 
					_priority = String.Empty; 
				return _priority?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_priority = value.TruncateTo(10); 
					OnPropertyChanged("Priority", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string Area
        {
            get
            {
				if (!AllowNull && _area is null) 
					_area = String.Empty; 
				return _area?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_area = value.TruncateTo(20); 
					OnPropertyChanged("Area", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string TaxId
        {
            get
            {
				if (!AllowNull && _taxId is null) 
					_taxId = String.Empty; 
				return _taxId?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_taxId = value.TruncateTo(50); 
					OnPropertyChanged("TaxId", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ResaleLicense
        {
            get
            {
				if (!AllowNull && _resaleLicense is null) 
					_resaleLicense = String.Empty; 
				return _resaleLicense?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_resaleLicense = value.TruncateTo(50); 
					OnPropertyChanged("ResaleLicense", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string ClassCode
        {
            get
            {
				if (!AllowNull && _classCode is null) 
					_classCode = String.Empty; 
				return _classCode?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_classCode = value.TruncateTo(50); 
					OnPropertyChanged("ClassCode", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string DepartmentCode
        {
            get
            {
				if (!AllowNull && _departmentCode is null) 
					_departmentCode = String.Empty; 
				return _departmentCode?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_departmentCode = value.TruncateTo(50); 
					OnPropertyChanged("DepartmentCode", value);
				}
            }
        }

		/// <summary>
		/// G/L Credit account
		/// </summary>
        public virtual long? CreditAccount
        {
            get
            {
				if (!AllowNull && _creditAccount is null) 
					_creditAccount = default(long); 
				return _creditAccount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_creditAccount = value; 
					OnPropertyChanged("CreditAccount", value);
				}
            }
        }

		/// <summary>
		/// G/L Debit account
		/// </summary>
        public virtual long? DebitAccount
        {
            get
            {
				if (!AllowNull && _debitAccount is null) 
					_debitAccount = default(long); 
				return _debitAccount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_debitAccount = value; 
					OnPropertyChanged("DebitAccount", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual DateTime? UpdateDateUtc
        {
            get
            {
				if (!AllowNull && _updateDateUtc is null) 
					_updateDateUtc = new DateTime().MinValueSql(); 
				return _updateDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_updateDateUtc = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); 
					OnPropertyChanged("UpdateDateUtc", value);
				}
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }

		/// <summary>
		/// 
		/// </summary>
        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
				OnPropertyChanged("UpdateBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[JsonIgnore, XmlIgnore, IgnoreCompare]
		private VendorData Parent { get; set; }
		public VendorData GetParent() => Parent;
		public Vendor SetParent(VendorData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent


        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			VendorUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override Vendor Clear()
        {
            base.Clear();
			_databaseNum = default(int); 
			_masterAccountNum = default(int); 
			_profileNum = default(int); 
			_digit_supplier_id = AllowNull ? (string)null : String.Empty; 
			_vendorUuid = String.Empty; 
			_vendorCode = AllowNull ? (string)null : String.Empty; 
			_vendorName = AllowNull ? (string)null : String.Empty; 
			_contact = AllowNull ? (string)null : String.Empty; 
			_phone1 = AllowNull ? (string)null : String.Empty; 
			_phone2 = AllowNull ? (string)null : String.Empty; 
			_phone3 = AllowNull ? (string)null : String.Empty; 
			_phone4 = AllowNull ? (string)null : String.Empty; 
			_email = AllowNull ? (string)null : String.Empty; 
			_vendorType = AllowNull ? (int?)null : default(int); 
			_vendorStatus = AllowNull ? (int?)null : default(int); 
			_businessType = AllowNull ? (string)null : String.Empty; 
			_priceRule = AllowNull ? (string)null : String.Empty; 
			_firstDate = new DateTime().MinValueSql(); 
			_currency = AllowNull ? (string)null : String.Empty; 
			_taxRate = AllowNull ? (decimal?)null : default(decimal); 
			_discountRate = AllowNull ? (decimal?)null : default(decimal); 
			_shippingCarrier = AllowNull ? (string)null : String.Empty; 
			_shippingClass = AllowNull ? (string)null : String.Empty; 
			_shippingAccount = AllowNull ? (string)null : String.Empty; 
			_priority = AllowNull ? (string)null : String.Empty; 
			_area = AllowNull ? (string)null : String.Empty; 
			_taxId = AllowNull ? (string)null : String.Empty; 
			_resaleLicense = AllowNull ? (string)null : String.Empty; 
			_classCode = AllowNull ? (string)null : String.Empty; 
			_departmentCode = AllowNull ? (string)null : String.Empty; 
			_creditAccount = AllowNull ? (long?)null : default(long); 
			_debitAccount = AllowNull ? (long?)null : default(long); 
			_updateDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public override Vendor CheckIntegrity()
        {
            CheckUniqueId();
            CheckIntegrityOthers();
            return this;
        }

        public virtual Vendor ClearChildren()
        {
            return this;
        }

        public virtual Vendor NewChildren()
        {
            return this;
        }

        public virtual void CopyChildrenFrom(Vendor data)
        {
            if (data is null) return;
            return;
        }


		public override Vendor ConvertDbFieldsToData()
		{
			base.ConvertDbFieldsToData();
			return this;
		}
		public override Vendor ConvertDataFieldsToDb()
		{
			base.ConvertDataFieldsToDb();
			UpdateDateUtc =DateTime.UtcNow;
			return this;
		}

        #endregion Methods - Generated 
    }
}



