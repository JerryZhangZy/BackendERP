    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a VendorDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class VendorDataDtoMapperDefault : IDtoMapper<VendorData, VendorDataDto> 
    {
        #region read from dto to data

        public virtual VendorData ReadDto(VendorData data, VendorDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new VendorData();
                data.New();
            }

			if (dto.Vendor != null)
			{
				if (data.Vendor is null)
					data.Vendor = data.NewVendor();
				ReadVendor(data.Vendor, dto.Vendor);
			}
			if (dto.VendorAddress != null)
			{
				if (data.VendorAddress is null)
					data.VendorAddress = new List<VendorAddress>();
				var deleted = ReadVendorAddress(data.VendorAddress, dto.VendorAddress);
				data.SetVendorAddressDeleted(deleted);
			}
			if (dto.VendorAttributes != null)
			{
				if (data.VendorAttributes is null)
					data.VendorAttributes = data.NewVendorAttributes();
				ReadVendorAttributes(data.VendorAttributes, dto.VendorAttributes);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadVendor(Vendor data, VendorDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasDigit_supplier_id) data.Digit_supplier_id = dto.Digit_supplier_id;
			if (dto.HasVendorUuid) data.VendorUuid = dto.VendorUuid;
			if (dto.HasVendorCode) data.VendorCode = dto.VendorCode;
			if (dto.HasVendorName) data.VendorName = dto.VendorName;
			if (dto.HasContact) data.Contact = dto.Contact;
			if (dto.HasPhone1) data.Phone1 = dto.Phone1;
			if (dto.HasPhone2) data.Phone2 = dto.Phone2;
			if (dto.HasPhone3) data.Phone3 = dto.Phone3;
			if (dto.HasPhone4) data.Phone4 = dto.Phone4;
			if (dto.HasEmail) data.Email = dto.Email;
			if (dto.HasVendorType) data.VendorType = dto.VendorType;
			if (dto.HasVendorStatus) data.VendorStatus = dto.VendorStatus;
			if (dto.HasBusinessType) data.BusinessType = dto.BusinessType;
			if (dto.HasPriceRule) data.PriceRule = dto.PriceRule;
			if (dto.HasFirstDate) data.FirstDate = dto.FirstDate.ToDateTime();
			if (dto.HasCurrency) data.Currency = dto.Currency;
			if (dto.HasTaxRate) data.TaxRate = dto.TaxRate;
			if (dto.HasDiscountRate) data.DiscountRate = dto.DiscountRate;
			if (dto.HasShippingCarrier) data.ShippingCarrier = dto.ShippingCarrier;
			if (dto.HasShippingClass) data.ShippingClass = dto.ShippingClass;
			if (dto.HasShippingAccount) data.ShippingAccount = dto.ShippingAccount;
			if (dto.HasPriority) data.Priority = dto.Priority;
			if (dto.HasArea) data.Area = dto.Area;
			if (dto.HasTaxId) data.TaxId = dto.TaxId;
			if (dto.HasResaleLicense) data.ResaleLicense = dto.ResaleLicense;
			if (dto.HasClassCode) data.ClassCode = dto.ClassCode;
			if (dto.HasDepartmentCode) data.DepartmentCode = dto.DepartmentCode;
			if (dto.HasCreditAccount) data.CreditAccount = dto.CreditAccount;
			if (dto.HasDebitAccount) data.DebitAccount = dto.DebitAccount;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}


		protected virtual void ReadVendorAddress(VendorAddress data, VendorAddressDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasAddressUuid) data.AddressUuid = dto.AddressUuid;
			if (dto.HasVendorUuid) data.VendorUuid = dto.VendorUuid;
			if (dto.HasAddressCode) data.AddressCode = dto.AddressCode;
			if (dto.HasAddressType) data.AddressType = dto.AddressType.ToInt();
			if (dto.HasDescription) data.Description = dto.Description;
			if (dto.HasName) data.Name = dto.Name;
			if (dto.HasFirstName) data.FirstName = dto.FirstName;
			if (dto.HasLastName) data.LastName = dto.LastName;
			if (dto.HasSuffix) data.Suffix = dto.Suffix;
			if (dto.HasCompany) data.Company = dto.Company;
			if (dto.HasCompanyJobTitle) data.CompanyJobTitle = dto.CompanyJobTitle;
			if (dto.HasAttention) data.Attention = dto.Attention;
			if (dto.HasAddressLine1) data.AddressLine1 = dto.AddressLine1;
			if (dto.HasAddressLine2) data.AddressLine2 = dto.AddressLine2;
			if (dto.HasAddressLine3) data.AddressLine3 = dto.AddressLine3;
			if (dto.HasCity) data.City = dto.City;
			if (dto.HasState) data.State = dto.State;
			if (dto.HasStateFullName) data.StateFullName = dto.StateFullName;
			if (dto.HasPostalCode) data.PostalCode = dto.PostalCode;
			if (dto.HasPostalCodeExt) data.PostalCodeExt = dto.PostalCodeExt;
			if (dto.HasCounty) data.County = dto.County;
			if (dto.HasCountry) data.Country = dto.Country;
			if (dto.HasEmail) data.Email = dto.Email;
			if (dto.HasDaytimePhone) data.DaytimePhone = dto.DaytimePhone;
			if (dto.HasNightPhone) data.NightPhone = dto.NightPhone;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}

		protected virtual IList<VendorAddress> ReadVendorAddress(IList<VendorAddress> data, IList<VendorAddressDto> dto)
		{
			if (data is null || dto is null)
				return null;
			var lstOrig = new List<VendorAddress>(data.Where(x => x != null).ToList());
			data.Clear();
			foreach (var itemDto in dto)
			{
				if (itemDto == null) continue;

				var obj = itemDto.RowNum > 0
					? lstOrig.Find(x => x.RowNum == itemDto.RowNum)
					: lstOrig.Find(x => x.AddressUuid == itemDto.AddressUuid);
				if (obj is null)
					obj = new VendorAddress().SetAllowNull(false);
				else
					lstOrig.Remove(obj);

				data.Add(obj);

				ReadVendorAddress(obj, itemDto);

			}
			return lstOrig;
		}


		protected virtual void ReadVendorAttributes(VendorAttributes data, VendorAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasVendorUuid) data.VendorUuid = dto.VendorUuid;
			if (dto.HasFields) data.Fields.LoadJson(dto.Fields);

			#endregion read properties

			data.CheckIntegrity();
			return;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual VendorDataDto WriteDto(VendorData data, VendorDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new VendorDataDto();

            data.CheckIntegrity();

			if (data.Vendor != null)
			{
				dto.Vendor = new VendorDto();
				WriteVendor(data.Vendor, dto.Vendor);
			}
			if (data.VendorAddress != null)
			{
				dto.VendorAddress = new List<VendorAddressDto>();
				WriteVendorAddress(data.VendorAddress, dto.VendorAddress);
			}
			if (data.VendorAttributes != null)
			{
				dto.VendorAttributes = new VendorAttributesDto();
				WriteVendorAttributes(data.VendorAttributes, dto.VendorAttributes);
			}
            return dto;
        }

		protected virtual void WriteVendor(Vendor data, VendorDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.Digit_supplier_id = data.Digit_supplier_id;
			dto.VendorUuid = data.VendorUuid;
			dto.VendorCode = data.VendorCode;
			dto.VendorName = data.VendorName;
			dto.Contact = data.Contact;
			dto.Phone1 = data.Phone1;
			dto.Phone2 = data.Phone2;
			dto.Phone3 = data.Phone3;
			dto.Phone4 = data.Phone4;
			dto.Email = data.Email;
			dto.VendorType = data.VendorType;
			dto.VendorStatus = data.VendorStatus;
			dto.BusinessType = data.BusinessType;
			dto.PriceRule = data.PriceRule;
			dto.FirstDate = data.FirstDate;
			dto.Currency = data.Currency;
			dto.TaxRate = data.TaxRate;
			dto.DiscountRate = data.DiscountRate;
			dto.ShippingCarrier = data.ShippingCarrier;
			dto.ShippingClass = data.ShippingClass;
			dto.ShippingAccount = data.ShippingAccount;
			dto.Priority = data.Priority;
			dto.Area = data.Area;
			dto.TaxId = data.TaxId;
			dto.ResaleLicense = data.ResaleLicense;
			dto.ClassCode = data.ClassCode;
			dto.DepartmentCode = data.DepartmentCode;
			dto.CreditAccount = data.CreditAccount;
			dto.DebitAccount = data.DebitAccount;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}

		protected virtual void WriteVendorAddress(VendorAddress data, VendorAddressDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.AddressUuid = data.AddressUuid;
			dto.VendorUuid = data.VendorUuid;
			dto.AddressCode = data.AddressCode;
			dto.AddressType = data.AddressType;
			dto.Description = data.Description;
			dto.Name = data.Name;
			dto.FirstName = data.FirstName;
			dto.LastName = data.LastName;
			dto.Suffix = data.Suffix;
			dto.Company = data.Company;
			dto.CompanyJobTitle = data.CompanyJobTitle;
			dto.Attention = data.Attention;
			dto.AddressLine1 = data.AddressLine1;
			dto.AddressLine2 = data.AddressLine2;
			dto.AddressLine3 = data.AddressLine3;
			dto.City = data.City;
			dto.State = data.State;
			dto.StateFullName = data.StateFullName;
			dto.PostalCode = data.PostalCode;
			dto.PostalCodeExt = data.PostalCodeExt;
			dto.County = data.County;
			dto.Country = data.Country;
			dto.Email = data.Email;
			dto.DaytimePhone = data.DaytimePhone;
			dto.NightPhone = data.NightPhone;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}
		protected virtual void WriteVendorAddress(IList<VendorAddress> data, IList<VendorAddressDto> dto)
		{
			if (data is null || dto is null)
				return;

			dto.Clear();

			#region write all list items and properties with null

			foreach (var itemData in data)
			{
				if (itemData is null) continue;
				var obj = new VendorAddressDto();
				dto.Add(obj);
				WriteVendorAddress(itemData, obj);
			}

			#endregion write all list items and properties with null
			return;
		}


		protected virtual void WriteVendorAttributes(VendorAttributes data, VendorAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.VendorUuid = data.VendorUuid;
			dto.Fields = data.Fields.ToJson();

			#endregion read properties

			return;
		}


        #endregion write to dto from data

    }
}



