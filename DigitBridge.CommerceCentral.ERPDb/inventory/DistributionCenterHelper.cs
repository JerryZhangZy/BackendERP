
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a DistributionCenter SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you want re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class DistributionCenterHelper
    {
        public static readonly string TableName = "DistributionCenter";
        public static readonly string TableAllies = "dcf";

        public static string From(string TableAllies = null) => $"FROM {TableName} {TableAllies ?? TableAllies} ";
        public static string InnerJoin(string TableAllies = null) => $"INNER JOIN {TableName} {TableAllies ?? TableAllies} ";
        public static string LeftJoin(string TableAllies = null) => $"LEFT JOIN {TableName} {TableAllies ?? TableAllies} ";

        #region - static SQL fileds statement

        public static string DatabaseNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DatabaseNum AS {name ?? "DatabaseNum".ToCamelCase(camelCase)} ";
        public static string DistributionCenterNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DistributionCenterNum AS {name ?? "DistributionCenterNum".ToCamelCase(camelCase)} ";
        public static string MasterAccountNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.MasterAccountNum AS {name ?? "MasterAccountNum".ToCamelCase(camelCase)} ";
        public static string ProfileNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ProfileNum AS {name ?? "ProfileNum".ToCamelCase(camelCase)} ";
        public static string DistributionCenterName(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.DistributionCenterName) AS {name ?? "DistributionCenterName".ToCamelCase(camelCase)} ";
        public static string DistributionCenterCode(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.DistributionCenterCode) AS {name ?? "DistributionCenterCode".ToCamelCase(camelCase)} ";
        public static string DistributionCenterType(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DistributionCenterType AS {name ?? "DistributionCenterType".ToCamelCase(camelCase)} ";
        public static string Status(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.Status AS {name ?? "Status".ToCamelCase(camelCase)} ";
        public static string DefaultLevel(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DefaultLevel AS {name ?? "DefaultLevel".ToCamelCase(camelCase)} ";
        public static string AddressLine1(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.AddressLine1) AS {name ?? "AddressLine1".ToCamelCase(camelCase)} ";
        public static string AddressLine2(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.AddressLine2) AS {name ?? "AddressLine2".ToCamelCase(camelCase)} ";
        public static string City(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.City) AS {name ?? "City".ToCamelCase(camelCase)} ";
        public static string State(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.State) AS {name ?? "State".ToCamelCase(camelCase)} ";
        public static string ZipCode(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ZipCode) AS {name ?? "ZipCode".ToCamelCase(camelCase)} ";
        public static string CompanyName(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.CompanyName) AS {name ?? "CompanyName".ToCamelCase(camelCase)} ";
        public static string ContactName(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ContactName) AS {name ?? "ContactName".ToCamelCase(camelCase)} ";
        public static string ContactEmail(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ContactEmail) AS {name ?? "ContactEmail".ToCamelCase(camelCase)} ";
        public static string ContactPhone(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ContactPhone) AS {name ?? "ContactPhone".ToCamelCase(camelCase)} ";
        public static string MainPhone(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.MainPhone) AS {name ?? "MainPhone".ToCamelCase(camelCase)} ";
        public static string Fax(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.Fax) AS {name ?? "Fax".ToCamelCase(camelCase)} ";
        public static string Website(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.Website) AS {name ?? "Website".ToCamelCase(camelCase)} ";
        public static string Email(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.Email) AS {name ?? "Email".ToCamelCase(camelCase)} ";
        public static string BusinessHours(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.BusinessHours) AS {name ?? "BusinessHours".ToCamelCase(camelCase)} ";
        public static string Notes(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.Notes) AS {name ?? "Notes".ToCamelCase(camelCase)} ";
        public static string Priority(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.Priority AS {name ?? "Priority".ToCamelCase(camelCase)} ";
        public static string RowNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.RowNum AS {name ?? "RowNum".ToCamelCase(camelCase)} ";
        public static string DistributionCenterUuid(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.DistributionCenterUuid) AS {name ?? "DistributionCenterUuid".ToCamelCase(camelCase)} ";
        public static string EnterDateUtc(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.EnterDateUtc AS {name ?? "EnterDateUtc".ToCamelCase(camelCase)} ";
        public static string DigitBridgeGuid(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DigitBridgeGuid AS {name ?? "DigitBridgeGuid".ToCamelCase(camelCase)} ";

        #endregion - static SQL fileds statement

        public static string SelectAll(string tableAllies = null) 
        {
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : $"{tableAllies.TrimEnd()}.";
            return $@"
{allies}DatabaseNum AS DatabaseNum,
{allies}DistributionCenterNum AS DistributionCenterNum,
{allies}MasterAccountNum AS MasterAccountNum,
{allies}ProfileNum AS ProfileNum,
RTRIM({allies}DistributionCenterName) AS DistributionCenterName,
RTRIM({allies}DistributionCenterCode) AS DistributionCenterCode,
{allies}DistributionCenterType AS DistributionCenterType,
{allies}Status AS Status,
{allies}DefaultLevel AS DefaultLevel,
RTRIM({allies}AddressLine1) AS AddressLine1,
RTRIM({allies}AddressLine2) AS AddressLine2,
RTRIM({allies}City) AS City,
RTRIM({allies}State) AS State,
RTRIM({allies}ZipCode) AS ZipCode,
RTRIM({allies}CompanyName) AS CompanyName,
RTRIM({allies}ContactName) AS ContactName,
RTRIM({allies}ContactEmail) AS ContactEmail,
RTRIM({allies}ContactPhone) AS ContactPhone,
RTRIM({allies}MainPhone) AS MainPhone,
RTRIM({allies}Fax) AS Fax,
RTRIM({allies}Website) AS Website,
RTRIM({allies}Email) AS Email,
RTRIM({allies}BusinessHours) AS BusinessHours,
RTRIM({allies}Notes) AS Notes,
{allies}Priority AS Priority,
{allies}RowNum AS RowNum,
RTRIM({allies}DistributionCenterUuid) AS DistributionCenterUuid,
{allies}EnterDateUtc AS EnterDateUtc,
{allies}DigitBridgeGuid AS DigitBridgeGuid
";
        }

        public static string SelectAllWhere(string sqlWhere, string tableAllies = null, bool forJson = false) 
        {
            if (!sqlWhere.StartsWith("WHERE", StringComparison.CurrentCultureIgnoreCase))
                sqlWhere = $"WHERE {sqlWhere}";
            var forJsonString = forJson ? "FOR JSON PATH" : string.Empty;
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : tableAllies.TrimEnd();

            return $"SELECT {SelectAll(tableAllies)} FROM {TableName} {allies} {sqlWhere} {forJsonString}";
        }

    }
}

