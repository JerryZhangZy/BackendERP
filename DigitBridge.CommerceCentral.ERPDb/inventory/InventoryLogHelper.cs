
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InventoryLog SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class InventoryLogHelper
    {
        public static readonly string TableName = "InventoryLog";
        public static readonly string TableAllies = "invl";

        public static string From(string TableAllies = null) => $"FROM {TableName} {TableAllies ?? TableAllies} ";
        public static string InnerJoin(string TableAllies = null) => $"INNER JOIN {TableName} {TableAllies ?? TableAllies} ";
        public static string LeftJoin(string TableAllies = null) => $"LEFT JOIN {TableName} {TableAllies ?? TableAllies} ";

        #region - static SQL fileds statement

        public static string RowNum(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.RowNum AS {name ?? "RowNum"} ";
        public static string DatabaseNum(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.DatabaseNum AS {name ?? "DatabaseNum"} ";
        public static string MasterAccountNum(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.MasterAccountNum AS {name ?? "MasterAccountNum"} ";
        public static string ProfileNum(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.ProfileNum AS {name ?? "ProfileNum"} ";
        public static string InventoryLogUuid(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.InventoryLogUuid) AS {name ?? "InventoryLogUuid"} ";
        public static string ProductUuid(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.ProductUuid) AS {name ?? "ProductUuid"} ";
        public static string InventoryUuid(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.InventoryUuid) AS {name ?? "InventoryUuid"} ";
        public static string BatchNum(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.BatchNum AS {name ?? "BatchNum"} ";
        public static string LogType(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.LogType) AS {name ?? "LogType"} ";
        public static string LogUuid(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.LogUuid) AS {name ?? "LogUuid"} ";
        public static string LogItemUuid(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.LogItemUuid) AS {name ?? "LogItemUuid"} ";
        public static string LogStatus(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.LogStatus AS {name ?? "LogStatus"} ";
        public static string LogDate(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.LogDate AS {name ?? "LogDate"} ";
        public static string LogTime(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.LogTime AS {name ?? "LogTime"} ";
        public static string LogBy(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.LogBy) AS {name ?? "LogBy"} ";
        public static string SKU(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.SKU) AS {name ?? "SKU"} ";
        public static string Description(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.Description) AS {name ?? "Description"} ";
        public static string WarehouseUuid(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.WarehouseUuid) AS {name ?? "WarehouseUuid"} ";
        public static string WhsDescription(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.WhsDescription) AS {name ?? "WhsDescription"} ";
        public static string LotNum(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.LotNum) AS {name ?? "LotNum"} ";
        public static string LotInDate(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.LotInDate AS {name ?? "LotInDate"} ";
        public static string LotExpDate(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.LotExpDate AS {name ?? "LotExpDate"} ";
        public static string LotDescription(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.LotDescription) AS {name ?? "LotDescription"} ";
        public static string LpnNum(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.LpnNum) AS {name ?? "LpnNum"} ";
        public static string LpnDescription(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.LpnDescription) AS {name ?? "LpnDescription"} ";
        public static string Notes(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.Notes) AS {name ?? "Notes"} ";
        public static string UOM(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.UOM) AS {name ?? "UOM"} ";
        public static string LogQty(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.LogQty AS {name ?? "LogQty"} ";
        public static string BeforeInstock(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.BeforeInstock AS {name ?? "BeforeInstock"} ";
        public static string BeforeBaseCost(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.BeforeBaseCost AS {name ?? "BeforeBaseCost"} ";
        public static string BeforeUnitCost(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.BeforeUnitCost AS {name ?? "BeforeUnitCost"} ";
        public static string BeforeAvgCost(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.BeforeAvgCost AS {name ?? "BeforeAvgCost"} ";
        public static string EnterDateUtc(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.EnterDateUtc AS {name ?? "EnterDateUtc"} ";
        public static string UpdateDateUtc(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.UpdateDateUtc AS {name ?? "UpdateDateUtc"} ";
        public static string EnterBy(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.EnterBy) AS {name ?? "EnterBy"} ";
        public static string UpdateBy(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.UpdateBy) AS {name ?? "UpdateBy"} ";
        public static string DigitBridgeGuid(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.DigitBridgeGuid AS {name ?? "DigitBridgeGuid"} ";

        #endregion - static SQL fileds statement

        public static string SelectAll(string tableAllies = null) 
        {
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : $"{tableAllies.TrimEnd()}.";
            return $@"
{allies}RowNum AS RowNum,
{allies}DatabaseNum AS DatabaseNum,
{allies}MasterAccountNum AS MasterAccountNum,
{allies}ProfileNum AS ProfileNum,
RTRIM({allies}InventoryLogUuid) AS InventoryLogUuid,
RTRIM({allies}ProductUuid) AS ProductUuid,
RTRIM({allies}InventoryUuid) AS InventoryUuid,
{allies}BatchNum AS BatchNum,
RTRIM({allies}LogType) AS LogType,
RTRIM({allies}LogUuid) AS LogUuid,
RTRIM({allies}LogItemUuid) AS LogItemUuid,
{allies}LogStatus AS LogStatus,
{allies}LogDate AS LogDate,
{allies}LogTime AS LogTime,
RTRIM({allies}LogBy) AS LogBy,
RTRIM({allies}SKU) AS SKU,
RTRIM({allies}Description) AS Description,
RTRIM({allies}WarehouseUuid) AS WarehouseUuid,
RTRIM({allies}WhsDescription) AS WhsDescription,
RTRIM({allies}LotNum) AS LotNum,
{allies}LotInDate AS LotInDate,
{allies}LotExpDate AS LotExpDate,
RTRIM({allies}LotDescription) AS LotDescription,
RTRIM({allies}LpnNum) AS LpnNum,
RTRIM({allies}LpnDescription) AS LpnDescription,
RTRIM({allies}Notes) AS Notes,
RTRIM({allies}UOM) AS UOM,
{allies}LogQty AS LogQty,
{allies}BeforeInstock AS BeforeInstock,
{allies}BeforeBaseCost AS BeforeBaseCost,
{allies}BeforeUnitCost AS BeforeUnitCost,
{allies}BeforeAvgCost AS BeforeAvgCost,
{allies}EnterDateUtc AS EnterDateUtc,
{allies}UpdateDateUtc AS UpdateDateUtc,
RTRIM({allies}EnterBy) AS EnterBy,
RTRIM({allies}UpdateBy) AS UpdateBy,
{allies}DigitBridgeGuid AS DigitBridgeGuid
";
        }

        public static string SelectAllWhere(string sqlWhere, string tableAllies = null, bool forJson = false) 
        {
            if (!sqlWhere.StartsWith("WHERE", StringComparison.CurrentCultureIgnoreCase))
                sqlWhere = $"WHERE {sqlWhere}";
            var forJsonString = forJson ? "FOR JSON PATH" : string.Empty;
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : tableAllies.TrimEnd();

            return $"SELECT {SelectAll(tableAllies)} FROM {TableName} {allies} {sqlWhere} {forJsonString}";
        }

    }
}

