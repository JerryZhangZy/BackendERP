



//SettingForChannelOrder
//SettingForCustomer
//SettingForInventory
//SettingForInventoryLog
//SettingForInvoice
//SettingForInvoiceTransaction
//SettingForSalesOrder
//SettingForShipment

              



              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a Inventory SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you want re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class InventoryHelper
    {
        public static readonly string TableName = "Inventory";
        public static readonly string TableAllies = "inv";

        public static string From(string TableAllies = null) => $"FROM {TableName} {TableAllies ?? TableAllies} ";
        public static string InnerJoin(string TableAllies = null) => $"INNER JOIN {TableName} {TableAllies ?? TableAllies} ";
        public static string LeftJoin(string TableAllies = null) => $"LEFT JOIN {TableName} {TableAllies ?? TableAllies} ";

        #region - static SQL fileds statement

        public static string RowNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.RowNum AS {name ?? "RowNum".ToCamelCase(camelCase)} ";
        public static string DatabaseNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DatabaseNum AS {name ?? "DatabaseNum".ToCamelCase(camelCase)} ";
        public static string MasterAccountNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.MasterAccountNum AS {name ?? "MasterAccountNum".ToCamelCase(camelCase)} ";
        public static string ProfileNum(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ProfileNum AS {name ?? "ProfileNum".ToCamelCase(camelCase)} ";
        public static string ProductUuid(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ProductUuid) AS {name ?? "ProductUuid".ToCamelCase(camelCase)} ";
        public static string InventoryUuid(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.InventoryUuid) AS {name ?? "InventoryUuid".ToCamelCase(camelCase)} ";
        public static string StyleCode(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.StyleCode) AS {name ?? "StyleCode".ToCamelCase(camelCase)} ";
        public static string ColorPatternCode(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.ColorPatternCode) AS {name ?? "ColorPatternCode".ToCamelCase(camelCase)} ";
        public static string SizeType(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.SizeType) AS {name ?? "SizeType".ToCamelCase(camelCase)} ";
        public static string SizeCode(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.SizeCode) AS {name ?? "SizeCode".ToCamelCase(camelCase)} ";
        public static string WidthCode(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.WidthCode) AS {name ?? "WidthCode".ToCamelCase(camelCase)} ";
        public static string LengthCode(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.LengthCode) AS {name ?? "LengthCode".ToCamelCase(camelCase)} ";
        public static string PriceRule(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.PriceRule) AS {name ?? "PriceRule".ToCamelCase(camelCase)} ";
        public static string LeadTimeDay(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LeadTimeDay AS {name ?? "LeadTimeDay".ToCamelCase(camelCase)} ";
        public static string PoSize(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.PoSize AS {name ?? "PoSize".ToCamelCase(camelCase)} ";
        public static string MinStock(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.MinStock AS {name ?? "MinStock".ToCamelCase(camelCase)} ";
        public static string SKU(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.SKU) AS {name ?? "SKU".ToCamelCase(camelCase)} ";
        public static string WarehouseUuid(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.WarehouseUuid) AS {name ?? "WarehouseUuid".ToCamelCase(camelCase)} ";
        public static string WarehouseCode(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.WarehouseCode) AS {name ?? "WarehouseCode".ToCamelCase(camelCase)} ";
        public static string WarehouseName(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.WarehouseName) AS {name ?? "WarehouseName".ToCamelCase(camelCase)} ";
        public static string LotNum(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.LotNum) AS {name ?? "LotNum".ToCamelCase(camelCase)} ";
        public static string LotInDate(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LotInDate AS {name ?? "LotInDate".ToCamelCase(camelCase)} ";
        public static string LotExpDate(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.LotExpDate AS {name ?? "LotExpDate".ToCamelCase(camelCase)} ";
        public static string LotDescription(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.LotDescription) AS {name ?? "LotDescription".ToCamelCase(camelCase)} ";
        public static string LpnNum(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.LpnNum) AS {name ?? "LpnNum".ToCamelCase(camelCase)} ";
        public static string LpnDescription(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.LpnDescription) AS {name ?? "LpnDescription".ToCamelCase(camelCase)} ";
        public static string Notes(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.Notes) AS {name ?? "Notes".ToCamelCase(camelCase)} ";
        public static string Currency(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.Currency) AS {name ?? "Currency".ToCamelCase(camelCase)} ";
        public static string UOM(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.UOM) AS {name ?? "UOM".ToCamelCase(camelCase)} ";
        public static string QtyPerPallot(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.QtyPerPallot AS {name ?? "QtyPerPallot".ToCamelCase(camelCase)} ";
        public static string QtyPerCase(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.QtyPerCase AS {name ?? "QtyPerCase".ToCamelCase(camelCase)} ";
        public static string QtyPerBox(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.QtyPerBox AS {name ?? "QtyPerBox".ToCamelCase(camelCase)} ";
        public static string PackType(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.PackType) AS {name ?? "PackType".ToCamelCase(camelCase)} ";
        public static string PackQty(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.PackQty AS {name ?? "PackQty".ToCamelCase(camelCase)} ";
        public static string DefaultPackType(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.DefaultPackType) AS {name ?? "DefaultPackType".ToCamelCase(camelCase)} ";
        public static string Instock(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.Instock AS {name ?? "Instock".ToCamelCase(camelCase)} ";
        public static string OnHand(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.OnHand AS {name ?? "OnHand".ToCamelCase(camelCase)} ";
        public static string OpenSoQty(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.OpenSoQty AS {name ?? "OpenSoQty".ToCamelCase(camelCase)} ";
        public static string OpenFulfillmentQty(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.OpenFulfillmentQty AS {name ?? "OpenFulfillmentQty".ToCamelCase(camelCase)} ";
        public static string AvaQty(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.AvaQty AS {name ?? "AvaQty".ToCamelCase(camelCase)} ";
        public static string OpenPoQty(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.OpenPoQty AS {name ?? "OpenPoQty".ToCamelCase(camelCase)} ";
        public static string OpenInTransitQty(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.OpenInTransitQty AS {name ?? "OpenInTransitQty".ToCamelCase(camelCase)} ";
        public static string OpenWipQty(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.OpenWipQty AS {name ?? "OpenWipQty".ToCamelCase(camelCase)} ";
        public static string ProjectedQty(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ProjectedQty AS {name ?? "ProjectedQty".ToCamelCase(camelCase)} ";
        public static string BaseCost(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.BaseCost AS {name ?? "BaseCost".ToCamelCase(camelCase)} ";
        public static string TaxRate(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.TaxRate AS {name ?? "TaxRate".ToCamelCase(camelCase)} ";
        public static string TaxAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.TaxAmount AS {name ?? "TaxAmount".ToCamelCase(camelCase)} ";
        public static string ShippingAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ShippingAmount AS {name ?? "ShippingAmount".ToCamelCase(camelCase)} ";
        public static string MiscAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.MiscAmount AS {name ?? "MiscAmount".ToCamelCase(camelCase)} ";
        public static string ChargeAndAllowanceAmount(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.ChargeAndAllowanceAmount AS {name ?? "ChargeAndAllowanceAmount".ToCamelCase(camelCase)} ";
        public static string UnitCost(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.UnitCost AS {name ?? "UnitCost".ToCamelCase(camelCase)} ";
        public static string AvgCost(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.AvgCost AS {name ?? "AvgCost".ToCamelCase(camelCase)} ";
        public static string SalesCost(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.SalesCost AS {name ?? "SalesCost".ToCamelCase(camelCase)} ";
        public static string UpdateDateUtc(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.UpdateDateUtc AS {name ?? "UpdateDateUtc".ToCamelCase(camelCase)} ";
        public static string EnterBy(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.EnterBy) AS {name ?? "EnterBy".ToCamelCase(camelCase)} ";
        public static string UpdateBy(string tableAllies = null, string name = null, bool camelCase = true) => $"RTRIM({tableAllies ?? TableAllies}.UpdateBy) AS {name ?? "UpdateBy".ToCamelCase(camelCase)} ";
        public static string EnterDateUtc(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.EnterDateUtc AS {name ?? "EnterDateUtc".ToCamelCase(camelCase)} ";
        public static string DigitBridgeGuid(string tableAllies = null, string name = null, bool camelCase = true) => $"{tableAllies ?? TableAllies}.DigitBridgeGuid AS {name ?? "DigitBridgeGuid".ToCamelCase(camelCase)} ";

        #endregion - static SQL fileds statement

        public static string SelectAll(string tableAllies = null) 
        {
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : $"{tableAllies.TrimEnd()}.";
            return $@"
{allies}RowNum AS RowNum,
{allies}DatabaseNum AS DatabaseNum,
{allies}MasterAccountNum AS MasterAccountNum,
{allies}ProfileNum AS ProfileNum,
RTRIM({allies}ProductUuid) AS ProductUuid,
RTRIM({allies}InventoryUuid) AS InventoryUuid,
RTRIM({allies}StyleCode) AS StyleCode,
RTRIM({allies}ColorPatternCode) AS ColorPatternCode,
RTRIM({allies}SizeType) AS SizeType,
RTRIM({allies}SizeCode) AS SizeCode,
RTRIM({allies}WidthCode) AS WidthCode,
RTRIM({allies}LengthCode) AS LengthCode,
RTRIM({allies}PriceRule) AS PriceRule,
{allies}LeadTimeDay AS LeadTimeDay,
{allies}PoSize AS PoSize,
{allies}MinStock AS MinStock,
RTRIM({allies}SKU) AS SKU,
RTRIM({allies}WarehouseUuid) AS WarehouseUuid,
RTRIM({allies}WarehouseCode) AS WarehouseCode,
RTRIM({allies}WarehouseName) AS WarehouseName,
RTRIM({allies}LotNum) AS LotNum,
{allies}LotInDate AS LotInDate,
{allies}LotExpDate AS LotExpDate,
RTRIM({allies}LotDescription) AS LotDescription,
RTRIM({allies}LpnNum) AS LpnNum,
RTRIM({allies}LpnDescription) AS LpnDescription,
RTRIM({allies}Notes) AS Notes,
RTRIM({allies}Currency) AS Currency,
RTRIM({allies}UOM) AS UOM,
{allies}QtyPerPallot AS QtyPerPallot,
{allies}QtyPerCase AS QtyPerCase,
{allies}QtyPerBox AS QtyPerBox,
RTRIM({allies}PackType) AS PackType,
{allies}PackQty AS PackQty,
RTRIM({allies}DefaultPackType) AS DefaultPackType,
{allies}Instock AS Instock,
{allies}OnHand AS OnHand,
{allies}OpenSoQty AS OpenSoQty,
{allies}OpenFulfillmentQty AS OpenFulfillmentQty,
{allies}AvaQty AS AvaQty,
{allies}OpenPoQty AS OpenPoQty,
{allies}OpenInTransitQty AS OpenInTransitQty,
{allies}OpenWipQty AS OpenWipQty,
{allies}ProjectedQty AS ProjectedQty,
{allies}BaseCost AS BaseCost,
{allies}TaxRate AS TaxRate,
{allies}TaxAmount AS TaxAmount,
{allies}ShippingAmount AS ShippingAmount,
{allies}MiscAmount AS MiscAmount,
{allies}ChargeAndAllowanceAmount AS ChargeAndAllowanceAmount,
{allies}UnitCost AS UnitCost,
{allies}AvgCost AS AvgCost,
{allies}SalesCost AS SalesCost,
{allies}UpdateDateUtc AS UpdateDateUtc,
RTRIM({allies}EnterBy) AS EnterBy,
RTRIM({allies}UpdateBy) AS UpdateBy,
{allies}EnterDateUtc AS EnterDateUtc,
{allies}DigitBridgeGuid AS DigitBridgeGuid
";
        }

        public static string SelectAllWhere(string sqlWhere, string tableAllies = null, bool forJson = false) 
        {
            if (!sqlWhere.StartsWith("WHERE", StringComparison.CurrentCultureIgnoreCase))
                sqlWhere = $"WHERE {sqlWhere}";
            var forJsonString = forJson ? "FOR JSON PATH" : string.Empty;
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : tableAllies.TrimEnd();

            return $"SELECT {SelectAll(tableAllies)} FROM {TableName} {allies} {sqlWhere} {forJsonString}";
        }

    }
}

