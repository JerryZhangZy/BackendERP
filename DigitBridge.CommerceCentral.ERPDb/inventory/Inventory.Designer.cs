





              

              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a Inventory.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("Inventory")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("InventoryUuid")]
    [DtoName("InventoryDto")]
    public partial class Inventory : TableRepository<Inventory, long>
    {

        public Inventory() : base() {}
        public Inventory(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
        [Column("DatabaseNum",SqlDbType.Int,NotNull=true)]
        private int _databaseNum;

        [Column("MasterAccountNum",SqlDbType.Int,NotNull=true)]
        private int _masterAccountNum;

        [Column("ProfileNum",SqlDbType.Int,NotNull=true)]
        private int _profileNum;

        [Column("ProductUuid",SqlDbType.VarChar,NotNull=true)]
        private string _productUuid;

        [Column("InventoryUuid",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _inventoryUuid;

        [Column("StyleCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _styleCode;

        [Column("Color",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _color;

        [Column("SizeType",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _sizeType;

        [Column("SizeSystem",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _sizeSystem;

        [Column("Size",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _size;

        [Column("Width",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _width;

        [Column("Length",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _length;

        [Column("ClassCode",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _classCode;

        [Column("Department",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _department;

        [Column("Division",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _division;

        [Column("Year",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _year;

        [Column("PriceRule",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _priceRule;

        [Column("LeadTimeDay",SqlDbType.Int,NotNull=true)]
        private int _leadTimeDay;

        [Column("OrderSize",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _orderSize;

        [Column("MinStock",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _minStock;

        [Column("SKU",SqlDbType.VarChar,NotNull=true)]
        private string _sKU;

        [Column("Description",SqlDbType.NVarChar)]
        private string _description;

        [Column("WarehouseUuid",SqlDbType.VarChar)]
        private string _warehouseUuid;

        [Column("WarehouseNum",SqlDbType.VarChar,NotNull=true)]
        private string _warehouseNum;

        [Column("WarehouseName",SqlDbType.NVarChar,NotNull=true)]
        private string _warehouseName;

        [Column("LotNum",SqlDbType.VarChar,NotNull=true)]
        private string _lotNum;

        [Column("LotInDate",SqlDbType.Date)]
        private DateTime? _lotInDate;

        [Column("LotExpDate",SqlDbType.Date)]
        private DateTime? _lotExpDate;

        [Column("LotDescription",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _lotDescription;

        [Column("LpnNum",SqlDbType.VarChar,NotNull=true)]
        private string _lpnNum;

        [Column("LpnDescription",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _lpnDescription;

        [Column("Notes",SqlDbType.NVarChar,NotNull=true,IsDefault=true)]
        private string _notes;

        [Column("Currency",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _currency;

        [Column("UOM",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _uOM;

        [Column("PackType",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _packType;

        [Column("PackQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _packQty;

        [Column("QtyPerPallot",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _qtyPerPallot;

        [Column("QtyPerCase",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _qtyPerCase;

        [Column("QtyPerBox",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _qtyPerBox;

        [Column("DefaultPackType",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _defaultPackType;

        [Column("Instock",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _instock;

        [Column("OnHand",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _onHand;

        [Column("OpenSoQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _openSoQty;

        [Column("OpenFulfillmentQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _openFulfillmentQty;

        [Column("AvaQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _avaQty;

        [Column("OpenPoQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _openPoQty;

        [Column("OpenInTransitQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _openInTransitQty;

        [Column("OpenWipQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _openWipQty;

        [Column("ProjectedQty",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _projectedQty;

        [Column("BaseCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _baseCost;

        [Column("TaxRate",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _taxRate;

        [Column("TaxAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _taxAmount;

        [Column("DiscountRate",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _discountRate;

        [Column("DiscountAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _discountAmount;

        [Column("ShippingAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _shippingAmount;

        [Column("ShippingTaxAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _shippingTaxAmount;

        [Column("MiscAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _miscAmount;

        [Column("MiscTaxAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _miscTaxAmount;

        [Column("ChargeAndAllowanceAmount",SqlDbType.Decimal,IsDefault=true)]
        private decimal? _chargeAndAllowanceAmount;

        [Column("UnitCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _unitCost;

        [Column("AvgCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _avgCost;

        [Column("SalesCost",SqlDbType.Decimal,NotNull=true,IsDefault=true)]
        private decimal _salesCost;

        [Column("Stockable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _stockable;

        [Column("IsAr",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _isAr;

        [Column("IsAp",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _isAp;

        [Column("Taxable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _taxable;

        [Column("Costable",SqlDbType.TinyInt,NotNull=true,IsDefault=true)]
        private byte _costable;

        [Column("UpdateDateUtc",SqlDbType.DateTime)]
        private DateTime? _updateDateUtc;

        [Column("EnterBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _enterBy;

        [Column("UpdateBy",SqlDbType.VarChar,NotNull=true,IsDefault=true)]
        private string _updateBy;

        #endregion Fields - Generated 

        #region Properties - Generated 
		[IgnoreCompare] 
		public override string UniqueId => InventoryUuid; 
		public void CheckUniqueId() 
		{
			if (string.IsNullOrEmpty(InventoryUuid)) 
				InventoryUuid = Guid.NewGuid().ToString(); 
		}
        public virtual int DatabaseNum
        {
            get
            {
				return _databaseNum; 
            }
            set
            {
				_databaseNum = value; 
				OnPropertyChanged("DatabaseNum", value);
            }
        }

        public virtual int MasterAccountNum
        {
            get
            {
				return _masterAccountNum; 
            }
            set
            {
				_masterAccountNum = value; 
				OnPropertyChanged("MasterAccountNum", value);
            }
        }

        public virtual int ProfileNum
        {
            get
            {
				return _profileNum; 
            }
            set
            {
				_profileNum = value; 
				OnPropertyChanged("ProfileNum", value);
            }
        }

        public virtual string ProductUuid
        {
            get
            {
				return _productUuid?.TrimEnd(); 
            }
            set
            {
				_productUuid = value.TruncateTo(50); 
				OnPropertyChanged("ProductUuid", value);
            }
        }

        public virtual string InventoryUuid
        {
            get
            {
				return _inventoryUuid?.TrimEnd(); 
            }
            set
            {
				_inventoryUuid = value.TruncateTo(50); 
				OnPropertyChanged("InventoryUuid", value);
            }
        }

        public virtual string StyleCode
        {
            get
            {
				return _styleCode?.TrimEnd(); 
            }
            set
            {
				_styleCode = value.TruncateTo(100); 
				OnPropertyChanged("StyleCode", value);
            }
        }

        public virtual string Color
        {
            get
            {
				return _color?.TrimEnd(); 
            }
            set
            {
				_color = value.TruncateTo(50); 
				OnPropertyChanged("Color", value);
            }
        }

        public virtual string SizeType
        {
            get
            {
				return _sizeType?.TrimEnd(); 
            }
            set
            {
				_sizeType = value.TruncateTo(50); 
				OnPropertyChanged("SizeType", value);
            }
        }

        public virtual string SizeSystem
        {
            get
            {
				return _sizeSystem?.TrimEnd(); 
            }
            set
            {
				_sizeSystem = value.TruncateTo(50); 
				OnPropertyChanged("SizeSystem", value);
            }
        }

        public virtual string Size
        {
            get
            {
				return _size?.TrimEnd(); 
            }
            set
            {
				_size = value.TruncateTo(50); 
				OnPropertyChanged("Size", value);
            }
        }

        public virtual string Width
        {
            get
            {
				return _width?.TrimEnd(); 
            }
            set
            {
				_width = value.TruncateTo(50); 
				OnPropertyChanged("Width", value);
            }
        }

        public virtual string Length
        {
            get
            {
				return _length?.TrimEnd(); 
            }
            set
            {
				_length = value.TruncateTo(50); 
				OnPropertyChanged("Length", value);
            }
        }

        public virtual string ClassCode
        {
            get
            {
				return _classCode?.TrimEnd(); 
            }
            set
            {
				_classCode = value.TruncateTo(50); 
				OnPropertyChanged("ClassCode", value);
            }
        }

        public virtual string Department
        {
            get
            {
				return _department?.TrimEnd(); 
            }
            set
            {
				_department = value.TruncateTo(50); 
				OnPropertyChanged("Department", value);
            }
        }

        public virtual string Division
        {
            get
            {
				return _division?.TrimEnd(); 
            }
            set
            {
				_division = value.TruncateTo(50); 
				OnPropertyChanged("Division", value);
            }
        }

        public virtual string Year
        {
            get
            {
				return _year?.TrimEnd(); 
            }
            set
            {
				_year = value.TruncateTo(20); 
				OnPropertyChanged("Year", value);
            }
        }

        public virtual string PriceRule
        {
            get
            {
				return _priceRule?.TrimEnd(); 
            }
            set
            {
				_priceRule = value.TruncateTo(50); 
				OnPropertyChanged("PriceRule", value);
            }
        }

        public virtual int LeadTimeDay
        {
            get
            {
				return _leadTimeDay; 
            }
            set
            {
				_leadTimeDay = value; 
				OnPropertyChanged("LeadTimeDay", value);
            }
        }

        public virtual decimal OrderSize
        {
            get
            {
				return _orderSize; 
            }
            set
            {
				_orderSize = value; 
				OnPropertyChanged("OrderSize", value);
            }
        }

        public virtual decimal MinStock
        {
            get
            {
				return _minStock; 
            }
            set
            {
				_minStock = value; 
				OnPropertyChanged("MinStock", value);
            }
        }

        public virtual string SKU
        {
            get
            {
				return _sKU?.TrimEnd(); 
            }
            set
            {
				_sKU = value.TruncateTo(100); 
				OnPropertyChanged("SKU", value);
            }
        }

        public virtual string Description
        {
            get
            {
				if (!AllowNull && _description is null) 
					_description = String.Empty; 
				return _description?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_description = value.TruncateTo(200); 
					OnPropertyChanged("Description", value);
				}
            }
        }

        public virtual string WarehouseUuid
        {
            get
            {
				if (!AllowNull && _warehouseUuid is null) 
					_warehouseUuid = String.Empty; 
				return _warehouseUuid?.TrimEnd(); 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_warehouseUuid = value.TruncateTo(50); 
					OnPropertyChanged("WarehouseUuid", value);
				}
            }
        }

        public virtual string WarehouseNum
        {
            get
            {
				return _warehouseNum?.TrimEnd(); 
            }
            set
            {
				_warehouseNum = value.TruncateTo(50); 
				OnPropertyChanged("WarehouseNum", value);
            }
        }

        public virtual string WarehouseName
        {
            get
            {
				return _warehouseName?.TrimEnd(); 
            }
            set
            {
				_warehouseName = value.TruncateTo(200); 
				OnPropertyChanged("WarehouseName", value);
            }
        }

        public virtual string LotNum
        {
            get
            {
				return _lotNum?.TrimEnd(); 
            }
            set
            {
				_lotNum = value.TruncateTo(100); 
				OnPropertyChanged("LotNum", value);
            }
        }

        public virtual DateTime? LotInDate
        {
            get
            {
				if (!AllowNull && _lotInDate is null) 
					_lotInDate = new DateTime().MinValueSql(); 
				return _lotInDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotInDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotInDate", value);
				}
            }
        }

        public virtual DateTime? LotExpDate
        {
            get
            {
				if (!AllowNull && _lotExpDate is null) 
					_lotExpDate = new DateTime().MinValueSql(); 
				return _lotExpDate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_lotExpDate = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("LotExpDate", value);
				}
            }
        }

        public virtual string LotDescription
        {
            get
            {
				return _lotDescription?.TrimEnd(); 
            }
            set
            {
				_lotDescription = value.TruncateTo(200); 
				OnPropertyChanged("LotDescription", value);
            }
        }

        public virtual string LpnNum
        {
            get
            {
				return _lpnNum?.TrimEnd(); 
            }
            set
            {
				_lpnNum = value.TruncateTo(100); 
				OnPropertyChanged("LpnNum", value);
            }
        }

        public virtual string LpnDescription
        {
            get
            {
				return _lpnDescription?.TrimEnd(); 
            }
            set
            {
				_lpnDescription = value.TruncateTo(200); 
				OnPropertyChanged("LpnDescription", value);
            }
        }

        public virtual string Notes
        {
            get
            {
				return _notes?.TrimEnd(); 
            }
            set
            {
				_notes = value.TruncateTo(500); 
				OnPropertyChanged("Notes", value);
            }
        }

        public virtual string Currency
        {
            get
            {
				return _currency?.TrimEnd(); 
            }
            set
            {
				_currency = value.TruncateTo(10); 
				OnPropertyChanged("Currency", value);
            }
        }

        public virtual string UOM
        {
            get
            {
				return _uOM?.TrimEnd(); 
            }
            set
            {
				_uOM = value.TruncateTo(50); 
				OnPropertyChanged("UOM", value);
            }
        }

        public virtual string PackType
        {
            get
            {
				return _packType?.TrimEnd(); 
            }
            set
            {
				_packType = value.TruncateTo(50); 
				OnPropertyChanged("PackType", value);
            }
        }

        public virtual decimal PackQty
        {
            get
            {
				return _packQty; 
            }
            set
            {
				_packQty = value; 
				OnPropertyChanged("PackQty", value);
            }
        }

        public virtual decimal QtyPerPallot
        {
            get
            {
				return _qtyPerPallot; 
            }
            set
            {
				_qtyPerPallot = value; 
				OnPropertyChanged("QtyPerPallot", value);
            }
        }

        public virtual decimal QtyPerCase
        {
            get
            {
				return _qtyPerCase; 
            }
            set
            {
				_qtyPerCase = value; 
				OnPropertyChanged("QtyPerCase", value);
            }
        }

        public virtual decimal QtyPerBox
        {
            get
            {
				return _qtyPerBox; 
            }
            set
            {
				_qtyPerBox = value; 
				OnPropertyChanged("QtyPerBox", value);
            }
        }

        public virtual string DefaultPackType
        {
            get
            {
				return _defaultPackType?.TrimEnd(); 
            }
            set
            {
				_defaultPackType = value.TruncateTo(50); 
				OnPropertyChanged("DefaultPackType", value);
            }
        }

        public virtual decimal Instock
        {
            get
            {
				return _instock; 
            }
            set
            {
				_instock = value; 
				OnPropertyChanged("Instock", value);
            }
        }

        public virtual decimal OnHand
        {
            get
            {
				return _onHand; 
            }
            set
            {
				_onHand = value; 
				OnPropertyChanged("OnHand", value);
            }
        }

        public virtual decimal OpenSoQty
        {
            get
            {
				return _openSoQty; 
            }
            set
            {
				_openSoQty = value; 
				OnPropertyChanged("OpenSoQty", value);
            }
        }

        public virtual decimal OpenFulfillmentQty
        {
            get
            {
				return _openFulfillmentQty; 
            }
            set
            {
				_openFulfillmentQty = value; 
				OnPropertyChanged("OpenFulfillmentQty", value);
            }
        }

        public virtual decimal AvaQty
        {
            get
            {
				return _avaQty; 
            }
            set
            {
				_avaQty = value; 
				OnPropertyChanged("AvaQty", value);
            }
        }

        public virtual decimal OpenPoQty
        {
            get
            {
				return _openPoQty; 
            }
            set
            {
				_openPoQty = value; 
				OnPropertyChanged("OpenPoQty", value);
            }
        }

        public virtual decimal OpenInTransitQty
        {
            get
            {
				return _openInTransitQty; 
            }
            set
            {
				_openInTransitQty = value; 
				OnPropertyChanged("OpenInTransitQty", value);
            }
        }

        public virtual decimal OpenWipQty
        {
            get
            {
				return _openWipQty; 
            }
            set
            {
				_openWipQty = value; 
				OnPropertyChanged("OpenWipQty", value);
            }
        }

        public virtual decimal ProjectedQty
        {
            get
            {
				return _projectedQty; 
            }
            set
            {
				_projectedQty = value; 
				OnPropertyChanged("ProjectedQty", value);
            }
        }

        public virtual decimal BaseCost
        {
            get
            {
				return _baseCost; 
            }
            set
            {
				_baseCost = value; 
				OnPropertyChanged("BaseCost", value);
            }
        }

        public virtual decimal? TaxRate
        {
            get
            {
				if (!AllowNull && _taxRate is null) 
					_taxRate = default(decimal); 
				return _taxRate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_taxRate = value; 
					OnPropertyChanged("TaxRate", value);
				}
            }
        }

        public virtual decimal? TaxAmount
        {
            get
            {
				if (!AllowNull && _taxAmount is null) 
					_taxAmount = default(decimal); 
				return _taxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_taxAmount = value; 
					OnPropertyChanged("TaxAmount", value);
				}
            }
        }

        public virtual decimal? DiscountRate
        {
            get
            {
				if (!AllowNull && _discountRate is null) 
					_discountRate = default(decimal); 
				return _discountRate; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_discountRate = value; 
					OnPropertyChanged("DiscountRate", value);
				}
            }
        }

        public virtual decimal? DiscountAmount
        {
            get
            {
				if (!AllowNull && _discountAmount is null) 
					_discountAmount = default(decimal); 
				return _discountAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_discountAmount = value; 
					OnPropertyChanged("DiscountAmount", value);
				}
            }
        }

        public virtual decimal? ShippingAmount
        {
            get
            {
				if (!AllowNull && _shippingAmount is null) 
					_shippingAmount = default(decimal); 
				return _shippingAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shippingAmount = value; 
					OnPropertyChanged("ShippingAmount", value);
				}
            }
        }

        public virtual decimal? ShippingTaxAmount
        {
            get
            {
				if (!AllowNull && _shippingTaxAmount is null) 
					_shippingTaxAmount = default(decimal); 
				return _shippingTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_shippingTaxAmount = value; 
					OnPropertyChanged("ShippingTaxAmount", value);
				}
            }
        }

        public virtual decimal? MiscAmount
        {
            get
            {
				if (!AllowNull && _miscAmount is null) 
					_miscAmount = default(decimal); 
				return _miscAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_miscAmount = value; 
					OnPropertyChanged("MiscAmount", value);
				}
            }
        }

        public virtual decimal? MiscTaxAmount
        {
            get
            {
				if (!AllowNull && _miscTaxAmount is null) 
					_miscTaxAmount = default(decimal); 
				return _miscTaxAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_miscTaxAmount = value; 
					OnPropertyChanged("MiscTaxAmount", value);
				}
            }
        }

        public virtual decimal? ChargeAndAllowanceAmount
        {
            get
            {
				if (!AllowNull && _chargeAndAllowanceAmount is null) 
					_chargeAndAllowanceAmount = default(decimal); 
				return _chargeAndAllowanceAmount; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_chargeAndAllowanceAmount = value; 
					OnPropertyChanged("ChargeAndAllowanceAmount", value);
				}
            }
        }

        public virtual decimal UnitCost
        {
            get
            {
				return _unitCost; 
            }
            set
            {
				_unitCost = value; 
				OnPropertyChanged("UnitCost", value);
            }
        }

        public virtual decimal AvgCost
        {
            get
            {
				return _avgCost; 
            }
            set
            {
				_avgCost = value; 
				OnPropertyChanged("AvgCost", value);
            }
        }

        public virtual decimal SalesCost
        {
            get
            {
				return _salesCost; 
            }
            set
            {
				_salesCost = value; 
				OnPropertyChanged("SalesCost", value);
            }
        }

        public virtual bool Stockable
        {
            get
            {
				return (_stockable == 1); 
            }
            set
            {
				_stockable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Stockable", value);
            }
        }

        public virtual bool IsAr
        {
            get
            {
				return (_isAr == 1); 
            }
            set
            {
				_isAr = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("IsAr", value);
            }
        }

        public virtual bool IsAp
        {
            get
            {
				return (_isAp == 1); 
            }
            set
            {
				_isAp = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("IsAp", value);
            }
        }

        public virtual bool Taxable
        {
            get
            {
				return (_taxable == 1); 
            }
            set
            {
				_taxable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Taxable", value);
            }
        }

        public virtual bool Costable
        {
            get
            {
				return (_costable == 1); 
            }
            set
            {
				_costable = value ? (byte)1 : (byte)0; 
				OnPropertyChanged("Costable", value);
            }
        }

        public virtual DateTime? UpdateDateUtc
        {
            get
            {
				if (!AllowNull && _updateDateUtc is null) 
					_updateDateUtc = new DateTime().MinValueSql(); 
				return _updateDateUtc; 
            }
            set
            {
				if (value != null || AllowNull) 
				{
					_updateDateUtc = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); 
					OnPropertyChanged("UpdateDateUtc", value);
				}
            }
        }

        public virtual string EnterBy
        {
            get
            {
				return _enterBy?.TrimEnd(); 
            }
            set
            {
				_enterBy = value.TruncateTo(100); 
				OnPropertyChanged("EnterBy", value);
            }
        }

        public virtual string UpdateBy
        {
            get
            {
				return _updateBy?.TrimEnd(); 
            }
            set
            {
				_updateBy = value.TruncateTo(100); 
				OnPropertyChanged("UpdateBy", value);
            }
        }



        #endregion Properties - Generated 

        #region Methods - Parent

		[XmlIgnore, JsonIgnore, IgnoreCompare]
		private InventoryData Parent { get; set; }
		public InventoryData GetParent() => Parent;
		public Inventory SetParent(InventoryData parent)
		{
			Parent = parent;
			return this;
		}
        #endregion Methods - Parent

		#region Methods - Children InventoryAttributes
		protected InventoryAttributes _InventoryAttributes;
		[IgnoreCompare]
		public InventoryAttributes InventoryAttributes
		{
			get
			{
				return _InventoryAttributes;
			}
			set
			{
				_InventoryAttributes = value;
				CheckIntegrityInventoryAttributes();
			}
		}
		public InventoryAttributes SetChildrenInventoryAttributes(IList<InventoryAttributes> children)
		{
			var childrenList = children.ToList();
			InventoryAttributes = childrenList.FirstOrDefault(x => !string.IsNullOrEmpty(InventoryUuid) && x.InventoryUuid == InventoryUuid);
			return InventoryAttributes;
		}
		public IList<InventoryAttributes> GetChildrenInventoryAttributes()
		{
			return new List<InventoryAttributes>() { InventoryAttributes };
		}
		public IList<InventoryAttributes> GetChildrenDeletedInventoryAttributes()
		{
			return null;
		}
		public InventoryAttributes CheckIntegrityInventoryAttributes()
		{
			if (InventoryAttributes == null)
				return InventoryAttributes;
			CheckUniqueId();
			InventoryAttributes.SetParent(Parent);
			if (InventoryAttributes.InventoryUuid != InventoryUuid) InventoryAttributes.InventoryUuid = InventoryUuid;
			return InventoryAttributes;
		}
		public InventoryAttributes LoadInventoryAttributes()
		{
			InventoryAttributes = dbFactory.GetById<InventoryAttributes>(InventoryUuid);
			return InventoryAttributes;
		}
		public async Task<InventoryAttributes> LoadInventoryAttributesAsync()
		{
			InventoryAttributes = await dbFactory.GetByIdAsync<InventoryAttributes>(InventoryUuid);
			return InventoryAttributes;
		}
		public InventoryAttributes NewInventoryAttributes()
		{
			CheckUniqueId();
			var child = new InventoryAttributes(dbFactory);
			child.SetParent(Parent);
			child.InventoryUuid = InventoryUuid;
			return child;
		}
		public InventoryAttributes AddInventoryAttributes(InventoryAttributes child)
		{
			if (child == null)
				child = NewInventoryAttributes();
			InventoryAttributes = child;
			return InventoryAttributes;
		}
		#endregion Methods - Children InventoryAttributes

        #region Methods - Generated 
        public override void ClearMetaData()
        {
			base.ClearMetaData(); 
			InventoryUuid = Guid.NewGuid().ToString(); 
            return;
        }

        public override Inventory Clear()
        {
            base.Clear();
			_databaseNum = default(int); 
			_masterAccountNum = default(int); 
			_profileNum = default(int); 
			_productUuid = String.Empty; 
			_inventoryUuid = String.Empty; 
			_styleCode = String.Empty; 
			_color = String.Empty; 
			_sizeType = String.Empty; 
			_sizeSystem = String.Empty; 
			_size = String.Empty; 
			_width = String.Empty; 
			_length = String.Empty; 
			_classCode = String.Empty; 
			_department = String.Empty; 
			_division = String.Empty; 
			_year = String.Empty; 
			_priceRule = String.Empty; 
			_leadTimeDay = default(int); 
			_orderSize = default(decimal); 
			_minStock = default(decimal); 
			_sKU = String.Empty; 
			_description = AllowNull ? (string)null : String.Empty; 
			_warehouseUuid = AllowNull ? (string)null : String.Empty; 
			_warehouseNum = String.Empty; 
			_warehouseName = String.Empty; 
			_lotNum = String.Empty; 
			_lotInDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_lotExpDate = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_lotDescription = String.Empty; 
			_lpnNum = String.Empty; 
			_lpnDescription = String.Empty; 
			_notes = String.Empty; 
			_currency = String.Empty; 
			_uOM = String.Empty; 
			_packType = String.Empty; 
			_packQty = default(decimal); 
			_qtyPerPallot = default(decimal); 
			_qtyPerCase = default(decimal); 
			_qtyPerBox = default(decimal); 
			_defaultPackType = String.Empty; 
			_instock = default(decimal); 
			_onHand = default(decimal); 
			_openSoQty = default(decimal); 
			_openFulfillmentQty = default(decimal); 
			_avaQty = default(decimal); 
			_openPoQty = default(decimal); 
			_openInTransitQty = default(decimal); 
			_openWipQty = default(decimal); 
			_projectedQty = default(decimal); 
			_baseCost = default(decimal); 
			_taxRate = AllowNull ? (decimal?)null : default(decimal); 
			_taxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_discountRate = AllowNull ? (decimal?)null : default(decimal); 
			_discountAmount = AllowNull ? (decimal?)null : default(decimal); 
			_shippingAmount = AllowNull ? (decimal?)null : default(decimal); 
			_shippingTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_miscAmount = AllowNull ? (decimal?)null : default(decimal); 
			_miscTaxAmount = AllowNull ? (decimal?)null : default(decimal); 
			_chargeAndAllowanceAmount = AllowNull ? (decimal?)null : default(decimal); 
			_unitCost = default(decimal); 
			_avgCost = default(decimal); 
			_salesCost = default(decimal); 
			_stockable = default(byte); 
			_isAr = default(byte); 
			_isAp = default(byte); 
			_taxable = default(byte); 
			_costable = default(byte); 
			_updateDateUtc = AllowNull ? (DateTime?)null : new DateTime().MinValueSql(); 
			_enterBy = String.Empty; 
			_updateBy = String.Empty; 
            ClearChildren();
            return this;
        }

        public virtual Inventory ClearChildren()
        {
			InventoryAttributes.Clear();
            return this;
        }

        public virtual Inventory NewChildren()
        {
			AddInventoryAttributes(NewInventoryAttributes());
            return this;
        }

        public virtual void CopyChildrenFrom(Inventory data)
        {
            if (data is null) return;
			InventoryAttributes?.CopyFrom(data.InventoryAttributes);
			CheckIntegrityInventoryAttributes(); 
            return;
        }

		public static IList<Inventory> FindByProductUuid(IDataBaseFactory dbFactory, string productUuid)
		{
			return dbFactory.Find<Inventory>("WHERE ProductUuid = @0 ORDER BY WarehouseUuid ", productUuid).ToList();
		}
		public static long CountByProductUuid(IDataBaseFactory dbFactory, string productUuid)
		{
			return dbFactory.Count<Inventory>("WHERE ProductUuid = @0 ", productUuid);
		}
		public static async Task<IList<Inventory>> FindByAsyncProductUuid(IDataBaseFactory dbFactory, string productUuid)
		{
			return (await dbFactory.FindAsync<Inventory>("WHERE ProductUuid = @0 ORDER BY WarehouseUuid ", productUuid)).ToList();
		}
		public static async Task<long> CountByAsyncProductUuid(IDataBaseFactory dbFactory, string productUuid)
		{
			return await dbFactory.CountAsync<Inventory>("WHERE ProductUuid = @0 ", productUuid);
		}
		public static IList<Inventory> FindByWarehouseUuid(IDataBaseFactory dbFactory, string warehouseUuid)
		{
			return dbFactory.Find<Inventory>("WHERE WarehouseUuid = @0 ", warehouseUuid).ToList();
		}
		public static long CountByWarehouseUuid(IDataBaseFactory dbFactory, string warehouseUuid)
		{
			return dbFactory.Count<Inventory>("WHERE WarehouseUuid = @0 ", warehouseUuid);
		}
		public static async Task<IList<Inventory>> FindByAsyncWarehouseUuid(IDataBaseFactory dbFactory, string warehouseUuid)
		{
			return (await dbFactory.FindAsync<Inventory>("WHERE WarehouseUuid = @0 ", warehouseUuid)).ToList();
		}
		public static async Task<long> CountByAsyncWarehouseUuid(IDataBaseFactory dbFactory, string warehouseUuid)
		{
			return await dbFactory.CountAsync<Inventory>("WHERE WarehouseUuid = @0 ", warehouseUuid);
		}


        #endregion Methods - Generated 
    }
}



