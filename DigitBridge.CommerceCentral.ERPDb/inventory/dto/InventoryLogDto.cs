
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a InventoryLog Dto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class InventoryLogDto
    {
        public long? RowNum { get; set; }
        public string UniqueId { get; set; }
        public DateTime? EnterDateUtc { get; set; }
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

        public int? DatabaseNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDatabaseNum => DatabaseNum != null;

        public int? MasterAccountNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMasterAccountNum => MasterAccountNum != null;

        public int? ProfileNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasProfileNum => ProfileNum != null;

        [StringLength(50, ErrorMessage = "The InventoryLogUuid value cannot exceed 50 characters. ")]
        public string InventoryLogUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasInventoryLogUuid => InventoryLogUuid != null;

        [StringLength(50, ErrorMessage = "The ProductUuid value cannot exceed 50 characters. ")]
        public string ProductUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasProductUuid => ProductUuid != null;

        [StringLength(50, ErrorMessage = "The InventoryUuid value cannot exceed 50 characters. ")]
        public string InventoryUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasInventoryUuid => InventoryUuid != null;

        public long? BatchNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBatchNum => BatchNum != null;

        [StringLength(50, ErrorMessage = "The LogType value cannot exceed 50 characters. ")]
        public string LogType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLogType => LogType != null;

        [StringLength(50, ErrorMessage = "The LogUuid value cannot exceed 50 characters. ")]
        public string LogUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLogUuid => LogUuid != null;

        [StringLength(50, ErrorMessage = "The LogItemUuid value cannot exceed 50 characters. ")]
        public string LogItemUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLogItemUuid => LogItemUuid != null;

        public int? LogStatus { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLogStatus => LogStatus != null;

        [DataType(DataType.DateTime)]
        public DateTime? LogDate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLogDate => LogDate != null;

        [DataType(DataType.DateTime)]
        public DateTime? LogTime { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLogTime => LogTime != null;

        [StringLength(100, ErrorMessage = "The LogBy value cannot exceed 100 characters. ")]
        public string LogBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLogBy => LogBy != null;

        [StringLength(100, ErrorMessage = "The SKU value cannot exceed 100 characters. ")]
        public string SKU { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSKU => SKU != null;

        [StringLength(200, ErrorMessage = "The Description value cannot exceed 200 characters. ")]
        public string Description { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDescription => Description != null;

        [StringLength(50, ErrorMessage = "The WarehouseUuid value cannot exceed 50 characters. ")]
        public string WarehouseUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseUuid => WarehouseUuid != null;

        [StringLength(200, ErrorMessage = "The WhsDescription value cannot exceed 200 characters. ")]
        public string WhsDescription { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWhsDescription => WhsDescription != null;

        [StringLength(100, ErrorMessage = "The LotNum value cannot exceed 100 characters. ")]
        public string LotNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLotNum => LotNum != null;

        [DataType(DataType.DateTime)]
        public DateTime? LotInDate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLotInDate => LotInDate != null;

        [DataType(DataType.DateTime)]
        public DateTime? LotExpDate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLotExpDate => LotExpDate != null;

        [StringLength(200, ErrorMessage = "The LotDescription value cannot exceed 200 characters. ")]
        public string LotDescription { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLotDescription => LotDescription != null;

        [StringLength(100, ErrorMessage = "The LpnNum value cannot exceed 100 characters. ")]
        public string LpnNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLpnNum => LpnNum != null;

        [StringLength(200, ErrorMessage = "The LpnDescription value cannot exceed 200 characters. ")]
        public string LpnDescription { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLpnDescription => LpnDescription != null;

        [StringLength(500, ErrorMessage = "The Notes value cannot exceed 500 characters. ")]
        public string Notes { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasNotes => Notes != null;

        [StringLength(50, ErrorMessage = "The UOM value cannot exceed 50 characters. ")]
        public string UOM { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUOM => UOM != null;

        public decimal? LogQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLogQty => LogQty != null;

        public decimal? BeforeInstock { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBeforeInstock => BeforeInstock != null;

        public decimal? BeforeBaseCost { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBeforeBaseCost => BeforeBaseCost != null;

        public decimal? BeforeUnitCost { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBeforeUnitCost => BeforeUnitCost != null;

        public decimal? BeforeAvgCost { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBeforeAvgCost => BeforeAvgCost != null;

        [DataType(DataType.DateTime)]
        public DateTime? UpdateDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateDateUtc => UpdateDateUtc != null;

        [StringLength(100, ErrorMessage = "The EnterBy value cannot exceed 100 characters. ")]
        public string EnterBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEnterBy => EnterBy != null;

        [StringLength(100, ErrorMessage = "The UpdateBy value cannot exceed 100 characters. ")]
        public string UpdateBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateBy => UpdateBy != null;



        #endregion Properties - Generated 

        #region Children - Generated 

        #endregion Children - Generated 

    }
}



