
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using DigitBridge.CommerceCentral.YoPoco;
using CsvHelper;
using System.IO;
using DigitBridge.Base.Utility;
using System.Dynamic;
using System.Linq;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a SalesOrderDataDto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    [Serializable()]
    public partial class WarehouseDataDtoCsv : CsvHelper<WarehouseDataDto>
    {
        public override void GetFormat() 
        { 
        }
        public override void RegisterMapper(CsvContext context)
        {
            context.RegisterClassMap(new CsvAutoMapper<DistributionCenterDto>());

            //context.RegisterClassMap(new CsvAutoMapper<SalesOrderHeaderDto>());
            //context.RegisterClassMap(new CsvAutoMapper<SalesOrderHeaderInfoDto>());
            //context.RegisterClassMap(new CsvAutoMapper<SalesOrderHeaderAttributesDto>());
            //context.RegisterClassMap(new CsvAutoMapper<SalesOrderItemsDto>());
            //context.RegisterClassMap(new CsvAutoMapper<SalesOrderItemsAttributesDto>());
        }

        public override string Export(IEnumerable<WarehouseDataDto> datas, string fileName)
        {
            var exportData = Export(datas);
            using (var fileStream = new FileStream(fileName, FileMode.OpenOrCreate))
            {
                fileStream.Write(exportData, 0, exportData.Length);
            }
            return fileName;
        }

        public override byte[] Export(IEnumerable<WarehouseDataDto> datas)
        {
            var config = GetConfiguration();
            config.HasHeaderRecord = false;
            using (var ms = new MemoryStream())
            {
                using (var writer = new StreamWriter(ms))
                using (var csv = new CsvWriter(writer, config))
                {
                    csv.Context.Configuration.HasHeaderRecord = false;
                    foreach (var data in datas)
                    {
                        WriteCsv(data, csv);
                    }
                    csv.Flush();
                }
                return ms.ToArray();
            }
        }

        public virtual string Export(WarehouseDataDto data, string fileName)
        {
            var config = GetConfiguration();
            config.HasHeaderRecord = false;

            using (var writer = new StreamWriter(fileName))
            using (var csv = new CsvWriter(writer, config))
            {
                csv.Context.Configuration.HasHeaderRecord = false;
                WriteCsv(data, csv);
                csv.Flush();
            }
            return fileName;
        }

        protected override void WriteCsv(WarehouseDataDto data, CsvWriter csv)
        {
            // combine multiple Dto to one dynamic object
            var headerRecords = data.MergeHeaderRecord(true).ToList();
            
            // get property orders in object 
            var props = new List<KeyValuePair<string, object>>();
            if (Format?.Columns == null || Format?.Columns?.Count == 0)
                props = ((ExpandoObject)headerRecords[0]).GetPropertyNames().ToList();
            // add RecordType column at first
            props.Insert(0, new KeyValuePair<string, object>("RecordType", "RecordType"));

            // Sort property of object by orders
            headerRecords[0] = ((ExpandoObject)headerRecords[0]).FilterAndSortProperty(props);

            // sort data object property orders and set type = "H"
            props[0] = new KeyValuePair<string, object>("RecordType", "H");
            for (int i = 1; i < headerRecords.Count; i++)
                headerRecords[i] = ((ExpandoObject)headerRecords[i]).FilterAndSortProperty(props);

            csv.WriteRecords(headerRecords);
        }

        public override IEnumerable<WarehouseDataDto> Import(string fileName)
        {
            using (var reader = new FileStream(fileName,FileMode.OpenOrCreate))
                return Import(reader);
        }

        public override IEnumerable<WarehouseDataDto> Import(byte[] buffer)
        {
            using (var stream = new MemoryStream(buffer))
                return Import(stream);
        }

        public override IEnumerable<WarehouseDataDto> Import(Stream stream)
        {
            var data = new List<WarehouseDataDto>();
            var isFirst = true;
            WarehouseDataDto dto = new WarehouseDataDto();
            using (var reader = new StreamReader(stream))
            using (var csv = new CsvReader(reader, GetConfiguration()))
            {
                RegisterMapper(csv.Context);
                while (csv.Read())
                {
                    // it is header line
                    if (csv.GetField(0).EqualsIgnoreSpace("RecordType"))
                    {
                        csv.ReadHeader();
                        isFirst = false;
                        continue;
                    }

                    switch (csv.GetField(0))
                    {
                        case "H":
                            if (!isFirst)
                            {
                                if (dto != null&&dto.HasDistributionCenter)
                                    data.Add(dto);
                                dto = new WarehouseDataDto();
                                isFirst = false;
                            }
                            dto.DistributionCenter = csv.GetRecord<DistributionCenterDto>();
                            break;
                            //case "L":
                            //    if (dto.SalesOrderItems == null)
                            //        dto.SalesOrderItems = new List<SalesOrderItemsDto>();
                            //    var item = csv.GetRecord<SalesOrderItemsDto>();
                            //    item.SalesOrderItemsAttributes = csv.GetRecord<SalesOrderItemsAttributesDto>();
                            //    dto.SalesOrderItems.Add(item);
                            //    break;
                    }
                }
                if (dto != null)
                    data.Add(dto);
            }
            return data;

        }
    }
}



