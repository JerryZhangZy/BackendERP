
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a Warehouse Dto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class WarehouseDto
    {
        public long? RowNum { get; set; }
        public string UniqueId { get; set; }
        public DateTime? EnterDateUtc { get; set; }
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

        public int? DatabaseNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDatabaseNum => DatabaseNum != null;

        public int? MasterAccountNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMasterAccountNum => MasterAccountNum != null;

        public int? ProfileNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasProfileNum => ProfileNum != null;

        [StringLength(50, ErrorMessage = "The WarehouseUuid value cannot exceed 50 characters. ")]
        public string WarehouseUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseUuid => WarehouseUuid != null;

        public int? DistributionCenterNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDistributionCenterNum => DistributionCenterNum != null;

        [StringLength(200, ErrorMessage = "The DistributionCenterName value cannot exceed 200 characters. ")]
        public string DistributionCenterName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDistributionCenterName => DistributionCenterName != null;

        [StringLength(50, ErrorMessage = "The DistributionCenterCode value cannot exceed 50 characters. ")]
        public string DistributionCenterCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDistributionCenterCode => DistributionCenterCode != null;

        public int? DistributionCenterType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDistributionCenterType => DistributionCenterType != null;

        public int? WarehouseType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseType => WarehouseType != null;

        public int? WarehouseStatus { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseStatus => WarehouseStatus != null;

        public int? Priority { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPriority => Priority != null;

        [StringLength(50, ErrorMessage = "The WarehouseNum value cannot exceed 50 characters. ")]
        public string WarehouseNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseNum => WarehouseNum != null;

        [StringLength(200, ErrorMessage = "The WarehouseName value cannot exceed 200 characters. ")]
        public string WarehouseName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseName => WarehouseName != null;

        [StringLength(50, ErrorMessage = "The CustomerUuid value cannot exceed 50 characters. ")]
        public string CustomerUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCustomerUuid => CustomerUuid != null;

        [StringLength(50, ErrorMessage = "The VendorUuid value cannot exceed 50 characters. ")]
        public string VendorUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasVendorUuid => VendorUuid != null;

        [StringLength(50, ErrorMessage = "The ShippingCarrier value cannot exceed 50 characters. ")]
        public string ShippingCarrier { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingCarrier => ShippingCarrier != null;

        [StringLength(50, ErrorMessage = "The ShippingClass value cannot exceed 50 characters. ")]
        public string ShippingClass { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingClass => ShippingClass != null;

        [StringLength(100, ErrorMessage = "The ShipToName value cannot exceed 100 characters. ")]
        public string ShipToName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToName => ShipToName != null;

        [StringLength(50, ErrorMessage = "The ShipToFirstName value cannot exceed 50 characters. ")]
        public string ShipToFirstName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToFirstName => ShipToFirstName != null;

        [StringLength(50, ErrorMessage = "The ShipToLastName value cannot exceed 50 characters. ")]
        public string ShipToLastName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToLastName => ShipToLastName != null;

        [StringLength(50, ErrorMessage = "The ShipToSuffix value cannot exceed 50 characters. ")]
        public string ShipToSuffix { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToSuffix => ShipToSuffix != null;

        [StringLength(100, ErrorMessage = "The ShipToCompany value cannot exceed 100 characters. ")]
        public string ShipToCompany { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCompany => ShipToCompany != null;

        [StringLength(100, ErrorMessage = "The ShipToCompanyJobTitle value cannot exceed 100 characters. ")]
        public string ShipToCompanyJobTitle { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCompanyJobTitle => ShipToCompanyJobTitle != null;

        [StringLength(100, ErrorMessage = "The ShipToAttention value cannot exceed 100 characters. ")]
        public string ShipToAttention { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToAttention => ShipToAttention != null;

        [StringLength(200, ErrorMessage = "The ShipToAddressLine1 value cannot exceed 200 characters. ")]
        public string ShipToAddressLine1 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToAddressLine1 => ShipToAddressLine1 != null;

        [StringLength(200, ErrorMessage = "The ShipToAddressLine2 value cannot exceed 200 characters. ")]
        public string ShipToAddressLine2 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToAddressLine2 => ShipToAddressLine2 != null;

        [StringLength(200, ErrorMessage = "The ShipToAddressLine3 value cannot exceed 200 characters. ")]
        public string ShipToAddressLine3 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToAddressLine3 => ShipToAddressLine3 != null;

        [StringLength(100, ErrorMessage = "The ShipToCity value cannot exceed 100 characters. ")]
        public string ShipToCity { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCity => ShipToCity != null;

        [StringLength(50, ErrorMessage = "The ShipToState value cannot exceed 50 characters. ")]
        public string ShipToState { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToState => ShipToState != null;

        [StringLength(100, ErrorMessage = "The ShipToStateFullName value cannot exceed 100 characters. ")]
        public string ShipToStateFullName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToStateFullName => ShipToStateFullName != null;

        [StringLength(50, ErrorMessage = "The ShipToPostalCode value cannot exceed 50 characters. ")]
        public string ShipToPostalCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToPostalCode => ShipToPostalCode != null;

        [StringLength(50, ErrorMessage = "The ShipToPostalCodeExt value cannot exceed 50 characters. ")]
        public string ShipToPostalCodeExt { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToPostalCodeExt => ShipToPostalCodeExt != null;

        [StringLength(100, ErrorMessage = "The ShipToCounty value cannot exceed 100 characters. ")]
        public string ShipToCounty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCounty => ShipToCounty != null;

        [StringLength(100, ErrorMessage = "The ShipToCountry value cannot exceed 100 characters. ")]
        public string ShipToCountry { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToCountry => ShipToCountry != null;

        [StringLength(100, ErrorMessage = "The ShipToEmail value cannot exceed 100 characters. ")]
        public string ShipToEmail { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToEmail => ShipToEmail != null;

        [StringLength(50, ErrorMessage = "The ShipToDaytimePhone value cannot exceed 50 characters. ")]
        public string ShipToDaytimePhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToDaytimePhone => ShipToDaytimePhone != null;

        [StringLength(50, ErrorMessage = "The ShipToNightPhone value cannot exceed 50 characters. ")]
        public string ShipToNightPhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipToNightPhone => ShipToNightPhone != null;

        [StringLength(100, ErrorMessage = "The ShipFromName value cannot exceed 100 characters. ")]
        public string ShipFromName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromName => ShipFromName != null;

        [StringLength(50, ErrorMessage = "The ShipFromFirstName value cannot exceed 50 characters. ")]
        public string ShipFromFirstName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromFirstName => ShipFromFirstName != null;

        [StringLength(50, ErrorMessage = "The ShipFromLastName value cannot exceed 50 characters. ")]
        public string ShipFromLastName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromLastName => ShipFromLastName != null;

        [StringLength(50, ErrorMessage = "The ShipFromSuffix value cannot exceed 50 characters. ")]
        public string ShipFromSuffix { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromSuffix => ShipFromSuffix != null;

        [StringLength(100, ErrorMessage = "The ShipFromCompany value cannot exceed 100 characters. ")]
        public string ShipFromCompany { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromCompany => ShipFromCompany != null;

        [StringLength(100, ErrorMessage = "The ShipFromCompanyJobTitle value cannot exceed 100 characters. ")]
        public string ShipFromCompanyJobTitle { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromCompanyJobTitle => ShipFromCompanyJobTitle != null;

        [StringLength(100, ErrorMessage = "The ShipFromAttention value cannot exceed 100 characters. ")]
        public string ShipFromAttention { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromAttention => ShipFromAttention != null;

        [StringLength(200, ErrorMessage = "The ShipFromAddressLine1 value cannot exceed 200 characters. ")]
        public string ShipFromAddressLine1 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromAddressLine1 => ShipFromAddressLine1 != null;

        [StringLength(200, ErrorMessage = "The ShipFromAddressLine2 value cannot exceed 200 characters. ")]
        public string ShipFromAddressLine2 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromAddressLine2 => ShipFromAddressLine2 != null;

        [StringLength(200, ErrorMessage = "The ShipFromAddressLine3 value cannot exceed 200 characters. ")]
        public string ShipFromAddressLine3 { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromAddressLine3 => ShipFromAddressLine3 != null;

        [StringLength(100, ErrorMessage = "The ShipFromCity value cannot exceed 100 characters. ")]
        public string ShipFromCity { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromCity => ShipFromCity != null;

        [StringLength(50, ErrorMessage = "The ShipFromState value cannot exceed 50 characters. ")]
        public string ShipFromState { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromState => ShipFromState != null;

        [StringLength(100, ErrorMessage = "The ShipFromStateFullName value cannot exceed 100 characters. ")]
        public string ShipFromStateFullName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromStateFullName => ShipFromStateFullName != null;

        [StringLength(50, ErrorMessage = "The ShipFromPostalCode value cannot exceed 50 characters. ")]
        public string ShipFromPostalCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromPostalCode => ShipFromPostalCode != null;

        [StringLength(50, ErrorMessage = "The ShipFromPostalCodeExt value cannot exceed 50 characters. ")]
        public string ShipFromPostalCodeExt { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromPostalCodeExt => ShipFromPostalCodeExt != null;

        [StringLength(50, ErrorMessage = "The ShipFromCounty value cannot exceed 50 characters. ")]
        public string ShipFromCounty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromCounty => ShipFromCounty != null;

        [StringLength(100, ErrorMessage = "The ShipFromCountry value cannot exceed 100 characters. ")]
        public string ShipFromCountry { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromCountry => ShipFromCountry != null;

        [StringLength(100, ErrorMessage = "The ShipFromEmail value cannot exceed 100 characters. ")]
        public string ShipFromEmail { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromEmail => ShipFromEmail != null;

        [StringLength(50, ErrorMessage = "The ShipFromDaytimePhone value cannot exceed 50 characters. ")]
        public string ShipFromDaytimePhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromDaytimePhone => ShipFromDaytimePhone != null;

        [StringLength(50, ErrorMessage = "The ShipFromNightPhone value cannot exceed 50 characters. ")]
        public string ShipFromNightPhone { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShipFromNightPhone => ShipFromNightPhone != null;

        [DataType(DataType.DateTime)]
        public DateTime? UpdateDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateDateUtc => UpdateDateUtc != null;

        [StringLength(100, ErrorMessage = "The EnterBy value cannot exceed 100 characters. ")]
        public string EnterBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEnterBy => EnterBy != null;

        [StringLength(100, ErrorMessage = "The UpdateBy value cannot exceed 100 characters. ")]
        public string UpdateBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateBy => UpdateBy != null;



        #endregion Properties - Generated 

        #region Children - Generated 

        #endregion Children - Generated 

    }
}



