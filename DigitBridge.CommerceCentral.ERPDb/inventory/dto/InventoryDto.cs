
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a Inventory Dto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class InventoryDto
    {
        public long? RowNum { get; set; }
        public string UniqueId { get; set; }
        public DateTime? EnterDateUtc { get; set; }
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

        public int? DatabaseNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDatabaseNum => DatabaseNum != null;

        public int? MasterAccountNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMasterAccountNum => MasterAccountNum != null;

        public int? ProfileNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasProfileNum => ProfileNum != null;

        [StringLength(50, ErrorMessage = "The ProductUuid value cannot exceed 50 characters. ")]
        public string ProductUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasProductUuid => ProductUuid != null;

        [StringLength(50, ErrorMessage = "The InventoryUuid value cannot exceed 50 characters. ")]
        public string InventoryUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasInventoryUuid => InventoryUuid != null;

        [StringLength(100, ErrorMessage = "The StyleCode value cannot exceed 100 characters. ")]
        public string StyleCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasStyleCode => StyleCode != null;

        [StringLength(50, ErrorMessage = "The Color value cannot exceed 50 characters. ")]
        public string Color { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasColor => Color != null;

        [StringLength(50, ErrorMessage = "The SizeType value cannot exceed 50 characters. ")]
        public string SizeType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSizeType => SizeType != null;

        [StringLength(50, ErrorMessage = "The SizeSystem value cannot exceed 50 characters. ")]
        public string SizeSystem { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSizeSystem => SizeSystem != null;

        [StringLength(50, ErrorMessage = "The Size value cannot exceed 50 characters. ")]
        public string Size { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSize => Size != null;

        [StringLength(50, ErrorMessage = "The Width value cannot exceed 50 characters. ")]
        public string Width { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWidth => Width != null;

        [StringLength(50, ErrorMessage = "The Length value cannot exceed 50 characters. ")]
        public string Length { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLength => Length != null;

        [StringLength(50, ErrorMessage = "The ClassCode value cannot exceed 50 characters. ")]
        public string ClassCode { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasClassCode => ClassCode != null;

        [StringLength(50, ErrorMessage = "The Department value cannot exceed 50 characters. ")]
        public string Department { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDepartment => Department != null;

        [StringLength(50, ErrorMessage = "The Division value cannot exceed 50 characters. ")]
        public string Division { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDivision => Division != null;

        [StringLength(20, ErrorMessage = "The Year value cannot exceed 20 characters. ")]
        public string Year { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasYear => Year != null;

        [StringLength(50, ErrorMessage = "The PriceRule value cannot exceed 50 characters. ")]
        public string PriceRule { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPriceRule => PriceRule != null;

        public int? LeadTimeDay { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLeadTimeDay => LeadTimeDay != null;

        public decimal? OrderSize { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOrderSize => OrderSize != null;

        public decimal? MinStock { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMinStock => MinStock != null;

        [StringLength(100, ErrorMessage = "The SKU value cannot exceed 100 characters. ")]
        public string SKU { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSKU => SKU != null;

        [StringLength(200, ErrorMessage = "The Description value cannot exceed 200 characters. ")]
        public string Description { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDescription => Description != null;

        [StringLength(50, ErrorMessage = "The WarehouseUuid value cannot exceed 50 characters. ")]
        public string WarehouseUuid { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseUuid => WarehouseUuid != null;

        [StringLength(50, ErrorMessage = "The WarehouseNum value cannot exceed 50 characters. ")]
        public string WarehouseNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseNum => WarehouseNum != null;

        [StringLength(200, ErrorMessage = "The WarehouseName value cannot exceed 200 characters. ")]
        public string WarehouseName { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasWarehouseName => WarehouseName != null;

        [StringLength(100, ErrorMessage = "The LotNum value cannot exceed 100 characters. ")]
        public string LotNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLotNum => LotNum != null;

        [DataType(DataType.DateTime)]
        public DateTime? LotInDate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLotInDate => LotInDate != null;

        [DataType(DataType.DateTime)]
        public DateTime? LotExpDate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLotExpDate => LotExpDate != null;

        [StringLength(200, ErrorMessage = "The LotDescription value cannot exceed 200 characters. ")]
        public string LotDescription { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLotDescription => LotDescription != null;

        [StringLength(100, ErrorMessage = "The LpnNum value cannot exceed 100 characters. ")]
        public string LpnNum { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLpnNum => LpnNum != null;

        [StringLength(200, ErrorMessage = "The LpnDescription value cannot exceed 200 characters. ")]
        public string LpnDescription { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasLpnDescription => LpnDescription != null;

        [StringLength(500, ErrorMessage = "The Notes value cannot exceed 500 characters. ")]
        public string Notes { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasNotes => Notes != null;

        [StringLength(10, ErrorMessage = "The Currency value cannot exceed 10 characters. ")]
        public string Currency { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCurrency => Currency != null;

        [StringLength(50, ErrorMessage = "The UOM value cannot exceed 50 characters. ")]
        public string UOM { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUOM => UOM != null;

        [StringLength(50, ErrorMessage = "The PackType value cannot exceed 50 characters. ")]
        public string PackType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPackType => PackType != null;

        public decimal? PackQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasPackQty => PackQty != null;

        public decimal? QtyPerPallot { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasQtyPerPallot => QtyPerPallot != null;

        public decimal? QtyPerCase { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasQtyPerCase => QtyPerCase != null;

        public decimal? QtyPerBox { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasQtyPerBox => QtyPerBox != null;

        [StringLength(50, ErrorMessage = "The DefaultPackType value cannot exceed 50 characters. ")]
        public string DefaultPackType { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDefaultPackType => DefaultPackType != null;

        public decimal? Instock { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasInstock => Instock != null;

        public decimal? OnHand { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOnHand => OnHand != null;

        public decimal? OpenSoQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOpenSoQty => OpenSoQty != null;

        public decimal? OpenFulfillmentQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOpenFulfillmentQty => OpenFulfillmentQty != null;

        public decimal? AvaQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAvaQty => AvaQty != null;

        public decimal? OpenPoQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOpenPoQty => OpenPoQty != null;

        public decimal? OpenInTransitQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOpenInTransitQty => OpenInTransitQty != null;

        public decimal? OpenWipQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasOpenWipQty => OpenWipQty != null;

        public decimal? ProjectedQty { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasProjectedQty => ProjectedQty != null;

        public decimal? BaseCost { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasBaseCost => BaseCost != null;

        public decimal? TaxRate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTaxRate => TaxRate != null;

        public decimal? TaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTaxAmount => TaxAmount != null;

        public decimal? DiscountRate { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDiscountRate => DiscountRate != null;

        public decimal? DiscountAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasDiscountAmount => DiscountAmount != null;

        public decimal? ShippingAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingAmount => ShippingAmount != null;

        public decimal? ShippingTaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasShippingTaxAmount => ShippingTaxAmount != null;

        public decimal? MiscAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMiscAmount => MiscAmount != null;

        public decimal? MiscTaxAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasMiscTaxAmount => MiscTaxAmount != null;

        public decimal? ChargeAndAllowanceAmount { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasChargeAndAllowanceAmount => ChargeAndAllowanceAmount != null;

        public decimal? UnitCost { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUnitCost => UnitCost != null;

        public decimal? AvgCost { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasAvgCost => AvgCost != null;

        public decimal? SalesCost { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasSalesCost => SalesCost != null;

        public bool? Stockable { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasStockable => Stockable != null;

        public bool? IsAr { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasIsAr => IsAr != null;

        public bool? IsAp { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasIsAp => IsAp != null;

        public bool? Taxable { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasTaxable => Taxable != null;

        public bool? Costable { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasCostable => Costable != null;

        [DataType(DataType.DateTime)]
        public DateTime? UpdateDateUtc { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateDateUtc => UpdateDateUtc != null;

        [StringLength(100, ErrorMessage = "The EnterBy value cannot exceed 100 characters. ")]
        public string EnterBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasEnterBy => EnterBy != null;

        [StringLength(100, ErrorMessage = "The UpdateBy value cannot exceed 100 characters. ")]
        public string UpdateBy { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool HasUpdateBy => UpdateBy != null;



        #endregion Properties - Generated 

        #region Children - Generated 

		public InventoryAttributesDto InventoryAttributes { get; set; }
		[XmlIgnore, JsonIgnore, IgnoreCompare]
		public bool HasInventoryAttributes => InventoryAttributes != null;
		
        #endregion Children - Generated 

    }
}



