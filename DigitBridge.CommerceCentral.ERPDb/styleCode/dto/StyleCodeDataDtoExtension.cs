//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using CsvHelper;
using System.IO;

using Bogus;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a StyleCodeDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class StyleCodeDataDtoExtension
    {
        /// <summary>
        /// Merge StyleCodeDataDto header objects to one dynamic object
        /// </summary>
        /// <param name="dto">StyleCodeDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>Single dynamic object include all properties of Dto header objects</returns>
        public static IEnumerable<dynamic> MergeHeaderRecord(this StyleCodeDataDto dto, bool withHeaderText = false)
        {
            var result = new List<dynamic>();
            if(!dto.HasStyleCode)
                return result;
            //TODO change to merge Dto children object
            //if (withHeaderText)
            //    result.Add(dto.SalesOrderHeader.MergeName(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            //result.Add(dto.SalesOrderHeader.Merge(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeDetailRecord(this StyleCodeDataDto dto, bool withHeaderText = false)
        {
            return null;
            //TODO change to merge Dto children object
            //var result = new List<dynamic>();
            //if (!dto.HasSalesOrderItems) 
            //    return result;
            //
            //var salesOrderItems = new SalesOrderItems() { SalesOrderItemsAttributes = new SalesOrderItemsAttributes()};
            //
            //if (withHeaderText)
            //    result.Add(salesOrderItems.MergeName(salesOrderItems.SalesOrderItemsAttributes));
            //
            //foreach (var item in dto.SalesOrderItems)
            //{
            //    result.Add(item.Merge(item.SalesOrderItemsAttributes));
            //}
            //return result;
        }


        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <param name="count">Generate multiple fake data</param>
        /// <returns>list for Fake data</returns>
        public static IList<StyleCodeDataDto> GetFakerData(this StyleCodeDataDto dto, int count)
        {
            var obj = new StyleCodeDataDto();
            var datas = new List<StyleCodeDataDto>();
            for (int i = 0; i < count; i++)
                datas.Add(obj.GetFakerData());
            return datas;
        }

        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <returns>single Fake data</returns>
        public static StyleCodeDataDto GetFakerData(this StyleCodeDataDto dto)
        {
            var data = new StyleCodeDataDto();
			data.StyleCode = new StyleCodeDto().GetFaker().Generate();
			data.StyleCodeAttributes = new StyleCodeAttributesDto().GetFaker().Generate();
            return data;
        }


		/// <summary>
		/// Get faker object for StyleCodeDto
		/// </summary>
		/// <param name="dto">StyleCodeDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<StyleCodeDto> GetFaker(this StyleCodeDto dto)
		{
			#region faker data rules
			return new Faker<StyleCodeDto>()
				.RuleFor(u => u.DatabaseNum, f => null)
				.RuleFor(u => u.MasterAccountNum, f => null)
				.RuleFor(u => u.ProfileNum, f => null)
				.RuleFor(u => u.StyleCodeUuid, f => String.Empty)
				.RuleFor(u => u.ProductStyleCode, f => f.Lorem.Word())
				.RuleFor(u => u.VariationSet, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.VariationSetUuid, f => f.Random.Guid().ToString())
				.RuleFor(u => u.ColorPatternCode, f => f.Commerce.Color())
				.RuleFor(u => u.SizeType, f => f.Lorem.Sentence().TruncateTo(1000))
				.RuleFor(u => u.SizeCode, f => f.Lorem.Word())
				.RuleFor(u => u.WidthCode, f => f.Lorem.Word())
				.RuleFor(u => u.LengthCode, f => f.Lorem.Word())
				.RuleFor(u => u.SKU, f => f.Commerce.Product())
				.RuleFor(u => u.StyleStatus, f => f.Random.Int(1, 100))
				.RuleFor(u => u.StyleType, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ClassCode, f => f.Lorem.Word())
				.RuleFor(u => u.SubClassCode, f => f.Lorem.Word())
				.RuleFor(u => u.DepartmentCode, f => f.Lorem.Word())
				.RuleFor(u => u.DivisionCode, f => f.Lorem.Word())
				.RuleFor(u => u.OEMCode, f => f.Lorem.Word())
				.RuleFor(u => u.AlternateCode, f => f.Lorem.Word())
				.RuleFor(u => u.Remark, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.Model, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.CatalogPage, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.CategoryCode, f => f.Lorem.Word())
				.RuleFor(u => u.GroupCode, f => f.Lorem.Word())
				.RuleFor(u => u.SubGroupCode, f => f.Lorem.Word())
				.RuleFor(u => u.PriceRule, f => f.PickRandom(FakerExtension.PriceRule))
				.RuleFor(u => u.Price, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.MAPPrice, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.MSRP, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.Stockable, f => f.Random.Bool())
				.RuleFor(u => u.IsAr, f => f.Random.Bool())
				.RuleFor(u => u.IsAp, f => f.Random.Bool())
				.RuleFor(u => u.Taxable, f => f.Random.Bool())
				.RuleFor(u => u.Costable, f => f.Random.Bool())
				.RuleFor(u => u.IsProfit, f => f.Random.Bool())
				.RuleFor(u => u.Release, f => f.Random.Bool())
				.RuleFor(u => u.Currency, f => f.Lorem.Sentence().TruncateTo(10))
				.RuleFor(u => u.UOM, f => f.PickRandom(FakerExtension.UOM))
				.RuleFor(u => u.QtyPerPallot, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.QtyPerCase, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.QtyPerBox, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.PackType, f => f.PickRandom(FakerExtension.PackType))
				.RuleFor(u => u.PackQty, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.DefaultPackType, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.DefaultWarehouseCode, f => f.Lorem.Word())
				.RuleFor(u => u.DefaultVendorCode, f => f.Lorem.Word())
				.RuleFor(u => u.PoSize, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.MinStock, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.SalesCost, f => f.Random.Decimal(1, 1000, 2))
				.RuleFor(u => u.LeadTimeDay, f => f.Random.Int(1, 100))
				.RuleFor(u => u.ProductYear, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.Brand, f => f.Lorem.Sentence().TruncateTo(150))
				.RuleFor(u => u.Manufacturer, f => f.Lorem.Sentence().TruncateTo(255))
				.RuleFor(u => u.ProductTitle, f => f.Lorem.Sentence().TruncateTo(500))
				.RuleFor(u => u.LongDescription, f => f.Commerce.ProductName())
				.RuleFor(u => u.ShortDescription, f => f.Commerce.ProductName())
				.RuleFor(u => u.Subtitle, f => f.Random.AlphaNumeric(50))
				.RuleFor(u => u.Notes, f => f.Lorem.Sentence().TruncateTo(500))
				.RuleFor(u => u.SourceCode, f => f.Lorem.Word())
				.RuleFor(u => u.UpdateDateUtc, f => null)
				.RuleFor(u => u.EnterBy, f => null)
				.RuleFor(u => u.UpdateBy, f => null)
				;
			#endregion faker data rules
		}
		/// <summary>
		/// Get faker object for StyleCodeAttributesDto
		/// </summary>
		/// <param name="dto">StyleCodeAttributesDto</param>
		/// <returns>Faker object use to generate data</returns>
		public static Faker<StyleCodeAttributesDto> GetFaker(this StyleCodeAttributesDto dto)
		{
			#region faker data rules
			return new Faker<StyleCodeAttributesDto>()
				.RuleFor(u => u.StyleCodeUuid, f => String.Empty)
				.RuleFor(u => u.Fields, f => f.Random.JObject())
				;
			#endregion faker data rules
		}

    }
}


