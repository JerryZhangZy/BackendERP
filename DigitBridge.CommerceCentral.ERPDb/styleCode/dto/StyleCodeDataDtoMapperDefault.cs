    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a StyleCodeDataDtoMapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class StyleCodeDataDtoMapperDefault : IDtoMapper<StyleCodeData, StyleCodeDataDto> 
    {
        #region read from dto to data

        public virtual StyleCodeData ReadDto(StyleCodeData data, StyleCodeDataDto dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new StyleCodeData();
                data.New();
            }

			if (dto.StyleCode != null)
			{
				if (data.StyleCode is null)
					data.StyleCode = data.NewStyleCode();
				ReadStyleCode(data.StyleCode, dto.StyleCode);
			}
			if (dto.StyleCodeAttributes != null)
			{
				if (data.StyleCodeAttributes is null)
					data.StyleCodeAttributes = data.NewStyleCodeAttributes();
				ReadStyleCodeAttributes(data.StyleCodeAttributes, dto.StyleCodeAttributes);
			}

            data.CheckIntegrity();
            return data;
        }

		protected virtual void ReadStyleCode(StyleCode data, StyleCodeDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasDatabaseNum) data.DatabaseNum = dto.DatabaseNum.ToInt();
			if (dto.HasMasterAccountNum) data.MasterAccountNum = dto.MasterAccountNum.ToInt();
			if (dto.HasProfileNum) data.ProfileNum = dto.ProfileNum.ToInt();
			if (dto.HasStyleCodeUuid) data.StyleCodeUuid = dto.StyleCodeUuid;
			if (dto.HasProductStyleCode) data.ProductStyleCode = dto.ProductStyleCode;
			if (dto.HasVariationSet) data.VariationSet = dto.VariationSet;
			if (dto.HasVariationSetUuid) data.VariationSetUuid = dto.VariationSetUuid;
			if (dto.HasColorPatternCode) data.ColorPatternCode = dto.ColorPatternCode;
			if (dto.HasSizeType) data.SizeType = dto.SizeType;
			if (dto.HasSizeCode) data.SizeCode = dto.SizeCode;
			if (dto.HasWidthCode) data.WidthCode = dto.WidthCode;
			if (dto.HasLengthCode) data.LengthCode = dto.LengthCode;
			if (dto.HasSKU) data.SKU = dto.SKU;
			if (dto.HasStyleStatus) data.StyleStatus = dto.StyleStatus.ToInt();
			if (dto.HasStyleType) data.StyleType = dto.StyleType.ToInt();
			if (dto.HasClassCode) data.ClassCode = dto.ClassCode;
			if (dto.HasSubClassCode) data.SubClassCode = dto.SubClassCode;
			if (dto.HasDepartmentCode) data.DepartmentCode = dto.DepartmentCode;
			if (dto.HasDivisionCode) data.DivisionCode = dto.DivisionCode;
			if (dto.HasOEMCode) data.OEMCode = dto.OEMCode;
			if (dto.HasAlternateCode) data.AlternateCode = dto.AlternateCode;
			if (dto.HasRemark) data.Remark = dto.Remark;
			if (dto.HasModel) data.Model = dto.Model;
			if (dto.HasCatalogPage) data.CatalogPage = dto.CatalogPage;
			if (dto.HasCategoryCode) data.CategoryCode = dto.CategoryCode;
			if (dto.HasGroupCode) data.GroupCode = dto.GroupCode;
			if (dto.HasSubGroupCode) data.SubGroupCode = dto.SubGroupCode;
			if (dto.HasPriceRule) data.PriceRule = dto.PriceRule;
			if (dto.HasPrice) data.Price = dto.Price.ToDecimal();
			if (dto.HasMAPPrice) data.MAPPrice = dto.MAPPrice.ToDecimal();
			if (dto.HasMSRP) data.MSRP = dto.MSRP.ToDecimal();
			if (dto.HasStockable) data.Stockable = dto.Stockable.ToBool();
			if (dto.HasIsAr) data.IsAr = dto.IsAr.ToBool();
			if (dto.HasIsAp) data.IsAp = dto.IsAp.ToBool();
			if (dto.HasTaxable) data.Taxable = dto.Taxable.ToBool();
			if (dto.HasCostable) data.Costable = dto.Costable.ToBool();
			if (dto.HasIsProfit) data.IsProfit = dto.IsProfit.ToBool();
			if (dto.HasRelease) data.Release = dto.Release.ToBool();
			if (dto.HasCurrency) data.Currency = dto.Currency;
			if (dto.HasUOM) data.UOM = dto.UOM;
			if (dto.HasQtyPerPallot) data.QtyPerPallot = dto.QtyPerPallot.ToDecimal();
			if (dto.HasQtyPerCase) data.QtyPerCase = dto.QtyPerCase.ToDecimal();
			if (dto.HasQtyPerBox) data.QtyPerBox = dto.QtyPerBox.ToDecimal();
			if (dto.HasPackType) data.PackType = dto.PackType;
			if (dto.HasPackQty) data.PackQty = dto.PackQty.ToDecimal();
			if (dto.HasDefaultPackType) data.DefaultPackType = dto.DefaultPackType;
			if (dto.HasDefaultWarehouseCode) data.DefaultWarehouseCode = dto.DefaultWarehouseCode;
			if (dto.HasDefaultVendorCode) data.DefaultVendorCode = dto.DefaultVendorCode;
			if (dto.HasPoSize) data.PoSize = dto.PoSize.ToDecimal();
			if (dto.HasMinStock) data.MinStock = dto.MinStock.ToDecimal();
			if (dto.HasSalesCost) data.SalesCost = dto.SalesCost.ToDecimal();
			if (dto.HasLeadTimeDay) data.LeadTimeDay = dto.LeadTimeDay.ToInt();
			if (dto.HasProductYear) data.ProductYear = dto.ProductYear;
			if (dto.HasBrand) data.Brand = dto.Brand;
			if (dto.HasManufacturer) data.Manufacturer = dto.Manufacturer;
			if (dto.HasProductTitle) data.ProductTitle = dto.ProductTitle;
			if (dto.HasLongDescription) data.LongDescription = dto.LongDescription;
			if (dto.HasShortDescription) data.ShortDescription = dto.ShortDescription;
			if (dto.HasSubtitle) data.Subtitle = dto.Subtitle;
			if (dto.HasNotes) data.Notes = dto.Notes;
			if (dto.HasSourceCode) data.SourceCode = dto.SourceCode;
			if (dto.HasUpdateDateUtc) data.UpdateDateUtc = dto.UpdateDateUtc;
			if (dto.HasEnterBy) data.EnterBy = dto.EnterBy;
			if (dto.HasUpdateBy) data.UpdateBy = dto.UpdateBy;

			#endregion read properties

			data.CheckIntegrity();
			return;
		}


		protected virtual void ReadStyleCodeAttributes(StyleCodeAttributes data, StyleCodeAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region read all not null properties

			if (dto.HasStyleCodeUuid) data.StyleCodeUuid = dto.StyleCodeUuid;
			if (dto.HasFields) data.Fields.LoadJson(dto.Fields);

			#endregion read properties

			data.CheckIntegrity();
			return;
		}



        #endregion read from dto to data

        #region write to dto from data

        public virtual StyleCodeDataDto WriteDto(StyleCodeData data, StyleCodeDataDto dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new StyleCodeDataDto();

            data.CheckIntegrity();

			if (data.StyleCode != null)
			{
				dto.StyleCode = new StyleCodeDto();
				WriteStyleCode(data.StyleCode, dto.StyleCode);
			}
			if (data.StyleCodeAttributes != null)
			{
				dto.StyleCodeAttributes = new StyleCodeAttributesDto();
				WriteStyleCodeAttributes(data.StyleCodeAttributes, dto.StyleCodeAttributes);
			}
            return dto;
        }

		protected virtual void WriteStyleCode(StyleCode data, StyleCodeDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.DatabaseNum = data.DatabaseNum;
			dto.MasterAccountNum = data.MasterAccountNum;
			dto.ProfileNum = data.ProfileNum;
			dto.StyleCodeUuid = data.StyleCodeUuid;
			dto.ProductStyleCode = data.ProductStyleCode;
			dto.VariationSet = data.VariationSet;
			dto.VariationSetUuid = data.VariationSetUuid;
			dto.ColorPatternCode = data.ColorPatternCode;
			dto.SizeType = data.SizeType;
			dto.SizeCode = data.SizeCode;
			dto.WidthCode = data.WidthCode;
			dto.LengthCode = data.LengthCode;
			dto.SKU = data.SKU;
			dto.StyleStatus = data.StyleStatus;
			dto.StyleType = data.StyleType;
			dto.ClassCode = data.ClassCode;
			dto.SubClassCode = data.SubClassCode;
			dto.DepartmentCode = data.DepartmentCode;
			dto.DivisionCode = data.DivisionCode;
			dto.OEMCode = data.OEMCode;
			dto.AlternateCode = data.AlternateCode;
			dto.Remark = data.Remark;
			dto.Model = data.Model;
			dto.CatalogPage = data.CatalogPage;
			dto.CategoryCode = data.CategoryCode;
			dto.GroupCode = data.GroupCode;
			dto.SubGroupCode = data.SubGroupCode;
			dto.PriceRule = data.PriceRule;
			dto.Price = data.Price;
			dto.MAPPrice = data.MAPPrice;
			dto.MSRP = data.MSRP;
			dto.Stockable = data.Stockable;
			dto.IsAr = data.IsAr;
			dto.IsAp = data.IsAp;
			dto.Taxable = data.Taxable;
			dto.Costable = data.Costable;
			dto.IsProfit = data.IsProfit;
			dto.Release = data.Release;
			dto.Currency = data.Currency;
			dto.UOM = data.UOM;
			dto.QtyPerPallot = data.QtyPerPallot;
			dto.QtyPerCase = data.QtyPerCase;
			dto.QtyPerBox = data.QtyPerBox;
			dto.PackType = data.PackType;
			dto.PackQty = data.PackQty;
			dto.DefaultPackType = data.DefaultPackType;
			dto.DefaultWarehouseCode = data.DefaultWarehouseCode;
			dto.DefaultVendorCode = data.DefaultVendorCode;
			dto.PoSize = data.PoSize;
			dto.MinStock = data.MinStock;
			dto.SalesCost = data.SalesCost;
			dto.LeadTimeDay = data.LeadTimeDay;
			dto.ProductYear = data.ProductYear;
			dto.Brand = data.Brand;
			dto.Manufacturer = data.Manufacturer;
			dto.ProductTitle = data.ProductTitle;
			dto.LongDescription = data.LongDescription;
			dto.ShortDescription = data.ShortDescription;
			dto.Subtitle = data.Subtitle;
			dto.Notes = data.Notes;
			dto.SourceCode = data.SourceCode;
			dto.UpdateDateUtc = data.UpdateDateUtc;
			dto.EnterBy = data.EnterBy;
			dto.UpdateBy = data.UpdateBy;
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}

		protected virtual void WriteStyleCodeAttributes(StyleCodeAttributes data, StyleCodeAttributesDto dto)
		{
			if (data is null || dto is null)
				return;

			#region write all properties with null

			dto.RowNum = data.RowNum;
			dto.StyleCodeUuid = data.StyleCodeUuid;
			dto.Fields = data.Fields.ToJson();
			dto.EnterDateUtc = data.EnterDateUtc;
			dto.DigitBridgeGuid = data.DigitBridgeGuid;

			#endregion read properties

			return;
		}


        #endregion write to dto from data

    }
}



