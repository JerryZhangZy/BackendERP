              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace DigitBridge.CommerceCentral.ERPDb
{
    /// <summary>
    /// Represents a StyleCodeData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    public partial class StyleCodeData : StructureRepository<StyleCodeData>
    {
        public StyleCodeData() : base() {}
        public StyleCodeData(IDataBaseFactory dbFactory): base(dbFactory) {}

        [JsonIgnore, XmlIgnore]
        public new bool IsNew => StyleCode.IsNew;

        [JsonIgnore, XmlIgnore]
        public new string UniqueId => StyleCode.UniqueId;
        
		 [JsonIgnore, XmlIgnore] 
		public static string StyleCodeTable ="StyleCode ";
		
		 [JsonIgnore, XmlIgnore] 
		public static string StyleCodeAttributesTable ="StyleCodeAttributes ";
		
        #region CRUD Methods

        public override bool Equals(StyleCodeData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!string.IsNullOrWhiteSpace(UniqueId) && !string.IsNullOrWhiteSpace(other.UniqueId) && !UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(StyleCodeData other)
        {
			if (StyleCode == null && other.StyleCode != null || StyleCode != null && other.StyleCode == null) 
				return false; 
			if (StyleCode != null && other.StyleCode != null && !StyleCode.Equals(other.StyleCode)) 
				return false; 
			if (StyleCodeAttributes == null && other.StyleCodeAttributes != null || StyleCodeAttributes != null && other.StyleCodeAttributes == null) 
				return false; 
			if (StyleCodeAttributes != null && other.StyleCodeAttributes != null && !StyleCodeAttributes.Equals(other.StyleCodeAttributes)) 
				return false; 
            return true;
        }

        // Check Children table Integrity
        public override StyleCodeData CheckIntegrity()
        {
			if (StyleCode is null) return this; 
			StyleCode.CheckIntegrity(); 
			CheckIntegrityStyleCodeAttributes(); 
			CheckIntegrityOthers(); 
            return this;
        }

        partial void ClearOthers();
        public override void Clear()
        {
			StyleCode?.Clear(); 
			StyleCodeAttributes?.Clear(); 
			ClearOthers(); 
			if (_OnClear != null)
				_OnClear(this);
            return;
        }

        public override void New()
        {
            Clear();
			StyleCode = NewStyleCode(); 
			StyleCodeAttributes = NewStyleCodeAttributes(); 
            return;
        }

        public virtual void CopyFrom(StyleCodeData data)
        {
			CopyStyleCodeFrom(data); 
			CopyStyleCodeAttributesFrom(data); 
            CheckIntegrity();
            return;
        }

        public override StyleCodeData Clone()
        {
			var newData = new StyleCodeData(); 
			newData.New(); 
			newData?.CopyFrom(this); 
			newData.StyleCode.ClearMetaData(); 
			newData.StyleCodeAttributes.ClearMetaData(); 
            newData.CheckIntegrity();
            return newData;
        }

        public override bool Get(long RowNum)
        {
			var obj = GetStyleCode(RowNum); 
			if (obj is null) return false; 
			StyleCode = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override bool GetById(string StyleCodeUuid)
        {
			var obj = GetStyleCodeByStyleCodeUuid(StyleCodeUuid); 
			if (obj is null) return false; 
			StyleCode = obj; 
			GetOthers(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual void GetOthers()
        {
            
			if (string.IsNullOrEmpty(StyleCode.StyleCodeUuid)) return; 
			StyleCodeAttributes = GetStyleCodeAttributesByStyleCodeUuid(StyleCode.StyleCodeUuid); 
        }

        public override bool Save()
        {
			if (StyleCode is null || string.IsNullOrEmpty(StyleCode.StyleCodeUuid)) return false; 
			CheckIntegrity();
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin();

			 if (NeedSave(StyleCodeTable))
			{
				StyleCode.SetDataBaseFactory(dbFactory);
				if (!StyleCode.Save()) return false;
			}

			 if (NeedSave(StyleCodeAttributesTable))
			{
				if (StyleCodeAttributes != null) 
					StyleCodeAttributes.SetDataBaseFactory(dbFactory)?.Save();
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override bool Delete()
        {
			if (StyleCode is null || string.IsNullOrEmpty(StyleCode.StyleCodeUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 

			 if (NeedDelete(StyleCodeTable))
			{
				StyleCode.SetDataBaseFactory(dbFactory); 
				if (StyleCode.Delete() <= 0) return false; 
			}
			 if (NeedDelete(StyleCodeAttributesTable))
			{
				if (StyleCodeAttributes != null) 
					StyleCodeAttributes?.SetDataBaseFactory(dbFactory)?.Delete(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }


        public override async Task<bool> GetAsync(long RowNum)
        {
			var obj = await GetStyleCodeAsync(RowNum); 
			if (obj is null) return false; 
			StyleCode = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        public override async Task<bool> GetByIdAsync(string StyleCodeUuid)
        {
			var obj = await GetStyleCodeByStyleCodeUuidAsync(StyleCodeUuid); 
			if (obj is null) return false; 
			StyleCode = obj; 
			await GetOthersAsync(); 
			if (_OnAfterLoad != null)
				_OnAfterLoad(this);
            return true;
        }

        protected virtual async Task GetOthersAsync()
        {
            
			if (string.IsNullOrEmpty(StyleCode.StyleCodeUuid)) return; 
			StyleCodeAttributes = await GetStyleCodeAttributesByStyleCodeUuidAsync(StyleCode.StyleCodeUuid); 
        }

        public override async Task<bool> SaveAsync()
        {
			if (StyleCode is null || string.IsNullOrEmpty(StyleCode.StyleCodeUuid)) return false; 
			CheckIntegrity(); 
			if (_OnBeforeSave != null)
				if (!_OnBeforeSave(this)) return false;
			dbFactory.Begin(); 

			 if (NeedSave(StyleCodeTable))
			{
				StyleCode.SetDataBaseFactory(dbFactory); 
				if (!(await StyleCode.SaveAsync())) return false; 
			}
			 if (NeedSave(StyleCodeAttributesTable))
			{
				if (StyleCodeAttributes != null) 
					await StyleCodeAttributes.SetDataBaseFactory(dbFactory).SaveAsync(); 
			}

			if (_OnSave != null)
			{
				if (!_OnSave(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterSave != null)
				_OnAfterSave(this);
            return true;
        }

        public override async Task<bool> DeleteAsync()
        {
			if (StyleCode is null || string.IsNullOrEmpty(StyleCode.StyleCodeUuid)) return false; 
			if (_OnBeforeDelete != null)
				if (!_OnBeforeDelete(this)) return false;
			dbFactory.Begin(); 
			 if (NeedDelete(StyleCodeTable))
			{
			StyleCode.SetDataBaseFactory(dbFactory); 
			if ((await StyleCode.DeleteAsync()) <= 0) return false; 
			}
			 if (NeedDelete(StyleCodeAttributesTable))
			{
				if (StyleCodeAttributes != null) 
					await StyleCodeAttributes.SetDataBaseFactory(dbFactory).DeleteAsync(); 
			}
			if (_OnDelete != null)
			{
				if (!_OnDelete(dbFactory, this))
				{
					dbFactory.Abort();
					return false;
				}
			}
			dbFactory.Commit(); 
			if (_OnAfterDelete != null)
				_OnAfterDelete(this);
            return true;
        }

        #endregion CRUD Methods


        #region StyleCode - Generated 
    

        // one to one children
        protected StyleCode _StyleCode;

        public virtual StyleCode StyleCode 
        { 
            get => _StyleCode;
            set => _StyleCode = value?.SetParent(this); 
        }

        public virtual void CopyStyleCodeFrom(StyleCodeData data) => 
            StyleCode?.CopyFrom(data.StyleCode, new string[] {"StyleCodeUuid"});

        public virtual StyleCode NewStyleCode() => new StyleCode(dbFactory).SetParent(this);

        public virtual StyleCode GetStyleCode(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<StyleCode>(RowNum);

        public virtual StyleCode GetStyleCodeByStyleCodeUuid(string StyleCodeUuid) =>
            (string.IsNullOrEmpty(StyleCodeUuid)) ? null : dbFactory.GetById<StyleCode>(StyleCodeUuid);

        public virtual bool SaveStyleCode(StyleCode data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteStyleCode(StyleCode data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<StyleCode> GetStyleCodeAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<StyleCode>(RowNum);

        public virtual async Task<StyleCode> GetStyleCodeByStyleCodeUuidAsync(string StyleCodeUuid) =>
            (string.IsNullOrEmpty(StyleCodeUuid)) ? null : await dbFactory.GetByIdAsync<StyleCode>(StyleCodeUuid);

        public virtual async Task<bool> SaveStyleCodeAsync(StyleCode data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteStyleCodeAsync(StyleCode data) =>
            (data is null) ? 0 : await data.DeleteAsync();




        #endregion StyleCode - Generated 

        #region StyleCodeAttributes - Generated 
    

        // one to one children
        protected StyleCodeAttributes _StyleCodeAttributes;

        public virtual StyleCodeAttributes StyleCodeAttributes 
        { 
            get => _StyleCodeAttributes;
            set => _StyleCodeAttributes = value?.SetParent(this); 
        }

        public virtual void CopyStyleCodeAttributesFrom(StyleCodeData data) => 
            StyleCodeAttributes?.CopyFrom(data.StyleCodeAttributes, new string[] {"StyleCodeUuid"});

        public virtual StyleCodeAttributes NewStyleCodeAttributes() => new StyleCodeAttributes(dbFactory).SetParent(this);

        public virtual StyleCodeAttributes GetStyleCodeAttributes(long RowNum) =>
            (RowNum <= 0) ? null : dbFactory.Get<StyleCodeAttributes>(RowNum);

        public virtual StyleCodeAttributes GetStyleCodeAttributesByStyleCodeUuid(string StyleCodeUuid) =>
            (string.IsNullOrEmpty(StyleCodeUuid)) ? null : dbFactory.GetById<StyleCodeAttributes>(StyleCodeUuid);

        public virtual bool SaveStyleCodeAttributes(StyleCodeAttributes data) =>
            (data is null) ? false : data.Save();

        public virtual int DeleteStyleCodeAttributes(StyleCodeAttributes data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<StyleCodeAttributes> GetStyleCodeAttributesAsync(long RowNum) =>
            (RowNum <= 0) ? null : await dbFactory.GetAsync<StyleCodeAttributes>(RowNum);

        public virtual async Task<StyleCodeAttributes> GetStyleCodeAttributesByStyleCodeUuidAsync(string StyleCodeUuid) =>
            (string.IsNullOrEmpty(StyleCodeUuid)) ? null : await dbFactory.GetByIdAsync<StyleCodeAttributes>(StyleCodeUuid);

        public virtual async Task<bool> SaveStyleCodeAttributesAsync(StyleCodeAttributes data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> DeleteStyleCodeAttributesAsync(StyleCodeAttributes data) =>
            (data is null) ? 0 : await data.DeleteAsync();

        public virtual StyleCodeAttributes CheckIntegrityStyleCodeAttributes()
        {
            if (StyleCodeAttributes is null || StyleCode is null) 
                return StyleCodeAttributes;
            StyleCodeAttributes.SetParent(this);
            if (StyleCodeAttributes.StyleCodeUuid != StyleCode.StyleCodeUuid)
                StyleCodeAttributes.StyleCodeUuid = StyleCode.StyleCodeUuid;
            StyleCodeAttributes.CheckIntegrity();
            return StyleCodeAttributes;
        }



        #endregion StyleCodeAttributes - Generated 


    }
}



