
    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPApi
{
    /// <summary>
    /// Request and Response payload object for Add API
    /// </summary>
    [Serializable()]
    public class InvoiceReturnPayloadAdd
    {
        /// <summary>
        /// (Request Data) InvoiceTransaction object to add.
        /// (Response Data) InvoiceTransaction object which has been added.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) InvoiceTransaction object to add.")]
        public InvoiceTransactionDataDto InvoiceTransaction { get; set; }

        internal static InvoiceReturnPayloadAdd GetSampleData()
        {
            var data = new InvoiceReturnPayloadAdd();
            data.InvoiceTransaction = new InvoiceTransactionDataDto().GetFakerData();
            return data;
        }
    }


    /// <summary>
    /// Request and Response payload object for Patch API
    /// </summary>
    [Serializable()]
    public class InvoiceReturnPayloadUpdate
    {
        /// <summary>
        /// (Request Data) InvoiceTransaction object to update.
        /// (Response Data) InvoiceTransaction object which has been updated.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) InvoiceTransaction object to update.")]
        public InvoiceTransactionDataDto InvoiceTransaction { get; set; }
    }



    /// <summary>
    /// Response payload object for GET single API
    /// </summary>
    [Serializable()]
    public class InvoiceReturnPayloadGetSingle
    {
        /// <summary>
        /// (Response Data) InvoiceTransaction object.
        /// </summary>
        [OpenApiPropertyDescription("(Response) InvoiceTransaction object to get.")]
        public InvoiceTransactionDataDto InvoiceTransaction { get; set; }
    }


    /// <summary>
    /// Request and Response payload object for GET multiple API
    /// </summary>
    [Serializable()]
    public class InvoiceReturnPayloadGetMultiple
    {
        /// <summary>
        /// (Request) Array of uuid to get multiple InvoiceTransactions.
        /// </summary>
        [OpenApiPropertyDescription("(Request) Array of uuid to get multiple InvoiceTransactions.")]
        public IList<string> TransUuids { get; set; }

        /// <summary>
        /// (Response) Array of InvoiceTransaction which get by uuid array.
        /// </summary>
        [OpenApiPropertyDescription("(Response) Array of InvoiceTransaction which get by uuid array.")]
        public IList<InvoiceTransactionDataDto> InvoiceTransactions { get; set; }
    }


    /// <summary>
    /// Response payload object for DELETE API
    /// </summary>
    [Serializable()]
    public class InvoiceReturnPayloadDelete
    {
    }


    /// <summary>
    /// Request Response payload for FIND API
    /// </summary>
    [Serializable()]
    public class InvoiceReturnPayloadFind : FilterPayloadBase<InvoceReturnFilter>
    {
        /// <summary>
        /// (Response) List result which load by filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response) List result which load by filter and paging.")]
        public IList<Object> InvoiceTransactionList { get; set; }

        /// <summary>
        /// (Response) List result count which load by filter and paging.
        /// </summary>
        public int InvoiceTransactionListCount { get; set; }

        public static InvoiceReturnPayloadFind GetSampleData()
        {
            var data = new InvoiceReturnPayloadFind()
            {
                LoadAll = false,
                Skip = 0,
                Top = 20,
                SortBy = "",
                Filter = InvoceReturnFilter.GetFaker().Generate()
            };
            return data;
        }
    }
    [Serializable()]
    public class InvoceReturnFilter
    {
        //public string TransUuid { get; set; }

        public string InvoiceUuid { get; set; }

        public int ReturnItemType { get; set; }

        public int ReturnItemStatus { get; set; }

        public string SKU { get; set; }

        //public string ProductUuid { get; set; }

        public string WarehouseCode { get; set; }

        public string LotNum { get; set; }

        public DateTime ReturnDateFrom { get; set; }

        public DateTime ReturnDateTo { get; set; }

        public static Faker<InvoceReturnFilter> GetFaker()
        {
            #region faker data rules
            return new Faker<InvoceReturnFilter>()
                .RuleFor(u => u.InvoiceUuid, f => string.Empty)
                .RuleFor(u => u.ReturnItemType, f =>0)
                .RuleFor(u => u.ReturnItemStatus, f =>0)
                .RuleFor(u => u.SKU, f => string.Empty)
                .RuleFor(u => u.WarehouseCode, f => string.Empty)
                .RuleFor(u => u.LotNum, f => string.Empty)
                .RuleFor(u => u.ReturnDateFrom, f => f.Date.Past(0).Date.Date.AddDays(-30))
                .RuleFor(u => u.ReturnDateTo, f => f.Date.Past(0).Date.Date) 
                ;
            #endregion faker data rules
        }
    }

}

