    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Bogus;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPApi
{
    /// <summary>
    /// Request and Response payload object for Add API
    /// </summary>
    [Serializable()]
    public class WarehouseTransferPayloadAdd
    {
        /// <summary>
        /// (Request Data) WarehouseTransfer object to add.
        /// (Response Data) WarehouseTransfer object which has been added.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) WarehouseTransfer object to add.")]
        public WarehouseTransferDataDto WarehouseTransfer { get; set; }
        
        public static WarehouseTransferPayloadAdd GetSampleData()
        {
            var data = new WarehouseTransferPayloadAdd();
            data.WarehouseTransfer = new WarehouseTransferDataDto().GetFakerData();
            return data;
        }
    }


    /// <summary>
    /// Request and Response payload object for Patch API
    /// </summary>
    [Serializable()]
    public class WarehouseTransferPayloadUpdate
    {
        /// <summary>
        /// (Request Data) WarehouseTransfer object to update.
        /// (Response Data) WarehouseTransfer object which has been updated.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) WarehouseTransfer object to update.")]
        public WarehouseTransferDataDto WarehouseTransfer { get; set; }
    }



    /// <summary>
    /// Response payload object for GET single API
    /// </summary>
    [Serializable()]
    public class WarehouseTransferPayloadGetSingle
    {
        /// <summary>
        /// (Response Data) WarehouseTransfer object.
        /// </summary>
        [OpenApiPropertyDescription("(Response) WarehouseTransfer object to get.")]
        public WarehouseTransferDataDto WarehouseTransfer { get; set; }
    }


    /// <summary>
    /// Request and Response payload object for GET multiple API
    /// </summary>
    [Serializable()]
    public class WarehouseTransferPayloadGetMultiple
    {
        /// <summary>
        /// (Request) Array of uuid to get multiple WarehouseTransfers.
        /// </summary>
        [OpenApiPropertyDescription("(Request) Array of uuid to get multiple WarehouseTransfers.")]
        public IList<string> WarehouseTransferUuids { get; set; }

        /// <summary>
        /// (Response) Array of WarehouseTransfer which get by uuid array.
        /// </summary>
        [OpenApiPropertyDescription("(Response) Array of WarehouseTransfer which get by uuid array.")]
        public IList<WarehouseTransferDataDto> WarehouseTransfers { get; set; }
    }


    /// <summary>
    /// Response payload object for DELETE API
    /// </summary>
    [Serializable()]
    public class WarehouseTransferPayloadDelete
    {
    }


    /// <summary>
    /// Request Response payload for FIND API
    /// </summary>
    [Serializable()]
    public class WarehouseTransferPayloadFind : FilterPayloadBase<WarehouseTransferFilter>
    {
        /// <summary>
        /// (Response) List result which load by filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response) List result which load by filter and paging.")]
        public IList<Object> WarehouseTransferList { get; set; }

        /// <summary>
        /// (Response) List result count which load by filter and paging.
        /// </summary>
        public int WarehouseTransferListCount { get; set; }
        
        public static WarehouseTransferPayloadFind GetSampleData()
        {
            var data = new WarehouseTransferPayloadFind()
            {
                LoadAll = false,
                Skip = 0,
                Top = 20,
                SortBy = "",
                Filter = WarehouseTransferFilter.GetFaker().Generate()
            };
            return data;
        }
    }
    public class WarehouseTransferFilter
    {
        public string SKU { get; set; }
        public string WarehouseCode { get; set; }
        public string WarehouseTransferType { get; set; }
        public string BatchNumberFrom { get; set; }
        public string BatchNumberTo { get; set; }
        public DateTime TransferDateFrom { get; set; }
        public DateTime TransferDateTo { get; set; }
        public DateTime ReceiveDateFrom { get; set; }
        public DateTime ReceiveDateTo { get; set; }
        public string FromWarehouseCode { get; set; }
        public string ToWarehouseCode { get; set; }

        public static Faker<WarehouseTransferFilter> GetFaker()
        {
            #region faker data rules
            return new Faker<WarehouseTransferFilter>()
                .RuleFor(u => u.SKU, f => "")
                .RuleFor(u => u.WarehouseCode, f => "")
                .RuleFor(u => u.WarehouseTransferType, f => "")
                .RuleFor(u => u.BatchNumberFrom, f => "")
                .RuleFor(u => u.BatchNumberTo, f => "")
                .RuleFor(u => u.TransferDateFrom, f => f.Date.Recent(30))
                .RuleFor(u => u.TransferDateFrom, f => f.Date.Recent(1))
                .RuleFor(u => u.ReceiveDateFrom, f => f.Date.Recent(30))
                .RuleFor(u => u.ReceiveDateTo, f => f.Date.Recent(1))
                .RuleFor(u => u.FromWarehouseCode, f => "")
                .RuleFor(u => u.ToWarehouseCode, f => "")
                ;
            #endregion faker data rules
        }
    }

    public class WarehouseTransferItemPayloadFind
    {
        /// <summary>
        /// (Response) List result which load by filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response) List result which load by filter and paging.")]
        public IList<Object> WarehouseTransferItemsList { get; set; }

        /// <summary>
        /// (Response) List result count which load by filter and paging.
        /// </summary>
        public int WarehouseTransferItemsListCount { get; set; }

        public static WarehouseTransferPayloadFind GetSampleData()
        {
            var data = new WarehouseTransferPayloadFind()
            {
                LoadAll = false,
                Skip = 0,
                Top = 20,
                SortBy = "",
                Filter = WarehouseTransferItemFilter.GetFaker().Generate()
            };
            return data;
        }
    }
    public class WarehouseTransferItemFilter
    {
        public string SKU { get; set; }
        public DateTime TransferDateFrom { get; set; }
        public DateTime TransferDateTo { get; set; }
        public DateTime ReceiveDateFrom { get; set; }
        public DateTime ReceiveDateTo { get; set; }
        public string FromWarehouseCode { get; set; }
        public string ToWarehouseCode { get; set; }

        public static Faker<WarehouseTransferFilter> GetFaker()
        {
            #region faker data rules
            return new Faker<WarehouseTransferFilter>()
                .RuleFor(u => u.SKU, f => "")
                .RuleFor(u => u.TransferDateFrom, f => f.Date.Recent(30))
                .RuleFor(u => u.TransferDateFrom, f => f.Date.Recent(1))
                .RuleFor(u => u.ReceiveDateFrom, f => f.Date.Recent(30))
                .RuleFor(u => u.ReceiveDateTo, f => f.Date.Recent(1))
                .RuleFor(u => u.FromWarehouseCode, f => "")
                .RuleFor(u => u.ToWarehouseCode, f => "")
                ;
            #endregion faker data rules
        }
    }

}

