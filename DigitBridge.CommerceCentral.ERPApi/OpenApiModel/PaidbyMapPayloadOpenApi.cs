    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Bogus;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPApi
{
    /// <summary>
    /// Request and Response payload object for Add API
    /// </summary>
    [Serializable()]
    public class PaidbyMapPayloadAdd
    {
        /// <summary>
        /// (Request Data) PaidbyMap object to add.
        /// (Response Data) PaidbyMap object which has been added.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) PaidbyMap object to add.")]
        public PaidbyMapDataDto PaidbyMap { get; set; }
        
        public static PaidbyMapPayloadAdd GetSampleData()
        {
            var data = new PaidbyMapPayloadAdd();
            data.PaidbyMap = new PaidbyMapDataDto().GetFakerData();
            return data;
        }
    }


    /// <summary>
    /// Request and Response payload object for Patch API
    /// </summary>
    [Serializable()]
    public class PaidbyMapPayloadUpdate
    {
        /// <summary>
        /// (Request Data) PaidbyMap object to update.
        /// (Response Data) PaidbyMap object which has been updated.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) PaidbyMap object to update.")]
        public PaidbyMapDataDto PaidbyMap { get; set; }
    }



    /// <summary>
    /// Response payload object for GET single API
    /// </summary>
    [Serializable()]
    public class PaidbyMapPayloadGetSingle
    {
        /// <summary>
        /// (Response Data) PaidbyMap object.
        /// </summary>
        [OpenApiPropertyDescription("(Response) PaidbyMap object to get.")]
        public PaidbyMapDataDto PaidbyMap { get; set; }
    }


    /// <summary>
    /// Request and Response payload object for GET multiple API
    /// </summary>
    [Serializable()]
    public class PaidbyMapPayloadGetMultiple
    {
        /// <summary>
        /// (Request) Array of uuid to get multiple PaidbyMaps.
        /// </summary>
        [OpenApiPropertyDescription("(Request) Array of uuid to get multiple PaidbyMaps.")]
        public IList<string> PaidbyMapUuids { get; set; }

        /// <summary>
        /// (Response) Array of PaidbyMap which get by uuid array.
        /// </summary>
        [OpenApiPropertyDescription("(Response) Array of PaidbyMap which get by uuid array.")]
        public IList<PaidbyMapDataDto> PaidbyMaps { get; set; }
    }


    /// <summary>
    /// Response payload object for DELETE API
    /// </summary>
    [Serializable()]
    public class PaidbyMapPayloadDelete
    {
    }


    /// <summary>
    /// Request Response payload for FIND API
    /// </summary>
    [Serializable()]
    public class PaidbyMapPayloadFind : FilterPayloadBase<PaidbyMapFilter>
    {
        /// <summary>
        /// (Response) List result which load by filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response) List result which load by filter and paging.")]
        public IList<Object> PaidbyMapList { get; set; }

        /// <summary>
        /// (Response) List result count which load by filter and paging.
        /// </summary>
        public int PaidbyMapListCount { get; set; }
        
        public static PaidbyMapPayloadFind GetSampleData()
        {
            var data = new PaidbyMapPayloadFind()
            {
                LoadAll = false,
                Skip = 0,
                Top = 20,
                SortBy = "",
                Filter = PaidbyMapFilter.GetFaker().Generate()
            };
            return data;
        }
    }

    public class PaidbyMapFilter
    {
        //public string City { get; set; }

        public static Faker<PaidbyMapFilter> GetFaker()
        {
            #region faker data rules
            return new Faker<PaidbyMapFilter>()
                //.RuleFor(u => u.City, f => "")
                ;
            #endregion faker data rules
        }
    }

}

