
    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPApi
{
    /// <summary>
    /// Request and Response payload object for Add API
    /// </summary>
    [Serializable()]
    public class WarehousePayloadAdd
    {
        /// <summary>
        /// (Request Data) Warehouse object to add.
        /// (Response Data) Warehouse object which has been added.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) Warehouse object to add.")]
        public WarehouseDataDto Warehouse { get; set; }
        public static WarehousePayloadAdd GetSampleData()
        {
            var data = new WarehousePayloadAdd();
            data.Warehouse = new WarehouseDataDto().GetFakerData();
            return data;
        }
    }


    /// <summary>
    /// Request and Response payload object for Patch API
    /// </summary>
    [Serializable()]
    public class WarehousePayloadUpdate
    {
        /// <summary>
        /// (Request Data) Warehouse object to update.
        /// (Response Data) Warehouse object which has been updated.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) Warehouse object to update.")]
        public WarehouseDataDto Warehouse { get; set; }
    }



    /// <summary>
    /// Response payload object for GET single API
    /// </summary>
    [Serializable()]
    public class WarehousePayloadGetSingle
    {
        /// <summary>
        /// (Response Data) Warehouse object.
        /// </summary>
        [OpenApiPropertyDescription("(Response) Warehouse object to get.")]
        public WarehouseDataDto Warehouse { get; set; }
    }


    /// <summary>
    /// Request and Response payload object for GET multiple API
    /// </summary>
    [Serializable()]
    public class WarehousePayloadGetMultiple
    {
        /// <summary>
        /// (Request) Array of uuid to get multiple Warehouses.
        /// </summary>
        [OpenApiPropertyDescription("(Request) Array of uuid to get multiple Warehouses.")]
        public IList<string> DistributionCenterUuids { get; set; }

        /// <summary>
        /// (Response) Array of Warehouse which get by uuid array.
        /// </summary>
        [OpenApiPropertyDescription("(Response) Array of Warehouse which get by uuid array.")]
        public IList<WarehouseDataDto> Warehouses { get; set; }
    }


    /// <summary>
    /// Response payload object for DELETE API
    /// </summary>
    [Serializable()]
    public class WarehousePayloadDelete
    {
    }


    /// <summary>
    /// Request Response payload for FIND API
    /// </summary>
    [Serializable()]
    public class WarehousePayloadFind : FilterPayloadBase<WarehouseFilter>
    {
        /// <summary>
        /// (Response) List result which load by filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response) List result which load by filter and paging.")]
        public IList<Object> WarehouseList { get; set; }

        /// <summary>
        /// (Response) List result count which load by filter and paging.
        /// </summary>
        public int? WarehouseListCount { get; set; }


        public static WarehousePayloadFind GetSampleData()
        {
            var data = new WarehousePayloadFind()
            {
                LoadAll = false,
                Skip = 0,
                Top = 20,
                SortBy = "",
                Filter = WarehouseFilter.GetFaker().Generate()
            };
            return data;
        }

    }


    public class WarehouseFilter
    {
        public string WarehouseName { get; set; }

        public string WarehouseCode { get; set; }

        public string WarehouseType { get; set; }

        public string City { get; set; }

        public string State { get; set; }

        public string ZipCode { get; set; }

        public string ShippingCarrier { get; set; }

        public string CompayName { get; set; }

        public static Faker<WarehouseFilter> GetFaker()
        {
            #region faker data rules
            return new Faker<WarehouseFilter>()
                .RuleFor(u => u.WarehouseName, f =>"")
                .RuleFor(u => u.WarehouseCode, f => "")
                .RuleFor(u => u.WarehouseType, f =>"")
                .RuleFor(u => u.City, f => "")
                .RuleFor(u => u.State, f => "")
                .RuleFor(u => u.ZipCode, f => "")
                .RuleFor(u => u.ShippingCarrier, f => "")
                .RuleFor(u => u.CompayName, f => "")
                ;
            #endregion faker data rules
        }
    }
}

