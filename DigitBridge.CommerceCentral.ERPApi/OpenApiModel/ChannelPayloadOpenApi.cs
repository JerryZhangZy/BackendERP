    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Bogus;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPApi
{
    /// <summary>
    /// Request Response payload for FIND API
    /// </summary>
    [Serializable()]
    public class ChannelPayloadFind : FilterPayloadBase<ChannelFilter>
    {
        /// <summary>
        /// (Response) List result which load by filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response) List result which load by filter and paging.")]
        public IList<Object> ChannelList { get; set; }

        /// <summary>
        /// (Response) List result count which load by filter and paging.
        /// </summary>
        public int ChannelListCount { get; set; }
        
        public static ChannelPayloadFind GetSampleData()
        {
            var data = new ChannelPayloadFind()
            {
                LoadAll = false,
                Skip = 0,
                Top = 20,
                SortBy = "",
                Filter = ChannelFilter.GetFaker().Generate()
            };
            return data;
        }
    }

    public class ChannelFilter
    {
        public int ChannelNumber { get; set; }
        public int ChannelAccountNum { get; set; }
        public string ChannelName { get; set; }
        public string ChannelAccountName { get; set; }

        public static Faker<ChannelFilter> GetFaker()
        {
            #region faker data rules
            return new Faker<ChannelFilter>()
                .RuleFor(u => u.ChannelNumber, f => f.Random.Number(10000, 10010))
                .RuleFor(u => u.ChannelAccountNum, f => f.Random.Number(10000, 10010))
                .RuleFor(u => u.ChannelName, f => "")
                .RuleFor(u => u.ChannelAccountName, "")
                ;
            #endregion faker data rules
        }
    }

}

