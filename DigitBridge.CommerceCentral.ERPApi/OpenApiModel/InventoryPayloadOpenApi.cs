
    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPApi
{
    /// <summary>
    /// Request and Response payload object for Add API
    /// </summary>
    [Serializable()]
    public class InventoryPayloadAdd
    {
        /// <summary>
        /// (Request Data) Inventory object to add.
        /// (Response Data) Inventory object which has been added.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) Inventory object to add.")]
        public InventoryDataDto Inventory { get; set; }

        public static InventoryPayloadAdd GetSampleData()
        {
            var data = new InventoryPayloadAdd();
            data.Inventory = new InventoryDataDto().GetFakerData();
            return data;
        }
    }


    /// <summary>
    /// Request and Response payload object for Patch API
    /// </summary>
    [Serializable()]
    public class InventoryPayloadUpdate
    {
        /// <summary>
        /// (Request Data) Inventory object to update.
        /// (Response Data) Inventory object which has been updated.
        /// </summary>
        [OpenApiPropertyDescription("(Request and Response) Inventory object to update.")]
        public InventoryDataDto Inventory { get; set; }
    }



    /// <summary>
    /// Response payload object for GET single API
    /// </summary>
    [Serializable()]
    public class InventoryPayloadGetSingle
    {
        /// <summary>
        /// (Response Data) Inventory object.
        /// </summary>
        [OpenApiPropertyDescription("(Response) Inventory object to get.")]
        public InventoryDataDto Inventory { get; set; }
    }


    /// <summary>
    /// Request and Response payload object for GET multiple API
    /// </summary>
    [Serializable()]
    public class InventoryPayloadGetMultiple
    {
        /// <summary>
        /// (Request) Array of uuid to get multiple Inventorys.
        /// </summary>
        [OpenApiPropertyDescription("(Request) Array of uuid to get multiple Inventorys.")]
        public IList<string> skus { get; set; }

        /// <summary>
        /// (Response) Array of Inventory which get by uuid array.
        /// </summary>
        [OpenApiPropertyDescription("(Response) Array of Inventory which get by uuid array.")]
        public IList<InventoryDataDto> Inventorys { get; set; }
    }


    /// <summary>
    /// Response payload object for DELETE API
    /// </summary>
    [Serializable()]
    public class InventoryPayloadDelete
    {
    }


    /// <summary>
    /// Request Response payload for FIND API
    /// </summary>
    [Serializable()]
    public class InventoryPayloadFind : FilterPayloadBase<InventoryFilter>
    {
        /// <summary>
        /// (Response) List result which load by filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response) List result which load by filter and paging.")]
        public IList<Object> InventoryList { get; set; }

        /// <summary>
        /// (Response) List result count which load by filter and paging.
        /// </summary>
        public int InventoryListCount { get; set; }

        public static InventoryPayloadFind GetSampleData()
        {
            var data = new InventoryPayloadFind()
            {
                LoadAll=false,
                Skip=10,
                Top=20,
                SortBy="SKU",
                Filter = InventoryFilter.GetFaker().Generate()
            };
            data.Filter = InventoryFilter.GetFaker().Generate();
            return data;
        }

    }

    [Serializable()]
    public class InventoryFilter
    {
        public string Brand { get; set; }

        public string Manufacturer { get; set; }

        public string ProductTitle { get; set; }
        
        private string FNSku { get; set; }

        public string UPC { get; set; }

        public string WarehouseCode { get; set; }

        public string LotNum { get; set; }

        public string LpnNum { get; set; }

        public static Faker<InventoryFilter> GetFaker()
        {
            #region faker data rules
            return new Faker<InventoryFilter>()
                //.RuleFor(u => u.SKU, f => f.Commerce.Product())
                .RuleFor(u => u.FNSku, f => f.Lorem.Sentence().TruncateTo(10))
                .RuleFor(u => u.Brand, f => f.Lorem.Sentence().TruncateTo(150))
                .RuleFor(u => u.Manufacturer, f => f.Lorem.Sentence().TruncateTo(255))
                .RuleFor(u => u.ProductTitle, f => f.Lorem.Sentence().TruncateTo(500))
                .RuleFor(u => u.UPC, f => f.Lorem.Sentence().TruncateTo(20))
                .RuleFor(u => u.WarehouseCode, f => f.Lorem.Word())
                .RuleFor(u => u.LotNum,f => f.Lorem.Sentence().TruncateTo(100))
                .RuleFor(u => u.LpnNum, f => f.Lorem.Sentence().TruncateTo(100))
                ;
            #endregion faker data rules
        }
    }

}

