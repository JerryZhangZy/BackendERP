
<#
#>    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace <#= Namespace #>
{
    /// <summary>
    /// Represents a <#= table.Name #>.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
<# 
foreach(var atr in table.Atrributes)
{ 
#>
    <#= atr #>
<# } #>
    public partial class <#= table.Name #> : TableRepository<<#= table.Name #>, long>
    {

        public <#= table.Name #>() : base() {}
        public <#= table.Name #>(IDataBaseFactory dbFactory): base(dbFactory) {}

        #region Fields - Generated 
<# // generate all fields
foreach(var col in table.Columns)
{ 
    if (col.ignoreGenerate) continue;

    // if primary key not equal RowNum
    if (col.IsPrimaryKey)
    {
        WriteLine($"{new String('\t',2)}[ResultColumn(Name = \"{col.Name}\", IncludeInAutoSelect = IncludeInAutoSelect.Yes)] ");
        WriteLine($"{new String('\t',2)}[XmlIgnore] ");
        WriteLine($"{new String('\t',2)}protected long {col.privateName}; ");

        WriteLine($"{new String('\t',2)}public override long RowNum => {col.privateName};");
        WriteLine($"{new String('\t',2)}public virtual long {col.propertyName} => {col.privateName};");

        continue;
    }

    foreach(var atr in col.FieldAtrributes)
    {
#>
        <#= atr #>
<# } #>
        private <#= col.FieldType #> <#= col.privateName #>;

<# } #>
        #endregion Fields - Generated 

        #region Properties - Generated 
<# 
// generate unique key properties
if (!string.IsNullOrEmpty(table.UniqueKey))
{
    WriteLine($"{new String('\t',2)}public override string UniqueId => {table.UniqueKey}; ");
    WriteLine($"{new String('\t',2)}public void CheckUniqueId() ");
    WriteLine($"{new String('\t',2)}{{");
    WriteLine($"{new String('\t',3)}if (string.IsNullOrEmpty({table.UniqueKey})) ");
    WriteLine($"{new String('\t',4)}{table.UniqueKey} = Guid.NewGuid().ToString(); ");
    WriteLine($"{new String('\t',2)}}}");
}

// generate IsEmpty properties
var blankMatchString = table.BlankMatchString();
if(table.HasBlankKey && !string.IsNullOrEmpty(blankMatchString))
{ 
    WriteLine($"{new String('\t',2)}public override bool IsEmpty => ( {blankMatchString});");
} 

// generate all properties
foreach(var col in table.Columns)
{ 
    if (col.ignoreGenerate) continue;
    if (col.IsPrimaryKey) continue;
    foreach(var atr in col.PropertyAtrributes)
    {
#>
        <#= atr #>
<# } #>
        public virtual <#= col.PropertyType #> <#= col.propertyName #>
        {
            get
            {
<#
                indent = 4;
                if (col.Null) {
                    WriteLine($"{new String('\t',indent)}if (!AllowNull && {col.privateName} is null) ");
                    WriteLine($"{new String('\t',indent+1)}{col.privateName} = {col.GetDefaultValue()}; ");
                }
                if (col.isString) {
                    WriteLine($"{new String('\t',indent)}return {col.privateName}?.TrimEnd(); ");
                }
                else if (col.isByte) {
                    WriteLine($"{new String('\t',indent)}return ({col.privateName} == 1); ");
                }
                else {
                    WriteLine($"{new String('\t',indent)}return {col.privateName}; ");
                }
#>
            }
            set
            {
<#				
		        indent = 4;
                if (col.Null) {
                    WriteLine($"{new String('\t',indent)}if (value != null || AllowNull) ");
                    WriteLine($"{new String('\t',indent)}{{");
                    indent += 1;
                }
                if (col.isString)  
                    if (col.isMaxLength)
                        WriteLine($"{new String('\t',indent)}{col.privateName} = value.TrimEnd(); ");
                    else 
                        WriteLine($"{new String('\t',indent)}{col.privateName} = value.TruncateTo({col.Length}); ");
                else if (col.Type.ToLower() == "byte" && col.PropertyType.ToLower() == "bool")  
                    WriteLine($"{new String('\t',indent)}{col.privateName} = value ? (byte)1 : (byte)0; ");
                else if (col.isDateTime && col.Null) {
                    if (col.isDate)
                        WriteLine($"{new String('\t',indent)}{col.privateName} = (value is null) ? (DateTime?) null : value?.Date.ToSqlSafeValue(); ");
                    else
                        WriteLine($"{new String('\t',indent)}{col.privateName} = (value is null) ? (DateTime?) null : value.ToSqlSafeValue(); ");
                }
                else if (col.isDateTime && !col.Null){
                    if (col.isDate)
                        WriteLine($"{new String('\t',indent)}{col.privateName} = value.Date.ToSqlSafeValue(); ");
                    else
                        WriteLine($"{new String('\t',indent)}{col.privateName} = value.ToSqlSafeValue(); ");
                }
  
                else if (col.isTime && col.Null)  
                    WriteLine($"{new String('\t',indent)}{col.privateName} = (value is null) ? (TimeSpan?) null : value.ToSqlSafeValue(); ");
                else if (col.isTime && !col.Null)  
                    WriteLine($"{new String('\t',indent)}{col.privateName} = value.ToSqlSafeValue(); ");
                else 
                    WriteLine($"{new String('\t',indent)}{col.privateName} = value; ");

                if (col.Null) {
                    WriteLine($"{new String('\t',indent)}OnPropertyChanged(\"{col.Name}\", value);");
                    indent -= 1;
                    WriteLine($"{new String('\t',indent)}}}");
                }
                else
                    WriteLine($"{new String('\t',indent)}OnPropertyChanged(\"{col.Name}\", value);");
#>
            }
        }

<# } #>

<# // generate all json fields
if (table.HasJsonColumns)
{
    foreach(var col in table.JsonColumns)
    { 
        if (col.ignoreGenerate) continue;
        if (col.IsPrimaryKey) continue;
#>
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        protected CustomAttributes _<#= col.jsonDictionaryName #>;
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public virtual CustomAttributes <#= col.jsonDictionaryName #>
        {
            get
            {
<#
                indent = 4;
                WriteLine($"{new String('\t',indent)}if (_{col.jsonDictionaryName} is null) ");
                WriteLine($"{new String('\t',indent+1)}_{col.jsonDictionaryName} = new CustomAttributes(dbFactory, \"{table.Name}\"); ");
                WriteLine($"{new String('\t',indent)}return _{col.jsonDictionaryName}; ");
#>
            }
            set
            {
<#				
		        indent = 4;
                WriteLine($"{new String('\t',indent)}_{col.jsonDictionaryName} = (value is null) ? new CustomAttributes(dbFactory, \"{table.Name}\") : value; ");
#>
            }
        }

<#  
    } 
}
#>

        #endregion Properties - Generated 

        #region Methods - Parent

<# // generate Parent
if(!string.IsNullOrEmpty(table.StructureName) && generateStructureRepository)
{ 
        indent = 2;
        // Parent class reference
        WriteLine($"{new String('\t',indent)}[XmlIgnore, JsonIgnore, IgnoreCompare]");
        WriteLine($"{new String('\t',indent)}private {table.StructureName} Parent {{ get; set; }}");
        WriteLine($"{new String('\t',indent)}public {table.StructureName} GetParent() => Parent;");
        WriteLine($"{new String('\t',indent)}public {table.Name} SetParent({table.StructureName} parent)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}Parent = parent;");
        WriteLine($"{new String('\t',indent+1)}return this;");
        WriteLine($"{new String('\t',indent)}}}");
} 
#>
        #endregion Methods - Parent

<# // generate one to one children
if(table.HasOneToOneChildren)
{ 
    indent = 2;
    foreach(var childTable in table.oneToOneChildren)
    { 
        if (childTable == null) continue;

        WriteLine($"{new String('\t',indent)}#region Methods - Children {childTable.Name}");
        
        // Children reference
        WriteLine($"{new String('\t',indent)}protected {childTable.Name} _{childTable.Name};");
        WriteLine($"{new String('\t',indent)}[IgnoreCompare]");
        WriteLine($"{new String('\t',indent)}public {childTable.Name} {childTable.Name}");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}get");
        WriteLine($"{new String('\t',indent+1)}{{");
        WriteLine($"{new String('\t',indent+2)}return _{childTable.Name};");
        WriteLine($"{new String('\t',indent+1)}}}");
        WriteLine($"{new String('\t',indent+1)}set");
        WriteLine($"{new String('\t',indent+1)}{{");
        WriteLine($"{new String('\t',indent+2)}_{childTable.Name} = value;");
        WriteLine($"{new String('\t',indent+2)}CheckIntegrity{childTable.Name}();");
        WriteLine($"{new String('\t',indent+1)}}}");
        WriteLine($"{new String('\t',indent)}}}");

        // Set Children table from list
        WriteLine($"{new String('\t',indent)}public {childTable.Name} SetChildren{childTable.Name}(IList<{childTable.Name}> children)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}var childrenList = children.ToList();");
        WriteLine($"{new String('\t',indent+1)}{childTable.Name} = childrenList.FirstOrDefault(x => !string.IsNullOrEmpty({table.UniqueKey}) && x.{table.UniqueKey} == {table.UniqueKey});");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        // Get Children list
        WriteLine($"{new String('\t',indent)}public IList<{childTable.Name}> GetChildren{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}return new List<{childTable.Name}>() {{ {childTable.Name} }};");
        WriteLine($"{new String('\t',indent)}}}");

        // Get Children deleted list
        WriteLine($"{new String('\t',indent)}public IList<{childTable.Name}> GetChildrenDeleted{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}return null;");
        WriteLine($"{new String('\t',indent)}}}");

        // Check Children table Integrity
        WriteLine($"{new String('\t',indent)}public {childTable.Name} CheckIntegrity{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if ({childTable.Name} == null)");
        WriteLine($"{new String('\t',indent+2)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent+1)}CheckUniqueId();");
        WriteLine($"{new String('\t',indent+1)}{childTable.Name}.SetParent(Parent);");
        WriteLine($"{new String('\t',indent+1)}if ({childTable.Name}.{table.UniqueKey} != {table.UniqueKey}) {childTable.Name}.{table.UniqueKey} = {table.UniqueKey};");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        // Load Children table
        WriteLine($"{new String('\t',indent)}public {childTable.Name} Load{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}{childTable.Name} = dbFactory.GetById<{childTable.Name}>({table.UniqueKey});");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        WriteLine($"{new String('\t',indent)}public async Task<{childTable.Name}> Load{childTable.Name}Async()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}{childTable.Name} = await dbFactory.GetByIdAsync<{childTable.Name}>({table.UniqueKey});");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        // New Children table
        WriteLine($"{new String('\t',indent)}public {childTable.Name} New{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}CheckUniqueId();");
        WriteLine($"{new String('\t',indent+1)}var child = new {childTable.Name}(dbFactory);");
        WriteLine($"{new String('\t',indent+1)}child.SetParent(Parent);");
        WriteLine($"{new String('\t',indent+1)}child.{table.UniqueKey} = {table.UniqueKey};");
        WriteLine($"{new String('\t',indent+1)}return child;");
        WriteLine($"{new String('\t',indent)}}}");

        // Add Children table
        WriteLine($"{new String('\t',indent)}public {childTable.Name} Add{childTable.Name}({childTable.Name} child)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (child == null)");
        WriteLine($"{new String('\t',indent+2)}child = New{childTable.Name}();");
        WriteLine($"{new String('\t',indent+1)}{childTable.Name} = child;");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        WriteLine($"{new String('\t',indent)}#endregion Methods - Children {childTable.Name}");
    }
} 
#>
<# // generate one to many children
if(table.HasOneToManyChildren)
{ 
    indent = 2;
    foreach(var childTable in table.oneToManyChildren)
    { 
        if (childTable == null) continue;

        WriteLine($"{new String('\t',indent)}#region Methods - Children {childTable.Name}");

        WriteLine($"{new String('\t',indent)}protected IList<{childTable.Name}> _{childTable.Name}Deleted;");

        // Add more deleted list
        WriteLine($"{new String('\t',indent)}public {childTable.Name} Add{childTable.Name}Deleted(IList<{childTable.Name}> del)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (_{childTable.Name}Deleted is null)");
        WriteLine($"{new String('\t',indent+2)}_{childTable.Name}Deleted = new List<{childTable.Name}>();");
        WriteLine($"{new String('\t',indent+1)}_{childTable.Name}Deleted.AddRange(del);");
        WriteLine($"{new String('\t',indent+1)}return del;");
        WriteLine($"{new String('\t',indent)}}}");

        // Add one to deleted list
        WriteLine($"{new String('\t',indent)}public {childTable.Name} Add{childTable.Name}Deleted({childTable.Name} del)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (_{childTable.Name}Deleted is null)");
        WriteLine($"{new String('\t',indent+2)}_{childTable.Name}Deleted = new List<{childTable.Name}>();");
        WriteLine($"{new String('\t',indent+1)}_{childTable.Name}Deleted.Add(del);");
        WriteLine($"{new String('\t',indent+1)}return del;");
        WriteLine($"{new String('\t',indent)}}}");
        
        // reset deleted list
        WriteLine($"{new String('\t',indent)}public void Set{childTable.Name}Deleted(IList<{childTable.Name}> del) =>");
        WriteLine($"{new String('\t',indent+1)}_{childTable.Name}Deleted = del;");

        // clear deleted list
        WriteLine($"{new String('\t',indent)}public void Clear{childTable.Name}Deleted() =>");
        WriteLine($"{new String('\t',indent+1)}_{childTable.Name}Deleted.Clear();");

        // Children reference
        WriteLine($"{new String('\t',indent)}protected IList<{childTable.Name}> _{childTable.Name};");
        WriteLine($"{new String('\t',indent)}[IgnoreCompare]");
        WriteLine($"{new String('\t',indent)}public IList<{childTable.Name}> {childTable.Name}");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}get");
        WriteLine($"{new String('\t',indent+1)}{{");
        WriteLine($"{new String('\t',indent+2)}if (_{childTable.Name} is null)");
        WriteLine($"{new String('\t',indent+3)}{childTable.Name} = new List<{childTable.Name}>();");
        WriteLine($"{new String('\t',indent+2)}return _{childTable.Name};");
        WriteLine($"{new String('\t',indent+1)}}}");
        WriteLine($"{new String('\t',indent+1)}set");
        WriteLine($"{new String('\t',indent+1)}{{");
        WriteLine($"{new String('\t',indent+2)}_{childTable.Name} = value;");
        WriteLine($"{new String('\t',indent+2)}CheckIntegrity{childTable.Name}();");
        WriteLine($"{new String('\t',indent+1)}}}");
        WriteLine($"{new String('\t',indent)}}}");

        // Set Children table from list
        WriteLine($"{new String('\t',indent)}public {childTable.Name} Set{childTable.Name}(IList<{childTable.Name}> children)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}var childrenList = children.ToList();");
        WriteLine($"{new String('\t',indent+1)}{childTable.Name} = childrenList.Where(x => !string.IsNullOrEmpty({table.UniqueKey}) && x.{table.UniqueKey} == {table.UniqueKey});");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        // Get Children list
        WriteLine($"{new String('\t',indent)}public IList<{childTable.Name}> GetChildren{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        // Get Children deleted list
        WriteLine($"{new String('\t',indent)}public IList<{childTable.Name}> GetChildrenDeleted{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}return _{childTable.Name}Deleted;");
        WriteLine($"{new String('\t',indent)}}}");

        // Check Children table Integrity
        WriteLine($"{new String('\t',indent)}public IList<{childTable.Name}> CheckIntegrity{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if ({childTable.Name} == null)");
        WriteLine($"{new String('\t',indent+2)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent+1)}foreach (var child in {childTable.Name}.Where(x => x != null))");
        WriteLine($"{new String('\t',indent+2)}CheckIntegrity{childTable.Name}(child);");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        WriteLine($"{new String('\t',indent)}public {childTable.Name} CheckIntegrity{childTable.Name}({childTable.Name} child)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (child == null)");
        WriteLine($"{new String('\t',indent+2)}return child;");
        WriteLine($"{new String('\t',indent+1)}CheckUniqueId();");
        WriteLine($"{new String('\t',indent+1)}child.SetParent(Parent);");
        WriteLine($"{new String('\t',indent+1)}if (child.{table.UniqueKey} != {table.UniqueKey}) child.{table.UniqueKey} = {table.UniqueKey};");
        WriteLine($"{new String('\t',indent+1)}return child;");
        WriteLine($"{new String('\t',indent)}}}");

        // Load Children table
        WriteLine($"{new String('\t',indent)}public IList<{childTable.Name}> Load{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (string.IsNullOrEmpty({table.UniqueKey})) return null;");
        var sortCol = childTable.CheckColumnNameOrRowNum("Seq");
        WriteLine($"{new String('\t',indent+1)}{childTable.Name} = dbFactory.Find<{childTable.Name}>(\"WHERE {table.UniqueKey} = @0 ORDER BY {sortCol} \", {table.UniqueKey});");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        WriteLine($"{new String('\t',indent)}public async Task<IList<{childTable.Name}>> Load{childTable.Name}Async()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (string.IsNullOrEmpty({table.UniqueKey})) return null;");
        WriteLine($"{new String('\t',indent+1)}{childTable.Name} = await dbFactory.FindAsync<{childTable.Name}>(\"WHERE {table.UniqueKey} = @0 ORDER BY {sortCol} \", {table.UniqueKey});");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        // New Children table
        WriteLine($"{new String('\t',indent)}public {childTable.Name} New{childTable.Name}()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}CheckUniqueId();");
        WriteLine($"{new String('\t',indent+1)}var child = new {childTable.Name}(dbFactory);");
        WriteLine($"{new String('\t',indent+1)}child.SetParent(Parent);");
        WriteLine($"{new String('\t',indent+1)}child.{table.UniqueKey} = {table.UniqueKey};");
        WriteLine($"{new String('\t',indent+1)}return child;");
        WriteLine($"{new String('\t',indent)}}}");

        // Add Children table to list
        WriteLine($"{new String('\t',indent)}public IList<{childTable.Name}> Add{childTable.Name}({childTable.Name} child)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (child == null)");
        WriteLine($"{new String('\t',indent+2)}child = New{childTable.Name}();");
        WriteLine($"{new String('\t',indent+1)}CheckIntegrity{childTable.Name}(child);");
        WriteLine($"{new String('\t',indent+1)}{childTable.Name}.AddOrReplace(child);");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        // Remove Children table to list
        WriteLine($"{new String('\t',indent)}public IList<{childTable.Name}> Remove{childTable.Name}({childTable.Name} child)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (child == null) return null;" );
        WriteLine($"{new String('\t',indent+1)}{childTable.Name}.Remove(child);");
        WriteLine($"{new String('\t',indent+1)}return {childTable.Name};");
        WriteLine($"{new String('\t',indent)}}}");

        WriteLine($"{new String('\t',indent)}#endregion Methods - Children {childTable.Name}");

    }
} 
#>

        #region Methods - Generated 
        public override void ClearMetaData()
        {
<# 
            indent = 3;
            WriteLine($"{new String('\t',indent)}base.ClearMetaData(); ");
            WriteLine($"{new String('\t',indent)}{table.UniqueKey} = Guid.NewGuid().ToString(); ");
            if (!string.IsNullOrEmpty(table.NonRowNumPrimaryKey))
                WriteLine($"{new String('\t',indent)}{table.NonRowNumPrimaryKey} = 0; ");
#>
            return;
        }

        public override <#= table.Name #> Clear()
        {
            base.Clear();
<# // generate clear method
            foreach(var col in table.Columns)
            { 
                if (col.ignoreGenerate) continue;
                indent = 3;
                if (col.Null) {
                    WriteLine($"{new String('\t',indent)}{col.privateName} = AllowNull ? ({col.FieldType})null : {col.GetDefaultValue()}; ");
                }
                else {
                    WriteLine($"{new String('\t',indent)}{col.privateName} = {col.GetDefaultValue()}; ");
                }
                if (col.isJson)
                {
                    WriteLine($"{new String('\t',indent)}{col.jsonDictionaryName}.Clear(); ");
                }
            }
#>
            ClearChildren();
            return this;
        }

        public virtual <#= table.Name #> ClearChildren()
        {
<# // generate one to one children
            if(table.HasOneToOneChildren)
            { 
                indent = 3;
                foreach(var childTable in table.oneToOneChildren)
                { 
                    if (childTable == null) continue;
                    WriteLine($"{new String('\t',indent)}{childTable.Name}.Clear();");
                }
            } 

            if(table.HasOneToManyChildren)
            { 
                indent = 3;
                foreach(var childTable in table.oneToManyChildren)
                { 
                    if (childTable == null) continue;
                    WriteLine($"{new String('\t',indent)}{childTable.Name} = new List<{childTable.Name}>();");
                }
            } 
#>
            return this;
        }

        public virtual <#= table.Name #> NewChildren()
        {
<# // generate one to one children
            if(table.HasOneToOneChildren)
            { 
                indent = 3;
                foreach(var childTable in table.oneToOneChildren)
                { 
                    if (childTable == null) continue;
                    WriteLine($"{new String('\t',indent)}Add{childTable.Name}(New{childTable.Name}());");
                }
            } 

            if(table.HasOneToManyChildren)
            { 
                indent = 3;
                foreach(var childTable in table.oneToManyChildren)
                { 
                    if (childTable == null) continue;
                    WriteLine($"{new String('\t',indent)}{childTable.Name} = new List<{childTable.Name}>();");
                }
            } 
#>
            return this;
        }

        public virtual void CopyChildrenFrom(<#= table.Name #> data)
        {
            if (data is null) return;
<# // generate all children CopyFrom
            indent = 3;
            if(table.HasOneToOneChildren)
            { 
                indent = 3;
                foreach(var childTable in table.oneToOneChildren)
                { 
                    if (childTable == null) continue;
                    WriteLine($"{new String('\t',indent)}{childTable.Name}?.CopyFrom(data.{childTable.Name});");
                    WriteLine($"{new String('\t',indent)}CheckIntegrity{childTable.Name}(); ");
                }
            } 
            if(table.HasOneToManyChildren)
            { 
                indent = 3;
                foreach(var childTable in table.oneToManyChildren)
                { 
                    if (childTable == null) continue;
                    WriteLine($"{new String('\t',indent)}var lstDeleted = {childTable.Name}?.CopyFrom(data.{childTable.Name}); ");
                    WriteLine($"{new String('\t',indent)}Set{childTable.Name}Deleted(lstDeleted); ");
                    WriteLine($"{new String('\t',indent)}CheckIntegrity{childTable.Name}(); ");
                }
            } 
#>
            return;
        }

<# // generate ForeignKey methods
if(table.HasForeignKey)
{ 
    foreach(var fKey in table.ForeignKey)
    { 
        if (fKey == null || fKey.Count <= 0) continue;
        var colKey = table.Columns.FirstOrDefault(x => x.Name.Equals(fKey[0], StringComparison.CurrentCultureIgnoreCase));
        var colSort = fKey.Count > 1 
                ? table.Columns.FirstOrDefault(x => x.Name.Equals(fKey[1], StringComparison.CurrentCultureIgnoreCase))
                : null;
        if (colKey == null) continue;

        indent = 2;
        // load by ForeignKey
        WriteLine($"{new String('\t',indent)}public IList<{table.Name}> FindBy{colKey.Name}({colKey.PropertyType} {colKey.parameterName})");
        WriteLine($"{new String('\t',indent)}{{");
        if (colSort == null) 
            WriteLine($"{new String('\t',indent+1)}return dbFactory.Find<{table.Name}>(\"WHERE {colKey.Name} = @0 \", {colKey.parameterName}).ToList();");
        else
            WriteLine($"{new String('\t',indent+1)}return dbFactory.Find<{table.Name}>(\"WHERE {colKey.Name} = @0 ORDER BY {colSort.Name} \", {colKey.parameterName}).ToList();");
        WriteLine($"{new String('\t',indent)}}}");

        // count by ForeignKey
        WriteLine($"{new String('\t',indent)}public long CountBy{colKey.Name}({colKey.PropertyType} {colKey.parameterName})");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}return dbFactory.Count<{table.Name}>(\"WHERE {colKey.Name} = @0 \", {colKey.parameterName});");
        WriteLine($"{new String('\t',indent)}}}");

        // load by ForeignKey async
        WriteLine($"{new String('\t',indent)}public async Task<IList<{table.Name}>> FindByAsync{colKey.Name}({colKey.PropertyType} {colKey.parameterName})");
        WriteLine($"{new String('\t',indent)}{{");
        if (colSort == null) 
            WriteLine($"{new String('\t',indent+1)}return (await dbFactory.FindAsync<{table.Name}>(\"WHERE {colKey.Name} = @0 \", {colKey.parameterName})).ToList();");
        else
            WriteLine($"{new String('\t',indent+1)}return (await dbFactory.FindAsync<{table.Name}>(\"WHERE {colKey.Name} = @0 ORDER BY {colSort.Name} \", {colKey.parameterName})).ToList();");
        WriteLine($"{new String('\t',indent)}}}");

        // count by ForeignKey async
        WriteLine($"{new String('\t',indent)}public async Task<long> CountByAsync{colKey.Name}({colKey.PropertyType} {colKey.parameterName})");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}return await dbFactory.CountAsync<{table.Name}>(\"WHERE {colKey.Name} = @0 \", {colKey.parameterName});");
        WriteLine($"{new String('\t',indent)}}}");

    }
} 
#>

<# // generate convert methods for json fields
if (table.HasJsonColumns)
{
    foreach(var col in table.JsonColumns)
    { 
        indent = 2;

        // convert from DB Json string
        WriteLine($"{new String('\t',indent)}public override {table.Name} ConvertDbFieldsToData()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}base.ConvertDbFieldsToData();");
        WriteLine($"{new String('\t',indent+1)}{col.jsonDictionaryName}.LoadFromValueString({col.propertyName});");
        WriteLine($"{new String('\t',indent+1)}return this;");
        WriteLine($"{new String('\t',indent)}}}");

        // convert to DB Json string
        WriteLine($"{new String('\t',indent)}public override {table.Name} ConvertDataFieldsToDb()");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}base.ConvertDataFieldsToDb();");
        WriteLine($"{new String('\t',indent+1)}{col.propertyName} = {col.jsonDictionaryName}.ToValueString();");
        WriteLine($"{new String('\t',indent+1)}return this;");
        WriteLine($"{new String('\t',indent)}}}");
    }
} 
#>

        #endregion Methods - Generated 
    }
}


