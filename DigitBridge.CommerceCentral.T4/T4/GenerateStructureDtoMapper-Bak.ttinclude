<#
#>    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace <#= NamespaceStructure #>
{
    /// <summary>
    /// Represents a <#= StructureDtoName #>MapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class <#= StructureClass.ClassName #>DtoMapperDefault : IDtoMapper<<#= StructureClass.ClassName #>, <#= StructureDtoName #>> 
    {
        #region read from dto to data

        public virtual <#= StructureClass.ClassName #> ReadDto(<#= StructureClass.ClassName #> data, <#= StructureDtoName #> dto)
        {
            if (dto is null)
                return data;
            if (data is null)
            {
                data = new <#= StructureClass.ClassName #>();
                data.New();
            }

<# // call all children read method
            indent = 3;
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.IsChildrenOfChildren) continue;
                WriteLine($"{new String('\t',indent)}if (dto.{child.Table.Name} != null)");
                WriteLine($"{new String('\t',indent)}{{");
                WriteLine($"{new String('\t',indent+1)}if (data.{child.Table.Name} is null)");
                if (child.OneToOne)
                {
                    WriteLine($"{new String('\t',indent+2)}data.{child.Table.Name} = data.New{child.Table.Name}();");
                    WriteLine($"{new String('\t',indent+1)}Read{child.Table.Name}(data.{child.Table.Name}, dto.{child.Table.Name});");
                }
                else
                {
                    WriteLine($"{new String('\t',indent+2)}data.{child.Table.Name} = new List<{child.Table.Name}>();");
                    WriteLine($"{new String('\t',indent+1)}var deleted = Read{child.Table.Name}(data.{child.Table.Name}, dto.{child.Table.Name});");
                    WriteLine($"{new String('\t',indent+1)}data.Set{child.Table.Name}Deleted(deleted);");
                }
                WriteLine($"{new String('\t',indent)}}}");
            }
#>

            data.CheckIntegrity();
            return data;
        }

<# // generate all children read method
    indent = 2;
    foreach(var item in StructureClass.StructureTables)
    { 
        var child = item.Value;
        if (child == null) continue;
        if (child.Table.IsChildrenOfChildren) continue;

        // generate single object read method for all children
        WriteLine($"{new String('\t',indent)}protected virtual void Read{child.Table.Name}({child.Table.Name} data, {child.Table.DtoName} dto)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
        WriteLine($"{new String('\t',indent+2)}return;");

        // generate all properties
        WriteLine($"");
        WriteLine($"{new String('\t',indent+1)}#region read all not null properties");
        WriteLine($"");
        foreach(var col in child.Table.Columns)
        { 
            if (col.ignoreGenerate) continue;
            WriteLine($"{new String('\t',indent+1)}if (dto.Has{col.propertyName}) data.{col.propertyName} = dto.{col.propertyName}{col.ConvertPropertyTypeDtoToData};");
        }
        WriteLine($"");
        WriteLine($"{new String('\t',indent+1)}#endregion read properties");
        WriteLine($"");

            // generate all grand children
            if(child.Table.HasOneToOneChildren || child.Table.HasOneToManyChildren)
            {
                WriteLine($"{new String('\t',indent+1)}#region read all grand children object");
                WriteLine($"");
            }

            if(child.Table.HasOneToOneChildren)
            {
                foreach(var gradeChildTable in child.Table.oneToOneChildren)
                { 
                    if (gradeChildTable == null) continue;
                    WriteLine($"{new String('\t',indent+1)}if (dto.{gradeChildTable.Name} != null)");
                    WriteLine($"{new String('\t',indent+1)}{{");
                    WriteLine($"{new String('\t',indent+2)}if (data.{gradeChildTable.Name} is null)");
                    WriteLine($"{new String('\t',indent+3)}data.{gradeChildTable.Name} = new {gradeChildTable.Name}();");
                    WriteLine($"{new String('\t',indent+2)}Read{gradeChildTable.Name}(data.{gradeChildTable.Name}, dto.{gradeChildTable.Name});");
                    WriteLine($"{new String('\t',indent+1)}}}");
                }
            }

            if(child.Table.HasOneToManyChildren)
            {
                foreach(var gradeChildTable in child.Table.oneToManyChildren)
                { 
                    if (gradeChildTable == null) continue;
                    WriteLine($"{new String('\t',indent+1)}if (dto.{gradeChildTable.Name} != null)");
                    WriteLine($"{new String('\t',indent+1)}{{");
                    WriteLine($"{new String('\t',indent+2)}if (date.{gradeChildTable.Name} is null)");
                    WriteLine($"{new String('\t',indent+3)}data.{gradeChildTable.Name} = new List<{gradeChildTable.Name}>();");
                    WriteLine($"{new String('\t',indent+2)}Read{gradeChildTable.Name}(data.{gradeChildTable.Name}, dto.{gradeChildTable.Name});");
                    WriteLine($"{new String('\t',indent+1)}}}");
                }
            }

            if(child.Table.HasOneToOneChildren || child.Table.HasOneToManyChildren)
            {
                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#endregion read all grand children object");
                WriteLine($"");
            }
            //end generate all grand children

        WriteLine($"{new String('\t',indent+1)}return;");
        WriteLine($"{new String('\t',indent)}}}");

        // generate list children read method
        if (!child.OneToOne)
        {
            WriteLine($"{new String('\t',indent)}protected virtual IList<{child.Table.Name}> Read{child.Table.Name}(IList<{child.Table.Name}> data, IList<{child.Table.DtoName}> dto)");
            WriteLine($"{new String('\t',indent)}{{");
            WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
            WriteLine($"{new String('\t',indent+2)}return null;");

            WriteLine($"{new String('\t',indent+1)}var dataList = data.ToList();");
            WriteLine($"{new String('\t',indent+1)}var dtoList = dto.ToList();");

            WriteLine($"{new String('\t',indent+1)}var lstOrig = new List<{child.Table.Name}>(dataList);");
            WriteLine($"{new String('\t',indent+1)}dataList.Clear();");
            WriteLine($"{new String('\t',indent+1)}foreach (var itemDto in dtoList)");
            WriteLine($"{new String('\t',indent+1)}{{");
            WriteLine($"{new String('\t',indent+2)}if (itemDto == null) continue;");
            WriteLine($"");
            WriteLine($"{new String('\t',indent+2)}var obj = itemDto.RowNum > 0");
            WriteLine($"{new String('\t',indent+3)}? lstOrig.FirstOrDefault(x => x.RowNum == itemDto.RowNum)");
            WriteLine($"{new String('\t',indent+3)}: lstOrig.FirstOrDefault(x => x.InvoiceItemsUuid == itemDto.InvoiceItemsUuid);");
            WriteLine($"{new String('\t',indent+2)}if (obj is null)");
            WriteLine($"{new String('\t',indent+3)}obj = new {child.Table.Name}().SetAllowNull(false);");
            WriteLine($"{new String('\t',indent+2)}else");
            WriteLine($"{new String('\t',indent+3)}lstOrig.Remove(obj);");
            WriteLine($"");
            WriteLine($"{new String('\t',indent+2)}dataList.Add(obj);");
            WriteLine($"");
            WriteLine($"{new String('\t',indent+2)}Read{child.Table.Name}(obj, itemDto);");
            WriteLine($"");
            WriteLine($"{new String('\t',indent+1)}}}");
            WriteLine($"{new String('\t',indent+1)}return lstOrig;");
            WriteLine($"{new String('\t',indent)}}}");

        }

        // one to one grand children read method
        if (child.Table.HasOneToOneChildren)
        {
            foreach(var gradeChildTable in child.Table.oneToOneChildren)
            { 
                if (gradeChildTable == null) continue;
                WriteLine($"{new String('\t',indent)}protected virtual void Read{gradeChildTable.Name}({gradeChildTable.Name} data, {gradeChildTable.DtoName} dto)");
                WriteLine($"{new String('\t',indent)}{{");
                WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
                WriteLine($"{new String('\t',indent+2)}return;");

                // generate all properties
                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#region read all not null properties");
                WriteLine($"");
                foreach(var col in gradeChildTable.Columns)
                { 
                    if (col.ignoreGenerate) continue;
                    WriteLine($"{new String('\t',indent+1)}if (dto.Has{col.propertyName}) data.{col.propertyName} = dto.{col.propertyName}{col.ConvertPropertyTypeDtoToData};");
                }
                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#endregion read properties");
                WriteLine($"");

                WriteLine($"{new String('\t',indent+1)}return;");
                WriteLine($"{new String('\t',indent)}}}");
            }
        }

        // one to many grand children write method
        if (child.Table.HasOneToManyChildren)
        {
            foreach(var gradeChildTable in child.Table.oneToManyChildren)
            { 
                if (gradeChildTable == null) continue;

                // read single object
                WriteLine($"{new String('\t',indent)}protected virtual void Read{gradeChildTable.Name}({gradeChildTable.Name} data, {gradeChildTable.DtoName} dto)");
                WriteLine($"{new String('\t',indent)}{{");
                WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
                WriteLine($"{new String('\t',indent+2)}return;");

                // generate all properties
                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#region read all not null properties");
                WriteLine($"");
                foreach(var col in gradeChildTable.Columns)
                { 
                    if (col.ignoreGenerate) continue;
                    WriteLine($"{new String('\t',indent+1)}if (dto.Has{col.propertyName}) data.{col.propertyName} = dto.{col.propertyName}{col.ConvertPropertyTypeDtoToData};");
                }
                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#endregion read properties");
                WriteLine($"");

                WriteLine($"{new String('\t',indent+1)}return;");
                WriteLine($"{new String('\t',indent)}}}");


                // read list children
                WriteLine($"{new String('\t',indent)}protected virtual IList<{gradeChildTable.Name}> Read{gradeChildTable.Name}(IList<{gradeChildTable.Name}> data, IList<{gradeChildTable.DtoName}> dto)");
                WriteLine($"{new String('\t',indent)}{{");
                WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
                WriteLine($"{new String('\t',indent+2)}return;");

                WriteLine($"{new String('\t',indent+1)}var dataList = data.ToList();");
                WriteLine($"{new String('\t',indent+1)}var dtoList = dto.ToList();");
                WriteLine($"");

                WriteLine($"{new String('\t',indent+1)}var lstOrig = new List<{gradeChildTable.Name}>(dataList);");
                WriteLine($"{new String('\t',indent+1)}dataList.Clear();");
                WriteLine($"{new String('\t',indent+1)}foreach (var itemDto in dtoList)");
                WriteLine($"{new String('\t',indent+1)}{{");
                WriteLine($"{new String('\t',indent+2)}if (itemDto == null) continue;");
                WriteLine($"");
                WriteLine($"{new String('\t',indent+2)}var obj = itemDto.RowNum > 0");
                WriteLine($"{new String('\t',indent+3)}? lstOrig.FirstOrDefault(x => x.RowNum == itemDto.RowNum)");
                WriteLine($"{new String('\t',indent+3)}: lstOrig.FirstOrDefault(x => x.InvoiceItemsUuid == itemDto.InvoiceItemsUuid);");
                WriteLine($"{new String('\t',indent+2)}if (obj is null)");
                WriteLine($"{new String('\t',indent+3)}obj = new {gradeChildTable.Name}().SetAllowNull(false);");
                WriteLine($"{new String('\t',indent+2)}else");
                WriteLine($"{new String('\t',indent+3)}lstOrig.Remove(obj);");
                WriteLine($"");
                WriteLine($"{new String('\t',indent+2)}dataList.Add(obj);");
                WriteLine($"");
                WriteLine($"{new String('\t',indent+2)}Read{gradeChildTable.Name}(obj, itemDto);");
                WriteLine($"");

                WriteLine($"{new String('\t',indent+1)}}}");
                WriteLine($"");

                WriteLine($"{new String('\t',indent+1)}return lstOrig;");
                WriteLine($"{new String('\t',indent)}}}");
            }
        }

    }
#>

        #endregion read from dto to data

        #region write to dto from data

        public virtual <#= StructureDtoName #> WriteDto(<#= StructureClass.ClassName #> data, <#= StructureDtoName #> dto)
        {
            if (data is null)
                return null;
            if (dto is null)
                dto = new <#= StructureDtoName #>();

            data.CheckIntegrity();

<# // call all children write method
            indent = 3;
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.IsChildrenOfChildren) continue;
                WriteLine($"{new String('\t',indent)}if (data.{child.Table.Name} != null)");
                WriteLine($"{new String('\t',indent)}{{");
                if (child.OneToOne)
                {
                    WriteLine($"{new String('\t',indent+1)}dto.{child.Table.Name} = new {child.Table.DtoName}();");
                }
                else
                {
                    WriteLine($"{new String('\t',indent+1)}dto.{child.Table.Name} = new List<{child.Table.DtoName}>();");
                }
                WriteLine($"{new String('\t',indent+1)}Write{child.Table.Name}(data.{child.Table.Name}, dto.{child.Table.Name});");
                WriteLine($"{new String('\t',indent)}}}");
            }
#>
            return dto;
        }

<# // generate all children write method
    indent = 2;
    foreach(var item in StructureClass.StructureTables)
    { 
        var child = item.Value;
        if (child == null) continue;
        if (child.Table.IsChildrenOfChildren) continue;

        // generate single object write method for all tables
        WriteLine($"{new String('\t',indent)}protected virtual void Write{child.Table.Name}({child.Table.Name} data, {child.Table.DtoName} dto)");
        WriteLine($"{new String('\t',indent)}{{");
        WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
        WriteLine($"{new String('\t',indent+2)}return;");

        // generate all properties
        WriteLine($"");
        WriteLine($"{new String('\t',indent+1)}#region write all properties with null");
        WriteLine($"");
        foreach(var col in child.Table.Columns)
        { 
            WriteLine($"{new String('\t',indent+1)}dto.{col.propertyName} = data.{col.propertyName}{col.ConvertPropertyTypeDataToDto};");
        }
        WriteLine($"");
        WriteLine($"{new String('\t',indent+1)}#endregion read properties");
        WriteLine($"");

            // generate all grand children
            if(child.Table.HasOneToOneChildren || child.Table.HasOneToManyChildren)
            {
                WriteLine($"{new String('\t',indent+1)}#region write all grand children object");
                WriteLine($"");
            }

            if(child.Table.HasOneToOneChildren)
            {
                foreach(var gradeChildTable in child.Table.oneToOneChildren)
                { 
                    if (gradeChildTable == null) continue;
                    WriteLine($"{new String('\t',indent+1)}if (data.{gradeChildTable.Name} != null)");
                    WriteLine($"{new String('\t',indent+1)}{{");
                    WriteLine($"{new String('\t',indent+2)}dto.{gradeChildTable.Name} = new {gradeChildTable.DtoName}();");
                    WriteLine($"{new String('\t',indent+2)}Write{gradeChildTable.Name}(data.{gradeChildTable.Name}, dto.{gradeChildTable.Name});");
                    WriteLine($"{new String('\t',indent+1)}}}");
                }
            }

            if(child.Table.HasOneToManyChildren)
            {
                foreach(var gradeChildTable in child.Table.oneToManyChildren)
                { 
                    if (gradeChildTable == null) continue;
                    WriteLine($"{new String('\t',indent+1)}if (data.{gradeChildTable.Name} != null)");
                    WriteLine($"{new String('\t',indent+1)}{{");
                    WriteLine($"{new String('\t',indent+2)}dto.{gradeChildTable.Name} = new List<{gradeChildTable.DtoName}>();");
                    WriteLine($"{new String('\t',indent+2)}Write{gradeChildTable.Name}(data.{gradeChildTable.Name}, dto.{gradeChildTable.Name});");
                    WriteLine($"{new String('\t',indent+1)}}}");
                }
            }

            if(child.Table.HasOneToOneChildren || child.Table.HasOneToManyChildren)
            {
                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#endregion write all grand children object");
                WriteLine($"");
            }
            //end generate all grand children

        WriteLine($"{new String('\t',indent+1)}return;");
        WriteLine($"{new String('\t',indent)}}}");

        // generate write list for one to many children tables
        if (!child.OneToOne)
        {
            WriteLine($"{new String('\t',indent)}protected virtual void Write{child.Table.Name}(IList<{child.Table.Name}> data, IList<{child.Table.DtoName}> dto)");
            WriteLine($"{new String('\t',indent)}{{");
            WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
            WriteLine($"{new String('\t',indent+2)}return;");
            WriteLine($"");
            WriteLine($"{new String('\t',indent+1)}var dataList = data.ToList();");
            WriteLine($"{new String('\t',indent+1)}var dtoList = dto.ToList();");
            WriteLine($"{new String('\t',indent+1)}dtoList.Clear();");

            WriteLine($"");
            WriteLine($"{new String('\t',indent+1)}#region write all list items and properties with null");
            WriteLine($"");
            WriteLine($"{new String('\t',indent+1)}foreach (var itemData in dataList)");
            WriteLine($"{new String('\t',indent+1)}{{");
            WriteLine($"{new String('\t',indent+2)}if (itemData is null) continue;");
            WriteLine($"{new String('\t',indent+2)}var obj = new {child.Table.DtoName}();");
            WriteLine($"{new String('\t',indent+2)}dtoList.Add(obj);");
            WriteLine($"{new String('\t',indent+2)}Write{child.Table.Name}(itemData, obj);");

            WriteLine($"{new String('\t',indent+1)}}}");
            WriteLine($"");
            WriteLine($"{new String('\t',indent+1)}#endregion write all list items and properties with null");

            WriteLine($"{new String('\t',indent+1)}return;");
            WriteLine($"{new String('\t',indent)}}}");
        }

        // one to one grand children write method
        if (child.Table.HasOneToOneChildren)
        {
            foreach(var gradeChildTable in child.Table.oneToOneChildren)
            { 
                if (gradeChildTable == null) continue;
                WriteLine($"{new String('\t',indent)}protected virtual void Write{gradeChildTable.Name}({gradeChildTable.Name} data, {gradeChildTable.DtoName} dto)");
                WriteLine($"{new String('\t',indent)}{{");
                WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
                WriteLine($"{new String('\t',indent+2)}return;");

                // generate all properties
                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#region write all properties with null");
                WriteLine($"");

                foreach(var col in gradeChildTable.Columns)
                { 
                    WriteLine($"{new String('\t',indent+1)}dto.{col.propertyName} = data.{col.propertyName}{col.ConvertPropertyTypeDataToDto};");
                }

                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#endregion read properties");
                WriteLine($"");

                WriteLine($"{new String('\t',indent+1)}return;");
                WriteLine($"{new String('\t',indent)}}}");
            }
        }

        // one to many grand children write method
        if (child.Table.HasOneToManyChildren)
        {
            foreach(var gradeChildTable in child.Table.oneToManyChildren)
            { 
                if (gradeChildTable == null) continue;

                // generate single object write method
                WriteLine($"{new String('\t',indent)}protected virtual void Write{gradeChildTable.Name}({gradeChildTable.Name} data, {gradeChildTable.DtoName} dto)");
                WriteLine($"{new String('\t',indent)}{{");
                WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
                WriteLine($"{new String('\t',indent+2)}return;");

                // generate all properties
                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#region write all properties with null");
                WriteLine($"");

                foreach(var col in gradeChildTable.Columns)
                { 
                    WriteLine($"{new String('\t',indent+1)}dto.{col.propertyName} = data.{col.propertyName}{col.ConvertPropertyTypeDataToDto};");
                }

                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}#endregion read properties");
                WriteLine($"");

                WriteLine($"{new String('\t',indent+1)}return;");
                WriteLine($"{new String('\t',indent)}}}");


                // generate list object write method
                WriteLine($"{new String('\t',indent)}protected virtual void Write{gradeChildTable.Name}(IList<{gradeChildTable.Name}> data, IList<{gradeChildTable.DtoName}> dto)");
                WriteLine($"{new String('\t',indent)}{{");
                WriteLine($"{new String('\t',indent+1)}if (data is null || dto is null)");
                WriteLine($"{new String('\t',indent+2)}return;");
                WriteLine($"");
                WriteLine($"{new String('\t',indent+1)}var dataList = data.ToList();");
                WriteLine($"{new String('\t',indent+1)}var dtoList = dto.ToList();");
                WriteLine($"{new String('\t',indent+1)}dtoList.Clear();");
                WriteLine($"");
            
                WriteLine($"{new String('\t',indent+1)}foreach (var itemData in dataList)");
                WriteLine($"{new String('\t',indent+1)}{{");
                WriteLine($"{new String('\t',indent+2)}if (itemData is null) continue;");
                WriteLine($"{new String('\t',indent+2)}var obj = new {gradeChildTable.DtoName}();");
                WriteLine($"{new String('\t',indent+2)}dtoList.Add(obj);");
                WriteLine($"{new String('\t',indent+2)}Write{gradeChildTable.Name}(itemData, obj);");

                WriteLine($"{new String('\t',indent+1)}return;");
                WriteLine($"{new String('\t',indent)}}}");
            }
        }

    }
#>

        #endregion write to dto from data

    }
}


