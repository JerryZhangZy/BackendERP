
<#
#>    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace <#= NamespaceStructure #>
{
    /// <summary>
    /// Represents a <#= StructureClass.ClassName #>.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public partial class <#= StructureClass.ClassName #> : StructureRepository<<#= StructureClass.ClassName #>>
    {
        public <#= StructureClass.ClassName #>() : base() {}
        public <#= StructureClass.ClassName #>(IDataBaseFactory dbFactory): base(dbFactory) {}

        [XmlIgnore, JsonIgnore]
        public new bool IsNew => <#= StructureClass.MainTable.Name #>.IsNew;

        [XmlIgnore, JsonIgnore]
        public new string UniqueId => <#= StructureClass.MainTable.Name #>.UniqueId;

        #region CRUD Methods

        public bool Equals(<#= StructureClass.ClassName #> other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!UniqueId.Equals(other.UniqueId)) return false;
            return ChildrenEquals(other);
        }
        public virtual bool ChildrenEquals(<#= StructureClass.ClassName #> other)
        {
<# 
            indent = 3;
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;

                WriteLine($"{new String('\t',indent)}if ({child.Table.Name} == null && other.{child.Table.Name} != null || {child.Table.Name} != null && other.{child.Table.Name} == null) ");
                WriteLine($"{new String('\t',indent+1)}return false; ");
                if (child.OneToOne)
                    WriteLine($"{new String('\t',indent)}if ({child.Table.Name} != null && other.{child.Table.Name} != null && !{child.Table.Name}.Equals(other.{child.Table.Name})) ");
                else
                    WriteLine($"{new String('\t',indent)}if ({child.Table.Name} != null && other.{child.Table.Name} != null && !{child.Table.Name}.EqualsList(other.{child.Table.Name})) ");
                WriteLine($"{new String('\t',indent+1)}return false; ");
            }
#>
            return true;
        }

        // Check Children table Integrity
        public virtual <#= StructureClass.ClassName #> CheckIntegrity()
        {
<# 
            indent = 3;
            WriteLine($"{new String('\t',indent)}if ({StructureClass.MainTable.Name} is null) return this; ");
            WriteLine($"{new String('\t',indent)}{StructureClass.MainTable.Name}.CheckUniqueId(); ");
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.Name == StructureClass.MainTable.Name) continue;

                WriteLine($"{new String('\t',indent)}CheckIntegrity{child.Table.Name}(); ");
            }
#>
            return this;
        }

        partial void ClearOthers();
        public virtual <#= StructureClass.ClassName #> Clear()
        {
<# 
            indent = 3;
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;

                if (child.OneToOne)
                {
                    WriteLine($"{new String('\t',indent)}{child.Table.Name}?.Clear(); ");
                }
                else
                {
                    WriteLine($"{new String('\t',indent)}{child.Table.Name} = Enumerable.Empty<{child.Table.Name}>(); ");
                    if (!child.Table.IsChildrenOfChildren)
                        WriteLine($"{new String('\t',indent)}Clear{child.Table.Name}Deleted(); ");
                }
            }
            WriteLine($"{new String('\t',indent)}ClearOthers(); ");
            WriteLine($"{new String('\t',indent)}if (_OnClear != null)");
            WriteLine($"{new String('\t',indent+1)}_OnClear(this);");
#>
            return this;
        }

        public virtual void New()
        {
            Clear();
<# // generate all children
            indent = 3;
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.IsChildrenOfChildren) continue;
                if (child.OneToOne)
                {
                    WriteLine($"{new String('\t',indent)}{child.Table.Name} = New{child.Table.Name}(); ");
                }
                else
                {
                    WriteLine($"{new String('\t',indent)}{child.Table.Name} = new List<{child.Table.Name}>(); ");
                    WriteLine($"{new String('\t',indent)}Add{child.Table.Name}(New{child.Table.Name}()); ");
                    if (child.Table.HasOneToOneChildren || child.Table.HasOneToManyChildren)
                        WriteLine($"{new String('\t',indent)}{child.Table.Name}.ToList().ForEach(x => x?.NewChildren()); ");
                    if (!child.Table.IsChildrenOfChildren)
                        WriteLine($"{new String('\t',indent)}Clear{child.Table.Name}Deleted(); ");
                }
            }
#>
            return;
        }

        public virtual void CopyFrom(<#= StructureClass.ClassName #> data)
        {
<# // generate all children CopyFrom
            indent = 3;
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.IsChildrenOfChildren) continue;
                WriteLine($"{new String('\t',indent)}Copy{child.Table.Name}From(data); ");
            }
#>
            CheckIntegrity();
            return;
        }

        public virtual bool Get(long RowNum)
        {
<# // get main table
            indent = 3;
            WriteLine($"{new String('\t',indent)}var obj = Get{StructureClass.MainTable.Name}(RowNum); ");
            WriteLine($"{new String('\t',indent)}if (obj is null) return false; ");
            WriteLine($"{new String('\t',indent)}{StructureClass.MainTable.Name} = obj; ");
            WriteLine($"{new String('\t',indent)}GetOthers(); ");
            WriteLine($"{new String('\t',indent)}if (_OnAfterLoad != null)");
            WriteLine($"{new String('\t',indent+1)}_OnAfterLoad(this);");
#>
            return true;
        }

        public virtual bool GetById(string <#= StructureClass.MainTable.UniqueKey #>)
        {
<# // get main table
            indent = 3;
            WriteLine($"{new String('\t',indent)}var obj = Get{StructureClass.MainTable.Name}By{StructureClass.MainTable.UniqueKey}({StructureClass.MainTable.UniqueKey}); ");
            WriteLine($"{new String('\t',indent)}if (obj is null) return false; ");
            WriteLine($"{new String('\t',indent)}{StructureClass.MainTable.Name} = obj; ");
            WriteLine($"{new String('\t',indent)}GetOthers(); ");
            WriteLine($"{new String('\t',indent)}if (_OnAfterLoad != null)");
            WriteLine($"{new String('\t',indent+1)}_OnAfterLoad(this);");
#>
            return true;
        }

        protected virtual void GetOthers()
        {
            
<# // generate all children table
            indent = 3;
            WriteLine($"{new String('\t',indent)}if (string.IsNullOrEmpty({StructureClass.MainTable.Name}.{StructureClass.MainTable.UniqueKey})) return; ");
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.Name.Equals(StructureClass.MainTable.Name, StringComparison.CurrentCultureIgnoreCase)) continue;

                WriteLine($"{new String('\t',indent)}{child.Table.Name} = Get{child.Table.Name}By{StructureClass.MainTable.UniqueKey}({StructureClass.MainTable.Name}.{StructureClass.MainTable.UniqueKey}); ");
            }
#>
        }

        public virtual bool Save()
        {
<# 
            indent = 3;
            WriteLine($"{new String('\t',indent)}if (string.IsNullOrEmpty({StructureClass.MainTable.Name}.{StructureClass.MainTable.UniqueKey})) return false; ");
            WriteLine($"{new String('\t',indent)}CheckIntegrity(); ");
            WriteLine($"{new String('\t',indent)}if (_OnBeforeSave != null)");
            WriteLine($"{new String('\t',indent+1)}if (!_OnBeforeSave(this)) return false;");
            WriteLine($"{new String('\t',indent)}dbFactory.Begin(); ");
            WriteLine($"{new String('\t',indent)}{StructureClass.MainTable.Name}.SetDataBaseFactory(dbFactory); ");
            WriteLine($"{new String('\t',indent)}if (!{StructureClass.MainTable.Name}.Save()) return false; ");
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.Name.Equals(StructureClass.MainTable.Name, StringComparison.CurrentCultureIgnoreCase)) continue;

                WriteLine($"{new String('\t',indent)}{child.Table.Name}.SetDataBaseFactory(dbFactory).Save(); ");
            }
            WriteLine($"{new String('\t',indent)}if (_OnSave != null)");
            WriteLine($"{new String('\t',indent)}{{");
            WriteLine($"{new String('\t',indent+1)}if (!_OnSave(dbFactory, this))");
            WriteLine($"{new String('\t',indent+1)}{{");
            WriteLine($"{new String('\t',indent+2)}dbFactory.Abort();");
            WriteLine($"{new String('\t',indent+2)}return false;");
            WriteLine($"{new String('\t',indent+1)}}}");
            WriteLine($"{new String('\t',indent)}}}");

            WriteLine($"{new String('\t',indent)}dbFactory.Commit(); ");
            WriteLine($"{new String('\t',indent)}if (_OnAfterSave != null)");
            WriteLine($"{new String('\t',indent+1)}_OnAfterSave(this);");

#>
            return true;
        }

        public virtual bool Delete()
        {
<# 
            indent = 3;
            WriteLine($"{new String('\t',indent)}if (string.IsNullOrEmpty({StructureClass.MainTable.Name}.{StructureClass.MainTable.UniqueKey})) return false; ");
            WriteLine($"{new String('\t',indent)}if (_OnBeforeDelete != null)");
            WriteLine($"{new String('\t',indent+1)}if (!_OnBeforeDelete(this)) return false;");
            WriteLine($"{new String('\t',indent)}dbFactory.Begin(); ");
            WriteLine($"{new String('\t',indent)}{StructureClass.MainTable.Name}.SetDataBaseFactory(dbFactory); ");
            WriteLine($"{new String('\t',indent)}if ({StructureClass.MainTable.Name}.Delete() <= 0) return false; ");
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.Name.Equals(StructureClass.MainTable.Name, StringComparison.CurrentCultureIgnoreCase)) continue;

                WriteLine($"{new String('\t',indent)}{child.Table.Name}.SetDataBaseFactory(dbFactory).Delete(); ");
            }
            WriteLine($"{new String('\t',indent)}if (_OnDelete != null)");
            WriteLine($"{new String('\t',indent)}{{");
            WriteLine($"{new String('\t',indent+1)}if (!_OnDelete(dbFactory, this))");
            WriteLine($"{new String('\t',indent+1)}{{");
            WriteLine($"{new String('\t',indent+2)}dbFactory.Abort();");
            WriteLine($"{new String('\t',indent+2)}return false;");
            WriteLine($"{new String('\t',indent+1)}}}");
            WriteLine($"{new String('\t',indent)}}}");

            WriteLine($"{new String('\t',indent)}dbFactory.Commit(); ");
            WriteLine($"{new String('\t',indent)}if (_OnAfterDelete != null)");
            WriteLine($"{new String('\t',indent+1)}_OnAfterDelete(this);");
#>
            return true;
        }

        #endregion CRUD Methods


<# // generate all children
foreach(var item in StructureClass.StructureTables)
{ 
    var child = item.Value;
    if (child == null) continue;
#>
        #region <#= child.Table.Name #> - Generated 
<# // generate one child object
    if (child.OneToOne)
    {
#>
<#@ include file="GenerateStructureOneToOneChildren.ttinclude" #>
<# 
    } 
    // generate child list
    else if (!child.Table.IsChildrenOfChildren)
    {
#>
<#@ include file="GenerateStructureOneToManyChildren.ttinclude" #>
<# 
    } 
    // generate grand child list for another children
    else
    {
#>
<#@ include file="GenerateStructureGrandChildren.ttinclude" #>
<#  } #>

        #endregion <#= child.Table.Name #> - Generated 

<#  } #>

    }
}


