<#
#>    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Text;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace <#= Namespace #>
{
    /// <summary>
    /// Represents a <#= table.Name #> SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you want re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class <#= table.Name #>Helper
    {
        public static readonly string TableName = "<#= table.Name #>";
        public static readonly string TableAllies = "<#= table.AlliesName #>";

        public static string From(string TableAllies = null) => $"FROM {TableName} {TableAllies ?? TableAllies} ";
        public static string InnerJoin(string TableAllies = null) => $"INNER JOIN {TableName} {TableAllies ?? TableAllies} ";
        public static string LeftJoin(string TableAllies = null) => $"LEFT JOIN {TableName} {TableAllies ?? TableAllies} ";

        #region - static SQL fileds statement

<# // generate all fields
foreach(var col in table.Columns)
{ 
#>
<# // generate all fields
    if (col.isString)
    {
#>
        public static string <#= col.Name #>(string tableAllies = null, string name = null) => $"RTRIM({tableAllies ?? TableAllies}.<#= col.Name #>) AS {name ?? "<#= col.Name #>"} ";
<# 
    }
    else 
    { 
#>
        public static string <#= col.Name #>(string tableAllies = null, string name = null) => $"{tableAllies ?? TableAllies}.<#= col.Name #> AS {name ?? "<#= col.Name #>"} ";
<#  } #>
<# 
} 
#>

        #endregion - static SQL fileds statement

        public static string SelectAll(string tableAllies = null) 
        {
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : $"{tableAllies.TrimEnd()}.";
            return $@"
<# // generate all fields
            var colCount = table.Columns.Count;
            for (int i = 0; i < colCount; i++)
            { 
                var comma = (i >= (colCount - 1)) ? string.Empty : ",";
                var col = table.Columns[i];
                if (col.isString)
                {
                    WriteLine($"RTRIM({{allies}}{col.Name}) AS {col.Name}{comma}");
                }
                else 
                { 
                    WriteLine($"{{allies}}{col.Name} AS {col.Name}{comma}");
                }
            } 
#>
";
        }

        public static string SelectAllWhere(string sqlWhere, string tableAllies = null, bool forJson = false) 
        {
            if (!sqlWhere.StartsWith("WHERE", StringComparison.CurrentCultureIgnoreCase))
                sqlWhere = $"WHERE {sqlWhere}";
            var forJsonString = forJson ? "FOR JSON PATH" : string.Empty;
            var allies = string.IsNullOrEmpty(tableAllies) ? string.Empty : tableAllies.TrimEnd();

            return $"SELECT {SelectAll(tableAllies)} FROM {TableName} {allies} {sqlWhere} {forJsonString}";
        }

    }
}
