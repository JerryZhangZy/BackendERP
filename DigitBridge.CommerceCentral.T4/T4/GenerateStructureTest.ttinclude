<#
#>    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;

namespace <#= NamespaceTest #>
{
    /// <summary>
    /// Represents a Tester for <#= StructureClass.ClassName #>.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public partial class <#= StructureClass.ClassName #>Tests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected <#= StructureClass.ClassName #> GetFakerData()
        {
<# // generate test data
            WriteLine($"{new String('\t',indent)}var {StructureClass.ClassName} = new {StructureClass.ClassName}(DataBaseFactory); ");
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.IsChildrenOfChildren) continue;

                if (child.OneToOne)
                {
                    WriteLine($"{new String('\t',indent)}{StructureClass.ClassName}.{child.Table.Name} = {child.Table.Name}Tests.GetFakerData().Generate(); ");
                }
                else
                {
                    WriteLine($"{new String('\t',indent)}{StructureClass.ClassName}.{child.Table.Name} = {child.Table.Name}Tests.GetFakerData().Generate(10); ");
                    if(child.Table.HasOneToOneChildren)
                    {
                        foreach(var grandChildTable in child.Table.oneToOneChildren)
                        { 
                            if (grandChildTable == null) continue;
                            WriteLine($"{new String('\t',indent)}foreach (var ln in {StructureClass.ClassName}.{child.Table.Name}) ");
                            WriteLine($"{new String('\t',indent+1)}ln.{grandChildTable.Name} = {grandChildTable.Name}Tests.GetFakerData().Generate(); ");
                        }
                    }
                    if(child.Table.HasOneToManyChildren)
                    {
                        foreach(var grandChildTable in child.Table.oneToManyChildren)
                        { 
                            if (grandChildTable == null) continue;
                            WriteLine($"{new String('\t',indent)}foreach (var ln in {StructureClass.ClassName}.{child.Table.Name}) ");
                            WriteLine($"{new String('\t',indent+1)}ln.{grandChildTable.Name} = {grandChildTable.Name}Tests.GetFakerData().Generate(5); ");
                        }
                    }
                }
            }
            WriteLine($"{new String('\t',indent)}return {StructureClass.ClassName}; ");
#>
        }

        protected List<<#= StructureClass.ClassName #>> GetFakerData(int count)
        {
<# // generate test data list
            WriteLine($"{new String('\t',indent)}var {StructureClass.ClassName}s = new List<{StructureClass.ClassName}>(); ");
            WriteLine($"{new String('\t',indent)}for (int i = 0; i < count; i++) ");
            WriteLine($"{new String('\t',indent+1)}{StructureClass.ClassName}s.Add(GetFakerData()); ");
            WriteLine($"{new String('\t',indent)}return {StructureClass.ClassName}s; ");
#>
        }

        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory DataBaseFactory { get; set; }

        public <#= StructureClass.ClassName #>Tests(TestFixture<StartupTest> fixture) 
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["dsn"]);
        }
        public void Dispose()
        {
        }

        #region sync methods

        [Fact()]
		//[Fact(Skip = SkipReason)]
		public void Save_Test()
		{
			var data = GetFakerData();
            data.SetDataBaseFactory(DataBaseFactory);
			data.Save();

            var dataGet = new <#= StructureClass.ClassName #>(DataBaseFactory);
            dataGet.GetById(data.UniqueId);
            var result = data.Equals(dataGet);

			Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
		}

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Get_Test()
        {
            var id = DataBaseFactory.GetValue<<#= StructureClass.MainTable.Name #>, string>(@"
SELECT TOP 1 ins.<#= StructureClass.MainTable.UniqueKey #> 
FROM <#= StructureClass.MainTable.Name #> ins 
INNER JOIN (
    SELECT it.<#= StructureClass.MainTable.UniqueKey #>, COUNT(1) AS cnt FROM <#= StructureClass.DetailTable.Name #> it GROUP BY it.<#= StructureClass.MainTable.UniqueKey #>
) itm ON (itm.<#= StructureClass.MainTable.UniqueKey #> = ins.<#= StructureClass.MainTable.UniqueKey #>)
WHERE itm.cnt > 1
");
            var data = new <#= StructureClass.ClassName #>(DataBaseFactory);
            data.GetById(id);

            var dataUpdate = GetFakerData();
            data.CopyFrom(dataUpdate);
            data.Save();

            var dataGet = new <#= StructureClass.ClassName #>(DataBaseFactory);
            dataGet.GetById(id);
            var result = data.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        #endregion sync methods

    }
}

