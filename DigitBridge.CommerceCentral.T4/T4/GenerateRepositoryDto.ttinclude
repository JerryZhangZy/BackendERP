<#
#>    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Xml.Serialization;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.YoPoco;

namespace <#= Namespace #>
{
    /// <summary>
    /// Represents a <#= table.Name #> Dto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public class <#= table.DtoName #>
    {
        public long? RowNum { get; set; }
        public string UniqueId { get; set; }
        public DateTime? EnterDateUtc { get; set; }
        public Guid DigitBridgeGuid { get; set; }

        #region Properties - Generated 

<# // generate all fields
foreach(var col in table.Columns)
{ 
    if (col.ignoreGenerate) continue;
    if (col.isJson) continue;
    foreach(var atr in col.DtoAtrributes)
    {
#>
        <#= atr #>
<#  } #>
        public <#= col.DtoPropertyType #> <#= col.propertyName #> { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool Has<#= col.propertyName #> => <#= col.propertyName #> != null;

<# } #>

<# // generate all json fields
if (table.HasJsonColumns)
{

    foreach(var col in table.JsonColumns)
    { 
        if (col.ignoreGenerate) continue;
        if (!col.isJson) continue;
#>
        [IgnoreCompare]
        public JObject <#= col.jsonDictionaryName #> { get; set; }
        [XmlIgnore, JsonIgnore, IgnoreCompare]
        public bool Has<#= col.jsonDictionaryName #> => <#= col.jsonDictionaryName #> != null;

<#
    } 
} 
#>

        #endregion Properties - Generated 

        #region Children - Generated 

<# // generate one to one children
if(table.HasOneToOneChildren)
{ 
    indent = 2;
    foreach(var childTable in table.oneToOneChildren)
    { 
        if (childTable == null) continue;

        // Children reference
        WriteLine($"{new String('\t',indent)}public {childTable.DtoName} {childTable.Name} {{ get; set; }}");
        WriteLine($"{new String('\t',indent)}[XmlIgnore, JsonIgnore, IgnoreCompare]");
        WriteLine($"{new String('\t',indent)}public bool Has{childTable.Name} => {childTable.Name} != null;");
        WriteLine($"{new String('\t',indent)}");
    }
} 
else if(table.HasOneToManyChildren)
{ 
    indent = 2;
    foreach(var childTable in table.oneToManyChildren)
    { 
        if (childTable == null) continue;

        WriteLine($"{new String('\t',indent)}public IList<{childTable.DtoName}> {childTable.Name} {{ get; set; }}");
        WriteLine($"{new String('\t',indent)}[XmlIgnore, JsonIgnore, IgnoreCompare]");
        WriteLine($"{new String('\t',indent)}public bool Has{childTable.Name} => {childTable.Name} != null;");
        WriteLine($"{new String('\t',indent)}");
    }
} 
#>
        #endregion Children - Generated 

    }
}


