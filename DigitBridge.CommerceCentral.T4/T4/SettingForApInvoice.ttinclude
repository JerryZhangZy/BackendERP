<#
	// Database table define file path
    var DatabaseProjectName = "DigitBridge.CommerceCentral.ERPDatabase\\ap";
    // tables define file name, mutiple join with ",",if blank,read all the tables;GetColumnAtrribute
    var Files = "ApInvoiceHeader,ApInvoiceHeaderInfo,ApInvoiceHeaderAttributes,ApInvoiceItems";

    // current solution path
	var path = Host.ResolveAssemblyReference("$(SolutionDir)");
    var project = Path.Combine(path,DatabaseProjectName);
    var processName = "ApInvoice";
    var processForlderName = "ap";

    // Tables relatonship
    var structureName = $"{processName}Data";
    var StructureClass = new StructureInfo(structureName,
            new StructureTable() { Name = "ApInvoiceHeader", AlliesName = "apih", MainTable = true, OneToOne = true },
            new StructureTable() { Name = "ApInvoiceHeaderInfo", AlliesName = "apihi", ParentName = "ApInvoiceHeader", OneToOne = true, LoadByColumn = "ApInvoiceUuid" },
            new StructureTable() { Name = "ApInvoiceHeaderAttributes", AlliesName = "apiha", ParentName = "ApInvoiceHeader", OneToOne = true, LoadByColumn = "ApInvoiceUuid" },
            new StructureTable() { Name = "ApInvoiceItems", AlliesName = "apii", ParentName = "ApInvoiceHeader", DetailTable = true, OneToOne = false, LoadByColumn = "ApInvoiceUuid" } 
              
        );


    // Set generate file Namespace and forlder
    var Namespace = "DigitBridge.CommerceCentral.ERPDb";
    var ModelFolder = $"DigitBridge.CommerceCentral.ERPDb\\{processForlderName}";
    var DtoFolder = $"DigitBridge.CommerceCentral.ERPDb\\{processForlderName}\\dto";

    var NamespaceTest = "DigitBridge.CommerceCentral.ERPDb.Tests.Integration";
    var TesterFolder = "DigitBridge.CommerceCentral.ERPDb.Tests.Integration";

    var NamespaceStructure = "DigitBridge.CommerceCentral.ERPDb";
    var StructureFolder = $"DigitBridge.CommerceCentral.ERPDb\\{processForlderName}";
    var NamespaceStructureDto = "DigitBridge.CommerceCentral.ERPDb";
    var StructureDtoFolder = $"DigitBridge.CommerceCentral.ERPDb\\{processForlderName}\\dto";

    var NamespaceService = "DigitBridge.CommerceCentral.ERPMdl";
    var ServiceFolder = $"DigitBridge.CommerceCentral.ERPMdl\\{processForlderName}";

    var NamespaceServiceTest = "DigitBridge.CommerceCentral.ERPMdl.Tests.Integration";
    var ServiceTesterFolder = "DigitBridge.CommerceCentral.ERPMdl.Tests.Integration";

    var JsModelFolder = $"DigitBridge.CommerceCentral.ERPApi\\JsType\\{processForlderName}";
    var PayloadName = $"{processName}Payload";

    var OpenApiPayloadFolder = $"DigitBridge.CommerceCentral.ERPApi\\OpenApiModel";
    var OpenApiPayloadName = $"{PayloadName}OpenApi";
    
    // generate repository class for each table
    var generateModel = true;
    var generateDto = true;
    var generateModelHelper = true;

    // generate tester class for each table repository
    var generateTester = true;

    // generate structure repository class contain multiple table
    var generateStructureRepository = true;
    var generateStructureTester = true;

    // generate structure Dto class
    var generateStructureDto = true;
    var generateStructureDtoCsv = true;
    var generateStructureDtoTester = true;
    var StructureDtoName = $"{structureName}Dto";

    // generate service class
    var generateService = true;
    var ServiceName = $"{processName}Service";
    var ServiceHelperName = $"{processName}Helper";
    
    var generateStructureFindList=true;
    var generateServiceTester = true;

    // generate IO functions
    var generateIO = true;
    var IOServiceName = $"{processName}IOManager";
    var IOFormatName = $"{processName}IOFormat";
    var IOCsvHelperName = $"{processName}IOCsv";
    var IOFolder = $"DigitBridge.CommerceCentral.ERPMdl\\{processForlderName}\\io";




    var indent = 2;
    var dir = string.Empty;

    // Read schema

    //var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = path};
    var parser = new SQLFileParser(project, Files, StructureClass);

    parser.Parse();
    var tables = parser.Tables;
#>