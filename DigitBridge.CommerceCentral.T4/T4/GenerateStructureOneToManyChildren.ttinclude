        // One to many children
        protected IEnumerable<<#= child.Table.Name #>> _<#= child.Table.Name #>Deleted;
        public virtual <#= child.Table.Name #> Add<#= child.Table.Name #>Deleted(<#= child.Table.Name #> del) 
        {
            if (_<#= child.Table.Name #>Deleted is null)
                _<#= child.Table.Name #>Deleted = new List<<#= child.Table.Name #>>();
            var lst = _<#= child.Table.Name #>Deleted.ToList();
            lst.Add(del);
            _<#= child.Table.Name #>Deleted = lst;
            return del;
        } 

        public virtual IEnumerable<<#= child.Table.Name #>> Add<#= child.Table.Name #>Deleted(IEnumerable<<#= child.Table.Name #>> del) 
        {
            if (_<#= child.Table.Name #>Deleted is null)
                _<#= child.Table.Name #>Deleted = new List<<#= child.Table.Name #>>();
            var lst = _<#= child.Table.Name #>Deleted.ToList();
            lst.AddRange(del);
            _<#= child.Table.Name #>Deleted = lst;
            return del;
        } 

        public virtual void Set<#= child.Table.Name #>Deleted(IEnumerable<<#= child.Table.Name #>> del) =>
            _<#= child.Table.Name #>Deleted = del;

        public virtual void Clear<#= child.Table.Name #>Deleted() =>
            _<#= child.Table.Name #>Deleted = null;


        protected IEnumerable<<#= child.Table.Name #>> _<#= child.Table.Name #>;

        public virtual IEnumerable<<#= child.Table.Name #>> <#= child.Table.Name #> 
        { 
            get 
            {
                if (_<#= child.Table.Name #> is null)
                    _<#= child.Table.Name #> = new List<<#= child.Table.Name #>>();
                return _<#= child.Table.Name #>;
            } 
            set
            {
                if (value != null)
                {
                    var valueList = value.ToList();
                    valueList.ForEach(i => i?.SetParent(this));
                    _<#= child.Table.Name #> = valueList;
                }
                else
                    _<#= child.Table.Name #> = null;
            } 
        }

        public virtual void Copy<#= child.Table.Name #>From(<#= StructureClass.ClassName #> data) 
        {
            <#= child.Table.Name #>.CopyFrom(data.<#= child.Table.Name #>, new string[] {"<#= StructureClass.MainTable.UniqueKey #>"});
            var lst = <#= child.Table.Name #>.ToList(); 
            var lstDeleted = lst.FindNotExistsByRowNum(data.<#= child.Table.Name #>);
            Set<#= child.Table.Name #>Deleted(lstDeleted);
            foreach (var remove in lstDeleted)
                lst.Remove(remove);
            foreach (var c in lst)
                c.CopyChildrenFrom(data.<#= child.Table.Name #>.FindByRowNum(c.RowNum));
        } 

        public virtual <#= child.Table.Name #> New<#= child.Table.Name #>() => new <#= child.Table.Name #>(dbFactory);

        public virtual <#= child.Table.Name #> Add<#= child.Table.Name #>(<#= child.Table.Name #> obj) => 
            <#= child.Table.Name #>.AddOrReplace(obj.SetParent(this));

        public virtual <#= child.Table.Name #> Remove<#= child.Table.Name #>(<#= child.Table.Name #> obj) => 
            Add<#= child.Table.Name #>Deleted(<#= child.Table.Name #>.Remove(obj.SetParent(this)));

        public virtual IEnumerable<<#= child.Table.Name #>> Get<#= child.Table.Name #>By<#= StructureClass.MainTable.UniqueKey #>(string <#= StructureClass.MainTable.UniqueKey #>) =>
            (string.IsNullOrEmpty(<#= StructureClass.MainTable.UniqueKey #>)) 
                ? null 
                : dbFactory.Find<<#= child.Table.Name #>>("WHERE <#= StructureClass.MainTable.UniqueKey #> = @0 ORDER BY <#= child.Table.CheckColumnNameOrRowNum("Seq") #> ", <#= StructureClass.MainTable.UniqueKey #>).ToList();

        public virtual bool Save<#= child.Table.Name #>(IEnumerable<<#= child.Table.Name #>> data) =>
            (data is null) ? false : data.Save();

        public virtual int Delete<#= child.Table.Name #>(IEnumerable<<#= child.Table.Name #>> data) =>
            (data is null) ? 0 : data.Delete();

        public virtual async Task<IEnumerable<<#= child.Table.Name #>>> Get<#= child.Table.Name #>By<#= StructureClass.MainTable.UniqueKey #>Async(string <#= StructureClass.MainTable.UniqueKey #>) =>
            (string.IsNullOrEmpty(<#= StructureClass.MainTable.UniqueKey #>)) 
                ? null
                : await dbFactory.FindAsync<<#= child.Table.Name #>>("WHERE <#= StructureClass.MainTable.UniqueKey #> = @0 ORDER BY <#= child.Table.CheckColumnNameOrRowNum("Seq") #> ", <#= StructureClass.MainTable.UniqueKey #>);

        public virtual async Task<bool> Save<#= child.Table.Name #>Async(IEnumerable<<#= child.Table.Name #>> data) =>
            (data is null) ? false : await data.SaveAsync();

        public virtual async Task<int> Delete<#= child.Table.Name #>Async(IEnumerable<<#= child.Table.Name #>> data) =>
            (data is null) ? 0 : await data.DeleteAsync();

<#
    if (child.Table.Name != StructureClass.MainTable.Name)
    {
#>
        public virtual IEnumerable<<#= child.Table.Name #>> CheckIntegrity<#= child.Table.Name #>()
        {
            if (<#= child.Table.Name #> is null || <#= StructureClass.MainTable.Name #> is null) 
                return <#= child.Table.Name #>;
            var seq = 0;
            <#= child.Table.Name #>.RemoveEmpty();
            var children = <#= child.Table.Name #>.ToList();
            foreach (var child in children.Where(x => x != null))
            {
                child.SetParent(this);
                if (child.<#= StructureClass.MainTable.UniqueKey #> != <#= StructureClass.MainTable.Name #>.<#= StructureClass.MainTable.UniqueKey #>)
                    child.<#= StructureClass.MainTable.UniqueKey #> = <#= StructureClass.MainTable.Name #>.<#= StructureClass.MainTable.UniqueKey #>;
<#
    if (child.Table.ExistColumn("Seq"))
    {
#>
                seq += 1;
                child.Seq = seq;
<# } #>
            }
            return children;
        }
<# } #>

