<#
#>    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Utility;

namespace <#= NamespaceStructure #>
{
    /// <summary>
    /// Request and Response payload object
    /// </summary>
    [Serializable()]
    public class <#= PayloadName #> : PayloadBase
    {
        /// <summary>
        /// Delegate function to load request parameter to payload property.
        /// </summary>
        public override IDictionary<string, Action<string>> GetOtherParameters()
        {
            return new Dictionary<string, Action<string>>
            {
                { "<#= StructureClass.MainTable.UniqueKey #>s", val => <#= StructureClass.MainTable.UniqueKey #>s = val.Split(",").ToList() }
            };
        }


        #region multiple Dto list

        /// <summary>
        /// (Request Parameter) Array of uuid to load multiple <#= processName #> dto data.
        /// </summary>
        [OpenApiPropertyDescription("(Request Parameter) Array of uuid to load multiple <#= processName #> dto data.")]
        public IList<string> <#= StructureClass.MainTable.UniqueKey #>s { get; set; } = new List<string>();
        [JsonIgnore] 
        public virtual bool Has<#= StructureClass.MainTable.UniqueKey #>s => <#= StructureClass.MainTable.UniqueKey #>s != null && <#= StructureClass.MainTable.UniqueKey #>s.Count > 0;
        public bool ShouldSerializeSalesOrderUuids() => Has<#= StructureClass.MainTable.UniqueKey #>s;

        /// <summary>
        /// (Response Data) Array of <#= processName #> entity object which load by uuid array.
        /// </summary>
        [OpenApiPropertyDescription("(Response Data) Array of entity object which load by uuid array.")]
        public IList<<#= StructureDtoName #>> <#= processName #>s { get; set; }
        [JsonIgnore] public virtual bool Has<#= processName #>s => <#= processName #>s != null && <#= processName #>s.Count > 0;
        public bool ShouldSerialize<#= processName #>s() => Has<#= processName #>s;

        #endregion multiple Dto list


        #region single Dto object

        /// <summary>
        /// (Request and Response Data) Single <#= processName #> entity object which load by Number.
        /// </summary>
        [OpenApiPropertyDescription("(Response Data) Single entity object which load by Number.")]
        public <#= StructureDtoName #> <#= processName #> { get; set; }
        [JsonIgnore] public virtual bool Has<#= processName #> => <#= processName #> != null;
        public bool ShouldSerialize<#= processName #>() => Has<#= processName #>;

        #endregion single Dto object


        #region list service

        /// <summary>
        /// (Response Data) List result which load filter and paging.
        /// </summary>
        [OpenApiPropertyDescription("(Response Data) List result which load filter and paging.")]
        [JsonConverter(typeof(StringBuilderConverter))]
        public StringBuilder <#= processName #>List { get; set; }
        [JsonIgnore] public virtual bool Has<#= processName #>List => <#= processName #>List != null && <#= processName #>List.Length > 0;
        public bool ShouldSerialize<#= processName #>List() => Has<#= processName #>List;

        /// <summary>
        /// (Response Data) List result count which load filter and paging.
        /// </summary>
        public int <#= processName #>ListCount { get; set; }
        [JsonIgnore] public virtual bool Has<#= processName #>ListCount => <#= processName #>ListCount > 0;
        public bool ShouldSerialize<#= processName #>ListCount() => Has<#= processName #>ListCount;

        #endregion list service
    }
}
