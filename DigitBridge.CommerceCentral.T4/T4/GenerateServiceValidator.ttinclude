<#
#>    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace <#= NamespaceService #>
{
    /// <summary>
    /// Represents a default <#= ServiceName #> Validator class.
    /// </summary>
    public partial class <#= ServiceName #>ValidatorDefault : IValidator<<#= StructureClass.ClassName #>>, IMessage
    {
        public virtual bool IsValid { get; set; }
        public <#= ServiceName #>ValidatorDefault() { }
        public <#= ServiceName #>ValidatorDefault(IMessage serviceMessage) { ServiceMessage = serviceMessage; }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages 
        { 
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

        public virtual void Clear()
        {
            IsValid = true;
            Messages = new List<MessageClass>();
        }

        public virtual bool ValidatePayload(<#= StructureClass.ClassName #> data, IPayload payload, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();

            if (processingMode == ProcessingMode.Add)
            {
                //TODO set MasterAccountNum, ProfileNum and DatabaseNum from payload
                //data.SalesOrderHeader.MasterAccountNum = pl.MasterAccountNum;
                //data.SalesOrderHeader.ProfileNum = pl.ProfileNum;
                //data.SalesOrderHeader.DatabaseNum = pl.DatabaseNum;
            }
            else
            {
                //TODO check MasterAccountNum, ProfileNum and DatabaseNum between data and payload
                //if (
                //    data.SalesOrderHeader.MasterAccountNum != pl.MasterAccountNum ||
                //    data.SalesOrderHeader.ProfileNum != pl.ProfileNum
                //)
                //    IsValid = false;
                //AddError($"Sales Order not found.");
                //return IsValid;
            }
            return true;
        }

        public virtual bool Validate(<#= StructureClass.ClassName #> data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!ValidateAllMode(data))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => ValidateAdd(data),
                ProcessingMode.Edit => ValidateEdit(data),
                ProcessingMode.List => false,
                ProcessingMode.Delete => ValidateDelete(data),
                ProcessingMode.Void => ValidateDelete(data),
                ProcessingMode.Cancel => ValidateDelete(data),
                _ => false,
            };
        }
        protected virtual bool ValidateAllMode(<#= StructureClass.ClassName #> data)
        {
            var dbFactory = data.dbFactory;
            if (string.IsNullOrEmpty(data.<#= StructureClass.MainTable.Name #>.<#= StructureClass.MainTable.UniqueKey #>))
            {
                IsValid = false;
                AddError($"Unique Id cannot be empty.");
                return IsValid;
            }
            //if (string.IsNullOrEmpty(data.<#= StructureClass.MainTable.Name #>.CustomerUuid))
            //{
            //    IsValid = false;
            //    AddError($"Customer cannot be empty.");
            //    return IsValid;
            //}
            return true;

        }

        protected virtual bool ValidateAdd(<#= StructureClass.ClassName #> data)
        {
            var dbFactory = data.dbFactory;
            if (data.<#= StructureClass.MainTable.Name #>.RowNum != 0 && dbFactory.Exists<<#= StructureClass.MainTable.Name #>>(data.<#= StructureClass.MainTable.Name #>.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} is duplicate.");
                return IsValid;
            }
            return true;

        }

        protected virtual bool ValidateEdit(<#= StructureClass.ClassName #> data)
        {
            var dbFactory = data.dbFactory;
            if (data.<#= StructureClass.MainTable.Name #>.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} not found.");
                return IsValid;
            }

            if (data.<#= StructureClass.MainTable.Name #>.RowNum != 0 && !dbFactory.Exists<<#= StructureClass.MainTable.Name #>>(data.<#= StructureClass.MainTable.Name #>.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        protected virtual bool ValidateDelete(<#= StructureClass.ClassName #> data)
        {
            var dbFactory = data.dbFactory;
            if (data.<#= StructureClass.MainTable.Name #>.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} not found.");
                return IsValid;
            }

            if (data.<#= StructureClass.MainTable.Name #>.RowNum != 0 && !dbFactory.Exists<<#= StructureClass.MainTable.Name #>>(data.<#= StructureClass.MainTable.Name #>.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} not found.");
                return IsValid;
            }
            return true;
        }


        #region Async Methods

        public virtual async Task<bool> ValidateAsync(<#= StructureClass.ClassName #> data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!(await ValidateAllModeAsync(data).ConfigureAwait(false)))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => await ValidateAddAsync(data).ConfigureAwait(false),
                ProcessingMode.Edit => await ValidateEditAsync(data).ConfigureAwait(false),
                ProcessingMode.List => false,
                ProcessingMode.Delete => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Void => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Cancel => await ValidateDeleteAsync(data).ConfigureAwait(false),
                _ => false,
            };
        }

        protected virtual async Task<bool> ValidateAllModeAsync(<#= StructureClass.ClassName #> data)
        {
            var dbFactory = data.dbFactory;
            if (string.IsNullOrEmpty(data.<#= StructureClass.MainTable.Name #>.<#= StructureClass.MainTable.UniqueKey #>))
            {
                IsValid = false;
                AddError($"Unique Id cannot be empty.");
                return IsValid;
            }
            //if (string.IsNullOrEmpty(data.<#= StructureClass.MainTable.Name #>.CustomerUuid))
            //{
            //    IsValid = false;
            //    AddError($"Customer cannot be empty.");
            //    return IsValid;
            //}
            return true;

        }

        protected virtual async Task<bool> ValidateAddAsync(<#= StructureClass.ClassName #> data)
        {
            var dbFactory = data.dbFactory;
            if (data.<#= StructureClass.MainTable.Name #>.RowNum != 0 && (await dbFactory.ExistsAsync<<#= StructureClass.MainTable.Name #>>(data.<#= StructureClass.MainTable.Name #>.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} is duplicate.");
                return IsValid;
            }
            return true;

        }

        protected virtual async Task<bool> ValidateEditAsync(<#= StructureClass.ClassName #> data)
        {
            var dbFactory = data.dbFactory;
            if (data.<#= StructureClass.MainTable.Name #>.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} not found.");
                return IsValid;
            }

            if (data.<#= StructureClass.MainTable.Name #>.RowNum != 0 && !(await dbFactory.ExistsAsync<<#= StructureClass.MainTable.Name #>>(data.<#= StructureClass.MainTable.Name #>.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        protected virtual async Task<bool> ValidateDeleteAsync(<#= StructureClass.ClassName #> data)
        {
            var dbFactory = data.dbFactory;
            if (data.<#= StructureClass.MainTable.Name #>.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} not found.");
                return IsValid;
            }

            if (data.<#= StructureClass.MainTable.Name #>.RowNum != 0 && !(await dbFactory.ExistsAsync<<#= StructureClass.MainTable.Name #>>(data.<#= StructureClass.MainTable.Name #>.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.<#= StructureClass.MainTable.Name #>.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        #endregion Async Methods
    }
}


