<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".js" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="ParseSqlFile.ttinclude" #>
<#@ include file="SettingForSalesOrder.ttinclude" #>
<#      
    // Generate model output
	if (tables.Count>0)
	{
        foreach(var table in tables.Values)
        {
#>              
<#@ include file="GenerateJsDocRepositoryDto.ttinclude" #>
<# 
    dir = Path.Combine(path,JsModelFolder);
    SaveOutputNotExists(dir, $"{table.DtoName}.js");
#>
<#      
        }
    }
#>              

<#@ include file="GenerateJsDocStructureDto.ttinclude" #>
<# 
    dir = Path.Combine(path,JsModelFolder);
    SaveOutputNotExists(dir, $"{StructureDtoName}.js");
#>

<#@ include file="GenerateJsDocPayload.ttinclude" #>
<# 
    dir = Path.Combine(path,JsModelFolder);
    SaveOutputNotExists(dir, $"{PayloadName}.js");
#>


<#+
    public void SaveOutput(string destinationFolder, string outputFileName)
    {
        // Write to destination folder
        //string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
        string outputFilePath = Path.Combine(destinationFolder, outputFileName);
        File.Delete(outputFilePath);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
 
        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }

    public void SaveOutputNotExists(string destinationFolder, string outputFileName)
    {
        // Write to destination folder
        //string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
        string outputFilePath = Path.Combine(destinationFolder, outputFileName);
        if (!File.Exists(outputFilePath)) 
            File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>