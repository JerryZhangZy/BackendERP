<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ include file="ParseSqlFile.ttinclude" #>

<#
/*
    T4 template to generate service, repository, data structure and tester for specify aspect 
    This template load database define file (*.sql) and parse database table create sql script to get data table define and relationship.
    Data table create script:
        1. column must start with [
        2. comment of column must not include [ or ] 
            for example: 
            	[TotalAmount] DECIMAL(24, 6) NOT NULL DEFAULT 0, --(Sum of all items OrderItems[Quantity] x OrderItems[UnitPrice] ) + TotalTaxPrice + Total ShippingPrice + TotalInsurancePrice + TotalGiftOptionPrice + AdditionalCostOrDiscount +PromotionAmount + (Sum of all items OrderItems[Promotions[Amount]] + OrderItems[Promotions[ShippingAmount]] + OrderItems[RecyclingFee])
            this will not get correct table and columns info. must remove [ or ]

        3. Primary key - reqired, PK must be BIGINT
            PK_ and PRIMARY KEY define the PRIMARY KEY
            The primary key field should be named [RowNum]
            for example: CONSTRAINT [PK_PoHeader] PRIMARY KEY ([RowNum])
            this will generate PK in repository

        4. Unique key - reqired, UK must be VARCHAR(50), this is a GUID string
            UK_ and UNIQUE define the Unique KEY
            for example: CREATE UNIQUE NONCLUSTERED INDEX [UK_InvoiceHeader] ON [dbo].[InvoiceHeader]
            this will generate Unique Id in repository

        5. Foreign key - optional, FK must include unique key of other table, this is a GUID string
            FK_ and INDEX define the Foreign KEY
            for example: CREATE NONCLUSTERED INDEX [FK_InvoiceItems_InvoiceId_Seq] ON [dbo].[InvoiceItems]
            this will generate code to load multiple records for one to many relationship.
            for example: InvoiceHeader has multiple InvoiceItems, this will load all InvoiceItems by one InvoiceId

        6. Empty key - optional
            BLK_ and INDEX define the Empty KEY
            for example: CREATE NONCLUSTERED INDEX [BLK_InvoiceItems_InvoiceId_Seq] ON [dbo].[InvoiceItems]
            Empty key use to check current record is empty.
            this will generate code to check record is empty. 
            If all key fields is empty then current record will treat as empty.

        7. TINYINT 
            If column define as TINYINT type.
            this column will generate a bool property. 
            1 = true, 0 = false
        8. Type length
           Length follows type without any space. eg. VARCHAR(50)
           for example: VARCHAR (50) which will be failed to generate code
           

    Generated code module:
        1. Generated file will name as *.Designer.cs, this will overwrie each time generate.
        2. Partial class file will generate when file not exist. will not overwrite.
        3. table repository - will generate repository class for each table.
        4. table repository tester - will generate tester class for each table repository.
        5. structure repository - will generate structure repository class which include all children table repository.
        6. structure repository Tester - will generate structure repository tester class.
        6. Service Class - will generate srevice class.
        7. Service Class Tester - will generate srevice class tester.
*/
#>

<#@ include file="SettingForSalesOrder.ttinclude" #>

<#      
    // Generate model output
	if (tables.Count>0)
	{
        foreach(var table in tables.Values)
        {
#>              

<#          // Generate model output
	        if (generateModel)
	        {
#>              
<#@ include file="GenerateRepository.ttinclude" #>
<# 
                dir = Path.Combine(path,ModelFolder);
                SaveOutput(dir, $"{table.Name}.Designer.cs");
            }
#>

<#          // Generate model output
	        if (generateModel)
	        {
#>              
<#@ include file="GenerateRepositoryPartialClass.ttinclude" #>
<# 
                dir = Path.Combine(path,ModelFolder);
                SaveOutputNotExists(dir, $"{table.Name}.cs");
            }
#>

<#          // Generate model SQL helper output
	        if (generateModelHelper)
	        {
#>              
<#@ include file="GenerateRepositoryHelper.ttinclude" #>
<# 
                dir = Path.Combine(path,ModelFolder);
                SaveOutputNotExists(dir, $"{table.Name}Helper.cs");
            }
#>
<#          // Generate model SQL helper output
	        if (generateModelHelper)
	        {
#>              
<#@ include file="GenerateRepositoryHelperTest.ttinclude" #>
<# 
                dir = Path.Combine(path,TesterFolder);
                SaveOutputNotExists(dir, $"{table.Name}HelperTests.cs");
            }
#>


<#          // Generate tester class
	        if (generateTester)
	        {
#>              
<#@ include file="GenerateRepositoryTest.ttinclude" #>
<# 
                dir = Path.Combine(path,TesterFolder);
                SaveOutput(dir, $"{table.Name}Tests.Designer.cs");
            }
#>

<#          // Generate tester class
	        if (generateTester)
	        {
#>              
<#@ include file="GenerateRepositoryTestPartial.ttinclude" #>
<# 
                dir = Path.Combine(path,TesterFolder);
                SaveOutputNotExists(dir, $"{table.Name}Tests.cs");
            }
#>

<#          // Generate tester class
	        if (generateDto)
	        {
#>              
<#@ include file="GenerateRepositoryDto.ttinclude" #>
<# 
                dir = Path.Combine(path, DtoFolder);
                SaveOutputNotExists(dir, $"{table.DtoName}.cs");
            }
#>

<# 
        }
    }
#>

<#      
    // Generate structure repository class
	if (generateStructureRepository && StructureClass != null)
	{
#>              
<#@ include file="GenerateStructure.ttinclude" #>
<# 
        dir = Path.Combine(path,StructureFolder);
        SaveOutput(dir, $"{StructureClass.ClassName}.Designer.cs");
#>

<#@ include file="GenerateStructurePartial.ttinclude" #>
<# 
        dir = Path.Combine(path,StructureFolder);
        SaveOutputNotExists(dir, $"{StructureClass.ClassName}.cs");
#>
<# } #>

<#      
    // Generate structure repository class
	if (generateStructureTester && StructureClass != null)
	{
#>              
<#@ include file="GenerateStructureTest.ttinclude" #>
<# 
        dir = Path.Combine(path,TesterFolder);
        SaveOutput(dir, $"{StructureClass.ClassName}Tests.Designer.cs");
#>

<#@ include file="GenerateStructureTestPartial.ttinclude" #>
<# 
        dir = Path.Combine(path,TesterFolder);
        SaveOutputNotExists(dir, $"{StructureClass.ClassName}Tests.cs");
#>
<# } #>

<#  // Generate StructureDto class
	if (generateStructureDto && StructureClass != null)
	{
#>              
<#@ include file="GenerateStructureDto.ttinclude" #>
<# 
        dir = Path.Combine(path, StructureDtoFolder);
        SaveOutputNotExists(dir, $"{StructureDtoName}.cs");
#>
<#@ include file="GenerateStructureDtoMapper.ttinclude" #>
<# 
        dir = Path.Combine(path, StructureDtoFolder);
        SaveOutputNotExists(dir, $"{StructureDtoName}MapperDefault.cs");
#>
<# } #>

<#      
    // Generate service tester class
	if (generateStructureDtoTester)
	{
#>              
<#@ include file="GenerateStructureDtoTest.ttinclude" #>
<# 
        dir = Path.Combine(path,TesterFolder);
        SaveOutputNotExists(dir, $"{StructureDtoName}Tests.cs");
#>
<# } #>


<#      
    // Generate structure repository class
	if (generateService && ServiceName != null)
	{
#>              
<#@ include file="GenerateService.ttinclude" #>
<# 
        dir = Path.Combine(path,ServiceFolder);
        SaveOutput(dir, $"{ServiceName}.Designer.cs");
#>

<#@ include file="GenerateServicePartial.ttinclude" #>
<# 
        dir = Path.Combine(path,ServiceFolder);
        SaveOutputNotExists(dir, $"{ServiceName}.cs");
#>

<#@ include file="GenerateServiceHelper.ttinclude" #>
<# 
        dir = Path.Combine(path,ServiceFolder);
        SaveOutputNotExists(dir, $"{ServiceHelperName}.cs");
#>

<#@ include file="GenerateServiceInterface.ttinclude" #>
<# 
        dir = Path.Combine(path,ServiceFolder);
        SaveOutputNotExists(dir, $"I{ServiceName}.cs");
#>
<#@ include file="GenerateServiceCalculator.ttinclude" #>
<# 
        dir = Path.Combine(path,ServiceFolder);
        SaveOutputNotExists(dir, $"{ServiceName}CalculatorDefault.cs");
#>
<#@ include file="GenerateServiceValidator.ttinclude" #>
<# 
        dir = Path.Combine(path,ServiceFolder);
        SaveOutputNotExists(dir, $"{ServiceName}ValidatorDefault.cs");
#>
<# } #>

<#      
    // Generate service tester class
	if (generateServiceTester && ServiceName != null)
	{
#>              
<#@ include file="GenerateServiceTest.ttinclude" #>
<# 
        dir = Path.Combine(path,ServiceTesterFolder);
        SaveOutput(dir, $"{ServiceName}Tests.Designer.cs");
#>

<#@ include file="GenerateServiceTestPartial.ttinclude" #>
<# 
        dir = Path.Combine(path,ServiceTesterFolder);
        SaveOutputNotExists(dir, $"{ServiceName}Tests.cs");
#>

<#@ include file="GenerateServiceHelperTest.ttinclude" #>
<# 
        dir = Path.Combine(path,ServiceTesterFolder);
        SaveOutputNotExists(dir, $"{ServiceHelperName}Tests.cs");
#>

<# } #>



<#+
    public void SaveOutput(string destinationFolder, string outputFileName)
    {
        // Write to destination folder
        //string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
        string outputFilePath = Path.Combine(destinationFolder, outputFileName);
        File.Delete(outputFilePath);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
 
        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }

    public void SaveOutputNotExists(string destinationFolder, string outputFileName)
    {
        // Write to destination folder
        //string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
        string outputFilePath = Path.Combine(destinationFolder, outputFileName);
        if (!File.Exists(outputFilePath)) 
            File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>