//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using CsvHelper;
using System.IO;

using Bogus;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;

namespace <#= NamespaceStructure #>
{
    /// <summary>
    /// Represents a <#= StructureDtoName #>MapperDefault Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class <#= StructureDtoName #>Extension
    {
        /// <summary>
        /// Merge <#= StructureDtoName #> header objects to one dynamic object
        /// </summary>
        /// <param name="dto"><#= StructureDtoName #> object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>Single dynamic object include all properties of Dto header objects</returns>
        public static IEnumerable<dynamic> MergeHeaderRecord(this <#= StructureDtoName #> dto, bool withHeaderText = false)
        {
            var result = new List<dynamic>();
            //TODO change to merge Dto children object
            //if (withHeaderText)
            //    result.Add(dto.SalesOrderHeader.MergeName(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            //result.Add(dto.SalesOrderHeader.Merge(dto.SalesOrderHeaderInfo, dto.SalesOrderHeaderAttributes));
            return result;
        }

        /// <summary>
        /// Merge SalesOrderDataDto detailt list to dynamic object list
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object to merge data</param>
        /// <param name="withHeaderText">Add header text line at first</param>
        /// <returns>list of dynamic object include all properties of detailt objects</returns>
        public static IEnumerable<dynamic> MergeDetailRecord(this <#= StructureDtoName #> dto, bool withHeaderText = false)
        {
            return null;
            //TODO change to merge Dto children object
            //if (!dto.HasSalesOrderItems) 
            //    return null;
            //
            //var result = new List<dynamic>();
            //var salesOrderItems = new SalesOrderItems() { SalesOrderItemsAttributes = new SalesOrderItemsAttributes()};
            //
            //if (withHeaderText)
            //    result.Add(salesOrderItems.MergeName(salesOrderItems.SalesOrderItemsAttributes));
            //
            //foreach (var item in dto.SalesOrderItems)
            //{
            //    result.Add(item.Merge(item.SalesOrderItemsAttributes));
            //}
            //return result;
        }


        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <param name="count">Generate multiple fake data</param>
        /// <returns>list for Fake data</returns>
        public static IList<<#= StructureDtoName #>> GetFakerData(this <#= StructureDtoName #> dto, int count)
        {
            var obj = new <#= StructureDtoName #>();
            var datas = new List<<#= StructureDtoName #>>();
            for (int i = 0; i < count; i++)
                datas.Add(obj.GetFakerData());
            return datas;
        }

        /// <summary>
        /// Generate fake data for SalesOrderDataDto object
        /// </summary>
        /// <param name="dto">SalesOrderDataDto object</param>
        /// <returns>single Fake data</returns>
        public static <#= StructureDtoName #> GetFakerData(this <#= StructureDtoName #> dto)
        {
            var data = new <#= StructureDtoName #>();
<# // call all children
            indent = 3;
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (child.Table.IsChildrenOfChildren) continue;
                if (child.OneToOne)
                {
                    WriteLine($"{new String('\t',indent)}data.{child.Table.Name} = new {child.Table.DtoName}().GetFaker().Generate();");
                }
                else
                {
                    WriteLine($"{new String('\t',indent)}data.{child.Table.Name} = new {child.Table.DtoName}().GetFaker().Generate(3);");
                }
            }
#>
<# // call all grand children
            foreach(var item in StructureClass.StructureTables)
            { 
                var child = item.Value;
                if (child == null) continue;
                if (!child.Table.HasOneToOneChildren || child.OneToOne) continue;

                foreach(var gradeChildTable in child.Table.oneToOneChildren)
                { 
                    WriteLine($"{new String('\t',indent)}foreach (var ln in data.{child.Table.Name})");
                    WriteLine($"{new String('\t',indent+1)}ln.{gradeChildTable.Name} = new {gradeChildTable.DtoName}().GetFaker().Generate();");
                }
            }
#>
            return data;
        }


<# // all children faker
        indent = 2;
        foreach(var item in StructureClass.StructureTables)
        { 
            var child = item.Value;
            if (child == null) continue;

            WriteLine($"{new String('\t',indent)}/// <summary>");
            WriteLine($"{new String('\t',indent)}/// Get faker object for {child.Table.DtoName}");
            WriteLine($"{new String('\t',indent)}/// </summary>");
            WriteLine($"{new String('\t',indent)}/// <param name=\"dto\">{child.Table.DtoName}</param>");
            WriteLine($"{new String('\t',indent)}/// <returns>Faker object use to generate data</returns>");
            WriteLine($"{new String('\t',indent)}public static Faker<{child.Table.DtoName}> GetFaker(this {child.Table.DtoName} dto)");
            WriteLine($"{new String('\t',indent)}{{");
            WriteLine($"{new String('\t',indent+1)}#region faker data rules");
            WriteLine($"{new String('\t',indent+1)}return new Faker<{child.Table.DtoName}>()");

            foreach(var col in child.Table.Columns)
            { 
                if (col.ignoreGenerate) continue;
                WriteLine($"{new String('\t',indent+2)}{col.GetFakeRuleDto()}");
            }
            WriteLine($"{new String('\t',indent+2)};");
            WriteLine($"{new String('\t',indent+1)}#endregion faker data rules");
            WriteLine($"{new String('\t',indent)}}}");
        }
#>

    }
}

