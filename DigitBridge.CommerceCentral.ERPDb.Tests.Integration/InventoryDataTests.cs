


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPDb.Tests.Integration
{
    public partial class InventoryDataTests
    {
        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;
        /// <summary>
        /// get specified count Inventorys
        /// </summary>
        /// <param name="dbFactory"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        public static Inventory[] GetInventories(IDataBaseFactory dbFactory, int count = 10)
        {
            var sql = $@" 
select  WarehouseCode,SKU,ProductUuid,InventoryUuid,WarehouseUuid 
from 
(
    SELECT  WarehouseCode,SKU,ProductUuid,InventoryUuid,WarehouseUuid
    ,ROW_NUMBER() over(partition by SKU order by rownum desc) as rid
    FROM [dbo].[Inventory]
    where MasterAccountNum = {MasterAccountNum} and ProfileNum = {ProfileNum}
) tmp 
where tmp.rid=1
";
            var inventories = dbFactory.Find<Inventory>(sql).ToArray();
            var success = inventories != null && inventories.Length >= count;
            Assert.True(success, "Inventory is not enough");

            var randomIndexs = GetRandomIndex(inventories.Length - 1, count);
            var result = new List<Inventory>();
            foreach (var index in randomIndexs)
            {
                result.Add(inventories[index]);
            }
            return result.ToArray();
        }

        private static List<int> GetRandomIndex(int max, int count = 10)
        {
            var result = new List<int>();
            while (result.Count < count)
            {
                var random = new Random().Next(0, max);
                while (!result.Contains(random))
                {
                    result.Add(random);
                }
            }
            return result;
        }

        /// <summary>
        /// get specified count Inventorys
        /// </summary>
        /// <param name="dbFactory"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        public static Inventory[] GetInventories(IDataBaseFactory dbFactory, int masterAccountNum, int profileNum)
        {
            var sql = $@" 
select WarehouseCode,SKU,ProductUuid,InventoryUuid,WarehouseUuid 
from 
(
    SELECT  WarehouseCode,SKU,ProductUuid,InventoryUuid,WarehouseUuid
    ,ROW_NUMBER() over(partition by SKU order by rownum desc) as rid
    FROM [dbo].[Inventory]
    where MasterAccountNum = {masterAccountNum} and ProfileNum = {profileNum}
) tmp 
where tmp.rid=1
";
            var inventories = dbFactory.Find<Inventory>(sql).ToArray();
            return inventories;
        }

    }
}



