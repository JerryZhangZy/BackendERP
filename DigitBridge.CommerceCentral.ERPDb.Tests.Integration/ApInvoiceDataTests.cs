

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;
using DigitBridge.CommerceCentral.ERPMdl;

namespace DigitBridge.CommerceCentral.ERPDb.Tests.Integration
{
    public partial class ApInvoiceDataTests
    {
        private static int _itemCount = 10;
        public static int ItemCount
        {
            get { return _itemCount; }
            set { _itemCount = value; }
        }


        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;
        public static async Task<ApInvoiceData> GetFakerApInvoiceDataAsync()
        {
            var data = GetFakerData();
            data.ApInvoiceHeader.MasterAccountNum = MasterAccountNum;
            data.ApInvoiceHeader.ProfileNum = ProfileNum;
            data.ApInvoiceHeader.ApInvoiceNum = NumberGenerate.Generate();
            return data;
        }

        public static async Task<ApInvoiceData> SaveFakerInvoiceAsync(IDataBaseFactory dbFactory, ApInvoiceData data = null)
        {
            var srv = new ApInvoiceService(dbFactory);
            srv.Add();

            var mapper = srv.DtoMapper;
            if (data == null)
                data = await GetFakerApInvoiceDataAsync();
            var dto = mapper.WriteDto(data, null);
            var success = srv.Add(dto);

            Assert.True(success, srv.Messages.ObjectToString());

            return srv.Data;
        }
        public static async Task<ApInvoiceData> GetApInvoiceFromDBAsync(IDataBaseFactory dbFactory, string apInvoiceUuid)
        {
            var sql = @"
SELECT TOP 1 rownum
FROM ApInvoiceHeader ins 
INNER JOIN (
    SELECT it.ApInvoiceUuid, COUNT(1) AS cnt 
    FROM ApInvoiceItems it
    GROUP BY it.ApInvoiceUuid
) itm ON (itm.ApInvoiceUuid = ins.ApInvoiceUuid)
WHERE itm.cnt > 0
{0}
order by ins.rownum desc
";
            if (apInvoiceUuid.IsZero())
                sql = string.Format(sql, string.Empty);
            else
                sql = string.Format(sql, $" And ins.ApInvoiceUuid='{apInvoiceUuid}'");

            var rownum = dbFactory.GetValue<InvoiceHeader, long>(sql);

            Assert.True(rownum > 0, "No Invoice in db");

            var srv = new ApInvoiceService(dbFactory);
            var success = await srv.GetDataAsync(rownum);
            Assert.True(success, srv.Messages.ObjectToString());

            return srv.Data;
        }

    }
}



