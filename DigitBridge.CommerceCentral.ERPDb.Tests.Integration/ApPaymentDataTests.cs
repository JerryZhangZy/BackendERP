


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;
using DigitBridge.CommerceCentral.ERPMdl;

namespace DigitBridge.CommerceCentral.ERPDb.Tests.Integration
{
    public partial class ApPaymentDataTests
    {

        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;
        public static async Task<ApTransactionData> GetFakerApPaymentDataAsync(IDataBaseFactory dbFactory)
        {
            var apInvoiceData = await ApInvoiceDataTests.GetFakerApInvoiceDataAsync();
            var data = GetFakerData();
            data.ApInvoiceTransaction.TransType = (int)TransTypeEnum.Payment;
            data.ApInvoiceTransaction.MasterAccountNum = MasterAccountNum;
            data.ApInvoiceTransaction.ProfileNum = ProfileNum;
            data.ApInvoiceTransaction.ApInvoiceNum = apInvoiceData.ApInvoiceHeader.ApInvoiceNum;
            data.ApInvoiceData = apInvoiceData;
            return data;
        }

        public static async Task<ApTransactionData> SaveFakerApPayment(IDataBaseFactory dbFactory, ApTransactionData data = null)
        {
            if (data == null)
                data = await GetFakerApPaymentDataAsync(dbFactory);

            data.ApInvoiceData = await ApInvoiceDataTests.SaveFakerInvoiceAsync(dbFactory, data.ApInvoiceData);

            var srv = new ApPaymentService(dbFactory);
            srv.Add();
            var mapper = srv.DtoMapper;
            var dto = mapper.WriteDto(data, null);

            var paymentPayload_Add = new ApPaymentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                ApTransaction = dto,
                //ApplyInvoices = await PrepareApplyInvoiceAsync(ApInvoiceDatas, ProcessingMode.Add)
            };

            var success = await srv.AddAsync(paymentPayload_Add);

            Assert.True(success, srv.Messages.ObjectToString());

            return srv.Data;
        }
    }
}



