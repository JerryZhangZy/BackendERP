

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPDb.Tests.Integration
{
    public partial class PurchaseOrderDataTests
    {
        List<long> itemsCounts = new List<long>();

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task AddLargeData_Test()
        {
            int vendorCount = 10;
            int poCountEachVendor = 10;
            int masterAccountNum = 10002;
            int profileNum = 10003;
            var inventories = InventoryDataTests.GetInventories(DataBaseFactory, masterAccountNum, profileNum);
            var vendors = await VendorTests.AddAsync(DataBaseFactory, masterAccountNum, profileNum, vendorCount);

            for (int v = 0; v < vendorCount; v++)
            {
                for (int i = 1; i <= poCountEachVendor; i++)
                {
                    try
                    {

                        int poItemCount = (v + 1) * i * 100;
                        var data = await GetFakerDataAsync(masterAccountNum, profileNum, poItemCount, inventories, vendors[v]);
                        if (data == null) break;

                        data.SetDataBaseFactory(DataBaseFactory);
                        DataBaseFactory.Begin();
                        var success = await data.SaveAsync();
                        DataBaseFactory.Commit();
                        //Assert.True(success, "Save po error");
                    }
                    catch (Exception e)
                    {
                    }

                }

            }
        }


        public async Task<PurchaseOrderData> GetFakerDataAsync(int masterAccountNum, int profileNum, int itemCount, Inventory[] inventories, Vendor vendor)
        {

            if (itemCount > inventories.Length)
                itemCount = inventories.Length;

            if (itemsCounts.Contains(itemCount)) return null;

            itemsCounts.Add(itemCount);

            var PurchaseOrderData = new PurchaseOrderData();
            PurchaseOrderData.PoHeader = PoHeaderTests.GetFakerData().Generate();
            PurchaseOrderData.PoHeader.MasterAccountNum = masterAccountNum;
            PurchaseOrderData.PoHeader.ProfileNum = profileNum;
            PurchaseOrderData.PoHeader.PoNum = $"{DateTime.Now.ToString("yyyyMMddHHMMss")}_PoWithItemCount_{itemCount}";
            PurchaseOrderData.PoHeader.VendorCode = vendor.VendorCode;
            PurchaseOrderData.PoHeader.VendorName = vendor.VendorName;
            PurchaseOrderData.PoHeader.VendorUuid = vendor.VendorUuid;

            PurchaseOrderData.PoHeaderInfo = PoHeaderInfoTests.GetFakerData().Generate();
            PurchaseOrderData.PoHeaderAttributes = PoHeaderAttributesTests.GetFakerData().Generate();
            PurchaseOrderData.PoItems = PoItemsTests.GetFakerData().Generate(itemCount);

            for (int i = 0; i < itemCount; i++)
            {
                var item = PurchaseOrderData.PoItems[i];
                item.PoItemsAttributes = PoItemsAttributesTests.GetFakerData().Generate();
                item.PoItemsRef = PoItemsRefTests.GetFakerData().Generate();
                var inventory = inventories[i];

                item.SKU = inventory.SKU;
                item.ProductUuid = inventory.ProductUuid;
                item.InventoryUuid = inventory.InventoryUuid;
                item.PriceRule = inventory.PriceRule;
                item.Price = new Random().NextDouble().ToDecimal();
                item.WarehouseCode = inventory.WarehouseCode;
                item.WarehouseUuid = inventory.WarehouseUuid;
            }

            return PurchaseOrderData;
        }
    }
}



