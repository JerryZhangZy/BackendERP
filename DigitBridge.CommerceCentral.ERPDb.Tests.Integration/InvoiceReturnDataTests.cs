


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;
using DigitBridge.CommerceCentral.ERPMdl;

namespace DigitBridge.CommerceCentral.ERPDb.Tests.Integration
{
    public partial class InvoiceReturnDataTests
    {

        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;
        public static async Task<InvoiceTransactionData> GetFakerInvoiceReturnDataAsync(IDataBaseFactory dbFactory)
        {
            var invoiceData = await InvoiceDataTests.GetFakerInvoiceDataAsync(dbFactory);
            var data = GetFakerData();
            data.InvoiceTransaction.TransType = (int)TransTypeEnum.Return;
            data.InvoiceTransaction.MasterAccountNum = MasterAccountNum;
            data.InvoiceTransaction.ProfileNum = ProfileNum;
            data.InvoiceTransaction.InvoiceNumber = invoiceData.InvoiceHeader.InvoiceNumber;
            for (int i = 0; i < data.InvoiceReturnItems.Count; i++)
            {
                var retrunItem = data.InvoiceReturnItems[i];
                var invoiceItem = invoiceData.InvoiceItems[i];
                retrunItem.ReturnQty = new Random().Next(1, invoiceItem.ShipQty.ToInt());
                retrunItem.SKU = invoiceItem.SKU;
                retrunItem.WarehouseCode = invoiceItem.WarehouseCode;
                retrunItem.InvoiceItemsUuid = invoiceItem.InvoiceItemsUuid;
            }
            data.InvoiceData = invoiceData;
            return data;
        }

        public static async Task<InvoiceTransactionData> SaveFakerInvoiceReturn(IDataBaseFactory dbFactory, InvoiceTransactionData data = null)
        {
            if (data == null)
                data = await GetFakerInvoiceReturnDataAsync(dbFactory);

            data.InvoiceData = await InvoiceDataTests.SaveFakerInvoice(dbFactory, data.InvoiceData);

            var srv = new InvoiceReturnService(dbFactory);
            srv.Add();
            var mapper = srv.DtoMapper;
            var dto = mapper.WriteDto(data, null);

            var paymentPayload_Add = new InvoiceReturnPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                InvoiceTransaction = dto,
                //ApplyInvoices = await PrepareApplyInvoiceAsync(invoiceDatas, ProcessingMode.Add)
            };

            var success = await srv.AddAsync(paymentPayload_Add);

            Assert.True(success, srv.Messages.ObjectToString());

            return srv.Data;
        }
    }
}



