              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPDb.Tests.Integration
{
    /// <summary>
    /// Represents a Tester for OrderHeaderMerchantExt.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public partial class OrderHeaderMerchantExtTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        public static Faker<OrderHeaderMerchantExt> GetFakerData()
        {
            #region faker data rules
            return new Faker<OrderHeaderMerchantExt>()
					.RuleFor(u => u.CentralOrderNum, f => default(long))
					.RuleFor(u => u.MasterAccountNum, f => f.Random.Int(1, 100))
					.RuleFor(u => u.ProfileNum, f => f.Random.Int(1, 100))
					.RuleFor(u => u.ChannelNum, f => f.Random.Int(1, 100))
					.RuleFor(u => u.ChannelAccountNum, f => f.Random.Int(1, 100))
					.RuleFor(u => u.PoType, f => f.Lorem.Sentence().TruncateTo(20))
					.RuleFor(u => u.HubOrderID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.MerchantID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.MerchantVendorID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.MerchantOrderDateUtc, f => f.Date.Past(0).Date)
					.RuleFor(u => u.PackingSlipMessage, f => f.Lorem.Sentence().TruncateTo(500))
					.RuleFor(u => u.VendorNotes, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.VendorWarehouseID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.VendorCommitmentID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.SalesDivision, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.MerchantPhone1, f => f.Phone.PhoneNumber())
					.RuleFor(u => u.MerchantPhone2, f => f.Phone.PhoneNumber())
					.RuleFor(u => u.MerchantPhone3, f => f.Phone.PhoneNumber())
					.RuleFor(u => u.MerchantCustomerID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.MerchantCustomerOrderID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.MerchantCustomerOrderDateUtc, f => f.Date.Past(0).Date)
					.RuleFor(u => u.MerchantCustomerPaymentMethod, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.CancelAfterDateUtc, f => f.Date.Past(0).Date)
					.RuleFor(u => u.RequiredShipDateUtc, f => f.Date.Past(0).Date)
					.RuleFor(u => u.PromoID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.PromoStartDateUtc, f => f.Date.Past(0).Date)
					.RuleFor(u => u.MerchandiseTypeCode, f => f.Lorem.Word())
					.RuleFor(u => u.AuthorizationForExpenseNumber, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.ShipToAccountNO, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.ShipToGender, f => f.Lorem.Sentence().TruncateTo(20))
					.RuleFor(u => u.ShipToReceipt, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.ShipToVcdID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.ShipToDEANumber, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.MerchantBillToAddressType, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.SoldToAddressType, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.SoldToAttention, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.SoldToCompanyname, f => f.Company.CompanyName())
					.RuleFor(u => u.SoldToName, f => f.Company.CompanyName())
					.RuleFor(u => u.SoldToFirstName, f => f.Company.CompanyName())
					.RuleFor(u => u.SoldToLastName, f => f.Company.CompanyName())
					.RuleFor(u => u.SoldToAddressLine1, f => f.Address.StreetAddress())
					.RuleFor(u => u.SoldToAddressLine2, f => f.Address.SecondaryAddress())
					.RuleFor(u => u.SoldToAddressLine3, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.SoldToCity, f => f.Address.City())
					.RuleFor(u => u.SoldToState, f => f.Address.State())
					.RuleFor(u => u.SoldToPostalCode, f => f.Address.ZipCode())
					.RuleFor(u => u.SoldToPostalCodeExt, f => f.Lorem.Word())
					.RuleFor(u => u.SoldToCountry, f => f.Address.Country())
					.RuleFor(u => u.SoldToEmail, f => f.Internet.Email())
					.RuleFor(u => u.SoldToDayPhone, f => f.Phone.PhoneNumber())
					.RuleFor(u => u.SoldToNightPhone, f => f.Phone.PhoneNumber())
					.RuleFor(u => u.SoldToTaxExemptNO, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.SoldToAccountNO, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.SoldToGender, f => f.Lorem.Sentence().TruncateTo(20))
					.RuleFor(u => u.CustomerGiftMessage, f => f.Lorem.Sentence().TruncateTo(200))
					.RuleFor(u => u.ReturnAddressee, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.ReturnAddressLine1, f => f.Address.StreetAddress())
					.RuleFor(u => u.ReturnAddressLine2, f => f.Address.SecondaryAddress())
					.RuleFor(u => u.ReturnAddrelssLine3, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.ReturnCity, f => f.Address.City())
					.RuleFor(u => u.ReturnState, f => f.Address.State())
					.RuleFor(u => u.ReturnPostalCode, f => f.Address.ZipCode())
					.RuleFor(u => u.ReturnPostalCodeExt, f => f.Lorem.Word())
					.RuleFor(u => u.ReturnCountry, f => f.Address.Country())
					.RuleFor(u => u.ReturnEmail, f => f.Internet.Email())
					.RuleFor(u => u.ReturnDayPhone, f => f.Phone.PhoneNumber())
					.RuleFor(u => u.ReturnNightPhone, f => f.Phone.PhoneNumber())
					.RuleFor(u => u.ReturnLocationID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.InvoiceToAddressType, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.InvoiceToAttention, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.InvoiceToCompany, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.InoviceToName, f => f.Company.CompanyName())
					.RuleFor(u => u.InvoiceToFirstName, f => f.Company.CompanyName())
					.RuleFor(u => u.InvoiceToLastName, f => f.Company.CompanyName())
					.RuleFor(u => u.InvoiceToAddressLine1, f => f.Address.StreetAddress())
					.RuleFor(u => u.InvoiceToAddressLine2, f => f.Address.SecondaryAddress())
					.RuleFor(u => u.InvoiceToAddressLine3, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.InvoiceToCity, f => f.Address.City())
					.RuleFor(u => u.InvoiceToState, f => f.Address.State())
					.RuleFor(u => u.InvoiceToPostalCode, f => f.Address.ZipCode())
					.RuleFor(u => u.InvoiceToPostalCodeExt, f => f.Lorem.Word())
					.RuleFor(u => u.InvoiceToCountry, f => f.Address.Country())
					.RuleFor(u => u.InvoiceToDayPhone, f => f.Phone.PhoneNumber())
					.RuleFor(u => u.InvoviceToNightPhone, f => f.Phone.PhoneNumber())
					.RuleFor(u => u.InvoiceToEmail, f => f.Internet.Email())
					.RuleFor(u => u.InvoiceToAccountNO, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.InvoiceToTaxExemptNO, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.InvoiceToGender, f => f.Lorem.Sentence().TruncateTo(20))
					.RuleFor(u => u.BuyingContract, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.CcParty, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.APVendor, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.RMEmail, f => f.Internet.Email())
					.RuleFor(u => u.MarketingInserts, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.BusinessRuleCode, f => f.Lorem.Word())
					.RuleFor(u => u.ReleaseNumber, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.MerchantBuyerName, f => f.Company.CompanyName())
					.RuleFor(u => u.SalesCurrency, f => f.Lorem.Sentence().TruncateTo(10))
					.RuleFor(u => u.FreightCollectAccount, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.FreightPaymentTerms, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.MerchantSalesAgent, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.PaymentMethodDescription, f => f.Commerce.ProductName())
					.RuleFor(u => u.OrderFulfillmentFee, f => f.Random.Decimal(1, 1000, 0))
					.RuleFor(u => u.PackingSlipTemplateIndicator, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.SalesTax, f => f.Random.Decimal(1, 1000, 0))
					.RuleFor(u => u.ResponsibilityRole, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.ExpectedProcessingPriority, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.PreassignedWaybillNumber, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.URL, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.ShipperID, f => f.Random.Guid().ToString())
					.RuleFor(u => u.FileIdentifier, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.ERPCustomerOrderNumber, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.CustomerOrderPOIndex, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.MultiSource, f => f.Lorem.Sentence().TruncateTo(3))
					.RuleFor(u => u.NetDaysDue, f => f.Random.Int(1, 100))
					.RuleFor(u => u.TotalOrderCost, f => f.Random.Decimal(1, 1000, 0))
					.RuleFor(u => u.UpdateDateUtc, f => f.Date.Past(0).Date)
					.RuleFor(u => u.EnterBy, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.UpdateBy, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.CentralOrderUuid, f => f.Random.Guid().ToString())
					.RuleFor(u => u.CentralOrderHeaderMerchantExtUuid, f => f.Random.Guid().ToString())
					;
            #endregion faker data rules
        }

        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public Faker<OrderHeaderMerchantExt> FakerData { get; set; }
        public IDataBaseFactory DataBaseFactory { get; set; }

        public OrderHeaderMerchantExtTests(TestFixture<StartupTest> fixture) 
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["dsn"]);
            FakerData = GetFakerData();
        }
        public void Dispose()
        {
        }

        //[Fact()]
        [Fact(Skip = SkipReason)]
        public void Register_Test()
        {
            var data = FakerData.Generate();
            data.Register();
            var poco = data.GetPocoData();

            Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void CopyFrom_Test()
        {
            var data = FakerData.Generate();
            var dataJson = data.ObjectToString();
            var newData = FakerData.Generate();
            var newDataJson = newData.ObjectToString();
            data?.CopyFrom(newData);
            var result = !data.Equals(newData);

			Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
        }

        #region sync methods

        [Fact()]
		//[Fact(Skip = SkipReason)]
		public void Add_Test()
		{
			var data = FakerData.Generate();
            data.SetDataBaseFactory(DataBaseFactory);
            DataBaseFactory.Begin();
			data.Add();
            DataBaseFactory.Commit();

            var dataGet = DataBaseFactory.GetFromCacheById<OrderHeaderMerchantExt>(data.UniqueId);
            var result = data.Equals(dataGet);

			Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
		}

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Put_Test()
        {
            var list = DataBaseFactory.Find<OrderHeaderMerchantExt>("SELECT TOP 1 * FROM OrderHeaderMerchantExt").ToList();

            DataBaseFactory.Begin();
            var data = list.FirstOrDefault();
            data.SetDataBaseFactory(DataBaseFactory);
            var newData = FakerData.Generate();
            data?.CopyFrom(newData);
            data.Put();
            DataBaseFactory.Commit();

            var dataGet = DataBaseFactory.GetFromCacheById<OrderHeaderMerchantExt>(data.UniqueId);
            var result = data.Equals(dataGet);

			Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Patch_Test()
        {
            var list = DataBaseFactory.Find<OrderHeaderMerchantExt>("SELECT TOP 1 * FROM OrderHeaderMerchantExt").ToList();

            DataBaseFactory.Begin();
            var data = list.FirstOrDefault();
            var dataOrig = new OrderHeaderMerchantExt();
            dataOrig?.CopyFrom(data);

            data.SetDataBaseFactory(DataBaseFactory);
            var newData = FakerData.Generate();
            data?.CopyFrom(newData);
            data.Patch(new[] { "PoType", "PackingSlipMessage" });
            DataBaseFactory.Commit();

            var dataGet = DataBaseFactory.GetFromCache<OrderHeaderMerchantExt>(data.RowNum);
            var result = dataGet.PoType != dataOrig.PoType &&
                            dataGet.PackingSlipMessage != dataOrig.PackingSlipMessage &&
                            dataGet.PoType == newData.PoType &&
                            dataGet.PackingSlipMessage == newData.PackingSlipMessage;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Save_Test()
        {
	        var dataNew = FakerData.Generate();
            dataNew.SetDataBaseFactory(DataBaseFactory);
            DataBaseFactory.Begin();
            dataNew.Save();
            DataBaseFactory.Commit();

            var dataUpdate = DataBaseFactory.GetById<OrderHeaderMerchantExt>(dataNew.UniqueId);
			var dataChanged = FakerData.Generate();
            dataUpdate?.CopyFrom(dataChanged, new[] {"CentralOrderUuid"});

            DataBaseFactory.Begin();
            dataUpdate.Save();
            DataBaseFactory.Commit();

            var dataGet = DataBaseFactory.GetFromCacheById<OrderHeaderMerchantExt>(dataUpdate.UniqueId);
            var result = dataUpdate.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Delete_Test()
        { 
            var list = DataBaseFactory.Find<OrderHeaderMerchantExt>("SELECT TOP 1 * FROM OrderHeaderMerchantExt").ToList();
            var data = list.FirstOrDefault();

            DataBaseFactory.Begin();
            data.SetDataBaseFactory(DataBaseFactory);
            data.Delete();
            DataBaseFactory.Commit();

            var result = DataBaseFactory.ExistUniqueId<OrderHeaderMerchantExt>(data.UniqueId);

            Assert.True(!result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Get_Test()
        {
            //var list = DataBaseFactory.Find<OrderHeaderMerchantExt>().ToList();
            //var listData = list.FirstOrDefault();
            //var data = DataBaseFactory.Get<OrderHeaderMerchantExt>(listData.RowNum);
            //var result = data.Equals(listData);

            var list = DataBaseFactory.Find<OrderHeaderMerchantExt>("SELECT TOP 1 * FROM OrderHeaderMerchantExt").ToList();
            var listData = list.FirstOrDefault(); 
            var result = listData!=null;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void GetById_Test()
        {
            var list = DataBaseFactory.Find<OrderHeaderMerchantExt>("SELECT TOP 1 * FROM OrderHeaderMerchantExt").ToList();
            var listData = list.FirstOrDefault();
            var data = DataBaseFactory.GetById<OrderHeaderMerchantExt>(listData.UniqueId);
            var result = data.Equals(listData);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void AddList_Test()
        {
            var list = FakerData.Generate(10);
            var HubOrderID = Guid.NewGuid().ToString();

            list.ForEach(x => x.HubOrderID = HubOrderID);
            list.SetDataBaseFactory<OrderHeaderMerchantExt>(DataBaseFactory)
                .Save<OrderHeaderMerchantExt>();

            var cnt = DataBaseFactory.Count<OrderHeaderMerchantExt>("WHERE HubOrderID = @0", HubOrderID);
            var result = cnt.Equals(list.Count());

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void SaveList_Test()
        {
            var list = FakerData.Generate(10);
            var HubOrderID = Guid.NewGuid().ToString();

            list.ForEach(x => x.HubOrderID = HubOrderID);
            list.SetDataBaseFactory<OrderHeaderMerchantExt>(DataBaseFactory)
                .Save<OrderHeaderMerchantExt>();

            var NewPackingSlipMessage = Guid.NewGuid().ToString();
            var listFind = DataBaseFactory.Find<OrderHeaderMerchantExt>("WHERE HubOrderID = @0 ORDER BY RowNum", HubOrderID).ToList();
            listFind.ToList().ForEach(x => x.PackingSlipMessage = NewPackingSlipMessage);
            listFind.Save<OrderHeaderMerchantExt>();

            list = DataBaseFactory.Find<OrderHeaderMerchantExt>("WHERE HubOrderID = @0 ORDER BY RowNum", HubOrderID).ToList();
            var result = list.Where(x => x.PackingSlipMessage == NewPackingSlipMessage).Count() == listFind.Count();

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void DeleteList_Test()
        {
            var list = FakerData.Generate(10);
            var HubOrderID = Guid.NewGuid().ToString();

            list.ForEach(x => x.HubOrderID = HubOrderID);
            list.SetDataBaseFactory<OrderHeaderMerchantExt>(DataBaseFactory)
                .Save();

            var listFind = DataBaseFactory.Find<OrderHeaderMerchantExt>("WHERE HubOrderID = @0 ORDER BY RowNum", HubOrderID).ToList();
            listFind.Delete();

            var cnt = DataBaseFactory.Count<OrderHeaderMerchantExt>("WHERE HubOrderID = @0", HubOrderID);
            var result = cnt == 0;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void GetFromCacheById_Test()
        {
            var list = DataBaseFactory.Find<OrderHeaderMerchantExt>("SELECT TOP 1 * FROM OrderHeaderMerchantExt").ToList();
            var data = list.FirstOrDefault();
            var data1 = DataBaseFactory.GetFromCacheById<OrderHeaderMerchantExt>(data.UniqueId);
            var data2 = DataBaseFactory.GetFromCacheById<OrderHeaderMerchantExt>(data.UniqueId);

            var result = data1 == data2;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        #endregion sync methods

        #region async methods

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task AddAsync_Test()
        {
            var data = FakerData.Generate();
            data.SetDataBaseFactory(DataBaseFactory);
            DataBaseFactory.Begin();
            await data.AddAsync();
            DataBaseFactory.Commit();

            var dataGet = await DataBaseFactory.GetFromCacheByIdAsync<OrderHeaderMerchantExt>(data.UniqueId);
            var result = data.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task PutAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<OrderHeaderMerchantExt>()).ToList();

            DataBaseFactory.Begin();
            var data = list.FirstOrDefault();
            data.SetDataBaseFactory(DataBaseFactory);
            var newData = FakerData.Generate();
            data?.CopyFrom(newData);
            await data.PutAsync();
            DataBaseFactory.Commit();

            var dataGet = await DataBaseFactory.GetFromCacheByIdAsync<OrderHeaderMerchantExt>(data.UniqueId);
            var result = data.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task PatchAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<OrderHeaderMerchantExt>()).ToList();

            DataBaseFactory.Begin();
            var data = list.FirstOrDefault();
            var dataOrig = new OrderHeaderMerchantExt();
            dataOrig?.CopyFrom(data);

            data.SetDataBaseFactory(DataBaseFactory);
            var newData = FakerData.Generate();
            data?.CopyFrom(newData);
            await data.PatchAsync(new[] { "PoType", "PackingSlipMessage" });
            DataBaseFactory.Commit();

            var dataGet = await DataBaseFactory.GetFromCacheAsync<OrderHeaderMerchantExt>(data.RowNum);
            var result = dataGet.PoType != dataOrig.PoType &&
                            dataGet.PackingSlipMessage != dataOrig.PackingSlipMessage &&
                            dataGet.PoType == newData.PoType &&
                            dataGet.PackingSlipMessage == newData.PackingSlipMessage;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task SaveAsync_Test()
        {
            var dataNew = FakerData.Generate();
            dataNew.SetDataBaseFactory(DataBaseFactory);
            DataBaseFactory.Begin();
            await dataNew.SaveAsync();
            DataBaseFactory.Commit();

            var dataUpdate = await DataBaseFactory.GetByIdAsync<OrderHeaderMerchantExt>(dataNew.UniqueId);
            var dataChanged = FakerData.Generate();
            dataUpdate?.CopyFrom(dataChanged, new[] { "CentralOrderUuid" });

            DataBaseFactory.Begin();
            await dataUpdate.SaveAsync();
            DataBaseFactory.Commit();

            var dataGet = await DataBaseFactory.GetFromCacheByIdAsync<OrderHeaderMerchantExt>(dataUpdate.UniqueId);
            var result = dataUpdate.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task DeleteAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<OrderHeaderMerchantExt>()).ToList();
            var data = list.FirstOrDefault();

            DataBaseFactory.Begin();
            data.SetDataBaseFactory(DataBaseFactory);
            await data.DeleteAsync();
            DataBaseFactory.Commit();

            var result = await DataBaseFactory.ExistUniqueIdAsync<OrderHeaderMerchantExt>(data.UniqueId);

            Assert.True(!result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<OrderHeaderMerchantExt>()).ToList();
            var listData = list.FirstOrDefault();
            var data = await DataBaseFactory.GetAsync<OrderHeaderMerchantExt>(listData.RowNum);
            var result = data.Equals(listData);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetByIdAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<OrderHeaderMerchantExt>()).ToList();
            var listData = list.FirstOrDefault();
            var data = await DataBaseFactory.GetByIdAsync<OrderHeaderMerchantExt>(listData.UniqueId);
            var result = data.Equals(listData);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task AddListAsync_Test()
        {
            var list = FakerData.Generate(10);
            var HubOrderID = Guid.NewGuid().ToString();

            list.ForEach(x => x.HubOrderID = HubOrderID);
            await list
                .SetDataBaseFactory<OrderHeaderMerchantExt>(DataBaseFactory)
                .SaveAsync<OrderHeaderMerchantExt>();

            var cnt = await DataBaseFactory.CountAsync<OrderHeaderMerchantExt>("WHERE HubOrderID = @0", HubOrderID);
            var result = cnt.Equals(list.Count());

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task SaveListAsync_Test()
        {
            var list = FakerData.Generate(10);
            var HubOrderID = Guid.NewGuid().ToString();

            list.ForEach(x => x.HubOrderID = HubOrderID);
            await list
                .SetDataBaseFactory<OrderHeaderMerchantExt>(DataBaseFactory)
                .SaveAsync<OrderHeaderMerchantExt>();

            var NewPackingSlipMessage = Guid.NewGuid().ToString();
            var listFind = (await DataBaseFactory.FindAsync<OrderHeaderMerchantExt>("WHERE HubOrderID = @0 ORDER BY RowNum", HubOrderID)).ToList();
            listFind.ToList().ForEach(x => x.PackingSlipMessage = NewPackingSlipMessage);
            await listFind.SaveAsync<OrderHeaderMerchantExt>();

            list = DataBaseFactory.Find<OrderHeaderMerchantExt>("WHERE HubOrderID = @0 ORDER BY RowNum", HubOrderID).ToList();
            var result = list.Where(x => x.PackingSlipMessage == NewPackingSlipMessage).Count() == listFind.Count();

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task DeleteListAsync_Test()
        {
            var list = FakerData.Generate(10);
            var HubOrderID = Guid.NewGuid().ToString();

            list.ForEach(x => x.HubOrderID = HubOrderID);
            await list
                .SetDataBaseFactory<OrderHeaderMerchantExt>(DataBaseFactory)
                .SaveAsync();

            var listFind = (await DataBaseFactory.FindAsync<OrderHeaderMerchantExt>("WHERE HubOrderID = @0 ORDER BY RowNum", HubOrderID)).ToList();
            await listFind.DeleteAsync();

            var cnt = await DataBaseFactory.CountAsync<OrderHeaderMerchantExt>("WHERE HubOrderID = @0", HubOrderID);
            var result = cnt == 0;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetFromCacheByIdAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<OrderHeaderMerchantExt>("SELECT TOP 1 * FROM OrderHeaderMerchantExt")).ToList();
            var data = list.FirstOrDefault();
            var data1 = await DataBaseFactory.GetFromCacheByIdAsync<OrderHeaderMerchantExt>(data.UniqueId);
            var data2 = await DataBaseFactory.GetFromCacheByIdAsync<OrderHeaderMerchantExt>(data.UniqueId);

            var result = data1 == data2;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        #endregion sync methods

    }
}


