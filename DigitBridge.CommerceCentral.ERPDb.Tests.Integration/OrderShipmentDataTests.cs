


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPDb.Tests.Integration
{
    public partial class OrderShipmentDataTests
    {
        private static int _itemCount = 10;
        public static int ItemCount
        {
            get { return _itemCount; }
            set { _itemCount = value; }
        }


        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;
        public static OrderShipmentData GetFakerData_SkuInDB(IDataBaseFactory dbFactory, Inventory[] inventories = null)
        {
            var data = GetFakerData();

            if (inventories == null)
                inventories = InventoryDataTests.GetInventories(dbFactory, data.OrderShipmentPackage.Count);

            data.OrderShipmentHeader.MasterAccountNum = MasterAccountNum;
            data.OrderShipmentHeader.ProfileNum = ProfileNum;

            foreach (var item in data.OrderShipmentShippedItem)
            {
                item.MasterAccountNum = MasterAccountNum;
                item.ProfileNum = ProfileNum;

            }
            foreach (var item in data.OrderShipmentCanceledItem)
            {
                item.MasterAccountNum = MasterAccountNum;
                item.ProfileNum = ProfileNum;

            }
            foreach (var item in data.OrderShipmentPackage)
            {
                item.MasterAccountNum = MasterAccountNum;
                item.ProfileNum = ProfileNum;
                //foreach (var subItem in item.OrderShipmentShippedItem)
                //{
                //    subItem.MasterAccountNum = MasterAccountNum;
                //    subItem.ProfileNum = ProfileNum; 
                //}
                for (int i = 0; i < item.OrderShipmentShippedItem.Count; i++)
                {
                    var subItem = item.OrderShipmentShippedItem[i];
                    subItem.MasterAccountNum = MasterAccountNum;
                    subItem.ProfileNum = ProfileNum;
                    var inventory = inventories[i % data.OrderShipmentShippedItem.Count];
                    subItem.SKU = inventory.SKU;
                }
            }

            return data;
        }


        public static OrderShipmentData GetOrderShipmentDataFromDB(int masterAccountNum, int profileNum, IDataBaseFactory dbFactory)
        {
            var orderShipmentUuid = dbFactory.GetValue<OrderShipmentHeader, string>($@"
SELECT TOP 1 ins.OrderShipmentUuid 
FROM OrderShipmentHeader ins 
INNER JOIN (
    SELECT it.OrderShipmentUuid, COUNT(1) AS cnt FROM OrderShipmentPackage it GROUP BY it.OrderShipmentUuid
) itm ON (itm.OrderShipmentUuid = ins.OrderShipmentUuid)
WHERE itm.cnt > 0 and masterAccountNum={masterAccountNum} and profileNum={profileNum}
");

            var data = new OrderShipmentData(dbFactory);
            var success = data.GetById(orderShipmentUuid);
            Assert.True(success, "Data not found.");
            return data;
        }


        public static OrderShipmentData GetFakerDataWithCountItem(int packageCount, int packageItemCount, int cancelledItemCount = 0)
        {
            var OrderShipmentData = new OrderShipmentData();
            OrderShipmentData.OrderShipmentHeader = OrderShipmentHeaderTests.GetFakerData().Generate();
            if (cancelledItemCount > 0)
                OrderShipmentData.OrderShipmentCanceledItem = OrderShipmentCanceledItemTests.GetFakerData().Generate(cancelledItemCount);
            OrderShipmentData.OrderShipmentPackage = OrderShipmentPackageTests.GetFakerData().Generate(packageCount);
            foreach (var ln in OrderShipmentData.OrderShipmentPackage)
                ln.OrderShipmentShippedItem = OrderShipmentShippedItemTests.GetFakerData().Generate(packageItemCount);
            return OrderShipmentData;
        }
    }
}



