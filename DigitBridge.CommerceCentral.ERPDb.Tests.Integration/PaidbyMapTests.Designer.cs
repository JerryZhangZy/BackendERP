              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPDb.Tests.Integration
{
    /// <summary>
    /// Represents a Tester for PaidbyMap.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public partial class PaidbyMapTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        public static Faker<PaidbyMap> GetFakerData()
        {
            #region faker data rules
            return new Faker<PaidbyMap>()
					.RuleFor(u => u.DatabaseNum, f => f.Random.Int(1, 100))
					.RuleFor(u => u.MasterAccountNum, f => f.Random.Int(1, 100))
					.RuleFor(u => u.ProfileNum, f => f.Random.Int(1, 100))
					.RuleFor(u => u.PaidbyMapUuid, f => f.Random.Guid().ToString())
					.RuleFor(u => u.ChannelNum, f => f.Random.Int(1, 100))
					.RuleFor(u => u.ChannelAccountNum, f => f.Random.Int(1, 100))
					.RuleFor(u => u.ChannelPaidBy, f => f.Random.AlphaNumeric(50))
					.RuleFor(u => u.PaidBy, f => f.Random.Int(1, 100))
					.RuleFor(u => u.BankAccountUuid, f => f.Random.Guid().ToString())
					.RuleFor(u => u.BankAccountCode, f => f.Lorem.Word())
					.RuleFor(u => u.Description, f => f.Commerce.ProductName())
					.RuleFor(u => u.AutoPaid, f => f.Random.Int(1, 100))
					.RuleFor(u => u.Fields, (f, u) => u.Fields.SetValues(f.Random.JObject()))
					.RuleFor(u => u.UpdateDateUtc, f => f.Date.Past(0).Date)
					.RuleFor(u => u.EnterBy, f => f.Lorem.Sentence().TruncateTo(100))
					.RuleFor(u => u.UpdateBy, f => f.Lorem.Sentence().TruncateTo(100))
					;
            #endregion faker data rules
        }

        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public Faker<PaidbyMap> FakerData { get; set; }
        public IDataBaseFactory DataBaseFactory { get; set; }

        public PaidbyMapTests(TestFixture<StartupTest> fixture) 
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["dsn"]);
            FakerData = GetFakerData();
        }
        public void Dispose()
        {
        }

        //[Fact()]
        [Fact(Skip = SkipReason)]
        public void Register_Test()
        {
            var data = FakerData.Generate();
            data.Register();
            var poco = data.GetPocoData();

            Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void CopyFrom_Test()
        {
            var data = FakerData.Generate();
            var dataJson = data.ObjectToString();
            var newData = FakerData.Generate();
            var newDataJson = newData.ObjectToString();
            data?.CopyFrom(newData);
            var result = !data.Equals(newData);

			Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
        }

        #region sync methods

        [Fact()]
		//[Fact(Skip = SkipReason)]
		public void Add_Test()
		{
			var data = FakerData.Generate();
            data.SetDataBaseFactory(DataBaseFactory);
            DataBaseFactory.Begin();
			data.Add();
            DataBaseFactory.Commit();

            var dataGet = DataBaseFactory.GetFromCacheById<PaidbyMap>(data.UniqueId);
            var result = data.Equals(dataGet);

			Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
		}

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Put_Test()
        {
            var list = DataBaseFactory.Find<PaidbyMap>("SELECT TOP 1 * FROM PaidbyMap").ToList();

            DataBaseFactory.Begin();
            var data = list.FirstOrDefault();
            data.SetDataBaseFactory(DataBaseFactory);
            var newData = FakerData.Generate();
            data?.CopyFrom(newData);
            data.Put();
            DataBaseFactory.Commit();

            var dataGet = DataBaseFactory.GetFromCacheById<PaidbyMap>(data.UniqueId);
            var result = data.Equals(dataGet);

			Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Patch_Test()
        {
            var list = DataBaseFactory.Find<PaidbyMap>("SELECT TOP 1 * FROM PaidbyMap").ToList();

            DataBaseFactory.Begin();
            var data = list.FirstOrDefault();
            var dataOrig = new PaidbyMap();
            dataOrig?.CopyFrom(data);

            data.SetDataBaseFactory(DataBaseFactory);
            var newData = FakerData.Generate();
            data?.CopyFrom(newData);
            data.Patch(new[] { "ChannelPaidBy", "BankAccountCode" });
            DataBaseFactory.Commit();

            var dataGet = DataBaseFactory.GetFromCache<PaidbyMap>(data.RowNum);
            var result = dataGet.ChannelPaidBy != dataOrig.ChannelPaidBy &&
                            dataGet.BankAccountCode != dataOrig.BankAccountCode &&
                            dataGet.ChannelPaidBy == newData.ChannelPaidBy &&
                            dataGet.BankAccountCode == newData.BankAccountCode;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Save_Test()
        {
	        var dataNew = FakerData.Generate();
            dataNew.SetDataBaseFactory(DataBaseFactory);
            DataBaseFactory.Begin();
            dataNew.Save();
            DataBaseFactory.Commit();

            var dataUpdate = DataBaseFactory.GetById<PaidbyMap>(dataNew.UniqueId);
			var dataChanged = FakerData.Generate();
            dataUpdate?.CopyFrom(dataChanged, new[] {"PaidbyMapUuid"});

            DataBaseFactory.Begin();
            dataUpdate.Save();
            DataBaseFactory.Commit();

            var dataGet = DataBaseFactory.GetFromCacheById<PaidbyMap>(dataUpdate.UniqueId);
            var result = dataUpdate.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Delete_Test()
        { 
            var list = DataBaseFactory.Find<PaidbyMap>("SELECT TOP 1 * FROM PaidbyMap").ToList();
            var data = list.FirstOrDefault();

            DataBaseFactory.Begin();
            data.SetDataBaseFactory(DataBaseFactory);
            data.Delete();
            DataBaseFactory.Commit();

            var result = DataBaseFactory.ExistUniqueId<PaidbyMap>(data.UniqueId);

            Assert.True(!result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Get_Test()
        {
            //var list = DataBaseFactory.Find<PaidbyMap>().ToList();
            //var listData = list.FirstOrDefault();
            //var data = DataBaseFactory.Get<PaidbyMap>(listData.RowNum);
            //var result = data.Equals(listData);

            var list = DataBaseFactory.Find<PaidbyMap>("SELECT TOP 1 * FROM PaidbyMap").ToList();
            var listData = list.FirstOrDefault(); 
            var result = listData!=null;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void GetById_Test()
        {
            var list = DataBaseFactory.Find<PaidbyMap>("SELECT TOP 1 * FROM PaidbyMap").ToList();
            var listData = list.FirstOrDefault();
            var data = DataBaseFactory.GetById<PaidbyMap>(listData.UniqueId);
            var result = data.Equals(listData);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void AddList_Test()
        {
            var list = FakerData.Generate(10);
            var BankAccountUuid = Guid.NewGuid().ToString();

            list.ForEach(x => x.BankAccountUuid = BankAccountUuid);
            list.SetDataBaseFactory<PaidbyMap>(DataBaseFactory)
                .Save<PaidbyMap>();

            var cnt = DataBaseFactory.Count<PaidbyMap>("WHERE BankAccountUuid = @0", BankAccountUuid);
            var result = cnt.Equals(list.Count());

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void SaveList_Test()
        {
            var list = FakerData.Generate(10);
            var BankAccountUuid = Guid.NewGuid().ToString();

            list.ForEach(x => x.BankAccountUuid = BankAccountUuid);
            list.SetDataBaseFactory<PaidbyMap>(DataBaseFactory)
                .Save<PaidbyMap>();

            var NewBankAccountCode = Guid.NewGuid().ToString();
            var listFind = DataBaseFactory.Find<PaidbyMap>("WHERE BankAccountUuid = @0 ORDER BY RowNum", BankAccountUuid).ToList();
            listFind.ToList().ForEach(x => x.BankAccountCode = NewBankAccountCode);
            listFind.Save<PaidbyMap>();

            list = DataBaseFactory.Find<PaidbyMap>("WHERE BankAccountUuid = @0 ORDER BY RowNum", BankAccountUuid).ToList();
            var result = list.Where(x => x.BankAccountCode == NewBankAccountCode).Count() == listFind.Count();

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void DeleteList_Test()
        {
            var list = FakerData.Generate(10);
            var BankAccountUuid = Guid.NewGuid().ToString();

            list.ForEach(x => x.BankAccountUuid = BankAccountUuid);
            list.SetDataBaseFactory<PaidbyMap>(DataBaseFactory)
                .Save();

            var listFind = DataBaseFactory.Find<PaidbyMap>("WHERE BankAccountUuid = @0 ORDER BY RowNum", BankAccountUuid).ToList();
            listFind.Delete();

            var cnt = DataBaseFactory.Count<PaidbyMap>("WHERE BankAccountUuid = @0", BankAccountUuid);
            var result = cnt == 0;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void GetFromCacheById_Test()
        {
            var list = DataBaseFactory.Find<PaidbyMap>("SELECT TOP 1 * FROM PaidbyMap").ToList();
            var data = list.FirstOrDefault();
            var data1 = DataBaseFactory.GetFromCacheById<PaidbyMap>(data.UniqueId);
            var data2 = DataBaseFactory.GetFromCacheById<PaidbyMap>(data.UniqueId);

            var result = data1 == data2;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        #endregion sync methods

        #region async methods

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task AddAsync_Test()
        {
            var data = FakerData.Generate();
            data.SetDataBaseFactory(DataBaseFactory);
            DataBaseFactory.Begin();
            await data.AddAsync();
            DataBaseFactory.Commit();

            var dataGet = await DataBaseFactory.GetFromCacheByIdAsync<PaidbyMap>(data.UniqueId);
            var result = data.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task PutAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<PaidbyMap>()).ToList();

            DataBaseFactory.Begin();
            var data = list.FirstOrDefault();
            data.SetDataBaseFactory(DataBaseFactory);
            var newData = FakerData.Generate();
            data?.CopyFrom(newData);
            await data.PutAsync();
            DataBaseFactory.Commit();

            var dataGet = await DataBaseFactory.GetFromCacheByIdAsync<PaidbyMap>(data.UniqueId);
            var result = data.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task PatchAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<PaidbyMap>()).ToList();

            DataBaseFactory.Begin();
            var data = list.FirstOrDefault();
            var dataOrig = new PaidbyMap();
            dataOrig?.CopyFrom(data);

            data.SetDataBaseFactory(DataBaseFactory);
            var newData = FakerData.Generate();
            data?.CopyFrom(newData);
            await data.PatchAsync(new[] { "ChannelPaidBy", "BankAccountCode" });
            DataBaseFactory.Commit();

            var dataGet = await DataBaseFactory.GetFromCacheAsync<PaidbyMap>(data.RowNum);
            var result = dataGet.ChannelPaidBy != dataOrig.ChannelPaidBy &&
                            dataGet.BankAccountCode != dataOrig.BankAccountCode &&
                            dataGet.ChannelPaidBy == newData.ChannelPaidBy &&
                            dataGet.BankAccountCode == newData.BankAccountCode;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task SaveAsync_Test()
        {
            var dataNew = FakerData.Generate();
            dataNew.SetDataBaseFactory(DataBaseFactory);
            DataBaseFactory.Begin();
            await dataNew.SaveAsync();
            DataBaseFactory.Commit();

            var dataUpdate = await DataBaseFactory.GetByIdAsync<PaidbyMap>(dataNew.UniqueId);
            var dataChanged = FakerData.Generate();
            dataUpdate?.CopyFrom(dataChanged, new[] { "PaidbyMapUuid" });

            DataBaseFactory.Begin();
            await dataUpdate.SaveAsync();
            DataBaseFactory.Commit();

            var dataGet = await DataBaseFactory.GetFromCacheByIdAsync<PaidbyMap>(dataUpdate.UniqueId);
            var result = dataUpdate.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task DeleteAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<PaidbyMap>()).ToList();
            var data = list.FirstOrDefault();

            DataBaseFactory.Begin();
            data.SetDataBaseFactory(DataBaseFactory);
            await data.DeleteAsync();
            DataBaseFactory.Commit();

            var result = await DataBaseFactory.ExistUniqueIdAsync<PaidbyMap>(data.UniqueId);

            Assert.True(!result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<PaidbyMap>()).ToList();
            var listData = list.FirstOrDefault();
            var data = await DataBaseFactory.GetAsync<PaidbyMap>(listData.RowNum);
            var result = data.Equals(listData);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetByIdAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<PaidbyMap>()).ToList();
            var listData = list.FirstOrDefault();
            var data = await DataBaseFactory.GetByIdAsync<PaidbyMap>(listData.UniqueId);
            var result = data.Equals(listData);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task AddListAsync_Test()
        {
            var list = FakerData.Generate(10);
            var BankAccountUuid = Guid.NewGuid().ToString();

            list.ForEach(x => x.BankAccountUuid = BankAccountUuid);
            await list
                .SetDataBaseFactory<PaidbyMap>(DataBaseFactory)
                .SaveAsync<PaidbyMap>();

            var cnt = await DataBaseFactory.CountAsync<PaidbyMap>("WHERE BankAccountUuid = @0", BankAccountUuid);
            var result = cnt.Equals(list.Count());

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task SaveListAsync_Test()
        {
            var list = FakerData.Generate(10);
            var BankAccountUuid = Guid.NewGuid().ToString();

            list.ForEach(x => x.BankAccountUuid = BankAccountUuid);
            await list
                .SetDataBaseFactory<PaidbyMap>(DataBaseFactory)
                .SaveAsync<PaidbyMap>();

            var NewBankAccountCode = Guid.NewGuid().ToString();
            var listFind = (await DataBaseFactory.FindAsync<PaidbyMap>("WHERE BankAccountUuid = @0 ORDER BY RowNum", BankAccountUuid)).ToList();
            listFind.ToList().ForEach(x => x.BankAccountCode = NewBankAccountCode);
            await listFind.SaveAsync<PaidbyMap>();

            list = DataBaseFactory.Find<PaidbyMap>("WHERE BankAccountUuid = @0 ORDER BY RowNum", BankAccountUuid).ToList();
            var result = list.Where(x => x.BankAccountCode == NewBankAccountCode).Count() == listFind.Count();

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task DeleteListAsync_Test()
        {
            var list = FakerData.Generate(10);
            var BankAccountUuid = Guid.NewGuid().ToString();

            list.ForEach(x => x.BankAccountUuid = BankAccountUuid);
            await list
                .SetDataBaseFactory<PaidbyMap>(DataBaseFactory)
                .SaveAsync();

            var listFind = (await DataBaseFactory.FindAsync<PaidbyMap>("WHERE BankAccountUuid = @0 ORDER BY RowNum", BankAccountUuid)).ToList();
            await listFind.DeleteAsync();

            var cnt = await DataBaseFactory.CountAsync<PaidbyMap>("WHERE BankAccountUuid = @0", BankAccountUuid);
            var result = cnt == 0;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetFromCacheByIdAsync_Test()
        {
            var list = (await DataBaseFactory.FindAsync<PaidbyMap>("SELECT TOP 1 * FROM PaidbyMap")).ToList();
            var data = list.FirstOrDefault();
            var data1 = await DataBaseFactory.GetFromCacheByIdAsync<PaidbyMap>(data.UniqueId);
            var data2 = await DataBaseFactory.GetFromCacheByIdAsync<PaidbyMap>(data.UniqueId);

            var result = data1 == data2;

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        #endregion sync methods

    }
}


