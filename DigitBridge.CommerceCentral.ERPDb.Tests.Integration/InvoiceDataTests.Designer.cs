
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPDb.Tests.Integration
{
    /// <summary>
    /// Represents a Tester for InvoiceData.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public partial class InvoiceDataTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected InvoiceData GetFakerData()
        {
			var InvoiceData = new InvoiceData(DataBaseFactory); 
			InvoiceData.InvoiceHeader = InvoiceHeaderTests.GetFakerData().Generate(); 
			InvoiceData.InvoiceHeaderInfo = InvoiceHeaderInfoTests.GetFakerData().Generate(); 
			InvoiceData.InvoiceHeaderAttributes = InvoiceHeaderAttributesTests.GetFakerData().Generate(); 
			InvoiceData.InvoiceItems = InvoiceItemsTests.GetFakerData().Generate(10); 
			foreach (var ln in InvoiceData.InvoiceItems) 
				ln.InvoiceItemsAttributes = InvoiceItemsAttributesTests.GetFakerData().Generate(); 
			return InvoiceData; 
        }

        protected List<InvoiceData> GetFakerData(int count)
        {
			var InvoiceDatas = new List<InvoiceData>(); 
			for (int i = 0; i < count; i++) 
				InvoiceDatas.Add(GetFakerData()); 
			return InvoiceDatas; 
        }

        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory DataBaseFactory { get; set; }

        public InvoiceDataTests(TestFixture<StartupTest> fixture) 
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["dsn"]);
        }
        public void Dispose()
        {
        }

        #region sync methods

        [Fact()]
		//[Fact(Skip = SkipReason)]
		public void Save_Test()
		{
			var data = GetFakerData();
            data.SetDataBaseFactory(DataBaseFactory);
			data.Save();

            var dataGet = new InvoiceData(DataBaseFactory);
            dataGet.GetById(data.UniqueId);
            var result = data.Equals(dataGet);

			Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
		}

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Get_Test()
        {
            var id = DataBaseFactory.GetValue<InvoiceHeader, string>(@"
SELECT TOP 1 ins.InvoiceId 
FROM InvoiceHeader ins 
INNER JOIN (
    SELECT it.InvoiceId, COUNT(1) AS cnt FROM InvoiceItems it GROUP BY it.InvoiceId
) itm ON (itm.InvoiceId = ins.InvoiceId)
WHERE itm.cnt > 1
");
            var data = new InvoiceData(DataBaseFactory);
            data.GetById(id);

            var dataUpdate = GetFakerData();
            data.CopyFrom(dataUpdate);
            data.Save();

            var dataGet = new InvoiceData(DataBaseFactory);
            dataGet.GetById(id);
            var result = data.Equals(dataGet);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        #endregion sync methods

    }
}


