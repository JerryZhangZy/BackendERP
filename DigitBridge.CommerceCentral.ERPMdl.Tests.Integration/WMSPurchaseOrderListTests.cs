


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class WMSPurchaseOrderListTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory dataBaseFactory { get; set; }

        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;

        public WMSPurchaseOrderListTests(TestFixture<StartupTest> fixture)
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            try
            {
                var Seq = 0;
                dataBaseFactory = DataBaseFactory.CreateDefault(Configuration["dsn"].ToString());
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        public void Dispose()
        {
        }

        #region sync methods

        #endregion sync methods

        #region async methods

        /// <summary>
        /// only check the query work.
        /// </summary>
        /// <returns></returns>
        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetPurchaseOrderListAsync_Simple_Test()
        {
            var qry = new WmsPurchaseOrderQuery();
            var srv = new WmsPurchaseOrderList(dataBaseFactory, qry);

            var payload = new PurchaseOrderPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                IsQueryTotalCount = true,
                LoadAll = true
            }; 

            using (var b = new Benchmark("GetPurchaseOrderListAsync_Test"))
            {
                await srv.GetPurchaseOrderListAsync(payload);
            }

            Assert.True(payload.Success, payload.Messages.ObjectToString());
        }
         
        #endregion async methods

         
    }
}


