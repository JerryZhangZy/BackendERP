    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class InitNumbersServiceTests
    {

        [Fact()]
		//[Fact(Skip = SkipReason)]
		public async Task AddDtoAsync_Test()
		{
            var srv = new InitNumbersService(DataBaseFactory);
            srv.Add();

            var mapper = srv.DtoMapper;
            var data = GetFakerData();
            var dto = mapper.WriteDto(data, null); 

            await srv.AddAsync(dto);

            var id = dto.InitNumbers.InitNumbersUuid;

            var srvGet = new InitNumbersService(DataBaseFactory);
            srvGet.Edit();
            await srvGet.GetDataByIdAsync(id);
            var result = srv.Data.Equals(srvGet.Data);

			Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
		}

        [Fact()]
		//[Fact(Skip = SkipReason)]
		public async Task UpdateDtoAsync_Test()
		{
            var payload = new InitNumbersPayload()
            {
                DatabaseNum = 1,
                MasterAccountNum = 10001,
                ProfileNum = 10001,
            };

            DataBaseFactory.DatabaseNum = 1;
            var srv = new InitNumbersService(DataBaseFactory);
            var defaultList = srv.GetDefaultInitNumbers(payload.DatabaseNum, payload.MasterAccountNum, payload.ProfileNum);
            await srv.GetAllInitNumbersAsync(payload);
            foreach (var dto in payload.InitNumbers)
            {
                var obj = defaultList.FirstOrDefault(x => x.Type.EqualsIgnoreSpace(dto.InitNumbers.Type));
                if (obj == null) continue;
                dto.InitNumbers.Number = obj.Number;
                dto.InitNumbers.MaxNumber = obj.MaxNumber + 1;
                dto.InitNumbers.EndNumber = obj.EndNumber;
            }

            try
            {
                using (var b = new Benchmark("GetAllInitNumbersAsync_Test"))
                {
                    await srv.UpdateAsync(payload);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }
		}


        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetAllInitNumbersAsync_Test()
        {
            var payload = new InitNumbersPayload()
            {
                DatabaseNum = 1,
                MasterAccountNum = 10001,
                ProfileNum = 10001,
            };
            DataBaseFactory.DatabaseNum = 1;
            var srv = new InitNumbersService(DataBaseFactory);
            try
            {
                using (var b = new Benchmark("GetAllInitNumbersAsync_Test"))
                {
                    await srv.GetAllInitNumbersAsync(payload);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }
        }

        
    }
}



