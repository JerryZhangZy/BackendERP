


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class InventoryServiceTests
    {

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void AddDto_Test()
        {
            var srv = new InventoryService(DataBaseFactory);
            srv.Add();

            var mapper = srv.DtoMapper;
            var data = GetFakerData();
            var dto = mapper.WriteDto(data, null);
            var id = data.UniqueId;

            srv.Add(dto);

            var srvGet = new InventoryService(DataBaseFactory);
            //srvGet.Edit();
            srvGet.GetDataById(id);
            var result = srv.Data.Equals(srvGet.Data);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void UpdateDto_Test()
        {
            SaveData_Test();

            var id = DataBaseFactory.GetValue<ProductBasic, string>(@"
SELECT TOP 1 ins.ProductUuid 
FROM ProductBasic ins 
INNER JOIN (
    SELECT it.ProductUuid, COUNT(1) AS cnt FROM Inventory it GROUP BY it.ProductUuid
) itm ON (itm.ProductUuid = ins.ProductUuid)
WHERE itm.cnt > 0
");


            var srv = new InventoryService(DataBaseFactory);
            srv.Edit(id);
            var rowNum = srv.Data.ProductBasic.RowNum;

            var mapper = srv.DtoMapper;
            var data = GetFakerData();
            var dto = mapper.WriteDto(data, null);
            dto.ProductBasic.RowNum = rowNum;
            dto.ProductBasic.ProductUuid = id;

            srv.Clear();
            srv.Update(dto);

            var srvGet = new InventoryService(DataBaseFactory);
            srvGet.Edit();
            srvGet.GetDataById(id);
            var result = srv.Data.Equals(srvGet.Data);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task AddDtoAsync_Test()
        {
            var srv = new InventoryService(DataBaseFactory);
            srv.Add();

            var mapper = srv.DtoMapper;
            var data = GetFakerData();
            var dto = mapper.WriteDto(data, null);
            var id = data.UniqueId;

            await srv.AddAsync(dto);

            var srvGet = new InventoryService(DataBaseFactory);
            srvGet.Edit();
            await srvGet.GetDataByIdAsync(id);
            var result = srv.Data.Equals(srvGet.Data);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task UpdateDtoAsync_Test()
        {
            await SaveDataAsync_Test();

            var id = await DataBaseFactory.GetValueAsync<ProductBasic, string>(@"
SELECT TOP 1 ins.ProductUuid 
FROM ProductBasic ins 
INNER JOIN (
    SELECT it.ProductUuid, COUNT(1) AS cnt FROM Inventory it GROUP BY it.ProductUuid
) itm ON (itm.ProductUuid = ins.ProductUuid)
WHERE itm.cnt > 0
");


            var srv = new InventoryService(DataBaseFactory);
            await srv.EditAsync(id);
            var rowNum = srv.Data.ProductBasic.RowNum;

            var mapper = srv.DtoMapper;
            var data = GetFakerData();
            var dto = mapper.WriteDto(data, null);
            dto.ProductBasic.RowNum = rowNum;
            dto.ProductBasic.ProductUuid = id;

            srv.Clear();
            await srv.UpdateAsync(dto);

            var srvGet = new InventoryService(DataBaseFactory);
            //srvGet.Edit();
            await srvGet.GetDataByIdAsync(id);
            var result = srv.Data.Equals(srvGet.Data);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        public void RandomRepeatReadInventory_Test()
        {
            var idlist = DataBaseFactory.Db.Query<string>("select top 100 ProductUuid from ProductBasic order by newid();").ToList();
            var dataList = new List<InventoryData>();
            var service = new InventoryService(DataBaseFactory);
            using (var b = new Benchmark("RandomRepeatReadInventory_Test"))
            {
                for (var i = 0; i < 1000; i++)
                {
                    foreach (var uuid in idlist)
                    {
                        if (service.GetDataById(uuid))
                            dataList.Add(service.Data);
                    }
                }
            }
            Assert.True(dataList.Count > 1000, "");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetInventoryBySkuArrayAsync_Test()
        {
            var payload = new InventoryPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                DatabaseNum = 1,
                Skus = new List<string>()
                {
                    "101409S-BK-2XL-STD",
                    "11054493-INDIGO-M-STD",
                    "FA16423KT-FLORAL-M-STD"
                }
            };

            var srv = new InventoryService(DataBaseFactory);
            using (var b = new Benchmark("GetInventoryBySkuArrayAsync_Test"))
            {
                await srv.GetInventoryBySkuArrayAsync(payload);
            }
            var data = srv.ToDto();

            Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
        }


        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task AddNewProductAsync_Test()
        {
            var payload = new ProductBasic()
            {
                MasterAccountNum = 1011,
                ProfileNum = 1011,
                DatabaseNum = 1,
                SKU = "AUTO_ADDED_NEW_SKU_003",
                UPC = "876520000124",
                ProductTitle = "New SKU 003 added automatically. ",
            };

            var srv = new InventoryService(DataBaseFactory);
            try
            {
                using (var b = new Benchmark("AddNewProductAsync_Test"))
                {
                    await srv.AddNewProductAsync(payload);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task AddInventoryForExistProductAsync_Test()
        {
            var productUuid = "eb85e6a5-dd32-46bd-b982-b2a181353d15";

            var srv = new InventoryService(DataBaseFactory);
            await srv.EditAsync(productUuid);
            var data = srv.Data;
            srv.DetachData(null);

            try
            {
                using (var b = new Benchmark("AddNewProductAsync_Test"))
                {
                    await srv.AddInventoryForExistProductAsync(data);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task FindNotExistSkuWarehouseAsync_Test()
        {
            var lst = new List<InventoryFindClass>()
            {
                new InventoryFindClass()
                {
                    SKU = "AUTO_ADDED_NEW_SKU_002",
                    WarehouseCode = "W001",
                },
                new InventoryFindClass()
                {
                    SKU = "AUTO_ADDED_NEW_SKU_002",
                    WarehouseCode = "W002",
                },
                new InventoryFindClass()
                {
                    SKU = "AUTO_ADDED_NEW_SKU_002",
                    WarehouseCode = "W003",
                },
            };

            var srv = new InventoryService(DataBaseFactory);
            IList<InventoryFindClass> result = null;
            try
            {
                using (var b = new Benchmark("FindNotExistSkuWarehouseAsync_Test"))
                {
                    result = await srv.FindNotExistSkuWarehouseAsync(lst, 1011, 1011);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }
        }


        //[Fact()]
        //public void RandomRepeatReadInventoryWithCache_Test()
        //{
        //    var idlist = DataBaseFactory.Db.Query<string>("select ProductUuid from ProductBasic order by newid();").ToList();
        //    var dataList = new List<InventoryData>();
        //    var service = new InventoryService(DataBaseFactory);
        //    using (var b = new Benchmark("RandomRepeatReadInventoryWithCache_Test"))
        //    {
        //        for(var i = 0; i < 1000; i++)
        //        {
        //            foreach(var uuid in idlist)
        //            {
        //                var dt = service.GetCacheById(uuid);
        //                if(dt!=null)
        //                    dataList.Add(service.Data);
        //            }
        //        }
        //    }
        //        Assert.True(dataList.Count>1000, "");
        //}

        //[Fact()]
        //public void RandomRepeatReadInventoryWithRowNumCache_Test()
        //{
        //    var idlist = DataBaseFactory.Db.Query<long>("select CentralProductNum from ProductBasic order by newid();").ToList();
        //    var dataList = new List<InventoryData>();
        //    var service = new InventoryService(DataBaseFactory);
        //    using (var b = new Benchmark("RandomRepeatReadInventoryWithRowNumCache_Test"))
        //    {
        //        for(var i = 0; i < 1000; i++)
        //        {
        //            foreach(var uuid in idlist)
        //            {
        //                var dt = service.GetCacheByRowNum(uuid);
        //                if(dt!=null)
        //                    dataList.Add(service.Data);
        //            }
        //        }
        //    }
        //        Assert.True(dataList.Count>1000, "");
        //}

        #region Update inventory so open qty


        [Fact()]
        public async Task UpdateOpenSoQtyByOrderShipmentUuidAsync_Test()
        {
            var service = new InventoryService(DataBaseFactory);

            var salesOrderData = SalesOrderDataTests.GetSalesOrderFromDB(DataBaseFactory);
            var shipmentData = OrderShipmentDataTests.GetOrderShipmentDataFromDB(DataBaseFactory);
            var inventoryData = InventoryDataTests.GetInventories(DataBaseFactory, salesOrderData.SalesOrderItems.Count);


            await MakeRealtionForInventoryAndSalesOrder(salesOrderData, inventoryData);
            await MakeRealtionForShipmentAndSalesOrder(salesOrderData, shipmentData);

            await service.UpdateOpenSoQtyByOrderShipmentUuidAsync(shipmentData.OrderShipmentHeader.OrderShipmentUuid);

        }

        protected async Task MakeRealtionForInventoryAndSalesOrder(SalesOrderData salesOrderData, Inventory[] inventoryData)
        {
            int index = 0;
            foreach (var inventory in inventoryData)
            {
                if (index >= salesOrderData.SalesOrderItems.Count) continue;
                var saleOrderItem = salesOrderData.SalesOrderItems[index];

                saleOrderItem.SKU = inventory.SKU;
                saleOrderItem.InventoryUuid = inventory.InventoryUuid;
                saleOrderItem.WarehouseCode = inventory.WarehouseCode;
                index++;
            }


            var service = new SalesOrderService(DataBaseFactory);
            service.Edit();
            service.AttachData(salesOrderData);
            var success = await service.SaveDataAsync();
            Assert.True(success, service.Messages.ObjectToString());
        }

        protected async Task MakeRealtionForShipmentAndSalesOrder(SalesOrderData salesOrderData, OrderShipmentData shipmentData)
        {
            int index = 0;
            foreach (var shipPackage in shipmentData.OrderShipmentPackage)
            {
                foreach (var shippedItem in shipPackage.OrderShipmentShippedItem)
                {
                    if (index >= salesOrderData.SalesOrderItems.Count) continue;
                    shippedItem.SalesOrderItemsUuid = salesOrderData.SalesOrderItems[index].SalesOrderItemsUuid;
                    index++;
                }
            }
            shipmentData.OrderShipmentHeader.SalesOrderUuid = salesOrderData.SalesOrderHeader.SalesOrderUuid;

            var service = new OrderShipmentService(DataBaseFactory);
            service.Edit();
            service.AttachData(shipmentData);
            var success = await service.SaveDataAsync();
            Assert.True(success, service.Messages.ObjectToString());
        }
        #endregion

    }
}



