
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class InvoiceTransactionServiceTests 
    {
        [Fact()]
		//[Fact(Skip = SkipReason)]
		public async Task LoadInvoiceByNumber_Test()
		{
            var masterAccountNum = 10001;
            var profileNum = 10001;
            var invoiceNumber = "aqaaec3me2s9qnekr2w7kldxa0y137f8it27iyvqk51xoc8cxc";
            var invoiceUuid = "4aafd3be-18d2-5437-76a3-e2e0f407553a";

            var srv = new InvoiceTransactionService(DataBaseFactory);
            srv.List();
            try
            {
                var result = await srv.LoadInvoiceAsync(invoiceNumber, profileNum, masterAccountNum);

                Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }
		}

        [Fact()]
		//[Fact(Skip = SkipReason)]
		public async Task LoadInvoiceByUuidAsync_Test()
		{
            var masterAccountNum = 10001;
            var profileNum = 10001;
            var invoiceNumber = "aqaaec3me2s9qnekr2w7kldxa0y137f8it27iyvqk51xoc8cxc";
            var invoiceUuid = "4aafd3be-18d2-5437-76a3-e2e0f407553a";

            var srv = new InvoiceTransactionService(DataBaseFactory);
            srv.List();

            var result = await srv.LoadInvoiceAsync(invoiceUuid);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task LoadReturnedQtyAsync_Test()
        {
            var masterAccountNum = 10001;
            var profileNum = 10001;
            var invoiceNumber = "aqaaec3me2s9qnekr2w7kldxa0y137f8it27iyvqk51xoc8cxc";
            var invoiceUuid = "4aafd3be-18d2-5437-76a3-e2e0f407553a";

            var srv = new InvoiceTransactionService(DataBaseFactory);
            srv.List();

            try
            {
                using (var b = new Benchmark("LoadReturnedQtyAsync_Test"))
                {
                    var result = await srv.LoadInvoiceAsync(invoiceNumber, profileNum, masterAccountNum);
                    result = await srv.LoadReturnedQtyAsync(srv.Data.InvoiceData);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }

        }

    }
}



