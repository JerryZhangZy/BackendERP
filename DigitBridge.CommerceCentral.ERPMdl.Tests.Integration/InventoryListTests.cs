
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class InventoryListTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory dataBaseFactory { get; set; }

        public InventoryListTests(TestFixture<StartupTest> fixture) 
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            try
            {
                var Seq = 0;
                dataBaseFactory = DataBaseFactory.CreateDefault(Configuration["dsn"].ToString());
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        public void Dispose()
        {
        }


        private JObject GetFilters(InventoryData data)
        {
            return new JObject()
            {
                { "productUuid",data.ProductBasic.ProductUuid },
                { "sku",data.ProductBasic.SKU },
                { "brand",data.ProductBasic.Brand },
                { "manufacturer",data.ProductBasic.Manufacturer},
                { "productTitle",data.ProductBasic.ProductTitle },
                { "uPC",data.ProductBasic.UPC},

                { "classCode",data.ProductExt.ClassCode },
                { "subClassCode",data.ProductExt.SubClassCode },
                { "departmentCode",data.ProductExt.DepartmentCode },
                { "divisionCode",data.ProductExt.DivisionCode },
                { "oEMCode",data.ProductExt.OEMCode },
                { "alternateCode",data.ProductExt.AlternateCode },
                { "remark",data.ProductExt.Remark},
                { "model",data.ProductExt.Model },
                { "categoryCode",data.ProductExt.CategoryCode },
                { "groupCode",data.ProductExt.GroupCode },
                { "subGroupCode",data.ProductExt.SubGroupCode },

                { "inventoryUuid",data.Inventory[0].InventoryUuid },
                { "styleCode",data.Inventory[0].StyleCode },
                { "colorPatternCode",data.Inventory[0].ColorPatternCode },
                { "sizeCode",data.Inventory[0].SizeCode },
                { "widthCode",data.Inventory[0].WidthCode },
                { "lengthCode",data.Inventory[0].LengthCode },
                { "warehouseCode",data.Inventory[0].WarehouseCode },
                { "lotNum",data.Inventory[0].LotNum },
                { "lpnNum",data.Inventory[0].LpnNum },
            };
        }

        #region sync methods

        #endregion sync methods

        #region async methods

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetInventoryListAsync_Test()
        {
            var payload = new InventoryPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Top = 50,
            };

            var listService = new InventoryList(dataBaseFactory);

            try
            {
                using (var b = new Benchmark("GetInventoryListAsync_Test"))
                {
                    await listService.GetProductListAsync(payload);
                }

                //make sure query is correct.
                Assert.True(payload.Success, listService.Messages.ObjectToString());
            }
            catch (Exception ex)
            {
                //Cannot open server 'bobotestsql' requested by the login. Client with IP address '174.81.9.150' is not allowed to access the server.
                //To enable access, use the Windows Azure Management Portal or run sp_set_firewall_rule on the master database to create a firewall rule
                //for this IP address or address range.  It may take up to five minutes for this change to take effect.
                throw;
            }
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetRowNumListAsync_Test()
        {
            var payload = new InventoryPayload();
            payload.MasterAccountNum = 10001;
            payload.ProfileNum = 10001;
            payload.LoadAll = true;
            payload.Filter = new JObject()
            {
            };

            var qry = new InventoryQuery();
            var srv = new InventoryList(dataBaseFactory, qry);
            qry.SetSecurityParameter(10001, 10001);

            IList<long> result;
            StringBuilder sb = new StringBuilder();
            try
            {
                using (var b = new Benchmark("GetInventoryDatasAsync_Test"))
                {
                    result = await srv.GetRowNumListAsync(payload);
                }
            }
            catch (Exception ex)
            {
                //Cannot open server 'bobotestsql' requested by the login. Client with IP address '174.81.9.150' is not allowed to access the server.
                //To enable access, use the Windows Azure Management Portal or run sp_set_firewall_rule on the master database to create a firewall rule
                //for this IP address or address range.  It may take up to five minutes for this change to take effect.
                throw;
            }

            var json = result.ObjectToString();

            Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
        }


        #endregion async methods


    }
}


