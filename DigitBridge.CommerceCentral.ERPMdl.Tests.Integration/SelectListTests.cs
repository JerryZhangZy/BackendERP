
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class SelectList : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory dataBaseFactory { get; set; }

        public SelectList(TestFixture<StartupTest> fixture) 
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            try
            {
                var Seq = 0;
                dataBaseFactory = DataBaseFactory.CreateDefault(Configuration["dsn"].ToString());
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        public void Dispose()
        {
        }


        #region async methods
        #region invoice
        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_CustomerCode_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_CustomerCode",
                Term = "cus",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_CustomerCode_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_InvoiceNumber_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_InvoiceNumber",
                Term = "2021101",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_InvoiceNumber_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_QboDocNumber_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_QboDocNumber",
                Term = "10",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_QboDocNumber_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_OrderNumber_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_OrderNumber",
                Term = "Sales",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_OrderNumber_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_CustomerName_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_CustomerName",
                Term = "fi",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_CustomerName_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_Terms_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_Terms",
                Term = "mou",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_Terms_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_ShippingCarrier_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_ShippingCarrier",
                Term = "mk",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_ShippingCarrier_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_ShippingClass_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_ShippingClass",
                Term = "yqpqs",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_ShippingClass_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_CentralOrderNum_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_CentralOrderNum",
                Term = "0",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_CentralOrderNum_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_ChannelOrderID_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_ChannelOrderID",
                Term = "8b",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_ChannelOrderID_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_WarehouseCode_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_WarehouseCode",
                Term = "nes",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_WarehouseCode_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_RefNum_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_RefNum",
                Term = "mol",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_RefNum_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task invoice_CustomerPoNum_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "invoice_CustomerPoNum",
                Term = "duc",
                Top = 20,
            };
            using (var b = new Benchmark("invoice_CustomerPoNum_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }
        #endregion invoice

        #region so
        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_OrderNumber_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_OrderNumber",
                Term = "Sales",
                Top = 20,
            };
            using (var b = new Benchmark("so_OrderNumber_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_CustomerCode_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_CustomerCode",
                Term = "al",
                Top = 20,
            };
            using (var b = new Benchmark("so_CustomerCode_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_CustomerName_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_CustomerName",
                Term = "ja",
                Top = 20,
            };
            using (var b = new Benchmark("so_CustomerName_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_Terms_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_Terms",
                Term = "msw",
                Top = 20,
            };
            using (var b = new Benchmark("so_Terms_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_ShippingCarrier_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_ShippingCarrier",
                Term = "hzr",
                Top = 20,
            };
            using (var b = new Benchmark("so_ShippingCarrier_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_ShippingClass_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_ShippingClass",
                Term = "x2",
                Top = 20,
            };
            using (var b = new Benchmark("so_ShippingClass_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_CentralOrderNum_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_CentralOrderNum",
                Term = "0",
                Top = 20,
            };
            using (var b = new Benchmark("so_CentralOrderNum_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_ChannelOrderID_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_ChannelOrderID",
                Term = "73",
                Top = 20,
            };
            using (var b = new Benchmark("so_ChannelOrderID_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_WarehouseCode_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_WarehouseCode",
                Term = "ware",
                Top = 20,
            };
            using (var b = new Benchmark("so_WarehouseCode_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_RefNum_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_RefNum",
                Term = "at",
                Top = 20,
            };
            using (var b = new Benchmark("so_RefNum_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task so_CustomerPoNum_Test()
        {
            var payload = new SelectListPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = false,
                Name = "so_CustomerPoNum",
                Term = "nam",
                Top = 20,
            };
            using (var b = new Benchmark("so_CustomerPoNum_Test"))
            {
                var factory = new SelectListFactory(dataBaseFactory);
                var result = await factory.GetSelectListAsync(payload);
            }
            Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
            Assert.NotEmpty(payload.Data.ToString());
        }
        #endregion so

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task inventory_Test()
        {
            var data = new Dictionary<string, string>();
            data["inventory_alternateCode"] = "do";
            data["inventory_oemCode"] = "m";
            data["inventory_catalogPage"] = "m8";
            data["inventory_productYear"] = "v";
            data["inventory_categoryCode"] = "n";
            data["inventory_remark"] = "l";
            data["inventory_classCode"] = "b";
            data["inventory_departmentCode"] = "n";
            data["inventory_sku"] = "product";
            data["inventory_divisionCode"] = "a";
            data["inventory_styleCode"] = "p";
            data["inventory_groupCode"] = "e";
            data["inventory_subClassCode"] = "e";
            data["inventory_subGroupCode"] = "i";
            data["inventory_model"] = "3";
            data["inventory_sizeCode"] = "quia";
            data["inventory_colorPatternCode"] = "yellow";
            data["inventory_sizeType"] = "9";
            data["inventory_lengthCode"] = "d";
            data["inventory_lotNum"] = "re";
            data["inventory_warehouseCode"] = "pr";
            data["inventory_lpnNum"] = "au";
            data["inventory_widthCode"] = "al";
            foreach(var pair in data)
            {
                var payload = new SelectListPayload()
                {
                    MasterAccountNum = 10001,
                    ProfileNum = 10001,
                    LoadAll = false,
                    Name = pair.Key,
                    Term = pair.Value,
                    Top = 20,
                };
                using (var b = new Benchmark(pair.Key+"_Test"))
                {
                    var factory = new SelectListFactory(dataBaseFactory);
                    var result = await factory.GetSelectListAsync(payload);
                }
                Assert.True(payload.Success, "This is a generated tester, please report any tester bug to team leader.");
                Assert.True(payload.Data.Length > 0, pair.Key + " not empty");
            }
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task SystemCodes_Test()
        {
            foreach(var name in SystemCodeNames.GetList())
            {
                var payload = new SelectListPayload()
                {
                    MasterAccountNum = 10001,
                    ProfileNum = 10001,
                    LoadAll = false,
                    Name = "system_"+name,
                    Term = "",
                    Top = 20,
                };
                bool result;
                using (var b = new Benchmark(payload.Name + "_Test"))
                {
                    var factory = new SelectListFactory(dataBaseFactory);
                    result = await factory.GetSelectListAsync(payload);
                }
                if (result)
                {
                    Assert.True(payload.Success, payload.Name + " success");
                    Assert.True(payload.Data.Length > 0, payload.Name + " not empty");
                }
            }
        }
        #endregion async methods
    }
}



