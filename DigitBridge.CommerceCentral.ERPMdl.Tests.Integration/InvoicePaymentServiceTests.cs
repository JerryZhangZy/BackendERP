


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class InvoicePaymentServiceTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory DataBaseFactory { get; set; }
        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;

        public InvoicePaymentServiceTests(TestFixture<StartupTest> fixture)
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["dsn"]);
        }
        public void Dispose()
        {
        }


        #region sync methods

        #endregion sync methods

        #region async methods
        [Fact()]
        public async Task AddPaymentsAsync_Test()
        {
            //get 10 invociedatas saved in db.
            var invoiceDatas = await GenerateInvoiceList();

            var paymentPayload = new InvoicePaymentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                InvoiceTransaction = GetFakerPaymentDto(),
                ApplyInvoices = await PrepareApplyInvoiceAsync(invoiceDatas, ProcessingMode.Add)
            };

            var paymentService = new InvoicePaymentService(DataBaseFactory);
            var success = await paymentService.AddAsync(paymentPayload);
            Assert.True(success, paymentService.Messages.ObjectToString());
        }

        [Fact()]
        public async Task UpdatePaymentsAsync_Test()
        {
            //get 10 invociedatas saved in db.
            var invoiceDatas = await GenerateInvoiceList();

            var paymentPayload_Add = new InvoicePaymentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                InvoiceTransaction = GetFakerPaymentDto(),
                ApplyInvoices = await PrepareApplyInvoiceAsync(invoiceDatas, ProcessingMode.Add)
            };

            var paymentService = new InvoicePaymentService(DataBaseFactory);
            var success = await paymentService.AddAsync(paymentPayload_Add);
            Assert.True(success, "Add payments error:" + paymentService.Messages.ObjectToString());


            var paymentPayload_Update = new InvoicePaymentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                InvoiceTransaction = GetFakerPaymentDto(),
                ApplyInvoices = await PrepareApplyInvoiceAsync(invoiceDatas, ProcessingMode.Edit)
            };

            success = await paymentService.UpdateAsync(paymentPayload_Update);
            Assert.True(success, "Update payments error:" + paymentService.Messages.ObjectToString());
        }


        [Fact()]
        public async Task AddPaymentAndPayInvoiceForPrepaymentAsync_Test()
        {
            var miscInvoiceData = MiscInvoiceDataTests.SaveFakerMiscInvoice(DataBaseFactory);
            var invoiceData = await InvoiceDataTests.SaveFakerInvoiceAsync(DataBaseFactory);
            var prepaymentAmount = new Random().Next();
            var service = new InvoicePaymentService(DataBaseFactory);

            var success = await service.AddAsync(invoiceData.UniqueId, prepaymentAmount, miscInvoiceData.UniqueId);

            Assert.True(success, "AddMiscPayment error:" + service.Messages.ObjectToString());
        }

        [Fact()]
        public async Task LoadInvoiceList_Test()
        {
            var payload = new InvoiceNewPaymentPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001
            };
            var customerCode = "5ac6d8df-7405-41fd-83df-ae2a23e6247d";

            var service = new InvoicePaymentService(DataBaseFactory);
            try
            {
                using (var b = new Benchmark("GetInvoiceItemsReturnedQtyAsync_Test"))
                {
                    //var success = await service.LoadInvoiceListAsync(payload, customerCode);
                }

                Assert.True(true, "AddMiscPayment error:" + service.Messages.ObjectToString());
            }
            catch (Exception e)
            {

                throw;
            }
        }

        #endregion async methods

        #region invoice data prepare   

        protected async Task<List<InvoiceData>> GenerateInvoiceList(int count = 10)
        {
            var invoiceDataList = new List<InvoiceData>();
            for (int i = 0; i < count; i++)
            {
                var invoiceData = await InvoiceDataTests.SaveFakerInvoiceAsync(DataBaseFactory);
                invoiceDataList.Add(invoiceData);
            }
            return invoiceDataList;
        }
        #endregion

        #region invoice payment data prepare

        protected InvoiceTransactionDataDto GetFakerPaymentDto(string invoiceNumber = null)
        {
            var data = InvoiceTransactionDataTests.GetFakerData();
            //data.InvoiceTransaction.MasterAccountNum = MasterAccountNum;
            //data.InvoiceTransaction.ProfileNum = ProfileNum;
            data.InvoiceTransaction.InvoiceNumber = invoiceNumber;
            var mapper = new InvoiceTransactionDataDtoMapperDefault();
            return mapper.WriteDto(data, null);
        }
        protected async Task<IList<ApplyInvoice>> PrepareApplyInvoiceAsync(IList<InvoiceData> invoiceDatas, ProcessingMode processingMode)
        {
            var applyInvoices = new List<ApplyInvoice>();
            foreach (var invoiceData in invoiceDatas)
            {
                var transUuid = processingMode == ProcessingMode.Edit ? await GetLatestPaymentRowNum(invoiceData.InvoiceHeader.InvoiceNumber) : 0;
                var applyInvoice = new ApplyInvoice()
                {
                    InvoiceNumber = invoiceData.InvoiceHeader.InvoiceNumber,
                    InvoiceUuid = invoiceData.InvoiceHeader.InvoiceUuid,
                    PaidAmount = new Random().Next(1, 100),
                    TransRowNum = transUuid,
                };
                applyInvoices.Add(applyInvoice);
            }
            return applyInvoices;
        }

        protected async Task<long> GetLatestPaymentRowNum(string invoiceNumber)
        {
            var paymentService = new InvoicePaymentService(DataBaseFactory);
            var queryPayload = new InvoiceNewPaymentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
            };
            await paymentService.GetPaymentsAsync(queryPayload, invoiceNumber);

            Assert.True(queryPayload.Success, "Get payments by invoiceNumber error:" + paymentService.Messages.ObjectToString());

            Assert.True(queryPayload.ApplyInvoices.Count > 0, $"no payment trans in db for invoice {invoiceNumber}");

            return queryPayload.ApplyInvoices.OrderByDescending(i => i.TransRowNum).FirstOrDefault().TransRowNum.ToLong();
        }
        #endregion


        [Fact]
        public async Task LoadInvoiceListAsync_Test()
        {
            var payload = new InvoiceNewPaymentPayload() 
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = true,
            };
            var customerCode = "cumque";

            var service = new InvoicePaymentService(DataBaseFactory);
            bool result = true;
            List<string> salesOrderNums = new List<string>();

            try
            {
                using (var b = new Benchmark("LoadInvoiceListAsync_Test"))
                {
                    result = await service.LoadInvoiceListAsync(payload, customerCode);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }


        }

        [Fact]
        public async Task AddInvoicePaymentsAsync_Test()
        {
            var payload = new InvoiceNewPaymentPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = true,
            };
            var customerCode = "cumque";

            var service = new InvoicePaymentService(DataBaseFactory);
            await service.NewPaymentByCustomerCode(payload, customerCode);

            payload.InvoiceTransaction.PaymentUuid = "a725584c-582c-49ae-81e6-8a1434b08a18";
            payload.InvoiceTransaction.PaymentNumber = 1;
            payload.InvoiceTransaction.PaidBy = (int)PaidByAr.Check;
            payload.InvoiceTransaction.BankAccountCode = "BOA";
            payload.InvoiceTransaction.CheckNum = "202134-585739390";
            payload.InvoiceTransaction.AuthCode = "AUTH2345";
            payload.InvoiceTransaction.TotalAmount = 1200;
            payload.InvoiceTransaction.CustomerCode = "cumque";

            payload.ApplyInvoices = new List<ApplyInvoice>();
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[0], 200));
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[1], 0));
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[2], 500));
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[3], 400));
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[4], 100));

            bool result = true;
            List<string> salesOrderNums = new List<string>();

            try
            {
                using (var b = new Benchmark("UpdateInvoicePaymentsAsync_Test"))
                {
                    result = await service.UpdateInvoicePaymentsAsync(payload);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }


        }

        [Fact]
        public async Task UpdateInvoicePaymentsAsync_Test()
        {
            var payload = new InvoiceNewPaymentPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = true,
            };
            var paymentNumber = 1;

            var service = new InvoicePaymentService(DataBaseFactory);
            var payments = await service.GetByPaymentNumberAsync(payload, paymentNumber);

            payload.InvoiceTransaction.CheckNum = "202134-585739999";
            payload.InvoiceTransaction.AuthCode = "AUTH2345";
            payload.InvoiceTransaction.TotalAmount = 1612.59M;

            payload.ApplyInvoices = new List<ApplyInvoice>();
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[0], 200));
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[1], 0));
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[2], 500));
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[3], 400));
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[4], 100));

            var obj = payload.InvoiceList.FindByInvoiceUuid("8ef5829e-a045-4eaf-91f3-ebf84d0e60f5");
            if (obj != null)
                payload.ApplyInvoices.Add(CreateApplyInvoice(obj, (decimal)412.59));

            bool result = true;
            try
            {
                using (var b = new Benchmark("UpdateInvoicePaymentsAsync_Test"))
                {
                    result = await service.UpdateInvoicePaymentsAsync(payload);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }


        }

        protected ApplyInvoice CreateApplyInvoice(InvoiceListForPayment ins, decimal amt)
        {
            return new ApplyInvoice()
            {
                InvoiceUuid = ins.invoiceUuid,
                InvoiceNumber = ins.invoiceNumber,
                TransRowNum = ins.TransRowNum,
                TransUuid = ins.TransUuid,
                TransNum = ins.TransNum,
                Description = ins.Description,
                Notes = ins.Notes,
                InvoiceDate = ins.invoiceDate,
                DueDate = ins.dueDate,
                QuickbookDocNum = ins.qboDocNumber,
                InvoiceTotalAmount = ins.totalAmount,
                InvoicePaidAmount = ins.paidAmount,
                InvoiceBalance = ins.balance,
                PaidAmount = amt,
            };
        }

        [Fact]
        public async Task AddInvoiceCreditPaymentsAsync_Test()
        {
            var payload = new InvoiceNewPaymentPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = true,
            };
            var customerCode = "cumque";

            var service = new InvoicePaymentService(DataBaseFactory);
            await service.NewPaymentByCustomerCode(payload, customerCode);

            payload.InvoiceTransaction.PaymentUuid = "";
            payload.InvoiceTransaction.PaymentNumber = 0;
            payload.InvoiceTransaction.PaidBy = (int)PaidByAr.PrePayment;
            //payload.InvoiceTransaction.PaidBy = (int)PaidByAr.CreditMemo;
            payload.InvoiceTransaction.BankAccountCode = "BOA";
            payload.InvoiceTransaction.CheckNum = "2021112004033257762";
            payload.InvoiceTransaction.AuthCode = "f0530be1-bde3-47ca-8a65-9e30e307b32b";
            //payload.InvoiceTransaction.CheckNum = "2021091400034807678";
            //payload.InvoiceTransaction.AuthCode = "cfb3e181-7c20-4829-b83b-e44ec000c8ed";
            payload.InvoiceTransaction.TotalAmount = 110;
            payload.InvoiceTransaction.CustomerCode = "cumque";

            payload.ApplyInvoices = new List<ApplyInvoice>();
            payload.ApplyInvoices.Add(CreateApplyInvoice(payload.InvoiceList[0], 110));

            bool result = true;
            List<string> salesOrderNums = new List<string>();

            try
            {
                using (var b = new Benchmark("UpdateInvoicePaymentsAsync_Test"))
                {
                    result = await service.UpdateInvoicePaymentsAsync(payload);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }


        }


        [Fact]
        public async Task GetByPaymentNumberAsync_Test()
        {
            var payload = new InvoiceNewPaymentPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                LoadAll = true,
            };
            var paymentNumber = 1;

            var service = new InvoicePaymentService(DataBaseFactory);
            bool result = true;
            try
            {
                using (var b = new Benchmark("GetByPaymentNumberAsync_Test"))
                {
                    result = await service.GetByPaymentNumberAsync(payload, paymentNumber); 
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }


        }

    }
}


