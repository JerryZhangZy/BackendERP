


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class InvoicePaymentServiceTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory DataBaseFactory { get; set; }
        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;

        public InvoicePaymentServiceTests(TestFixture<StartupTest> fixture)
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["dsn"]);
        }
        public void Dispose()
        {
        }


        #region sync methods

        #endregion sync methods

        #region async methods
        [Fact()]
        public async Task AddPaymentsAsync_Test()
        {
            //get 10 invociedatas saved in db.
            var invoiceDatas = await GenerateInvoiceList();

            var paymentPayload = new InvoicePaymentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                InvoiceTransaction = GetFakerPaymentDto(),
                ApplyInvoices = PrepareApplyInvoice(invoiceDatas)
            };

            var paymentService = new InvoicePaymentService(DataBaseFactory);
            var success = await paymentService.AddAsync(paymentPayload);
            Assert.True(success, paymentService.Messages.ObjectToString());

            foreach (var invoiceData in invoiceDatas)
            {
                var queryPayload = new InvoicePaymentPayload()
                {
                    MasterAccountNum = MasterAccountNum,
                    ProfileNum = ProfileNum,
                };
                await paymentService.GetPaymentWithInvoiceHeaderAsync(queryPayload, invoiceData.InvoiceHeader.InvoiceNumber);
                Assert.True(queryPayload.Success, paymentService.Messages.ObjectToString());

                Assert.True(queryPayload.InvoiceTransactions.Count > 0, $"no payment trans in db for invoice {invoiceData.InvoiceHeader.InvoiceNumber}");
            }
        }
        #endregion async methods

        #region invoice data prepare  

        protected async Task<InvoiceData> SaveInvoice()
        {
            var srv = new InvoiceService(DataBaseFactory);
            srv.Add();

            var mapper = srv.DtoMapper;
            var data = await InvoiceDataTests.GetFakerInvoiceDataAsync(DataBaseFactory);
            var dto = mapper.WriteDto(data, null);
            var success = srv.Add(dto);

            Assert.True(success, srv.Messages.ObjectToString());

            return srv.Data;
        }

        protected async Task<List<InvoiceData>> GenerateInvoiceList(int count = 10)
        {
            var invoiceDataList = new List<InvoiceData>();
            for (int i = 0; i < count; i++)
            {
                var invoiceData = await SaveInvoice();
                invoiceDataList.Add(invoiceData);
            }
            return invoiceDataList;
        }
        #endregion

        #region invoice payment data prepare

        protected InvoiceTransactionDataDto GetFakerPaymentDto(string invoiceNumber = null)
        {
            var data = InvoiceTransactionDataTests.GetFakerData();
            //data.InvoiceTransaction.MasterAccountNum = MasterAccountNum;
            //data.InvoiceTransaction.ProfileNum = ProfileNum;
            data.InvoiceTransaction.InvoiceNumber = invoiceNumber;
            var mapper = new InvoiceTransactionDataDtoMapperDefault();
            return mapper.WriteDto(data, null);
        }
        protected IList<ApplyInvoice> PrepareApplyInvoice(IList<InvoiceData> invoiceDatas)
        {
            var applyInvoices = new List<ApplyInvoice>();
            foreach (var invoiceData in invoiceDatas)
            {
                var applyInvoice = new ApplyInvoice()
                {
                    InvoiceNumber = invoiceData.InvoiceHeader.InvoiceNumber,
                    InvoiceUuid = invoiceData.InvoiceHeader.InvoiceUuid,
                    PaidAmount = new Random().Next(1, 100)
                };
            }
            return applyInvoices;
        }
        #endregion
    }
}


