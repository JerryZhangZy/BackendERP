
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    /// <summary>
    /// Represents a Tester for CustomerService.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public partial class CustomerServiceTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected CustomerData GetFakerData()
        {
            return CustomerDataTests.GetFakerData();
        }

        protected List<CustomerData> GetFakerData(int count)
        {
            return CustomerDataTests.GetFakerData(count);
        }

        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory DataBaseFactory { get; set; }

        public CustomerServiceTests(TestFixture<StartupTest> fixture) 
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["dsn"]);
        }
        public void Dispose()
        {
        }

        #region sync methods

        [Fact()]
		//[Fact(Skip = SkipReason)]
		public void Save_Test()
		{
            var srv = new CustomerService(DataBaseFactory);
            srv.AttachData(GetFakerData());
			srv.Save();

            var srvGet = new CustomerService(DataBaseFactory);
            srvGet.GetById(srv.Data.UniqueId);
            var result = srv.Data.Equals(srvGet.Data);

			Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
		}

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Get_Test()
        {
            var id = DataBaseFactory.GetValue<Customer, string>(@"
SELECT TOP 1 ins.CustomerUuid 
FROM Customer ins 
INNER JOIN (
    SELECT it.CustomerUuid, COUNT(1) AS cnt FROM CustomerAddress it GROUP BY it.CustomerUuid
) itm ON (itm.CustomerUuid = ins.CustomerUuid)
WHERE itm.cnt > 0
");


            var srv = new CustomerService(DataBaseFactory);
            srv.GetById(id);
            var rowNum = srv.Data.Customer.RowNum;

            var dataUpdate = GetFakerData();
            srv.Data.CopyFrom(dataUpdate);
            srv.Save();

            var srvGetById = new CustomerService(DataBaseFactory);
            srvGetById.GetById(id);

            var srvGet = new CustomerService(DataBaseFactory);
            srvGet.Get(rowNum);

            var result = srv.Data.Equals(srvGet.Data) && srvGet.Data.Equals(srvGetById.Data);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Delete_Test()
        {
            var id = DataBaseFactory.GetValue<Customer, string>(@"
SELECT TOP 1 ins.CustomerUuid 
FROM Customer ins 
INNER JOIN (
    SELECT it.CustomerUuid, COUNT(1) AS cnt FROM CustomerAddress it GROUP BY it.CustomerUuid
) itm ON (itm.CustomerUuid = ins.CustomerUuid)
WHERE itm.cnt > 0
");


            var srv = new CustomerService(DataBaseFactory);
            srv.GetById(id);
            srv.Delete();

            var result = DataBaseFactory.ExistUniqueId<Customer>(srv.Data.UniqueId);

            Assert.True(!result, "This is a generated tester, please report any tester bug to team leader.");
        }

        #endregion sync methods

        #region async methods

        [Fact()]
		//[Fact(Skip = SkipReason)]
		public async Task SaveAsync_Test()
		{
            var srv = new CustomerService(DataBaseFactory);
            srv.AttachData(GetFakerData());
			await srv.SaveAsync();

            var srvGet = new CustomerService(DataBaseFactory);
            await srvGet.GetByIdAsync(srv.Data.UniqueId);
            var result = srv.Data.Equals(srvGet.Data);

			Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
		}

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetAsync_Test()
        {
            var id = await DataBaseFactory.GetValueAsync<Customer, string>(@"
SELECT TOP 1 ins.CustomerUuid 
FROM Customer ins 
INNER JOIN (
    SELECT it.CustomerUuid, COUNT(1) AS cnt FROM CustomerAddress it GROUP BY it.CustomerUuid
) itm ON (itm.CustomerUuid = ins.CustomerUuid)
WHERE itm.cnt > 0
");


            var srv = new CustomerService(DataBaseFactory);
            await srv.GetByIdAsync(id);
            var rowNum = srv.Data.Customer.RowNum;

            var dataUpdate = GetFakerData();
            srv.Data.CopyFrom(dataUpdate);
            await srv.SaveAsync();

            var srvGetById = new CustomerService(DataBaseFactory);
            await srvGetById.GetByIdAsync(id);

            var srvGet = new CustomerService(DataBaseFactory);
            await srvGet.GetAsync(rowNum);

            var result = srv.Data.Equals(srvGet.Data) && srvGet.Data.Equals(srvGetById.Data);

            Assert.True(result, "This is a generated tester, please report any tester bug to team leader.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task DeleteAsync_Test()
        {

            var id = await DataBaseFactory.GetValueAsync<Customer, string>(@"
SELECT TOP 1 ins.CustomerUuid 
FROM Customer ins 
INNER JOIN (
    SELECT it.CustomerUuid, COUNT(1) AS cnt FROM CustomerAddress it GROUP BY it.CustomerUuid
) itm ON (itm.CustomerUuid = ins.CustomerUuid)
WHERE itm.cnt > 0
");


            var srv = new CustomerService(DataBaseFactory);
            await srv.GetByIdAsync(id);
            await srv.DeleteAsync();

            var result = DataBaseFactory.ExistUniqueId<Customer>(srv.Data.UniqueId);

            Assert.True(!result, "This is a generated tester, please report any tester bug to team leader.");
        }

        #endregion async methods

    }
}


