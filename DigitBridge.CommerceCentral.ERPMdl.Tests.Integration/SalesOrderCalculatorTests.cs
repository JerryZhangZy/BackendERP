


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class SalesOrderCalculatorTests
    {

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Calculate_Item_DiscountRate_Test()
        {
            var data = GetFakerData();
            data = SaveData(GetFakerData());
            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            var item = data.SalesOrderItems.Where(i => i.DiscountRate > 0).OrderByDescending(j => j.DiscountRate).FirstOrDefault();
            Assert.False(item == null, "SalesOrderItems not found.");

            var discountRate_New = new Faker().Random.Decimal(0.1m, 1).ToRate();// get a non zero rate

            var discountRate_Interval = Math.Abs(item.DiscountRate - discountRate_New);// 
            var discountPrice_Interval = (item.Price * discountRate_Interval.ToRate()).ToPrice();
            var itemTotalAmount_Interval = (discountPrice_Interval * item.ShipQty).ToAmount();
            var itemTotalAmount_Original = item.ItemTotalAmount;

            item.DiscountRate = discountRate_New;
            calculator.CalculateDetail(data, ProcessingMode.Edit);

            var itemTotalAmount_New = item.ItemTotalAmount;



            var result = Math.Abs(itemTotalAmount_New - itemTotalAmount_Original) == Math.Abs(itemTotalAmount_Interval);
            Assert.False(result == false, "DiscountRate test failed.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Calculate_Item_DiscountAmount_Test()
        {
            var data = GetFakerData();
            var item = data.SalesOrderItems.OrderByDescending(j => Math.Abs(j.DiscountPrice)).FirstOrDefault();
            //make sure this item is using DiscountAmount
            item.DiscountRate = 0;
            item.DiscountAmount = new Faker().Random.Decimal(-10000, 10000).ToPrice();
            data = SaveData(GetFakerData());

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            item = data.SalesOrderItems.Where(i => i.DiscountRate == 0).OrderByDescending(j => Math.Abs(j.DiscountAmount)).FirstOrDefault();
            Assert.False(item == null, "SalesOrderItems not found.");
            var discountAmount_New = new Faker().Random.Decimal(-10000, 10000).ToPrice();//get a new random discount price
            var discountAmount_Interval = item.DiscountAmount - discountAmount_New;
            var itemTotalAmount_Original = item.ItemTotalAmount;

            item.DiscountAmount = discountAmount_New;
            calculator.CalculateDetail(data, ProcessingMode.Edit);

            var itemTotalAmount_New = item.ItemTotalAmount;
            var result = Math.Abs(itemTotalAmount_New - itemTotalAmount_Original) == Math.Abs(discountAmount_Interval);
            Assert.False(result == false, "DiscountAmount test failed.");
        }


        private SalesOrderData SaveData(SalesOrderData data)
        {
            var success = true;
            var service = new SalesOrderService(DataBaseFactory);
            success = success && service.Add();
            service.AttachData(data);
            //srv.Calculate();
            success = success && service.SaveData();
            var uuid = service.Data.SalesOrderHeader.SalesOrderUuid;
            service.List();
            success = success && service.GetDataById(uuid);
            Assert.False(success == false, "Init data failed.");

            var items = service.Data.SalesOrderItems;
            success = items != null && items.Count > 0;
            Assert.False(success == false, "SalesOrderItems not found.");
            return service.Data;
        }
    }
}



