


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class SalesOrderCalculatorTests
    {
        [Fact()]
        public dynamic Calculate_Item_DiscountRate_Test()
        {
            var item = data.SalesOrderItems.OrderByDescending(j => j.DiscountRate).FirstOrDefault();
            var rowNum = item.RowNum;
            decimal min = 0.1m, mid = 0.5m, max = 1;
            var random = new Faker().Random;
            // make sure DiscountRate is between min and mid;
            item.DiscountRate = random.Decimal(min, mid).ToRate();
            //// make sure not affect by taxamount
            //item.Taxable = false;
            while (item.DiscountRate.IsZero())
            {
                item.DiscountRate = random.Decimal(min, mid).ToRate();
            }

            data = SaveData(data);


            item = data.SalesOrderItems.Where(i => i.RowNum == rowNum).FirstOrDefault();
            Assert.False(item == null, "SalesOrderItems not found.");

            var discountRate_New = random.Decimal(mid, max).ToRate();  // get a different non zero rate
            var discountRate_Original = item.DiscountRate;
            var discountRate_Interval = Math.Abs(item.DiscountRate - discountRate_New).ToRate();// 
            var discountPrice_Interval = (item.Price * discountRate_Interval).ToPrice();// this may cause error 
            var extAmount_Interval = (discountPrice_Interval * item.ShipQty).ToAmount();
            var taxAmount_Interval = item.Taxable ? (extAmount_Interval * item.TaxRate).ToAmount() : 0;

            var newData = data.Clone();
            var newItem = newData.SalesOrderItems.Where(i => i.RowNum == item.RowNum).FirstOrDefault();
            newItem.DiscountRate = discountRate_New;
            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            calculator.CalculateDetail(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(newItem.ItemTotalAmount - item.ItemTotalAmount);
            var expectResult = Math.Abs(extAmount_Interval + taxAmount_Interval);
            var success = actualResult == expectResult;
            if (!success)
            {
                //check error range.
                var errorRange = 0.0001m;
                var rate = actualResult / expectResult;
                success = rate < (1 + errorRange) && rate >= (1 - errorRange);
                if (success)
                {
                    System.Diagnostics.Trace.WriteLine($"The error is within the error range. Actual result is  {actualResult},expect is {expectResult} ");
                }
            }

            Assert.False(success == false, $"Item discountRate doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");

            return new
            {
                Original = discountRate_Original,
                New = discountRate_New,
                Affect_Sum_ExtAmount = item.IsAr ? extAmount_Interval : 0,
                Affect_Sum_ExtAmount_TaxableAmount = item.IsAr && item.Taxable ? extAmount_Interval : 0,
                Affect_Item_Total = expectResult
            };
        }

        [Fact()]
        public dynamic Calculate_Item_DiscountAmount_Test()
        {
            var item = data.SalesOrderItems.OrderByDescending(j => Math.Abs(j.DiscountPrice)).FirstOrDefault();
            var rowNum = item.RowNum;
            //make sure this item is using DiscountAmount
            item.DiscountRate = 0;
            // make sure not affect by taxamount
            item.Taxable = false;
            int min = 1, mid = 5000, max = 10000;
            var random = new Faker().Random;
            item.DiscountAmount = random.Decimal(min, mid).ToDecimal().ToAmount();
            data = SaveData(data);

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            item = data.SalesOrderItems.Where(i => i.RowNum == rowNum).FirstOrDefault();
            //item = data.SalesOrderItems.Where(i => i.DiscountRate == 0).OrderByDescending(j => Math.Abs(j.DiscountAmount)).FirstOrDefault();
            Assert.False(item == null, "SalesOrderItems not found.");

            var discountAmount_New = random.Decimal(mid, max).ToDecimal().ToAmount();//get a new random discount amount
            var discountAmount_Original = item.DiscountAmount;
            var extAmount_Interval = discountAmount_Original - discountAmount_New;
            var taxAmount_Interval = item.Taxable ? (extAmount_Interval * item.TaxRate).ToAmount() : 0;
            var expectResult = Math.Abs(extAmount_Interval + taxAmount_Interval);


            var newData = data.Clone();
            var newItem = newData.SalesOrderItems.Where(i => i.RowNum == item.RowNum).FirstOrDefault();
            newItem.DiscountAmount = discountAmount_New;
            calculator.CalculateDetail(newData, ProcessingMode.Edit);

            var result = Math.Abs(newItem.ItemTotalAmount - item.ItemTotalAmount) == expectResult;
            Assert.False(result == false, "Item discountAmount test failed.");

            return new
            {
                Original = discountAmount_Original,
                New = discountAmount_New,
                Affect_Sum_ExtAmount = item.IsAr ? extAmount_Interval : 0,
                Affect_Sum_ExtAmount_TaxableAmount = item.IsAr && item.Taxable ? extAmount_Interval : 0,
                Affect_Item_Total = expectResult
            };
        }
        [Fact()]
        public dynamic Calculate_Item_TaxRate_Test()
        {
            var item = data.SalesOrderItems.OrderByDescending(j => j.TaxRate).FirstOrDefault();
            var rowNum = item.RowNum;
            decimal min = 0.1m, mid = 0.5m, max = 1;
            var random = new Faker().Random;
            // make sure TaxRate is between min and mid;
            item.TaxRate = random.Decimal(min, mid).ToRate();

            while (item.TaxRate.IsZero())
            {
                item.TaxRate = random.Decimal(min, mid).ToRate();
            }
            data = SaveData(data);

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            item = data.SalesOrderItems.Where(i => i.RowNum == rowNum).FirstOrDefault();
            Assert.False(item == null, "SalesOrderItems not found.");

            var taxRate_New = random.Decimal(mid, max).ToRate();  // get a different non zero rate
            var taxRate_Original = item.TaxRate;
            var taxRate_Interval = Math.Abs(item.TaxRate - taxRate_New).ToRate();//   
            var taxAmount_Interval = item.Taxable ? (item.TaxableAmount * taxRate_Interval).ToAmount() : 0;
            var expectResult = taxAmount_Interval;

            var setting = new ERPSetting();
            if (setting.TaxForShippingAndHandling)
            {
                var shippingTaxAmount_Interval = (item.ShippingAmount * taxRate_Interval).ToAmount();
                var miscTaxAmount_Interval = (item.MiscAmount * taxRate_Interval).ToAmount();
                expectResult = (taxAmount_Interval + shippingTaxAmount_Interval + miscTaxAmount_Interval).ToAmount();
            }


            var newData = data.Clone();
            var newItem = newData.SalesOrderItems.Where(i => i.RowNum == item.RowNum).FirstOrDefault();
            newItem.TaxRate = taxRate_New;
            calculator.CalculateDetail(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(newItem.ItemTotalAmount - item.ItemTotalAmount);
            expectResult = Math.Abs(expectResult);
            var success = actualResult == expectResult;
            if (!success)
            {
                //check error range.
                var errorRange = 0.0001m;
                var rate = actualResult / expectResult;
                success = rate < (1 + errorRange) && rate >= (1 - errorRange);
                if (success)
                {
                    System.Diagnostics.Trace.WriteLine($"The error is within the error range. Actual result is  {actualResult},expect is {expectResult} ");
                }
            }

            Assert.False(success == false, $"Item taxRate doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");

            return new
            {
                Original = taxRate_Original,
                New = taxRate_New,
                Affect_Sum_ExtAmount = 0,
                Affect_Sum_ExtAmount_TaxableAmount = 0,
                Affect_Item_Total = expectResult
            };
        }


        [Fact()]
        public dynamic Calculate_Sum_DiscountRate_Test()
        {
            //var data = GetFakerData();
            //data = SaveData(data);
            decimal min = 0.1m, mid = 0.5m, max = 1;
            var random = new Faker().Random;
            // make sure DiscountRate is between min and mid;
            data.SalesOrderHeader.DiscountRate = random.Decimal(min, mid).ToRate();
            while (data.SalesOrderHeader.DiscountRate.IsZero())
            {
                data.SalesOrderHeader.DiscountRate = random.Decimal(min, mid).ToRate();
            }

            data = SaveData(data);

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);

            var discountRate_Original = data.SalesOrderHeader.DiscountRate;
            var discountRate_New = random.Decimal(mid, max).ToRate();  // get a different non zero rate

            var discountRate_Interval = Math.Abs(discountRate_New - discountRate_New).ToRate();// 
            var discountAmount_Interval = (data.SalesOrderHeader.SubTotalAmount * discountRate_Interval).ToAmount();//this may casuse error.

            var affectTax_Percent = data.SalesOrderHeader.SubTotalAmount != 0 ? (discountAmount_Interval / data.SalesOrderHeader.SubTotalAmount) : 0;
            var taxAmount_Interval = (data.SalesOrderHeader.TaxableAmount * affectTax_Percent * data.SalesOrderHeader.TaxRate).ToAmount();


            var newData = data.Clone();
            newData.SalesOrderHeader.DiscountRate = discountRate_New;
            calculator.CalculateSummary(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(newData.SalesOrderHeader.TotalAmount - data.SalesOrderHeader.TotalAmount);
            var expectResult = Math.Abs(taxAmount_Interval - discountAmount_Interval);
            var success = actualResult == expectResult;
            if (!success)
            {
                //check error range.
                var errorRange = 0.000001m;
                var rate = actualResult / expectResult;
                success = rate < (1 + errorRange) && rate >= (1 - errorRange);
                if (success)
                {
                    System.Diagnostics.Trace.WriteLine($"The error is within the error range. Actual result is  {actualResult},expect is {expectResult} ");
                }
            }

            Assert.False(success == false, $"Summary discountRate doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");

            return new
            {
                Original = discountRate_Original,
                New = discountRate_New,
                Affect_Sum_ExtAmount = 0,
                Affect_Sum_ExtAmount_TaxableAmount = 0,
                Affect_Item_Total = 0,
                Affect_Sum_Total = expectResult
            };
        }
        [Fact()]
        public dynamic Calculate_Sum_DiscountAmount_Test()
        {
            int min = 1, mid = 5000, max = 10000;
            var random = new Faker().Random;
            // make sure DiscountRate is using disacount amount.
            data.SalesOrderHeader.DiscountRate = 0;
            while (data.SalesOrderHeader.DiscountAmount.IsZero())
            {
                data.SalesOrderHeader.DiscountAmount = random.Decimal(min, mid).ToAmount();
            }
            //make sure not affect by tax amount.
            foreach (var item in data.SalesOrderItems)
            {
                item.Taxable = false;
            }
            data = SaveData(data);
            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);

            var discountAmount_Original = data.SalesOrderHeader.DiscountAmount;
            var discountAmount_New = random.Decimal(mid, max).ToAmount();  // get a different non zero rate 
            var discountAmount_Interval = Math.Abs(discountAmount_Original - discountAmount_New).ToAmount();//  

            var affectTax_Percent = data.SalesOrderHeader.SubTotalAmount != 0 ? (discountAmount_Interval / data.SalesOrderHeader.SubTotalAmount) : 0;
            var taxAmount_Interval = (data.SalesOrderHeader.TaxableAmount * affectTax_Percent * data.SalesOrderHeader.TaxRate).ToAmount();


            var newData = data.Clone();
            newData.SalesOrderHeader.DiscountAmount = discountAmount_New;
            calculator.CalculateSummary(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(newData.SalesOrderHeader.TotalAmount - data.SalesOrderHeader.TotalAmount);
            var expectResult = Math.Abs(taxAmount_Interval - discountAmount_Interval);
            var success = actualResult == expectResult;
            Assert.False(success == false, $"Summary discountAmount doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");
            return new
            {
                Original = discountAmount_Original,
                New = discountAmount_New,
                Affect_Sum_ExtAmount = 0,
                Affect_Sum_ExtAmount_TaxableAmount = 0,
                Affect_Item_Total = 0,
                Affect_Sum_Total = expectResult
            };
        }
        [Fact()]
        public dynamic Calculate_Sum_TaxRate_Test()
        {

            decimal min = 0.1m, mid = 0.5m, max = 1;
            var random = new Faker().Random;
            // make sure DiscountRate is between min and mid;
            data.SalesOrderHeader.TaxRate = random.Decimal(min, mid).ToRate();
            while (data.SalesOrderHeader.TaxRate.IsZero())
            {
                data.SalesOrderHeader.TaxRate = random.Decimal(min, mid).ToRate();
            }

            data = SaveData(data);
            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);

            var taxRate_New = random.Decimal(mid, max).ToRate();  // get a different non zero rate 
            var taxRate_Original = data.SalesOrderHeader.TaxRate;
            var taxRate_Interval = Math.Abs(taxRate_Original - taxRate_New).ToRate();//  
            var sum = data.SalesOrderHeader;
            var taxAmount_Interval = (sum.TaxableAmount * taxRate_Interval).ToAmount();

            var setting = new ERPSetting();
            if (setting.TaxForShippingAndHandling)
            {
                taxAmount_Interval = (taxAmount_Interval + (sum.ShippingAmount * taxRate_Interval).ToAmount() + (sum.MiscAmount * taxRate_Interval).ToAmount()).ToAmount();
            }

            var newData = data.Clone();
            newData.SalesOrderHeader.TaxRate = taxRate_New;
            calculator.CalculateSummary(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(newData.SalesOrderHeader.TotalAmount - data.SalesOrderHeader.TotalAmount);
            var expectResult = Math.Abs(taxAmount_Interval);
            var success = actualResult == expectResult;
            if (!success)
            {
                //check error range.
                var errorRange = 0.000001m;
                var rate = actualResult / expectResult;
                success = rate < (1 + errorRange) && rate >= (1 - errorRange);
                if (success)
                {
                    System.Diagnostics.Trace.WriteLine($"The error is within the error range. Actual result is  {actualResult},expect is {expectResult} ");
                }
            }
            Assert.False(success == false, $"Sum taxRate doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");


            var itemTotalAmount_Original = 0m;
            foreach (var item in data.SalesOrderItems)
            {
                itemTotalAmount_Original += item.ItemTotalAmount;
            }

            var itemTotalAmount_New = 0m;
            foreach (var item in newData.SalesOrderItems)
            {
                itemTotalAmount_New += item.ItemTotalAmount;
            }

            return new
            {
                Original = taxRate_Original,
                New = taxRate_New,
                Affect_Sum_ExtAmount = 0,
                Affect_Sum_ExtAmount_TaxableAmount = 0,
                Affect_Item_Total = Math.Abs(itemTotalAmount_New - itemTotalAmount_Original),
                Affect_Sum_Total = expectResult
            };
        }
    }
}



