


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class SalesOrderCalculatorTests
    {

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Calculate_Item_DiscountRate_Test()
        {

            var data = GetFakerData();
            data = SaveData(data);
            var item = data.SalesOrderItems.OrderByDescending(j => j.DiscountRate).FirstOrDefault();
            var rowNum = item.RowNum;
            decimal min = 0.1m, mid = 0.5m, max = 1;
            var random = new Faker().Random;
            // make sure DiscountRate is between min and mid;
            item.DiscountRate = random.Decimal(min, mid).ToRate();
            while (item.DiscountRate.IsZero())
            {
                item.DiscountRate = random.Decimal(min, mid).ToRate();
            }

            data = SaveData(data);

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            item = data.SalesOrderItems.Where(i => i.RowNum == rowNum).FirstOrDefault();
            Assert.False(item == null, "SalesOrderItems not found.");

            var discountRate_New = random.Decimal(mid, max).ToRate();  // get a different non zero rate

            var discountRate_Interval = Math.Abs(item.DiscountRate - discountRate_New).ToRate();// 
            var discountPrice_Interval = (item.Price * discountRate_Interval).ToPrice();
            var itemTotalAmount_Interval = (discountPrice_Interval * item.ShipQty).ToAmount();
            var itemTotalAmount_Original = item.ItemTotalAmount;

            item.DiscountRate = discountRate_New;
            calculator.CalculateDetail(data, ProcessingMode.Edit);

            var result = Math.Abs(item.ItemTotalAmount - itemTotalAmount_Original) == Math.Abs(itemTotalAmount_Interval);
            Assert.False(result == false, "DiscountRate test failed.");
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public void Calculate_Item_DiscountAmount_Test()
        {
            var data = GetFakerData();
            data = SaveData(data);
            var item = data.SalesOrderItems.OrderByDescending(j => Math.Abs(j.DiscountPrice)).FirstOrDefault();
            var rowNum = item.RowNum;
            //make sure this item is using DiscountAmount
            item.DiscountRate = 0;
            int min = 1, mid = 5000, max = 10000;
            var random = new Faker().Random;
            item.DiscountAmount = random.Decimal(min, mid).ToDecimal().ToAmount();
            data = SaveData(data);

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            item = data.SalesOrderItems.Where(i => i.RowNum == rowNum).FirstOrDefault();
            //item = data.SalesOrderItems.Where(i => i.DiscountRate == 0).OrderByDescending(j => Math.Abs(j.DiscountAmount)).FirstOrDefault();
            Assert.False(item == null, "SalesOrderItems not found.");

            var discountAmount_New = random.Decimal(mid, max).ToDecimal().ToAmount();//get a new random discount amount
            var discountAmount_Interval = item.DiscountAmount - discountAmount_New;
            var itemTotalAmount_Original = item.ItemTotalAmount;

            item.DiscountAmount = discountAmount_New;
            calculator.CalculateDetail(data, ProcessingMode.Edit);

            var result = Math.Abs(item.ItemTotalAmount - itemTotalAmount_Original) == Math.Abs(discountAmount_Interval);
            Assert.False(result == false, "DiscountAmount test failed.");
        }


        private SalesOrderData SaveData(SalesOrderData data)
        {
            var success = true;
            var service = new SalesOrderService(DataBaseFactory);
            success = success && service.Add();
            service.AttachData(data);
            //srv.Calculate();
            success = success && service.SaveData();
            var uuid = service.Data.SalesOrderHeader.SalesOrderUuid;
            service.List();
            success = success && service.GetDataById(uuid);
            Assert.False(success == false, "Init data failed.");

            var items = service.Data.SalesOrderItems;
            success = items != null && items.Count > 0;
            Assert.False(success == false, "SalesOrderItems not found.");
            return service.Data;
        }
    }
}



