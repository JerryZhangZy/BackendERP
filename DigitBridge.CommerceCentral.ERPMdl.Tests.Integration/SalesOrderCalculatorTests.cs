


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.Base.Common;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class SalesOrderCalculatorTests
    {
        [Fact()]
        public dynamic Calculate_Item_DiscountRate_Test()
        {
            var item_Original = data.SalesOrderItems.OrderByDescending(j => j.DiscountRate).FirstOrDefault();
            var newData = GetCopy();
            var item_New = newData.SalesOrderItems.Where(i => i.SalesOrderItemsUuid == item_Original.SalesOrderItemsUuid).FirstOrDefault();
            decimal min = 0.1m, max = 1;
            var random = new Faker().Random;
            // make sure DiscountRate is between min and max;
            item_New.DiscountRate = random.Decimal(min, max).ToRate();
            while (item_New.DiscountRate.IsZero() || item_New.DiscountRate == item_Original.DiscountRate)
            {
                item_New.DiscountRate = random.Decimal(min, max).ToRate();
            }

            var discountRate_Interval = Math.Abs(item_Original.DiscountRate - item_New.DiscountRate).ToRate();// 
            var discountPrice_Interval = (item_Original.Price * discountRate_Interval).ToPrice();// this may cause error 
            var extAmount_Interval = (discountPrice_Interval * item_Original.ShipQty).ToAmount();
            var taxAmount_Interval = item_Original.Taxable ? (extAmount_Interval * item_Original.TaxRate).ToAmount() : 0;


            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            calculator.CalculateDetail(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(item_New.ItemTotalAmount - item_Original.ItemTotalAmount);
            var expectResult = Math.Abs(extAmount_Interval + taxAmount_Interval);
            var success = actualResult == expectResult;
            if (!success)
            {
                //check error range.
                var errorRange = 0.0001m;
                var rate = actualResult / expectResult;
                success = rate < (1 + errorRange) && rate >= (1 - errorRange);
                if (success)
                {
                    System.Diagnostics.Trace.WriteLine($"The error is within the error range. Actual result is  {actualResult},expect is {expectResult} ");
                }
            }

            Assert.False(success == false, $"Item discountRate doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");

            var obj = new
            {
                Original = item_Original.DiscountRate,
                New = item_New.DiscountRate,
                Affect_Sum_ExtAmount = item_Original.IsAr ? extAmount_Interval : 0,
                Affect_Sum_ExtAmount_TaxableAmount = item_Original.IsAr && item_Original.Taxable ? extAmount_Interval : 0,
                Affect_Item_Total = actualResult,
                Affect_Sum_Total = 0m
            };
            item_Original.DiscountRate = item_New.DiscountRate;
            SaveData(data);
            return obj;
        }

        [Fact()]
        public dynamic Calculate_Item_DiscountAmount_Test()
        {
            var item_Original = data.SalesOrderItems.OrderByDescending(j => Math.Abs(j.DiscountPrice)).FirstOrDefault();
            var newData = GetCopy();
            var item_New = newData.SalesOrderItems.Where(i => i.SalesOrderItemsUuid == item_Original.SalesOrderItemsUuid).FirstOrDefault();
            //make sure this item is using DiscountAmount
            item_New.DiscountRate = 0;//TODO move it to data prepare
            int min = 5000, max = 10000;
            var random = new Faker().Random;
            item_New.DiscountAmount = random.Decimal(min, max).ToAmount();
            while (item_New.DiscountAmount.IsZero() || item_New.DiscountAmount == item_Original.DiscountAmount)
            {
                item_New.DiscountAmount = random.Decimal(min, max).ToRate();
            }

            var extAmount_Interval = item_Original.DiscountAmount - item_New.DiscountAmount;
            var taxAmount_Interval = item_Original.Taxable ? (extAmount_Interval * item_Original.TaxRate).ToAmount() : 0;
            var expectResult = Math.Abs(extAmount_Interval + taxAmount_Interval);


            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            calculator.CalculateDetail(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(item_New.ItemTotalAmount - item_Original.ItemTotalAmount);
            var result = actualResult == expectResult;
            Assert.False(result == false, "Item discountAmount test failed.");

            var obj = new
            {
                Original = item_Original.DiscountAmount,
                New = item_New.DiscountAmount,
                Affect_Sum_ExtAmount = item_Original.IsAr ? extAmount_Interval : 0,
                Affect_Sum_ExtAmount_TaxableAmount = item_Original.IsAr && item_Original.Taxable ? extAmount_Interval : 0,
                Affect_Item_Total = actualResult
            };

            item_Original.DiscountAmount = item_New.DiscountAmount;
            SaveData(data);
            return obj;
        }
        [Fact()]
        public dynamic Calculate_Item_TaxRate_Test()
        {
            var item_Original = data.SalesOrderItems.OrderByDescending(j => j.TaxRate).FirstOrDefault(); ;
            var newData = GetCopy();
            var item_New = newData.SalesOrderItems.Where(i => i.SalesOrderItemsUuid == item_Original.SalesOrderItemsUuid).FirstOrDefault();

            decimal min = 0.1m, max = 1;
            var random = new Faker().Random;
            // make sure TaxRate is between min and max;
            item_New.TaxRate = random.Decimal(min, max).ToRate();
            while (item_New.TaxRate.IsZero())
            {
                item_New.TaxRate = random.Decimal(min, max).ToRate();
            }

            var taxRate_Interval = Math.Abs(item_Original.TaxRate - item_New.TaxRate).ToRate();
            var taxAmount_Interval = item_Original.Taxable ? (item_Original.TaxableAmount * taxRate_Interval).ToAmount() : 0;
            var expectResult = taxAmount_Interval;

            var setting = new ERPSetting();
            if (setting.TaxForShippingAndHandling)
            {
                var shippingTaxAmount_Interval = (item_Original.ShippingAmount * taxRate_Interval).ToAmount();
                var miscTaxAmount_Interval = (item_Original.MiscAmount * taxRate_Interval).ToAmount();
                expectResult = (taxAmount_Interval + shippingTaxAmount_Interval + miscTaxAmount_Interval).ToAmount();
            }

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            calculator.CalculateDetail(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(item_New.ItemTotalAmount - item_Original.ItemTotalAmount);
            expectResult = Math.Abs(expectResult);
            var success = actualResult == expectResult;
            if (!success)
            {
                //check error range.
                var errorRange = 0.0001m;
                var rate = actualResult / expectResult;
                success = rate < (1 + errorRange) && rate >= (1 - errorRange);
                if (success)
                {
                    System.Diagnostics.Trace.WriteLine($"The error is within the error range. Actual result is  {actualResult},expect is {expectResult} ");
                }
            }

            Assert.False(success == false, $"Item taxRate doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");


            var obj = new
            {
                Original = item_Original.TaxRate,
                New = item_New.TaxRate,
                Affect_Sum_ExtAmount = 0,
                Affect_Sum_ExtAmount_TaxableAmount = 0,
                Affect_Item_Total = expectResult
            };
            item_Original.TaxRate = item_New.TaxRate;
            SaveData(data);
            return obj;
        }


        [Fact()]
        public dynamic Calculate_Sum_DiscountRate_Test()
        {
            var newData = GetCopy();

            decimal min = 0.1m, max = 1;
            var random = new Faker().Random;
            // make sure DiscountRate is between min and max;
            newData.SalesOrderHeader.DiscountRate = random.Decimal(min, max).ToRate();
            while (newData.SalesOrderHeader.DiscountRate.IsZero() || newData.SalesOrderHeader.DiscountRate == data.SalesOrderHeader.DiscountRate)
            {
                newData.SalesOrderHeader.DiscountRate = random.Decimal(min, max).ToRate();
            }

            var discountRate_Interval = Math.Abs(data.SalesOrderHeader.DiscountRate - newData.SalesOrderHeader.DiscountRate).ToRate();// 
            var discountAmount_Interval = (data.SalesOrderHeader.SubTotalAmount * discountRate_Interval).ToAmount();//this may casuse error.

            var affectTax_Percent = data.SalesOrderHeader.SubTotalAmount != 0 ? (discountAmount_Interval / data.SalesOrderHeader.SubTotalAmount) : 0;
            var taxAmount_Interval = (data.SalesOrderHeader.TaxableAmount * affectTax_Percent * data.SalesOrderHeader.TaxRate).ToAmount();

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            calculator.CalculateSummary(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(newData.SalesOrderHeader.TotalAmount - data.SalesOrderHeader.TotalAmount);
            var expectResult = Math.Abs(taxAmount_Interval + discountAmount_Interval);
            var success = actualResult == expectResult;
            if (!success)
            {
                //check error range.
                var errorRange = 0.000001m;
                var rate = actualResult / expectResult;
                success = rate < (1 + errorRange) && rate >= (1 - errorRange);
                if (success)
                {
                    System.Diagnostics.Trace.WriteLine($"The error is within the error range. Actual result is  {actualResult},expect is {expectResult} ");
                }
            }

            Assert.False(success == false, $"Summary discountRate doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");


            var obj = new
            {
                Original = data.SalesOrderHeader.DiscountRate,
                New = newData.SalesOrderHeader.DiscountRate,
                Affect_Sum_ExtAmount = 0,
                Affect_Sum_ExtAmount_TaxableAmount = 0,
                Affect_Item_Total = 0,
                Affect_Sum_Total = actualResult
            };
            data.SalesOrderHeader.DiscountRate = newData.SalesOrderHeader.DiscountRate;
            SaveData(data);
            return obj;
        }
        [Fact()]
        public dynamic Calculate_Sum_DiscountAmount_Test()
        {
            var newData = GetCopy();
            int min = 1, max = 10000;
            var random = new Faker().Random;
            //// make sure DiscountRate is using disacount amount.
            newData.SalesOrderHeader.DiscountRate = 0;//TODO remove this.
            while (newData.SalesOrderHeader.DiscountAmount.IsZero() || newData.SalesOrderHeader.DiscountAmount == data.SalesOrderHeader.DiscountAmount)
            {
                newData.SalesOrderHeader.DiscountAmount = random.Decimal(min, max).ToAmount();
            }
            ////TODO add this logic
            //foreach (var item in data.SalesOrderItems)
            //{
            //    item.Taxable = false;
            //} 

            var discountAmount_Interval = Math.Abs(data.SalesOrderHeader.DiscountAmount - newData.SalesOrderHeader.DiscountAmount).ToAmount();//  

            var affectTax_Percent = data.SalesOrderHeader.SubTotalAmount != 0 ? (discountAmount_Interval / data.SalesOrderHeader.SubTotalAmount) : 0;
            var taxAmount_Interval = (data.SalesOrderHeader.TaxableAmount * affectTax_Percent * data.SalesOrderHeader.TaxRate).ToAmount();

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            calculator.CalculateSummary(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(newData.SalesOrderHeader.TotalAmount - data.SalesOrderHeader.TotalAmount);
            var expectResult = Math.Abs(taxAmount_Interval + discountAmount_Interval);
            var success = actualResult == expectResult;
            if (!success)
            {
                //check error range.
                var errorRange = 0.0001m;
                var rate = actualResult / expectResult;
                success = rate < (1 + errorRange) && rate >= (1 - errorRange);
                if (success)
                {
                    System.Diagnostics.Trace.WriteLine($"The error is within the error range. Actual result is  {actualResult},expect is {expectResult} ");
                }
            }

            Assert.False(success == false, $"Summary discountAmount doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");

            var obj = new
            {
                Original = data.SalesOrderHeader.DiscountAmount,
                New = newData.SalesOrderHeader.DiscountAmount,
                Affect_Sum_ExtAmount = 0,
                Affect_Sum_ExtAmount_TaxableAmount = 0,
                Affect_Item_Total = 0,
                Affect_Sum_Total = actualResult
            };
            data.SalesOrderHeader.DiscountAmount = newData.SalesOrderHeader.DiscountAmount;
            SaveData(data);
            return obj;
        }
        [Fact()]
        public dynamic Calculate_Sum_TaxRate_Test()
        {
            var newData = GetCopy();
            decimal min = 0.1m, max = 1;
            var random = new Faker().Random;
            // make sure DiscountRate is between min and mid;
            newData.SalesOrderHeader.TaxRate = random.Decimal(min, max).ToRate();
            while (newData.SalesOrderHeader.TaxRate.IsZero() || newData.SalesOrderHeader.TaxRate == data.SalesOrderHeader.TaxRate)
            {
                newData.SalesOrderHeader.TaxRate = random.Decimal(min, max).ToRate();
            }

            var taxRate_Interval = Math.Abs(data.SalesOrderHeader.TaxRate - newData.SalesOrderHeader.TaxRate).ToRate();//  
            var sum = data.SalesOrderHeader;
            var affectTax_Percent = sum.SubTotalAmount != 0 ? (sum.DiscountAmount / sum.SubTotalAmount) : 0;
            var taxAmount_Interval = ((sum.TaxableAmount * (1 - affectTax_Percent)) * taxRate_Interval).ToAmount();

            var setting = new ERPSetting();
            if (setting.TaxForShippingAndHandling)
            {
                taxAmount_Interval = (taxAmount_Interval + (sum.ShippingAmount * taxRate_Interval).ToAmount() + (sum.MiscAmount * taxRate_Interval).ToAmount()).ToAmount();
            }

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            calculator.CalculateSummary(newData, ProcessingMode.Edit);
            var actualResult = Math.Abs(newData.SalesOrderHeader.TotalAmount - data.SalesOrderHeader.TotalAmount);
            var expectResult = Math.Abs(taxAmount_Interval);
            var success = actualResult == expectResult;
            if (!success)
            {
                //check error range.
                var errorRange = 0.000001m;
                var rate = actualResult / expectResult;
                success = rate < (1 + errorRange) && rate >= (1 - errorRange);
                if (success)
                {
                    System.Diagnostics.Trace.WriteLine($"The error is within the error range. Actual result is  {actualResult},expect is {expectResult} ");
                }
            }
            Assert.False(success == false, $"Sum taxRate doesn't pass test. Actual result is  {actualResult},expect is {expectResult} ");


            var itemTotalAmount_Original = 0m;
            foreach (var item in data.SalesOrderItems)
            {
                itemTotalAmount_Original += item.ItemTotalAmount;
            }

            var itemTotalAmount_New = 0m;
            foreach (var item in newData.SalesOrderItems)
            {
                itemTotalAmount_New += item.ItemTotalAmount;
            }

            var obj = new
            {
                Original = data.SalesOrderHeader.TaxRate,
                New = newData.SalesOrderHeader.TaxRate,
                Affect_Sum_ExtAmount = 0,
                Affect_Sum_ExtAmount_TaxableAmount = 0,
                Affect_Item_Total = Math.Abs(itemTotalAmount_New - itemTotalAmount_Original),
                Affect_Sum_Total = actualResult
            };
            data.SalesOrderHeader.TaxRate = newData.SalesOrderHeader.TaxRate;
            SaveData(data);
            return obj;
        }

        [Fact()]
        public void Calculate_Test1()
        {
            var dObj = CalculateTestHelper.GetSumCase1();
            Calculate_Test(dObj);
        }

        [Fact()]
        public void Calculate_Test2()
        {
            var dObj = CalculateTestHelper.GetSumCase2();
            Calculate_Test(dObj);
        }

        [Fact()]
        public void Calculate_Test3()
        {
            var dObj = CalculateTestHelper.GetSumCase3();
            Calculate_Test(dObj);
        }

        private void Calculate_Test(dynamic dObj)
        {
            //var dObj = CalculateTestHelper.GetData1();
            int length = dObj.Items.Length;
            var testData = GetFakerData(length);

            for (int i = 0; i < dObj.Items.Length; i++)
            {
                CalculateTestHelper.CopyItem(testData.SalesOrderItems[i], dObj.Items[i].Item);
            }
            CalculateTestHelper.CopySum(testData.SalesOrderHeader, dObj.Sum);

            var calculator = new SalesOrderServiceCalculatorDefault(DataBaseFactory);
            calculator.Calculate(testData, ProcessingMode.Edit);

            var success = testData.SalesOrderHeader.TotalAmount == dObj.TotalAmount;
            if (!success)
            {
                success = CheckErrInRange(dObj.TotalAmount, testData.SalesOrderHeader.TotalAmount);
            }
            Assert.False(success == false, $"Summary doesn't pass test. Actual result is  {testData.SalesOrderHeader.TotalAmount},expect is {dObj.TotalAmount} ");

            for (int i = 0; i < dObj.Items.Length; i++)
            {
                success = dObj.Items[i].Result.ItemTotalAmount == testData.SalesOrderItems[i].ItemTotalAmount;
                if (!success)
                {
                    success = CheckErrInRange(dObj.Items[i].Result.ItemTotalAmount, testData.SalesOrderItems[i].ItemTotalAmount);
                    Assert.False(success == false, $"item {i} doesn't pass test. Actual result is  {testData.SalesOrderItems[i].ItemTotalAmount},expect is {dObj.Items[i].Result.ItemTotalAmount} ");
                }
            }
        }
        //check error range.
        private bool CheckErrInRange(decimal expectedResult, decimal actualResult)
        {
            var errorRange = 0.0001m;
            var rate = expectedResult / actualResult;
            return rate < (1 + errorRange) && rate >= (1 - errorRange);
        }

    }
}



