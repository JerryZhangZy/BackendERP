    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using System.IO;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    /// <summary>
    /// Represents a CustomerIOManager Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public partial class CustomerIOManagerTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Manager Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory DataBaseFactory { get; set; }

        public CustomerIOManagerTests(TestFixture<StartupTest> fixture)
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["DBConnectionString"]);
        }
        public void Dispose()
        {
        }


        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task ImportCsvAsync_Test()
        {
            var fileName = "c:\\temp\\Dto_2.csv";
            var service = new CustomerIOManager(DataBaseFactory);
            IList<CustomerDataDto> data;

            try
            {
                using (var b = new Benchmark("ImportCsvAsync_Test"))
                {
                    using (var reader = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                    {
                        data = await service.ImportAsync(reader);
                    }
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }

        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task ImportByBlobAsync_Test()
        {
            var payload = new ImportExportFilesPayload()
            {
                MasterAccountNum = 10001,
                ProfileNum = 10001,
                ImportUuid = "d3646ab8521246f1a997b04f8280ae01",
            };

            var service = new CustomerIOManager(DataBaseFactory);

            IList<CustomerDataDto> data;
            try
            {
                using (var b = new Benchmark("ImportByBlobAsync_Test"))
                {
                    await service.ImportAsync(payload);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }

        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task ImportAllColumnsAsync_Test()
        {
            var fileName = "c:\\temp\\Customer_1.csv";
            var service = new CustomerIOManager(DataBaseFactory);
            IList<CustomerDataDto> data;

            try
            {
                using (var b = new Benchmark("ImportAllColumnsAsync_Test"))
                {
                    using (var reader = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                    {
                        data = await service.ImportAllColumnsAsync(reader);
                    }
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }

        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task ExportAsync_Test()
        {
            var fileName = "c:\\temp\\Customer_1.csv";
            var service = new CustomerIOManager(DataBaseFactory);
            IList<CustomerDataDto> dtos = new List<CustomerDataDto>();
            var CustomerService = new CustomerService(DataBaseFactory);
            if (CustomerService.List("eadf5c15-3702-ff74-7d68-5be78956ad45"))
                dtos.Add(CustomerService.ToDto());
            //if (CustomerService.List("117227d4-43cc-476c-9257-29695d08fdd1"))
            //    dtos.Add(CustomerService.ToDto());
            //if (CustomerService.List("22da3dbb-6d02-4852-a2b8-04c380b36dd6"))
            //    dtos.Add(CustomerService.ToDto());


            try
            {
                using (var b = new Benchmark("ExportAsync_Test"))
                {
                    var dataArray = await service.ExportAsync(dtos);
                    File.WriteAllBytesAsync(fileName, dataArray);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }

        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task ExportAllColumnsAsync_Test()
        {
            var fileName = "c:\\temp\\Customer_3.csv";
            var service = new CustomerIOManager(DataBaseFactory);
            IList<CustomerDataDto> dtos = new List<CustomerDataDto>();
            var CustomerService = new CustomerService(DataBaseFactory);
            if (CustomerService.List("0417e3f8-b552-48dc-ab89-935e8a626bfa"))
                dtos.Add(CustomerService.ToDto());
            //if (CustomerService.List("eb5eca67-d3f9-4f5d-87b4-06432c2454c4"))
            //    dtos.Add(CustomerService.ToDto());
            //if (CustomerService.List("95865990-dec7-4ee7-ae38-48d407408cf0"))
            //    dtos.Add(CustomerService.ToDto());

            try
            {
                using (var b = new Benchmark("ExportAsync_Test"))
                {
                    var dataArray = await service.ExportAllColumnsAsync(dtos);
                    File.WriteAllBytesAsync(fileName, dataArray);
                }

                Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
            }
            catch (Exception e)
            {
                throw;
            }

        }

    }
}

