


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class SalesOrderOpenListTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory dataBaseFactory { get; set; }

        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;

        public SalesOrderOpenListTests(TestFixture<StartupTest> fixture)
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            try
            {
                var Seq = 0;
                dataBaseFactory = DataBaseFactory.CreateDefault(Configuration["dsn"].ToString());
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        public void Dispose()
        {
        }

        #region sync methods

        #endregion sync methods

        #region async methods

        /// <summary>
        /// only check the query work.
        /// </summary>
        /// <returns></returns>
        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetSalesOrdersOpenListAsync_Test_Simple_Check()
        {
            var qry = new SalesOrderOpenQuery();
            var srv = new SalesOrderOpenList(dataBaseFactory, qry);

            var payload = new SalesOrderOpenPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                IsQueryTotalCount = true,
            };
            payload.Top = 10;
            payload.LoadAll = true;
            payload.Filter = new JObject()
            {
                { "OrderStatus",(int)SalesOrderStatus.Open},
                { "UpdateDateUtcFrom",DateTime.Now.AddMonths(-6).Date},
                { "UpdateDateUtcTo",DateTime.Now.AddDays(1).Date},
            };

            using (var b = new Benchmark("GetSalesOrdersOpenListAsync_Test"))
            {
                await srv.GetSalesOrdersOpenListAsync(payload);
            }

            Assert.True(payload.Success, payload.Messages.ObjectToString());
        }

        /// <summary>
        /// check the result.
        /// </summary>
        /// <returns></returns>
        [Fact()]
        public async Task GetSalesOrdersOpenListAsync_Test_Full_Check()
        {
            var qry = new SalesOrderOpenQuery();
            var srv = new SalesOrderOpenList(dataBaseFactory, qry);

            var payload = new SalesOrderOpenPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                IsQueryTotalCount = true,
            };
            //payload.Top = 20;
            payload.LoadAll = true;
            payload.Filter = new JObject()
            {
                { "OrderStatus",(int)SalesOrderStatus.Open},
                { "UpdateDateUtcFrom",DateTime.Now.AddYears(-1).Date},
                { "UpdateDateUtcTo",DateTime.Now.AddDays(1).Date},
                //{ "OrderNumberFrom","jihcgv92qz6m70j5fykl7aq6v6qemccedc0jij9a7tabf9ei6h"},
                //{ "OrderNumberTo","jihcgv92qz6m70j5fykl7aq6v6qemccedc0jij9a7tabf9ei6h"},

            };

            using (var b = new Benchmark("GetSalesOrdersOpenListAsync_Test"))
            {
                await srv.GetSalesOrdersOpenListAsync(payload);
            }

            Assert.True(payload.Success, payload.Messages.ObjectToString());

            Assert.True(payload.SalesOrderOpenListCount > 0 && !payload.SalesOrderOpenList.ToString().IsZero());

            IList<SalesOrderData> datas = payload.SalesOrderOpenList.ToString().StringToObject<List<SalesOrderData>>();

            Assert.True(datas != null && datas.Count == payload.SalesOrderOpenListCount, "datas.Count should be equal payload.SalesOrderOpenListCount ");
        }

        #endregion async methods

    }
}


