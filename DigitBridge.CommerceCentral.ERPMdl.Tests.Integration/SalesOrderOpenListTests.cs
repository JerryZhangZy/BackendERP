


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class SalesOrderOpenListTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory dataBaseFactory { get; set; }

        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;

        public SalesOrderOpenListTests(TestFixture<StartupTest> fixture)
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            try
            {
                var Seq = 0;
                dataBaseFactory = DataBaseFactory.CreateDefault(Configuration["dsn"].ToString());
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        public void Dispose()
        {
        }

        #region sync methods

        #endregion sync methods

        #region async methods

        /// <summary>
        /// only check the query work.
        /// </summary>
        /// <returns></returns>
        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetSalesOrdersOpenListAsync_Simple_Test()
        {
            var qry = new SalesOrderOpenQuery();
            var srv = new SalesOrderOpenList(dataBaseFactory, qry);

            var payload = new SalesOrderOpenListPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                IsQueryTotalCount = true,
                LoadAll = true
            };

            //payload.Filter = new JObject()
            //{
            //    { "OrderStatus",(int)SalesOrderStatus.Open},
            //    { "UpdateDateUtcFrom",DateTime.UtcNow.AddMonths(-6).Date},
            //    { "UpdateDateUtcTo",DateTime.UtcNow.AddDays(1).Date},
            //};

            using (var b = new Benchmark("GetSalesOrdersOpenListAsync_Test"))
            {
                await srv.GetSalesOrdersOpenListAsync(payload);
            }

            Assert.True(payload.Success, payload.Messages.ObjectToString());
        }

        /// <summary>
        /// check the result.
        /// </summary>
        /// <returns></returns>
        [Fact()]
        public async Task GetSalesOrdersOpenListAsync_Full_Test()
        {
            var data = await GetSalesOrderFromDBAsync();
            var header = data.SalesOrderHeader;
            var info = data.SalesOrderHeaderInfo;

            var payload = new SalesOrderOpenListPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                IsQueryTotalCount = true,
                LoadAll = true,
            };

            var filters = new JObject()
            {
                { "OrderStatus",header.OrderStatus},
                { "UpdateDateUtcFrom",header.UpdateDateUtc},
                { "UpdateDateUtcTo",header.UpdateDateUtc},

                { "SalesOrderUuid",header.SalesOrderUuid },
                { "orderNumberFrom",header.OrderNumber },
                { "orderNumberTo",header.OrderNumber },
                { "orderDateFrom",header.OrderDate},
                { "orderDateTo",header.OrderDate },
                { "shipDateFrom",header.ShipDate},
                { "shipDateTo",header.ShipDate},
                { "orderType",header.OrderType},
                { "orderStatus",header.OrderStatus},
                { "customerCode",header.CustomerCode},
                { "customerName",header.CustomerName},

                { "shippingCarrier",info.ShippingCarrier },
                { "distributionCenterNum",info.DistributionCenterNum },
                { "centralOrderNum",info.CentralOrderNum },
                { "channelNum",info.ChannelNum },
                { "channelAccountNum",info.ChannelAccountNum },
                { "channelOrderID",info.ChannelOrderID },
                { "warehouseCode",info.WarehouseCode},
                { "refNum",info.RefNum },
                { "customerPoNum",info.CustomerPoNum },
                { "shipToName",info.ShipToName },
                { "shipToState",info.ShipToState },
                { "shipToPostalCode",info.ShipToPostalCode }
            };

            var filterList = filters.Properties();
            foreach (var filter in filterList)
            {
                payload.Filter = GetInitFilter(filter);
                await TestFilter(payload, header.RowNum);
            }

            //test all
            payload.Filter = filters;
            await TestFilter(payload, header.RowNum);
        }
        private JObject GetInitFilter(JProperty currentFilter)
        {
            var initFilters = new JObject()
            {
                { "OrderStatus",(int)SalesOrderStatus.Open},
                { "UpdateDateUtcFrom",DateTime.UtcNow.AddYears(-1).Date},
                { "UpdateDateUtcTo",DateTime.UtcNow.AddDays(1).Date},
            };
            if (initFilters.ContainsKey(currentFilter.Name))
            {
                initFilters[currentFilter.Name] = currentFilter.Value;
            }
            else
            {
                initFilters.Add(currentFilter);
            }
            return initFilters;
        }
        private async Task TestFilter(SalesOrderOpenListPayload payload, long expectedRowNum)
        {
            var qry = new SalesOrderOpenQuery();
            var listService = new SalesOrderOpenList(dataBaseFactory, qry);
            await listService.GetSalesOrdersOpenListAsync(payload);

            //make sure query is correct.
            Assert.True(payload.Success, listService.Messages.ObjectToString());

            //make sure InvoiceListCount is matched.
            Assert.True(payload.SalesOrderOpenListCount >= 1, $"TestFilter error. filter data from record by rownum:{expectedRowNum},filter is :{payload.Filter}");

            var queryResult = JArray.Parse(payload.SalesOrderOpenList.ToString());
            
            var rowNumMatchedCount = queryResult.Count(i => i.SelectToken("WMSOrderHeader.RowNum").Value<long>()== expectedRowNum);
            //make sure result data is matched.
            Assert.Equal(1, rowNumMatchedCount);
        }
        #endregion async methods

        #region prepare data
        public async Task<SalesOrderData> GetSalesOrderFromDBAsync()
        {
            //where condition match the init query filter.

            var sql = $@"
SELECT TOP 1 rownum
FROM SalesOrderHeader ins  
WHERE MasterAccountNum={MasterAccountNum}
AND ProfileNum={ProfileNum} 
AND OrderStatus={(int)SalesOrderStatus.Open}
AND UpdateDateUtc >= '{DateTime.UtcNow.AddYears(-1).Date}'
AND UpdateDateUtc <= '{DateTime.UtcNow.AddDays(1).Date}'
order by ins.rownum desc
";

            var rownum = await dataBaseFactory.GetValueAsync<SalesOrderHeader, long>(sql);

            Assert.True(rownum > 0, "No SalesOrder in db");

            var srv = new SalesOrderService(dataBaseFactory);
            var success = await srv.GetDataAsync(rownum);
            Assert.True(success, srv.Messages.ObjectToString());

            return srv.Data;
        }
        #endregion
    }
}


