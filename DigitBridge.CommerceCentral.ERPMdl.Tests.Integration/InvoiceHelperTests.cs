


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class InvoiceHelperTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory DataBaseFactory { get; set; }
        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;

        public InvoiceHelperTests(TestFixture<StartupTest> fixture)
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["dsn"]);
        }
        public void Dispose()
        {
        }


        #region sync methods

        #endregion sync methods

        #region async methods
        [Fact()]
        public async Task PayInvoiceAsync_Test()
        {
            var invoiceData = SaveInvoice();

            var paidAmount = new Random().Next(1, 100);

            var success = await InvoiceHelper.PayInvoiceAsync(invoiceData.InvoiceHeader.InvoiceNumber, paidAmount, MasterAccountNum, ProfileNum);
            Assert.True(success, "call PayInvoiceAsync failed.");

            var invoiceData_Paid = GetInvoiceFromDB(invoiceData.InvoiceHeader.InvoiceNumber);


            success = paidAmount == invoiceData_Paid.InvoiceHeader.PaidAmount - invoiceData.InvoiceHeader.PaidAmount;
            Assert.True(success, "paidAmount is error.");

            success = paidAmount == invoiceData.InvoiceHeader.Balance - invoiceData_Paid.InvoiceHeader.Balance;
            Assert.True(success, "Balance is error.");
        }
        #endregion async methods


        protected InvoiceData GetFakerData()
        {
            var data = InvoiceDataTests.GetFakerData();
            data.InvoiceHeader.MasterAccountNum = MasterAccountNum;
            data.InvoiceHeader.ProfileNum = ProfileNum;

            foreach (var item in data.InvoiceItems)
            {
                item.DiscountAmount = 0;
            }
            data.InvoiceHeader.InvoiceNumber = NumberGenerate.Generate();
            return data;
        }

        protected InvoiceData SaveInvoice()
        {
            var srv = new InvoiceService(DataBaseFactory);
            srv.Add();

            var mapper = srv.DtoMapper;
            var data = GetFakerData();
            var dto = mapper.WriteDto(data, null);
            var success = srv.Add(dto);
            Assert.True(success, srv.Messages.ObjectToString());
            return srv.Data;
        }

        protected InvoiceData GetInvoiceFromDB(string invoiceNumber)
        {
            var srv = new InvoiceService(DataBaseFactory);
            srv.List();
            var success = srv.GetByNumber(MasterAccountNum, ProfileNum, invoiceNumber);
            Assert.True(success, srv.Messages.ObjectToString());
            return srv.Data;
        }
    }
}


