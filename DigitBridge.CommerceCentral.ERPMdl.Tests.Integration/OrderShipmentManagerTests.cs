


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class OrderShipmentManagerTests
    {
        #region get faker data
        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;
         
        protected async Task<OrderShipmentData> SaveShipmentAndSalesOrder()
        {
            var skus = InventoryDataTests.GetInventories(DataBaseFactory);

            var shipmentService = new OrderShipmentService(DataBaseFactory);
            var shipmentDto = OrderShipmentDataDtoTests.GetFakerDataDto(DataBaseFactory, skus);
            var success = await shipmentService.AddAsync(shipmentDto);
            Assert.True(success && shipmentService.Data.OrderShipmentHeader.OrderShipmentNum > 0, shipmentService.Messages.ObjectToString());

            await SaveSalesOrder(shipmentService.Data, skus);

            return shipmentService.Data;
        }
        protected async Task SaveSalesOrder(OrderShipmentData shipmentData, Inventory[] skus)
        {
            var salesorderService = new SalesOrderService(DataBaseFactory);
            var salesorderDataDto = SalesOrderDataDtoTests.GetFakerSalesorderDataDto(shipmentData, skus);
            var success = await salesorderService.AddAsync(salesorderDataDto);
            Assert.True(success, salesorderService.Messages.ObjectToString());

            //add misinvoice info.
            var soHeader = salesorderService.Data.SalesOrderHeader;
            var salesOrderPayload = new SalesOrderPayload()
            {
                MasterAccountNum = soHeader.MasterAccountNum,
                ProfileNum = soHeader.ProfileNum,
            };
            success = await salesorderService.AddPrepaymentAsync(salesOrderPayload, soHeader.OrderNumber, soHeader.DepositAmount);
            Assert.True(success, salesorderService.Messages.ObjectToString());

        }
        #endregion

        [Fact()]
        public async Task CreateShipmentAsync_Test()
        {
            var shipmentData = await SaveShipmentAndSalesOrder();

            var dto = new OrderShipmentDataDtoMapperDefault().WriteDto(shipmentData);
            var payload = new OrderShipmentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                OrderShipment = dto,
            };
            var srv = new OrderShipmentManager(DataBaseFactory);
            var success = await srv.CreateShipmentAsync(payload);
            Assert.True(success, srv.Messages.ObjectToString());

            var shipmentService = new OrderShipmentService(DataBaseFactory);
            success = await shipmentService.GetDataByIdAsync(shipmentData.UniqueId);
            Assert.True(success, shipmentService.Messages.ObjectToString());

            Assert.Equal(payload.OrderShipment.OrderShipmentHeader.ShipmentStatus, (int)OrderShipmentStatusEnum.Pending);
        }
    }
}



