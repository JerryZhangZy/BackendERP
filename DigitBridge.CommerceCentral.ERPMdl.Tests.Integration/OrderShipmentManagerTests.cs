


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using DigitBridge.Base.Common;
using Newtonsoft.Json;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class OrderShipmentManagerTests
    {
        #region get faker data
        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;

        protected async Task<InputOrderShipmentType> GetWmsShipmentWithSavedSalesOrder()
        {
            var orderDCAssignmentNum = new Random().Next(1, 100000).ToLong();
            var skus = InventoryDataTests.GetInventories(DataBaseFactory);
            await SaveSalesOrder(orderDCAssignmentNum, skus);

            return new InputOrderShipmentType()
            {
                ShipmentHeader = new InputOrderShipmentHeaderType()
                {
                    ChannelOrderID = new Random().Next(1, 100).ToString(),
                    ShipmentID = Guid.NewGuid().ToString(),
                    MainTrackingNumber = Guid.NewGuid().ToString(),
                    OrderDCAssignmentNum = orderDCAssignmentNum,
                },
                PackageItems = new List<InputOrderShipmentPackageItemsType>()
                {
                    new InputOrderShipmentPackageItemsType()
                    {
                         ShipmentPackage=new InputOrderShipmentPackageType ()
                         {
                              PackageID=Guid.NewGuid().ToString(),
                              PackageQty=new Random().Next(1,100),
                              PackageTrackingNumber=Guid.NewGuid().ToString(),
                         },
                        ShippedItems=new List<InputOrderShipmentShippedItemType> ()
                        {
                            new InputOrderShipmentShippedItemType()
                            {
                                CentralOrderLineNum=new Random().Next(1,100),
                                ShippedQty=new Random().Next(1,100),
                                SKU=Guid.NewGuid().ToString(),

                            },
                        },
                    }
                }
            };
        }

        protected async Task<OrderShipmentDataDto> GetShipmenDtotWithSavedSalesOrder()
        {
            var skus = InventoryDataTests.GetInventories(DataBaseFactory);

            var shipmentData = OrderShipmentDataTests.GetFakerData_SkuInDB(DataBaseFactory, skus);
            var orderDCAssignmentNum = new Random().Next(1, 100000).ToLong();
            shipmentData.OrderShipmentHeader.ProcessStatus = int.MinValue;
            shipmentData.OrderShipmentHeader.OrderDCAssignmentNum = orderDCAssignmentNum;
            await SaveSalesOrder(orderDCAssignmentNum, skus);
            return new OrderShipmentDataDtoMapperDefault().WriteDto(shipmentData);
        }
        protected async Task SaveSalesOrder(long orderDCAssignmentNum, Inventory[] skus)
        {
            var salesorderService = new SalesOrderService(DataBaseFactory);
            var salesorderDataDto = SalesOrderDataDtoTests.GetFakerSalesorderDataDto(orderDCAssignmentNum, skus);
            var success = await salesorderService.AddAsync(salesorderDataDto);
            Assert.True(success, salesorderService.Messages.ObjectToString());

            //add misinvoice info.
            var soHeader = salesorderService.Data.SalesOrderHeader;
            var salesOrderPayload = new SalesOrderPayload()
            {
                MasterAccountNum = soHeader.MasterAccountNum,
                ProfileNum = soHeader.ProfileNum,
            };
            success = await salesorderService.AddPrepaymentAsync(salesOrderPayload, soHeader.OrderNumber, soHeader.DepositAmount);
            Assert.True(success, salesorderService.Messages.ObjectToString());

        }
        #endregion

        [Fact()]
        public async Task CreateShipmentAsync_Test()
        {
            var wmsShipment = await GetWmsShipmentWithSavedSalesOrder();
            //copy json data to postman for test create shipment from wms shipment.
            var jsonData = JsonConvert.SerializeObject(wmsShipment);
            var payload = new OrderShipmentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
            };
            var srv = new OrderShipmentManager(DataBaseFactory);
            var result = (await srv.CreateShipmentAsync(payload, wmsShipment));
            Assert.True(result.Success, srv.Messages.ObjectToString());

            Assert.True(!result.InvoiceUuid.IsZero(), "Shipment Added. But invoice was not transferred.");

            //var shipmentService = new OrderShipmentService(DataBaseFactory);
            //success = await shipmentService.GetDataByIdAsync(payload.OrderShipment.OrderShipmentHeader.OrderShipmentUuid);
            //Assert.True(success, shipmentService.Messages.ObjectToString());

            //Assert.Equal(payload.OrderShipment.OrderShipmentHeader.ProcessStatus, (int)OrderShipmentStatusEnum.Pending);
        }
    }
}



