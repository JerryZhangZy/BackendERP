


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class OrderShipmentManagerTests
    {
        #region get faker data
        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;
        protected Inventory[] GetInventories(int count = 10)
        {
            return InventoryDataTests.GetInventories(DataBaseFactory, count);
        }
        protected OrderShipmentDataDto GetFakerDataDto(Inventory[] inventories = null)
        {
            var data = OrderShipmentDataTests.GetFakerData_SkuInDB(DataBaseFactory, inventories);
            data.OrderShipmentHeader.OrderDCAssignmentNum = new Random().Next(1, 100000);
            data.OrderShipmentHeader.ShipmentStatus = int.MinValue;

            var mapper = new OrderShipmentDataDtoMapperDefault();
            return mapper.WriteDto(data, null);
        }

        protected SalesOrderDataDto GetFakerSalesorderDataDto(OrderShipmentData shipmentData, Inventory[] inventories)
        {
            var data = SalesOrderDataTests.GetFakerData();
            data.SalesOrderHeader.OrderSourceCode = $"OrderDCAssignmentNum:{shipmentData.OrderShipmentHeader.OrderDCAssignmentNum}";
            for (int i = 0; i < data.SalesOrderItems.Count; i++)
            {
                var item = data.SalesOrderItems[i];

                item.DiscountAmount = 0;
                item.ShipQty = new Random().Next(10, 100);//TOdo set to shipment shipqty

                var inventory = inventories[i];
                item.WarehouseCode = inventory.WarehouseCode;
                item.WarehouseUuid = inventory.WarehouseUuid;
                item.SKU = inventory.SKU;
                item.InventoryUuid = inventory.InventoryUuid;
                item.ProductUuid = inventory.ProductUuid;
            }
            data.SalesOrderHeader.MasterAccountNum = MasterAccountNum;
            data.SalesOrderHeader.ProfileNum = ProfileNum;
            data.SalesOrderHeader.OrderNumber = NumberGenerate.Generate();
            var mapper = new SalesOrderDataDtoMapperDefault();
            return mapper.WriteDto(data, null);
        }


        protected async Task<OrderShipmentData> SaveShipment()
        {
            var skus = GetInventories();

            var shipmentService = new OrderShipmentService(DataBaseFactory);
            var shipmentDto = GetFakerDataDto(skus);
            var success = await shipmentService.AddAsync(shipmentDto);
            Assert.True(success && shipmentService.Data.OrderShipmentHeader.OrderShipmentNum > 0, shipmentService.Messages.ObjectToString());

            var salesorderService = new SalesOrderService(DataBaseFactory);
            var salesorderDataDto = GetFakerSalesorderDataDto(shipmentService.Data, skus);
            success = await salesorderService.AddAsync(salesorderDataDto);
            Assert.True(success, salesorderService.Messages.ObjectToString());

            return shipmentService.Data;
        }

        #endregion

        [Fact()]
        public async Task CreateShipmentAsync_Test()
        {
            var shipmentData = await SaveShipment();

            var dto = new OrderShipmentDataDtoMapperDefault().WriteDto(shipmentData);
            var payload = new OrderShipmentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                OrderShipment = dto,
            };
            var srv = new OrderShipmentManager(DataBaseFactory);
            var success = await srv.CreateShipmentAsync(payload);
            Assert.True(success, srv.Messages.ObjectToString());

            var shipmentService = new OrderShipmentService(DataBaseFactory);
            success = await shipmentService.GetDataByIdAsync(shipmentData.UniqueId);
            Assert.True(success, shipmentService.Messages.ObjectToString());

            Assert.Equal(payload.OrderShipment.OrderShipmentHeader.ShipmentStatus, (int)ShipmentStatus.Pending);
        }
        [Fact()]
        public async Task CreateInvoiceFromShipmentAsync_Test()
        {
            var shipmentData = await SaveShipment();
            var managerService = new OrderShipmentManager(DataBaseFactory);
            var success = await managerService.CreateInvoiceFromShipmentAsync(shipmentData);
            Assert.True(success, managerService.Messages.ObjectToString());
            Assert.False(string.IsNullOrEmpty(shipmentData.OrderShipmentHeader.InvoiceNumber));
            //InvoiceNumber is not saved to db.
            //var invoiceNumber = shipmentData.OrderShipmentHeader.InvoiceNumber;

            //var shipmentService = new OrderShipmentService(DataBaseFactory);
            //shipmentService.GetDataById(shipmentData.UniqueId);
            //Assert.Equal(invoiceNumber, shipmentService.Data.OrderShipmentHeader.InvoiceNumber);
        }


    }
}



