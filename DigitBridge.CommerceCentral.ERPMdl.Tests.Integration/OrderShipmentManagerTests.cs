


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using DigitBridge.Base.Common;
using Newtonsoft.Json;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class OrderShipmentManagerTests
    {
        #region get faker data
        public const int MasterAccountNum = 10002;
        public const int ProfileNum = 10003;

        protected async Task<InputOrderShipmentType> GetWmsShipmentWithSavedSalesOrder()
        {
            //var orderDCAssignmentNum = new Random().Next(1, 100000).ToLong();
            //var skus = InventoryDataTests.GetInventories(DataBaseFactory);
            //await SaveSalesOrder(orderDCAssignmentNum, skus);


            return new InputOrderShipmentType()
            {
                ShipmentHeader = new InputOrderShipmentHeaderType()
                {
                    WarehouseCode= "Test WarehouseCode", 
                    ShipmentID = Guid.NewGuid().ToString(),

                    SalesOrderUuid = "716bcd22-3779-45db-a443-1b274995c394",
                    ChannelOrderID = "1000005290", //new Random().Next(1, 100).ToString(),
                    OrderDCAssignmentNum = 2130, //orderDCAssignmentNum,
                    CentralOrderNum = 100008933,
                    ShippingCarrier = "UPS",
                    ShippingClass = "Shipping Table Rates - 2Day Shipping",
                    ShippingCost = 100,
                    MainTrackingNumber = "MainTrackingNumber-1Z3848905850431111",
                    MainReturnTrackingNumber = "MainReturnTrackingNumber-1Z38489058504392222",
                },
                PackageItems = new List<InputOrderShipmentPackageItemsType>()
                {
                    new InputOrderShipmentPackageItemsType()
                    {
                         ShipmentPackage=new InputOrderShipmentPackageType ()
                         {
                              PackageID=Guid.NewGuid().ToString(),
                              PackageQty=3, //new Random().Next(1,100),
                              PackageTrackingNumber="PackageTrackingNumber-1Z384890585043943333",//Guid.NewGuid().ToString(),
                         },
                        ShippedItems=new List<InputOrderShipmentShippedItemType> ()
                        {
                            new InputOrderShipmentShippedItemType()
                            {
                                SalesOrderItemsUuid = "2e0402bc-eff4-400f-a3ad-7b81da73b61e",
                                CentralOrderLineNum=1, //new Random().Next(1,100),
                                ShippedQty=1, //new Random().Next(1,100),
                                SKU="SB3601596-3197DKINDIGO-29-STD", //Guid.NewGuid().ToString(),
                            },
                            new InputOrderShipmentShippedItemType()
                            {
                                SalesOrderItemsUuid = "d250bb49-7db5-49bc-a7ca-b70bed011678",
                                CentralOrderLineNum=2, //new Random().Next(1,100),
                                ShippedQty=1, //new Random().Next(1,100),
                                SKU="SB3601596-3197DKINDIGO-31-STD", //Guid.NewGuid().ToString(),
                            },
                            new InputOrderShipmentShippedItemType()
                            {
                                SalesOrderItemsUuid = "214927b0-1cee-4372-b605-4835bb10e14b",
                                CentralOrderLineNum=3, //new Random().Next(1,100),
                                ShippedQty=1, //new Random().Next(1,100),
                                SKU="SB3601596-3197DKINDIGO-30-STD", //Guid.NewGuid().ToString(),
                            },
                        },
                    }
                }
            };
        }

        protected async Task<OrderShipmentDataDto> GetShipmenDtotWithSavedSalesOrder()
        {
            var skus = InventoryDataTests.GetInventories(DataBaseFactory);

            var shipmentData = OrderShipmentDataTests.GetFakerData_SkuInDB(DataBaseFactory, skus);
            var orderDCAssignmentNum = new Random().Next(1, 100000).ToLong();
            shipmentData.OrderShipmentHeader.ProcessStatus = int.MinValue;
            shipmentData.OrderShipmentHeader.OrderDCAssignmentNum = orderDCAssignmentNum;
            await SaveSalesOrder(orderDCAssignmentNum, skus);
            return new OrderShipmentDataDtoMapperDefault().WriteDto(shipmentData);
        }
        protected async Task SaveSalesOrder(long orderDCAssignmentNum, Inventory[] skus)
        {
            var salesorderService = new SalesOrderService(DataBaseFactory);
            var salesorderDataDto = SalesOrderDataDtoTests.GetFakerSalesorderDataDto(orderDCAssignmentNum, skus);
            var success = await salesorderService.AddAsync(salesorderDataDto);
            Assert.True(success, salesorderService.Messages.ObjectToString());

            //add misinvoice info.
            var soHeader = salesorderService.Data.SalesOrderHeader;
            var salesOrderPayload = new SalesOrderPayload()
            {
                MasterAccountNum = soHeader.MasterAccountNum,
                ProfileNum = soHeader.ProfileNum,
            };
            success = await salesorderService.AddPrepaymentAsync(salesOrderPayload, soHeader.OrderNumber, soHeader.DepositAmount);
            Assert.True(success, salesorderService.Messages.ObjectToString());

        }
        #endregion

        [Fact()]
        public async Task CreateShipmentAsync_Test()
        {
            var wmsShipment = await GetWmsShipmentWithSavedSalesOrder();
            //copy json data to postman for test create shipment from wms shipment.
            var jsonData = JsonConvert.SerializeObject(wmsShipment);
            var payload = new OrderShipmentCreateResultPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
            };
            var srv = new OrderShipmentManager(DataBaseFactory);
            var result = (await srv.CreateShipmentAsync(wmsShipment, payload));
            Assert.True(result, srv.Messages.ObjectToString());

            Assert.True(!payload.InvoiceUuid.IsZero(), "Shipment Added. But invoice was not transferred.");

            //var shipmentService = new OrderShipmentService(DataBaseFactory);
            //success = await shipmentService.GetDataByIdAsync(payload.OrderShipment.OrderShipmentHeader.OrderShipmentUuid);
            //Assert.True(success, shipmentService.Messages.ObjectToString());

            //Assert.Equal(payload.OrderShipment.OrderShipmentHeader.ProcessStatus, (int)OrderShipmentStatusEnum.Pending);
        }
        [Fact()]
        public async Task CreateShipmentAsync_For_Wms_Test()
        {
            //To get  processuuid from event process which eventprocesstype is shipmentfromwms.
            var shipmentID = "113-10000001812";

            var payload = new OrderShipmentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
            };
            var srv = new OrderShipmentManager(DataBaseFactory);
            var result = await srv.CreateShipmentAsync(payload, shipmentID);
            Assert.True(result, srv.Messages.ObjectToString());
        }


        [Fact()]
        public async Task CreateShipmentListAsync_Test()
        {
            var wmsShipmentList = new List<InputOrderShipmentType>();
            int i = 0;
            while (i < 10)
            {
                wmsShipmentList.Add(await GetWmsShipmentWithSavedSalesOrder());
                i++;
            }

            var payload = new OrderShipmentPayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
            };

            using (var b = new Benchmark("CreateSalesOrderByChannelOrderIdAsync_Test"))
            {
                var srv = new OrderShipmentManager(DataBaseFactory);
                var result = await srv.CreateShipmentListAsync(payload, wmsShipmentList);
                var success = result.Count(i => !i.Success) == 0;
                Assert.True(success, result.SelectMany(i => i.Messages).ObjectToString());
            }
        }
    }
}



