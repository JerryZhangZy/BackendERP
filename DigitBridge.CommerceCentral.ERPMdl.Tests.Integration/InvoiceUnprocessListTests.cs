


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using Newtonsoft.Json;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class InvoiceUnprocessListTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory DataBaseFactory { get; set; }
        public const int MasterAccountNum = 10001;
        public const int ProfileNum = 10001;
        public InvoiceUnprocessListTests(TestFixture<StartupTest> fixture)
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            try
            {
                var Seq = 0;
                DataBaseFactory = YoPoco.DataBaseFactory.CreateDefault(Configuration["dsn"].ToString());
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        public void Dispose()
        {
        }


        #region sync methods

        #endregion sync methods

        #region async methods
        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetInvoiceListAsync_Simple_Test()
        {
            var payload = new InvoicePayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                LoadAll = true
            };

            var listService = new InvoiceUnprocessList(this.DataBaseFactory);
            await listService.GetInvoiceUnprocessListAsync(payload);

            //make sure query is correct.
            Assert.True(payload.Success, listService.Messages.ObjectToString());
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async Task GetInvoiceListAsync_Full_Test()
        {
            // get event process from db.
            //var eventProcess =
            var invoice = await InvoiceDataTests.GetInvoiceFromDBAsync(this.DataBaseFactory);
            var header = invoice.InvoiceHeader;
            var headerInfo = invoice.InvoiceHeaderInfo;

            var payload = new InvoicePayload()
            {
                MasterAccountNum = MasterAccountNum,
                ProfileNum = ProfileNum,
                LoadAll = true,
            };
            var filters = new JObject()
            {
                {"ChannelNum",  $"{headerInfo.ChannelNum}"},
                {"ChannelAccountNum", $"{headerInfo.ChannelAccountNum}"},
                //{"EventProcessActionStatus", $"{headerInfo.ChannelAccountNum}"}, 
            };

            var filterList = filters.Properties();
            foreach (var filter in filterList)
            {
                payload.Filter = GetInitFilter(filter);
                await TestFilter(payload, header.RowNum);
            }

            //test all
            payload.Filter = filters;
            await TestFilter(payload, header.RowNum);
        }
        private JObject GetInitFilter(JProperty currentFilter)
        {
            var initFilters = new JObject()
            {
                { "EventProcessActionStatus",(int)EventProcessActionStatusEnum.Default},
            };
            if (initFilters.ContainsKey(currentFilter.Name))
            {
                initFilters[currentFilter.Name] = currentFilter.Value;
            }
            else
            {
                initFilters.Add(currentFilter);
            }
            return initFilters;
        }
        private async Task TestFilter(InvoicePayload payload, long expectedRowNum)
        {
            var listService = new InvoiceUnprocessList(this.DataBaseFactory);
            await listService.GetInvoiceUnprocessListAsync(payload);

            //make sure query is correct.
            Assert.True(payload.Success, listService.Messages.ObjectToString());

            //make sure InvoiceListCount is matched.
            Assert.True(payload.InvoiceListCount >= 1, $"TestFilter error. filter data from record by rownum:{expectedRowNum},filter is :{payload.Filter}");

            var queryResult = JArray.Parse(payload.InvoiceList.ToString());
            var rowNumMatchedCount = queryResult.Count(i => i.Value<long>("rowNum") == expectedRowNum);
            //make sure result data is matched.
            Assert.Equal(1, rowNumMatchedCount);
        }


//        private dynamic GetEventProcess()
//        {
//            var sql = $@"
//SELECT TOP 1 rownum,ProcessUuid,ActionStatus,ChannelNum,ChannelAccountNum
//FROM EventProcessERP ins  
//WHERE [MasterAccountNum]={MasterAccountNum}
//AND [ProfileNum]={ProfileNum}
//AND ERPEventProcessType={(int)EventProcessTypeEnum.InvoiceToChanel}
//order by ins.rownum desc
//";
//            var rownum = this.DataBaseFactory.;
//        }
        #endregion async methods 
    }
}


