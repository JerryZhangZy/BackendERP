    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class SystemSettingService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override SystemSettingService Init()
        {
            base.Init();
            SetDtoMapper(new SystemSettingDataDtoMapperDefault());
            SetCalculator(new SystemSettingServiceCalculatorDefault(this,this.dbFactory));
            AddValidator(new SystemSettingServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(SystemSettingDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(SystemSettingDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(SystemSettingPayload payload)
        {
            if (payload is null || !payload.HasSystemSetting)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.SystemSetting))
                return false;

            // load data from dto
            FromDto(payload.SystemSetting);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(SystemSettingPayload payload)
        {
            if (payload is null || !payload.HasSystemSetting)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.SystemSetting)))
                return false;

            // load data from dto
            FromDto(payload.SystemSetting);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(SystemSettingDataDto dto)
        {
            if (dto is null || !dto.HasSystemSetting)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.SystemSetting.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(SystemSettingDataDto dto)
        {
            if (dto is null || !dto.HasSystemSetting)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.SystemSetting.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(SystemSettingPayload payload)
        {
            if (payload is null || !payload.HasSystemSetting || payload.SystemSetting.SystemSetting.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.SystemSetting))
                return false;

            // load data 
            GetData(payload.SystemSetting.SystemSetting.RowNum.ToLong());

            // load data from dto
            FromDto(payload.SystemSetting);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(SystemSettingPayload payload)
        {
            if (payload is null || !payload.HasSystemSetting)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.SystemSetting)))
                return false;

            // load data 
            await GetDataAsync(payload.SystemSetting.SystemSetting.RowNum.ToLong());

            // load data from dto
            FromDto(payload.SystemSetting);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(SystemSettingPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(SystemSettingPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(SystemSettingPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(SystemSettingPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        public virtual async Task<long> GetRowNumAsync(SystemSettingPayload payload)
        {
            return (await dbFactory.GetValueAsync<SystemCodes, long?>(
                "SELECT TOP 1 RowNum FROM SystemSetting WHERE MasterAccountNum=@0 AND ProfileNum=@1",
                    payload.MasterAccountNum,
                    payload.ProfileNum
                )).ToLong();
        }
        public virtual async Task<bool> AddOrUpdateAsync(SystemSettingPayload payload)
        {
            if (payload is null || !payload.HasSystemSetting)
                return false;

            // get RowNum by SystemCodeName
            var rowNum = await GetRowNumAsync(payload);

            // if not exist rowNum then add new record
            if (rowNum == 0)
            {
                return await AddAsync(payload);
            }
            // if exist rowNum then update record
            payload.SystemSetting.SystemSetting.RowNum = rowNum;
            return await UpdateAsync(payload);
        }

        public virtual SystemSettingDto GetNewSystemSetting(int databaseNum, int masterAccountNum, int profileNum)
        {
            return new SystemSettingDto()
            {
                DatabaseNum = databaseNum,
                MasterAccountNum = masterAccountNum,
                ProfileNum = profileNum,
                //SystemSettingUuid = Guid.NewGuid().ToString(),
                //Fields = new Newtonsoft.Json.Linq.JObject()
            };
        }

        public virtual async Task<bool> GetAsync(SystemSettingPayload payload)
        {
            if (payload is null)
                return false;

            // get RowNum by SystemSettingName
            var rowNum = await GetRowNumAsync(payload);

            // if not exist rowNum then add new record
            if (rowNum == 0 || !(await GetDataAsync(rowNum)))
            {
                if (payload.SystemSetting == null)
                    payload.SystemSetting = new SystemSettingDataDto();
                payload.SystemSetting.SystemSetting =
                    GetNewSystemSetting(payload.DatabaseNum, payload.MasterAccountNum, payload.ProfileNum);
                return true;
            }
            payload.SystemSetting = this.ToDto();

            return true;
        }
    }
}



