    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using System.Xml.Serialization;
using Newtonsoft.Json.Linq;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class InitNumbersService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override InitNumbersService Init()
        {
            base.Init();
            SetDtoMapper(new InitNumbersDataDtoMapperDefault());
            SetCalculator(new InitNumbersServiceCalculatorDefault(this,this.dbFactory));
            AddValidator(new InitNumbersServiceValidatorDefault(this, this.dbFactory));
            return this;
        }
        [XmlIgnore, JsonIgnore]
        protected InitNumbersList _initNumbersList;
        [XmlIgnore, JsonIgnore]
        public InitNumbersList initNumbersList
        {
            get
            {
                if (_initNumbersList is null)
                    _initNumbersList = new InitNumbersList(dbFactory);
                return _initNumbersList;
            }
        }

        public virtual async Task<bool> GetByInitNumbersUuidAsync(int masterAccountNum, int profileNum, string initNumbersUuid)
        {
                var rownum = await InitNumbersHelper.GetRowNumByInitNumbersUuidAsync(masterAccountNum, profileNum, initNumbersUuid);
                GetData(rownum);
            return true;
        }




        public async Task<InitNumbersPayload> GetInitNumbersForCustomer(int masterAccountNum,int profileNum, string customerUuid)
        {
            var payload = new InitNumbersPayload()
            {
                MasterAccountNum = masterAccountNum,
                ProfileNum = profileNum
            };
            payload.LoadAll = true;
            payload.Filter = new JObject()
            {
                {"CustomerUuid",  $"{customerUuid}"},
            };
                return await _initNumbersList.GetInitNumbersListAsync(payload);
        }
        public async Task<string>  GetInitNumberForCustomerAsync(int masterAccountNum, int profileNum, string customerUuid,string type)
        {
                return await InitNumbersHelper.GetNextNumberAsync(masterAccountNum, profileNum, customerUuid, type);
        }
 

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(InitNumbersDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(InitNumbersDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumbers)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.InitNumbers))
                return false;

            // load data from dto
            FromDto(payload.InitNumbers);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumbers)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.InitNumbers)))
                return false;

            // load data from dto
            FromDto(payload.InitNumbers);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InitNumbersDataDto dto)
        {
            if (dto is null || !dto.HasInitNumbers)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InitNumbersDataDto dto)
        {
            if (dto is null || !dto.HasInitNumbers)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumbers || payload.InitNumbers.InitNumbers.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.InitNumbers))
                return false;

            // load data 
            GetData(payload.InitNumbers.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(payload.InitNumbers);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumbers)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.InitNumbers)))
                return false;

            // load data 
            await GetDataAsync(payload.InitNumbers.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(payload.InitNumbers);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(InitNumbersPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(InitNumbersPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(InitNumbersPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(InitNumbersPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }



        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByInitNumbersUuidAsync(InitNumbersPayload payload, string initNumbersUuid)
        {
                if (string.IsNullOrEmpty(initNumbersUuid))
                    return false;
                //set delete mode
                Delete();
                //load data
                var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, initNumbersUuid);
                success = success && DeleteData();
                return success;
        }
    }
}



