    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using System.Xml.Serialization;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class InitNumbersService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override InitNumbersService Init()
        {
            base.Init();
            SetDtoMapper(new InitNumbersDataDtoMapperDefault());
            SetCalculator(new InitNumbersServiceCalculatorDefault(this,this.dbFactory));
            AddValidator(new InitNumbersServiceValidatorDefault(this, this.dbFactory));
            return this;
        }
        [XmlIgnore, JsonIgnore]
        protected InitNumbersList _initNumbersList;
        [XmlIgnore, JsonIgnore]
        public InitNumbersList initNumbersList
        {
            get
            {
                if (_initNumbersList is null)
                    _initNumbersList = new InitNumbersList(dbFactory);
                return _initNumbersList;
            }
        }



        #region 2021-12-4 wzj

        public async Task<string> GetNextNumberAsync(int masterAccountNum, int profileNum, ActivityLogType activityLogType)
        {
            string nextMaxNumber;
            using (var trs = new ScopedTransaction(dbFactory))
            {
                nextMaxNumber = await InitNumbersHelper.GetNextNumberAsync(masterAccountNum, profileNum, activityLogType);

            }
            using (var trs = new ScopedTransaction(dbFactory))
            {
                if (string.IsNullOrWhiteSpace(nextMaxNumber))
                    return await InitNumbersHelper.GetNumberAsync(masterAccountNum, profileNum, activityLogType);
                else
                    return nextMaxNumber;
            }
       
        }

        public  string  GetNextNumber(int masterAccountNum, int profileNum, ActivityLogType activityLogType)
        {
            string nextMaxNumber;
            using (var trs = new ScopedTransaction(dbFactory))
            {
                nextMaxNumber =  InitNumbersHelper.GetNextNumber(masterAccountNum, profileNum, activityLogType);

            }
            using (var trs = new ScopedTransaction(dbFactory))
            {
                if (string.IsNullOrWhiteSpace(nextMaxNumber))
                    return  InitNumbersHelper.GetNumber(masterAccountNum, profileNum, activityLogType);
                else
                    return nextMaxNumber;
            }

        }

        public async Task<bool> UpdateMaxNumberAsync(int masterAccountNum, int profileNum, ActivityLogType activityLogType, string maxNumber)
        {
            if (maxNumber.ToLong() <= 0)
                return true;

            string sql = "Update   InitNumbers Set MaxNumber=@0 where MasterAccountNum=@1 and ProfileNum=@2 and Type=@3 and MaxNumber<@0";
               
            
                return (await dbFactory.Db.ExecuteAsync(sql,
                      maxNumber.ToLong().ToSqlParameter("@0"),
                  masterAccountNum.ToSqlParameter("@1"),
                  profileNum.ToSqlParameter("@2"),
                     ((int)activityLogType).ToString().ToSqlParameter("@3")
                  )) == 1;
        }
        public   bool UpdateMaxNumber(int masterAccountNum, int profileNum, ActivityLogType activityLogType, string maxNumber)
        {
            if (maxNumber.ToLong() <= 0)
                return true;

            string sql = "Update   InitNumbers Set MaxNumber=@0 where MasterAccountNum=@1 and ProfileNum=@2 and Type=@3 and MaxNumber<@0";


            return ( dbFactory.Db.Execute(sql,
                  maxNumber.ToLong().ToSqlParameter("@0"),
              masterAccountNum.ToSqlParameter("@1"),
              profileNum.ToSqlParameter("@2"),
                 ((int)activityLogType).ToString().ToSqlParameter("@3")
              )) == 1;
        }

        #endregion


      
 
        public async Task<bool> UpdateInitNumberForCustomerAsync(int masterAccountNum, int profileNum, string customerUuid, string type, string currentNumber)
        {
          

              var initNumbers = InitNumbersHelper.GetInitNumbersAsync(dbFactory, masterAccountNum, profileNum, customerUuid, type);

             GetData(initNumbers.rowNum);
 
            int currentNum = GetCurrentNumber(currentNumber, initNumbers.prefix, initNumbers.suffix);
            _data.InitNumbers.CurrentNumber = currentNum;
           return await _data.SaveAsync();
           
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(InitNumbersDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result = await SaveDataAsync();
            if (result)
                await AddActivityLogForCurrentDataAsync();
            return result;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InitNumbersDataDto dto)
        {
            if (dto is null || !dto.HasInitNumbers)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
            
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumberss)
                return false;

            var dataList = await GetAllInitNumbersAsync(payload.MasterAccountNum, payload.ProfileNum);
            if (dataList == null || dataList.Count == 0)
            {
                dataList = await InitNumbersAsync(payload.DatabaseNum, payload.MasterAccountNum, payload.ProfileNum);
            }

            foreach (var initNumberDto in payload.InitNumbers)
            {
                var dto = initNumberDto.InitNumbers;
                var existData = dataList.FirstOrDefault(x => x.Type.EqualsIgnoreSpace(dto.Type));
                if (existData == null) continue;
                if (
                    dto.CustomerUuid == existData.CustomerUuid &&
                    dto.InActive == existData.InActive &&
                    dto.Type == existData.Type &&
                    dto.CurrentNumber == existData.CurrentNumber &&
                    dto.MaxNumber == existData.MaxNumber &&
                    dto.Number == existData.Number &&
                    dto.Prefix == existData.Prefix &&
                    dto.Suffix == existData.Suffix
                ) continue;

                dto.RowNum = existData.RowNum;
                dto.DatabaseNum = existData.DatabaseNum;
                dto.MasterAccountNum = existData.MasterAccountNum;
                dto.ProfileNum = existData.ProfileNum;
                dto.InitNumbersUuid = existData.InitNumbersUuid;
                await UpdateAsync(initNumberDto);
            }

            return await GetAllInitNumbersAsync(payload);
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(InitNumbersPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(InitNumbersPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(InitNumbersPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            if (success)
            {
                await DeleteDataAsync();
            }
 
            return false;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(InitNumbersPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            if (success)
            {
                if (DeleteData())
                {
                     
                    return true;

                }
            }

            return false;
        }



        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByInitNumbersUuidAsync(InitNumbersPayload payload, string initNumbersUuid)
        {
                if (string.IsNullOrEmpty(initNumbersUuid))
                    return false;
                //set delete mode
                Delete();
                //load data
                var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, initNumbersUuid);
            if (success)
            {
                return await DeleteDataAsync();
                
            }
            return false;
        }


        private  int GetCurrentNumber(string fullStrNumber, string prefix, string suffix)
        {
            if (!string.IsNullOrWhiteSpace(prefix) &&fullStrNumber.StartsWith(prefix))
            {
                fullStrNumber = fullStrNumber.Remove(0, prefix.Length);
            }

            if (!string.IsNullOrWhiteSpace(suffix) && fullStrNumber.EndsWith(suffix))
            {
                fullStrNumber = fullStrNumber.Remove(fullStrNumber.Length - suffix.Length);
            }

            return int.Parse( fullStrNumber);

        }


        public virtual async Task<bool> InitNumbersAsync(InitNumbersPayload payload)
        {
            await InitNumbersAsync(payload.DatabaseNum, payload.MasterAccountNum, payload.ProfileNum);
            return true;
        }

        public virtual async Task<IList<InitNumbers>> InitNumbersAsync(int databaseNum, int masterAccountNum, int profileNum)
        {
            var types = new List<string>()
            {
                ((int)ActivityLogType.SalesOrder).ToString(),
                ((int)ActivityLogType.Invoice).ToString(),
                ((int)ActivityLogType.Invoice).ToString(),
                ((int)ActivityLogType.Invoice).ToString(),
                ((int)ActivityLogType.Vendor).ToString(),
                ((int)ActivityLogType.Customer).ToString()
            };

            foreach (var aType in types)
            {
                if ((await ExistInitNumberAsync(masterAccountNum, profileNum, aType))) continue;
                await this.AddAsync(GetInitNumbers(databaseNum, masterAccountNum, profileNum, aType));
            }
            return await GetAllInitNumbersAsync(masterAccountNum, profileNum);
        }

        public virtual async Task<IList<InitNumbers>> GetAllInitNumbersAsync(int masterAccountNum, int profileNum)
        {
            var sql = @"WHERE MasterAccountNum=@0 AND ProfileNum=@1";
            return (await dbFactory.FindAsync<InitNumbers>(sql, masterAccountNum, profileNum)).ToList();
        }

        public virtual async Task<bool> GetAllInitNumbersAsync(InitNumbersPayload payload)
        {
            var lst = await GetAllInitNumbersAsync(payload.MasterAccountNum, payload.ProfileNum);
            if (lst == null || lst.Count == 0)
            {
                lst = await InitNumbersAsync(payload.DatabaseNum, payload.MasterAccountNum, payload.ProfileNum);
            }

            var dataList = new List<InitNumbersData>();
            foreach (var item in lst)
            {
                if (item == null) continue;
                dataList.Add(new InitNumbersData() { InitNumbers = item });
            }
            payload.InitNumbers = this.ToDto(dataList);
            return true;
        }

        public virtual InitNumbersDataDto GetInitNumbers(int databaseNum, int masterAccountNum, int profileNum, string type)
        {
            return new InitNumbersDataDto()
            {
                InitNumbers = new InitNumbersDto()
                {
                    DatabaseNum = databaseNum,
                    MasterAccountNum = masterAccountNum,
                    ProfileNum = profileNum,
                    InActive = true,
                    Type = type,
                    InitNumbersUuid = System.Guid.NewGuid().ToString(),
                    CustomerUuid = string.Empty,
                    Number = 10000,
                    MaxNumber = 0,
                    EnterBy = string.Empty,
                    UpdateBy = string.Empty

                }
            };
        }
        public virtual async Task<bool> ExistInitNumberAsync(int masterAccountNum, int profileNum, string type)
        {
            if (string.IsNullOrEmpty(type))
                return false;

            return await dbFactory.ExistsAsync<InitNumbers>("MasterAccountNum=@0 AND ProfileNum=@1 AND type=@2"
                , masterAccountNum.ToSqlParameter("masterAccountNum")
                , profileNum.ToSqlParameter("profileNum")
                , type.ToSqlParameter("type")
            );
        }
    }
}



