    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using System.Xml.Serialization;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class InitNumbersService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override InitNumbersService Init()
        {
            base.Init();
            SetDtoMapper(new InitNumbersDataDtoMapperDefault());
            SetCalculator(new InitNumbersServiceCalculatorDefault(this,this.dbFactory));
            AddValidator(new InitNumbersServiceValidatorDefault(this, this.dbFactory));
            return this;
        }
        [XmlIgnore, JsonIgnore]
        protected InitNumbersList _initNumbersList;
        [XmlIgnore, JsonIgnore]
        public InitNumbersList initNumbersList
        {
            get
            {
                if (_initNumbersList is null)
                    _initNumbersList = new InitNumbersList(dbFactory);
                return _initNumbersList;
            }
        }

        public virtual async Task<bool> GetByInitNumbersUuidAsync(int masterAccountNum, int profileNum, string initNumbersUuid)
        {
                var rownum = await InitNumbersHelper.GetRowNumByInitNumbersUuidAsync(masterAccountNum, profileNum, initNumbersUuid);
                GetData(rownum);
            return true;
        }



        /// <summary>
        /// Add to ActivityLog record for current data and processMode
        /// Should Call this method after successful save, update, delete
        /// </summary>
        protected void AddActivityLogForCurrentData()
        {
            this.AddActivityLog(new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.InitNumber,
                Action = (int)this.ProcessMode,
                LogSource = "InitNumberService",

                MasterAccountNum = this.Data.InitNumbers.MasterAccountNum,
                ProfileNum = this.Data.InitNumbers.ProfileNum,
                DatabaseNum = this.Data.InitNumbers.DatabaseNum,
                ProcessUuid = this.Data.InitNumbers.InitNumbersUuid,

                LogMessage = string.Empty
            });
        }

        /// <summary>
        /// Add to ActivityLog record for current data and processMode
        /// Should Call this method after successful save, update, delete
        /// </summary>
        protected async Task AddActivityLogForCurrentDataAsync()
        {
            await this.AddActivityLogAsync(new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.InitNumber,
                Action = (int)this.ProcessMode,
                LogSource = "InitNumberService",

                MasterAccountNum = this.Data.InitNumbers.MasterAccountNum,
                ProfileNum = this.Data.InitNumbers.ProfileNum,
                DatabaseNum = this.Data.InitNumbers.DatabaseNum,
                ProcessUuid = this.Data.InitNumbers.InitNumbersUuid,

                LogMessage = string.Empty

            });
        }


        public async Task<InitNumbersPayload> GetInitNumbersForCustomer(int masterAccountNum,int profileNum, string customerUuid)
        {
            var payload = new InitNumbersPayload()
            {
                MasterAccountNum = masterAccountNum,
                ProfileNum = profileNum
            };
            payload.LoadAll = true;
            payload.Filter = new JObject()
            {
                {"CustomerUuid",  $"{customerUuid}"},
            };
                return await _initNumbersList.GetInitNumbersListAsync(payload);
        }
        public async Task<string> GetNextNumberAsync(int masterAccountNum, int profileNum, string customerUuid,string type)
        {
            string minNumber = string.Empty;
            using (var trx = new ScopedTransaction(dbFactory))
            {
                  minNumber = await InitNumbersHelper.GetMinNumberAsync(masterAccountNum, profileNum, customerUuid, type);
            }
   
            var initNumbers =  InitNumbersHelper.GetInitNumbersAsync(dbFactory, masterAccountNum, profileNum, customerUuid, type);
            if (string.IsNullOrWhiteSpace(minNumber))//如果为Null 说明number 是带有前缀,如果带有前缀，则获取
            {

                return string.Concat(initNumbers.prefix, initNumbers.currentNumber+1, initNumbers.suffix);

            }
            else //如果不为null，则直接返回
            {
                return string.Concat(initNumbers.prefix, minNumber, initNumbers.suffix);
            }
 

        }

        public async Task<bool> UpdateInitNumberForCustomerAsync(int masterAccountNum, int profileNum, string customerUuid, string type, string currentNumber)
        {
          

              var initNumbers = InitNumbersHelper.GetInitNumbersAsync(dbFactory, masterAccountNum, profileNum, customerUuid, type);

             GetData(initNumbers.rowNum);
 
            int currentNum = GetCurrentNumber(currentNumber, initNumbers.prefix, initNumbers.suffix);
            _data.InitNumbers.CurrentNumber = currentNum;
           var result= await _data.SaveAsync();
            if (result)
                await AddActivityLogForCurrentDataAsync();
            return result;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(InitNumbersDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(InitNumbersDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
                await AddActivityLogForCurrentDataAsync();
            return result;
        }

        public virtual bool Add(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumbers)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.InitNumbers))
                return false;

            // load data from dto
            FromDto(payload.InitNumbers);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        public virtual async Task<bool> AddAsync(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumbers)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.InitNumbers)))
                return false;

            // load data from dto
            FromDto(payload.InitNumbers);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
                await AddActivityLogForCurrentDataAsync();
            return result;
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InitNumbersDataDto dto)
        {
            if (dto is null || !dto.HasInitNumbers)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InitNumbersDataDto dto)
        {
            if (dto is null || !dto.HasInitNumbers)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
                await AddActivityLogForCurrentDataAsync();
            return result;
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumbers || payload.InitNumbers.InitNumbers.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.InitNumbers))
                return false;

            // load data 
            GetData(payload.InitNumbers.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(payload.InitNumbers);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumbers)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.InitNumbers)))
                return false;

            // load data 
            await GetDataAsync(payload.InitNumbers.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(payload.InitNumbers);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
                await AddActivityLogForCurrentDataAsync();
            return result;
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(InitNumbersPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(InitNumbersPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(InitNumbersPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            if (success)
            {
                if (DeleteData()) {
                    await AddActivityLogForCurrentDataAsync();
                    return true;
 
                }
            }
 
            return false;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(InitNumbersPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            if (success)
            {
                if (DeleteData())
                {
                    AddActivityLogForCurrentData();
                    return true;

                }
            }

            return false;
        }



        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByInitNumbersUuidAsync(InitNumbersPayload payload, string initNumbersUuid)
        {
                if (string.IsNullOrEmpty(initNumbersUuid))
                    return false;
                //set delete mode
                Delete();
                //load data
                var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, initNumbersUuid);
            if (success)
            {
                if (DeleteData())
                {
                    await AddActivityLogForCurrentDataAsync();
                    return true;
                }
            }
            return false;
        }


        private  int GetCurrentNumber(string fullStrNumber, string prefix, string suffix)
        {
            if (!string.IsNullOrWhiteSpace(prefix) &&fullStrNumber.StartsWith(prefix))
            {
                fullStrNumber = fullStrNumber.Remove(0, prefix.Length);
            }

            if (!string.IsNullOrWhiteSpace(suffix) && fullStrNumber.EndsWith(suffix))
            {
                fullStrNumber = fullStrNumber.Remove(fullStrNumber.Length - suffix.Length);
            }

            return int.Parse( fullStrNumber);

        }
    }
}



