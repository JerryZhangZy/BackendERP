    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using Newtonsoft.Json;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using System.Xml.Serialization;
using Newtonsoft.Json.Linq;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class InitNumbersService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override InitNumbersService Init()
        {
            base.Init();
            SetDtoMapper(new InitNumbersDataDtoMapperDefault());
            SetCalculator(new InitNumbersServiceCalculatorDefault(this,this.dbFactory));
            AddValidator(new InitNumbersServiceValidatorDefault(this, this.dbFactory));
            return this;
        }
        [XmlIgnore, JsonIgnore]
        protected InitNumbersList _initNumbersList;
        [XmlIgnore, JsonIgnore]
        public InitNumbersList initNumbersList
        {
            get
            {
                if (_initNumbersList is null)
                    _initNumbersList = new InitNumbersList(dbFactory);
                return _initNumbersList;
            }
        }



        #region 2021-12-4 wzj

        public async Task<string> GetNextNumberAsync(int masterAccountNum, int profileNum, ActivityLogType activityLogType)
        {
            string nextMaxNumber;
            using (var trs = new ScopedTransaction(dbFactory))
            {
                nextMaxNumber = await InitNumbersHelper.GetNextNumberAsync(masterAccountNum, profileNum, activityLogType);

            }
            using (var trs = new ScopedTransaction(dbFactory))
            {
                if (string.IsNullOrWhiteSpace(nextMaxNumber))
                    return await InitNumbersHelper.GetNumberAsync(masterAccountNum, profileNum, activityLogType);
                else
                    return nextMaxNumber;
            }
       
        }

        public  string  GetNextNumber(int masterAccountNum, int profileNum, ActivityLogType activityLogType)
        {
            string nextMaxNumber;
            using (var trs = new ScopedTransaction(dbFactory))
            {
                nextMaxNumber =  InitNumbersHelper.GetNextNumber(masterAccountNum, profileNum, activityLogType);

            }
            using (var trs = new ScopedTransaction(dbFactory))
            {
                if (string.IsNullOrWhiteSpace(nextMaxNumber))
                    return  InitNumbersHelper.GetNumber(masterAccountNum, profileNum, activityLogType);
                else
                    return nextMaxNumber;
            }

        }

        public async Task<bool> UpdateMaxNumberAsync(int masterAccountNum, int profileNum, ActivityLogType activityLogType, string maxNumber)
        {
            if (maxNumber.ToLong() <= 0)
                return true;

            var find = new InitNumbersFindClass()
            {
                MasterAccountNum = masterAccountNum,
                ProfileNum = profileNum,
                Type= ((int)activityLogType).ToString()
            };

            if (!await GetInitNumberByInitNumberFindAsync(find))
            {
                AddError("Not found InitNumber Setting");
                return false;
            }

            if (maxNumber.Length == this._data.InitNumbers.Number.ToString().Length&&maxNumber.ToLong()> this._data.InitNumbers.MaxNumber.ToLong())
            {
 
                this._data.InitNumbers.MaxNumber = maxNumber.ToLong();
               return await SaveDataAsync();

            }

            return true;

        }



        public   bool UpdateMaxNumber(int masterAccountNum, int profileNum, ActivityLogType activityLogType, string maxNumber)
        {
            if (maxNumber.ToLong() <= 0)
                return true;

            string sql = "Update   InitNumbers Set MaxNumber=@0 where MasterAccountNum=@1 and ProfileNum=@2 and Type=@3 and MaxNumber<@0";


            return ( dbFactory.Db.Execute(sql,
                  maxNumber.ToLong().ToSqlParameter("@0"),
              masterAccountNum.ToSqlParameter("@1"),
              profileNum.ToSqlParameter("@2"),
                 ((int)activityLogType).ToString().ToSqlParameter("@3")
              )) == 1;
        }
        /// <summary>
        /// Get CustomerData by CustomerFindClass
        /// </summary>
        public async Task<bool> GetInitNumberByInitNumberFindAsync(InitNumbersFindClass find)
        {
            if (find == null)
                return false;

            Edit();
            var rowNum = await GetRowNumByInitNumberFindAsync(find);
            if (rowNum == 0)
                return false;
            return await GetDataAsync(rowNum);
        }
        public virtual async Task<long> GetRowNumByInitNumberFindAsync(InitNumbersFindClass find)
        {
            if (find == null)
                return 0;

            var sql = $@"
                SELECT  
                COALESCE(
                    (SELECT TOP 1 RowNum FROM InitNumbers WHERE MasterAccountNum=@0 AND ProfileNum=@1 AND Type=@2 AND Type!=''),
                    0
                )
            ";
            return (await dbFactory.GetValueAsync<InitNumbers, long?>(
                    sql,
                    find.MasterAccountNum,      //0
                    find.ProfileNum,            //1
                    find.Type
                )).ToLong();
        }

        #endregion




        public async Task<bool> UpdateInitNumberForCustomerAsync(int masterAccountNum, int profileNum, string customerUuid, string type, string currentNumber)
        {
          

              var initNumbers = InitNumbersHelper.GetInitNumbersAsync(dbFactory, masterAccountNum, profileNum, customerUuid, type);

             GetData(initNumbers.rowNum);
 
            int currentNum = GetCurrentNumber(currentNumber, initNumbers.prefix, initNumbers.suffix);
            _data.InitNumbers.CurrentNumber = currentNum;
           return await _data.SaveAsync();
           
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(InitNumbersDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result = await SaveDataAsync();
            if (result)
                await AddActivityLogForCurrentDataAsync();
            return result;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InitNumbersDataDto dto)
        {
            if (dto is null || !dto.HasInitNumbers)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.InitNumbers.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
            
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InitNumbersPayload payload)
        {
            if (payload is null || !payload.HasInitNumberss)
                return false;

            var masterAccountNum = payload.MasterAccountNum;
            var profileNum = payload.ProfileNum;

            foreach (var dto in payload.InitNumbers)
            {
                await ValidateAsync(dto);
                dto.InitNumbers.DatabaseNum = dbFactory.DatabaseNum;
                dto.InitNumbers.MasterAccountNum = payload.MasterAccountNum;
                dto.InitNumbers.ProfileNum = payload.ProfileNum;

                var rowNum = await this.GetRowNumByTypeAsync(masterAccountNum, profileNum, dto.InitNumbers.Type);
                if (rowNum.IsZero() || !(await this.EditAsync(rowNum)))
                {
                    await this.AddAsync(dto);
                }
                else if (
                    dto.InitNumbers.Number != this.Data.InitNumbers.Number ||
                    dto.InitNumbers.MaxNumber != this.Data.InitNumbers.MaxNumber ||
                    dto.InitNumbers.EndNumber != this.Data.InitNumbers.EndNumber
                )
                {
                    await UpdateAsync(dto);
                }
            }

            return await GetAllInitNumbersAsync(payload);
        }

        private  int GetCurrentNumber(string fullStrNumber, string prefix, string suffix)
        {
            if (!string.IsNullOrWhiteSpace(prefix) &&fullStrNumber.StartsWith(prefix))
            {
                fullStrNumber = fullStrNumber.Remove(0, prefix.Length);
            }

            if (!string.IsNullOrWhiteSpace(suffix) && fullStrNumber.EndsWith(suffix))
            {
                fullStrNumber = fullStrNumber.Remove(fullStrNumber.Length - suffix.Length);
            }

            return int.Parse( fullStrNumber);

        }

        public virtual async Task<IList<InitNumbers>> GetAllInitNumbersAsync(int masterAccountNum, int profileNum)
        {
            var sql = @"WHERE MasterAccountNum=@0 AND ProfileNum=@1";
            return (await dbFactory.FindAsync<InitNumbers>(sql, masterAccountNum, profileNum)).ToList();
        }

        public virtual async Task<bool> GetAllInitNumbersAsync(InitNumbersPayload payload)
        {
            var databaseNum = dbFactory.DatabaseNum;
            var masterAccountNum = payload.MasterAccountNum;
            var profileNum = payload.ProfileNum;

            var lst = await GetAllInitNumbersAsync(payload.MasterAccountNum, payload.ProfileNum);
            if (lst == null || lst.Count == 0 || lst.Count != GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum).Count)
            {
                await this.AddDefaultInitNumbersAsync(databaseNum, masterAccountNum, profileNum);
                lst = await GetAllInitNumbersAsync(payload.MasterAccountNum, payload.ProfileNum);
            }

            var dataList = new List<InitNumbersData>();
            foreach (var item in lst)
            {
                if (item == null) continue;
                dataList.Add(new InitNumbersData() { InitNumbers = item });
            }
            payload.InitNumbers = this.ToDto(dataList);
            return true;
        }


        /// <summary>
        /// Get row num by type 
        /// </summary>
        public virtual async Task<long> GetRowNumByTypeAsync(int masterAccountNum, int profileNum, string type)
        {
            var sql = $@"SELECT TOP 1 RowNum FROM InitNumbers WHERE MasterAccountNum=@0 AND ProfileNum=@1 AND Type=@2 AND CustomerUuid='' ";
            return (await dbFactory.Db.ExecuteScalarAsync<long?>(
                    sql,
                    masterAccountNum,   //0
                    profileNum,         //1
                    type                //2
                )).ToLong();
        }

        /// <summary>
        /// Set init number to default by year
        /// </summary>
        public virtual async Task<bool> AddDefaultInitNumbersAsync(int databaseNum, int masterAccountNum, int profileNum, bool resetAll = false)
        {
            var defaultInitNumbers = GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum);
            foreach (var item in defaultInitNumbers)
            {
                var rowNum = await this.GetRowNumByTypeAsync(masterAccountNum, profileNum, item.Type);
                if (await this.EditAsync(rowNum))
                {
                    if (!resetAll) continue;
                    this.Data.InitNumbers.Number = item.Number;
                    this.Data.InitNumbers.MaxNumber = item.MaxNumber;
                    this.Data.InitNumbers.EndNumber = item.EndNumber;
                }
                else
                {
                    this.Add();
                    this.Data.InitNumbers = item;
                }
                await this.SaveDataAsync();
            }
            return true;
        }

        public virtual IList<InitNumbers> GetDefaultInitNumbers(int databaseNum, int masterAccountNum, int profileNum)
        {
            return new List<InitNumbers>()
            {
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.Customer).ToString()),
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.SalesOrder).ToString()),
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.Invoice).ToString()),
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.MiscInvoice).ToString()),
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.Shipment).ToString()),
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.InventoryUpdate).ToString()),
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.WarehouseTransfer).ToString()),
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.Vendor).ToString()),
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.PurchaseOrder).ToString()),
                GetDefaultInitNumbers(databaseNum, masterAccountNum, profileNum, ((int)ActivityLogType.ApInvoice).ToString()),
            };
        }

        protected virtual InitNumbers GetDefaultInitNumbers(int databaseNum, int masterAccountNum, int profileNum, string type)
        {
            var year = DateTime.Today.Year;
            return new InitNumbers()
            {
                RowNum = 0,
                DatabaseNum = databaseNum,
                MasterAccountNum = masterAccountNum,
                ProfileNum = profileNum,
                InActive = false,
                Type = type,
                InitNumbersUuid = System.Guid.NewGuid().ToString(),
                CustomerUuid = string.Empty,
                Number = $"{year}{(long)Math.Pow(10, 8)}".ToLong(),
                MaxNumber = $"{year}{(long)Math.Pow(10, 8)}".ToLong() + 1,
                EndNumber = $"{year}{(long)Math.Pow(10, 9) - 1}".ToLong(),
                EnterBy = "SYSTEM",
                UpdateBy = "SYSTEM"
            };
        }
        public virtual async Task<bool> ExistInitNumberAsync(int masterAccountNum, int profileNum, string type)
        {
            if (string.IsNullOrEmpty(type))
                return false;

            return await dbFactory.ExistsAsync<InitNumbers>("MasterAccountNum=@0 AND ProfileNum=@1 AND type=@2"
                , masterAccountNum.ToSqlParameter("masterAccountNum")
                , profileNum.ToSqlParameter("profileNum")
                , type.ToSqlParameter("type")
            );
        }
    }
}



