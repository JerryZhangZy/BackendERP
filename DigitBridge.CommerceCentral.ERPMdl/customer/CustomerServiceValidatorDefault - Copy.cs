

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default CustomerService Validator class.
    /// </summary>
    public partial class CustomerServiceValidatorDefault : IValidator<CustomerData>, IMessage
    {
        public virtual bool IsValid { get; set; }
        public CustomerServiceValidatorDefault() { }
        public CustomerServiceValidatorDefault(IMessage serviceMessage) { ServiceMessage = serviceMessage; }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

        public virtual void Clear()
        {
            IsValid = true;
            Messages = new List<MessageClass>();
        }

        public virtual bool ValidatePayload(CustomerData data, IPayload payload, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            var pl = payload as CustomerPayload;
            if (processingMode == ProcessingMode.Add)
            {
                //TODO set MasterAccountNum, ProfileNum and DatabaseNum from payload
                data.Customer.MasterAccountNum = pl.MasterAccountNum;
                data.Customer.ProfileNum = pl.ProfileNum;
                data.Customer.DatabaseNum = pl.DatabaseNum;
            }
            else
            {
                //TODO check MasterAccountNum, ProfileNum and DatabaseNum between data and payload
                if (
                    data.Customer.MasterAccountNum != pl.MasterAccountNum ||
                    data.Customer.ProfileNum != pl.ProfileNum
                )
                    IsValid = false;
                AddError($"Customernot found.");
                return IsValid;
            }
            return true;
        }

        public virtual bool Validate(CustomerData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!ValidateAllMode(data))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => ValidateAdd(data),
                ProcessingMode.Edit => ValidateEdit(data),
                ProcessingMode.List => false,
                ProcessingMode.Delete => ValidateDelete(data),
                ProcessingMode.Void => ValidateDelete(data),
                ProcessingMode.Cancel => ValidateDelete(data),
                _ => false,
            };
        }
        protected virtual bool ValidateAllMode(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            if (string.IsNullOrEmpty(data.Customer.CustomerUuid))
            {
                IsValid = false;
                AddError($"Unique Id cannot be empty.");
                return IsValid;
            }
            //if (string.IsNullOrEmpty(data.Customer.CustomerUuid))
            //{
            //    IsValid = false;
            //    AddError($"Customer cannot be empty.");
            //    return IsValid;
            //}
            return true;

        }

        protected virtual bool ValidateAdd(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            if (data.Customer.RowNum != 0 && dbFactory.Exists<Customer>(data.Customer.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} is duplicate.");
            }
            ValidateAddData(data);
            return IsValid;

        }

        protected virtual bool ValidateAddData(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            #region Valid Customer
            if (dbFactory.Db.ExecuteScalar<int>($"SELECT COUNT(1) FROM Customer WHERE CustomerUuid='{data.Customer.CustomerUuid}'") > 0)
            {
                IsValid = false;
                AddError($"CustomerUuid must be empty or unique.");
            }
            if (string.IsNullOrEmpty(data.Customer.CustomerCode) || dbFactory.Db.ExecuteScalar<int>($"SELECT COUNT(1) FROM Customer WHERE CustomerCode='{data.Customer.CustomerCode}'") > 0)
            {
                IsValid = false;
                AddError($"CustomerCode must be unique.");
            }
            #endregion

            #region Valid CustomerAddress
            if (data.CustomerAddress != null && data.CustomerAddress.Count > 0)
            {
                var addressList = data.CustomerAddress.ToList();
                foreach (var addr in data.CustomerAddress)
                {
                    if (dbFactory.Db.ExecuteScalar<int>($"SELECT COUNT(1) FROM CustomerAddress WHERE AddressUuid='{addr.AddressUuid}'") > 0)
                    {
                        IsValid = false;
                        AddError($"CustomerAddress.AddressUuid must be empty or unique.");
                    }
                    if (string.IsNullOrEmpty(addr.AddressCode) || addressList.Count(r => r.AddressCode == addr.AddressCode) > 1)
                    {
                        IsValid = false;
                        AddError($"CustomerAddress.AddressCode must be unique.");
                    }
                }
            }
            #endregion
            return IsValid;
        }

        protected virtual bool ValidateEditData(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            #region Valid Customer
            if (dbFactory.Db.ExecuteScalar<int>($"SELECT COUNT(1) FROM Customer WHERE CustomerUuid='{data.Customer.CustomerUuid}' AND RowNum<>{data.Customer.RowNum}") > 0)
            {
                IsValid = false;
                AddError($"CustomerUuid must be unique.");
            }
            if (dbFactory.Db.ExecuteScalar<int>($"SELECT COUNT(1) FROM Customer WHERE CustomerCode='{data.Customer.CustomerCode}' AND RowNum<>{data.Customer.RowNum}") > 0)
            {
                IsValid = false;
                AddError($"CustomerCode must be unique.");
            }
            #endregion

            #region Valid CustomerAddress
            //if (data.CustomerAddress != null && data.CustomerAddress.Count > 0)
            //{
            //    var addressList = data.CustomerAddress.ToList();
            //    foreach (var addr in data.CustomerAddress)
            //    {
            //        if (dbFactory.Db.ExecuteScalar<int>($"SELECT COUNT(1) FROM CustomerAddress WHERE AddressUuid='{addr.AddressUuid}'") > 0)
            //        {
            //            IsValid = false;
            //            AddError($"CustomerAddress.AddressUuid must be empty or unique.");
            //        }
            //        if (string.IsNullOrEmpty(addr.AddressCode) || addressList.Count(r => r.AddressCode == addr.AddressCode) > 1)
            //        {
            //            IsValid = false;
            //            AddError($"CustomerAddress.AddressCode cannot be empty and must be unique.");
            //        }
            //    }
            //}
            #endregion
            return IsValid;
        }

        protected virtual bool ValidateEdit(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            if (data.Customer.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} not found.");
                //return IsValid;
            }

            if (data.Customer.RowNum != 0 && !dbFactory.Exists<Customer>(data.Customer.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} not found.");
                //return IsValid;
            }
            ValidateEditData(data);
            return IsValid; 
        }

        protected virtual bool ValidateDelete(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            if (data.Customer.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} not found.");
                return IsValid;
            }

            if (data.Customer.RowNum != 0 && !dbFactory.Exists<Customer>(data.Customer.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} not found.");
                return IsValid;
            }
            return true;
        }


        #region Async Methods

        public virtual async Task<bool> ValidateAsync(CustomerData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!(await ValidateAllModeAsync(data).ConfigureAwait(false)))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => await ValidateAddAsync(data).ConfigureAwait(false),
                ProcessingMode.Edit => await ValidateEditAsync(data).ConfigureAwait(false),
                ProcessingMode.List => false,
                ProcessingMode.Delete => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Void => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Cancel => await ValidateDeleteAsync(data).ConfigureAwait(false),
                _ => false,
            };
        }

        protected virtual async Task<bool> ValidateAllModeAsync(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            if (string.IsNullOrEmpty(data.Customer.CustomerUuid))
            {
                IsValid = false;
                AddError($"Unique Id cannot be empty.");
                return IsValid;
            }
            //if (string.IsNullOrEmpty(data.Customer.CustomerUuid))
            //{
            //    IsValid = false;
            //    AddError($"Customer cannot be empty.");
            //    return IsValid;
            //}
            return true;

        }

        protected virtual async Task<bool> ValidateAddAsync(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            if (data.Customer.RowNum != 0 && (await dbFactory.ExistsAsync<Customer>(data.Customer.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} is duplicate.");
            }
            ValidateAddData(data);
            return IsValid;

        }

        protected virtual async Task<bool> ValidateEditAsync(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            if (data.Customer.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} not found.");
                //return IsValid;
            }

            if (data.Customer.RowNum != 0 && !(await dbFactory.ExistsAsync<Customer>(data.Customer.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} not found.");
                //return IsValid;
            }
            ValidateEditData(data);
            return IsValid;
        }

        protected virtual async Task<bool> ValidateDeleteAsync(CustomerData data)
        {
            var dbFactory = data.dbFactory;
            if (data.Customer.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} not found.");
                return IsValid;
            }

            if (data.Customer.RowNum != 0 && !(await dbFactory.ExistsAsync<Customer>(data.Customer.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.Customer.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        #endregion Async Methods
    }
}



