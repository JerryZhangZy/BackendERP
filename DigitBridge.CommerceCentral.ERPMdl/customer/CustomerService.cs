
    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using System.Xml.Serialization;
using System.Text.Json.Serialization;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class CustomerService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override CustomerService Init()
        {
            base.Init();
            SetDtoMapper(new CustomerDataDtoMapperDefault());
            SetCalculator(new CustomerServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new CustomerServiceValidatorDefault(this, this.dbFactory));
            return this;
        }

        protected CustomerAddressService _customerAddressService;
        [XmlIgnore, JsonIgnore]
        public CustomerAddressService customerAddressService
        {
            get
            {
                if (_customerAddressService is null)
                    _customerAddressService = new CustomerAddressService(dbFactory);
                return _customerAddressService;
            }
        }


        /// <summary>
        /// Add to ActivityLog record for current data and processMode
        /// Should Call this method after successful save, update, delete
        /// </summary>
        protected void AddActivityLogForCurrentData()
        {
            this.AddActivityLog(new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.Customer,
                Action = (int)this.ProcessMode,
                LogSource = "CustomerService",

                MasterAccountNum = this.Data.Customer.MasterAccountNum,
                ProfileNum = this.Data.Customer.ProfileNum,
                DatabaseNum = this.Data.Customer.DatabaseNum,
                ProcessUuid = this.Data.Customer.CustomerUuid,
 
                LogMessage = string.Empty
            });
        }

        /// <summary>
        /// Add to ActivityLog record for current data and processMode
        /// Should Call this method after successful save, update, delete
        /// </summary>
        protected async Task AddActivityLogForCurrentDataAsync()
        {
            await this.AddActivityLogAsync(new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.Customer,
                Action = (int)this.ProcessMode,
                LogSource = "CustomerService",

                MasterAccountNum = this.Data.Customer.MasterAccountNum,
                ProfileNum = this.Data.Customer.ProfileNum,
                DatabaseNum = this.Data.Customer.DatabaseNum,
                ProcessUuid = this.Data.Customer.CustomerUuid,


                LogMessage = string.Empty

            });
        }






        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(CustomerDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(CustomerDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
               await AddActivityLogForCurrentDataAsync();
            return result;
        }

        public virtual bool Add(CustomerPayload payload)
        {
            if (payload is null || !payload.HasCustomer)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Customer))
                return false;

            // load data from dto
            FromDto(payload.Customer);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        public virtual async Task<bool> AddAsync(CustomerPayload payload)
        {
            if (payload is null || !payload.HasCustomer)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Customer)))
                return false;

            // load data from dto
            FromDto(payload.Customer);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
               await AddActivityLogForCurrentDataAsync();
            return result;
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(CustomerDataDto dto)
        {
            if (dto is null || !dto.HasCustomer)
                return false;

            //set edit mode before validate
            Edit();

            if (!Validate(dto))
                return false;

            // set Add mode and clear data
            Edit(dto.Customer.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(CustomerDataDto dto)
        {
            if (dto is null || !dto.HasCustomer)
                return false;

            //set edit mode before validate
            Edit();

            if (!(await ValidateAsync(dto)))
                return false;

            // set Add mode and clear data
            await EditAsync(dto.Customer.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
                await AddActivityLogForCurrentDataAsync();
            return result;
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(CustomerPayload payload)
        {
            if (payload is null || !payload.HasCustomer || payload.Customer.Customer.RowNum.ToLong() <= 0)
                return false;

            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Customer))
                return false;

            // set Add mode and clear data
            Edit(payload.Customer.Customer.RowNum.ToLong());

            // load data from dto
            FromDto(payload.Customer);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(CustomerPayload payload)
        {
            if (payload is null || !payload.HasCustomer)
                return false;

            //set edit mode before validate
            Edit();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Customer)))
                return false;

            // set Add mode and clear data
            await EditAsync(payload.Customer.Customer.RowNum.ToLong());

            // load data from dto
            FromDto(payload.Customer);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
                await AddActivityLogForCurrentDataAsync();
            return result;
        }

        public CustomerPayload GetCustomersByCodeArray(CustomerPayload payload)
        {
            if (!payload.HasCustomerCodes)
                return payload;
            var list = new List<CustomerDataDto>();
            var msglist = new List<MessageClass>();
            var rowNumList = new List<long>();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                rowNumList = CustomerServiceHelper.GetRowNumsByCustomerCodes(payload.CustomerCodes, payload.MasterAccountNum, payload.ProfileNum);
            }
            foreach (var rowNum in rowNumList)
            {
                if (GetData(rowNum))
                    list.Add(ToDto());
            }
            payload.Customers = list;
            payload.Messages = msglist;
            return payload;
        }

        public async Task<CustomerPayload> GetCustomersByCodeArrayAsync(CustomerPayload payload)
        {
            if (!payload.HasCustomerCodes)
                return payload;
            var list = new List<CustomerDataDto>();
            var msglist = new List<MessageClass>();
            var rowNumList = new List<long>();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                rowNumList =await CustomerServiceHelper.GetRowNumsByCustomerCodesAsync(payload.CustomerCodes, payload.MasterAccountNum, payload.ProfileNum);
            }
            foreach (var rowNum in rowNumList)
            {
                if (await GetDataAsync(rowNum))
                    list.Add(ToDto());
            }
            payload.Customers = list;
            payload.Messages = msglist;
            return payload;
        }

        public async Task<bool> GetCustomerByCustomerCodeAsync(CustomerPayload payload,string customerCode)
        {
            if (string.IsNullOrEmpty(customerCode))
                return false;
            List();
            if (!(await ValidateAccountAsync(payload, customerCode)))
                return false;
            long rowNum = 0;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNum =await CustomerServiceHelper.GetRowNumByCustomerCodeAsync(customerCode,payload.MasterAccountNum,payload.ProfileNum);
            }
            return await GetDataAsync(rowNum);
        }

        public async Task<bool> DeleteByCodeAsync(CustomerPayload payload, string customerCode)
        {
            if (string.IsNullOrEmpty(customerCode))
                return false;
            Delete();
            if (!(await ValidateAccountAsync(payload, customerCode)))
                return false;
            long rowNum = 0;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNum = await CustomerServiceHelper.GetRowNumByCustomerCodeAsync(customerCode, payload.MasterAccountNum, payload.ProfileNum);
            }
            var success = await GetDataAsync(rowNum);
            if (success)
            {
                var result = await DeleteDataAsync();
                if (result)
                  await  AddActivityLogForCurrentDataAsync();
                return result;
            }
            return success;
        }


        public async Task<bool> AddCustomerAddressAsync(CustomerAddressPayload payload)
        {
            return await customerAddressService.AddAsync(payload);
        }
        public async Task<bool> UpdateCustomerAddressAsync(CustomerAddressPayload payload)
        {
            return await customerAddressService.UpdateAsync(payload);
        }

        public async Task<bool> DeleteCustomerAddressAsync(int masterAccountNum,int profileNum, string customerCode, string addressCode)
        {
            string customerUuid = string.Empty;
            using (var tx = new ScopedTransaction(dbFactory))
            {
               long rowNum = await CustomerServiceHelper.GetRowNumByCustomerCodeAsync(customerCode, masterAccountNum, profileNum);
                if (GetData(rowNum))
                {
                    customerUuid = this.Data.Customer.CustomerUuid;
                }
            }
            return await customerAddressService.DeleteCustomerAddressAsync(customerUuid, addressCode);

        }
      
        public CustomerAddressDataDto ToCustomerAddressDto()
        {

            return customerAddressService.ToDto();
        }
    }
}



