
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class MiscInvoiceService
    {

        #region override methods

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override MiscInvoiceService Init()
        {
            base.Init();
            SetDtoMapper(new MiscInvoiceDataDtoMapperDefault());
            SetCalculator(new MiscInvoiceServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new MiscInvoiceServiceValidatorDefault(this, this.dbFactory));
            return this;
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override async Task BeforeSaveAsync()
        {
            try
            {
                await base.BeforeSaveAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override void BeforeSave()
        {
            try
            {
                base.BeforeSave();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override async Task AfterSaveAsync()
        {
            try
            {
                await base.AfterSaveAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override void AfterSave()
        {
            try
            {
                base.AfterSave();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override async Task SaveSuccessAsync()
        {
            try
            {
                await base.SaveSuccessAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override void SaveSuccess()
        {
            try
            {
                base.SaveSuccess();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Sub class should override this method to return new ActivityLog object for service
        /// </summary>
        protected override ActivityLog GetActivityLog() =>
            new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.MiscInvoice,
                Action = (int)this.ProcessMode,
                LogSource = "MiscInvoiceService",

                MasterAccountNum = this.Data.MiscInvoiceHeader.MasterAccountNum,
                ProfileNum = this.Data.MiscInvoiceHeader.ProfileNum,
                DatabaseNum = this.Data.MiscInvoiceHeader.DatabaseNum,
                ProcessUuid = this.Data.MiscInvoiceHeader.MiscInvoiceUuid,
                ProcessNumber = this.Data.MiscInvoiceHeader.MiscInvoiceNumber,
                ChannelNum = 0,
                ChannelAccountNum = 0,

                LogMessage = string.Empty
            };

        #endregion override methods


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(MiscInvoiceDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var rtn = SaveData();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(MiscInvoiceDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var rtn = await SaveDataAsync();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        public virtual bool Add(MiscInvoicePayload payload)
        {
            if (payload is null || !payload.HasMiscInvoice)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.MiscInvoice))
                return false;

            // load data from dto
            FromDto(payload.MiscInvoice);

            // validate data for Add processing
            if (!Validate())
                return false;

            var rtn = SaveData();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        public virtual async Task<bool> AddAsync(MiscInvoicePayload payload)
        {
            if (payload is null || !payload.HasMiscInvoice)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.MiscInvoice)))
                return false;

            // load data from dto
            FromDto(payload.MiscInvoice);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var rtn = await SaveDataAsync();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(MiscInvoiceDataDto dto)
        {
            if (dto is null || !dto.HasMiscInvoiceHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.MiscInvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var rtn = SaveData();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(MiscInvoiceDataDto dto)
        {
            if (dto is null || !dto.HasMiscInvoiceHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.MiscInvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var rtn = await SaveDataAsync();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(MiscInvoicePayload payload)
        {
            if (payload is null || !payload.HasMiscInvoice || payload.MiscInvoice.MiscInvoiceHeader.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.MiscInvoice))
                return false;

            // load data 
            GetData(payload.MiscInvoice.MiscInvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(payload.MiscInvoice);

            // validate data for Add processing
            if (!Validate())
                return false;

            var rtn = SaveData();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(MiscInvoicePayload payload)
        {
            if (payload is null || !payload.HasMiscInvoice)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.MiscInvoice)))
                return false;

            // load data 
            await GetDataAsync(payload.MiscInvoice.MiscInvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(payload.MiscInvoice);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var rtn = await SaveDataAsync ();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(MiscInvoicePayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(MiscInvoicePayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(MiscInvoicePayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            if (success)
                AddActivityLogForCurrentData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(MiscInvoicePayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            if (success)
                AddActivityLogForCurrentData();
            return success;
        }


        /// <summary>
        /// Add MiscInvoice from salesOrder
        /// </summary>
        public virtual async Task<bool> AddFromSalesOrderAsync(SalesOrderHeader salesOrder)
        {
            Add();

            Data.MiscInvoiceHeader = new MiscInvoiceHeader()
            {
                MasterAccountNum = salesOrder.MasterAccountNum,
                ProfileNum = salesOrder.ProfileNum,
                DatabaseNum = salesOrder.DatabaseNum,

                Balance = salesOrder.DepositAmount,
                TotalAmount = salesOrder.DepositAmount,
                Currency = salesOrder.Currency,
                CreditAmount = salesOrder.DepositAmount,
                PaidBy = (int)PaidByAr.PrePayment,

                CustomerCode = salesOrder.CustomerCode,
                CustomerName = salesOrder.CustomerName,
                CustomerUuid = salesOrder.CustomerUuid,

                EnterBy = salesOrder.EnterBy,
                InvoiceSourceCode = $"SalesOrderUuid:{salesOrder.SalesOrderUuid}",

                MiscInvoiceNumber = NumberGenerate.Generate(),
                MiscInvoiceUuid = Guid.NewGuid().ToString(),
                MiscInvoiceDate = DateTime.UtcNow,
                MiscInvoiceTime = DateTime.UtcNow.TimeOfDay,

                //MiscInvoiceStatus
                //MiscInvoiceType
                //CheckNum 
            };
            var rtn = await SaveDataAsync();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        ///// <summary>
        ///// Withdraw money from misc invoice(this method is for internal,no validate for uuid)
        ///// </summary>
        //public virtual async Task<bool> WithdrawAsync(string miscInvoiceUuid, decimal amount)
        //{
        //    Edit();

        //    if (!await GetDataByIdAsync(miscInvoiceUuid))
        //    {
        //        AddError($"Data not found for miscInvoiceUuid:{miscInvoiceUuid}");
        //        return false;
        //    }
        //    Data.MiscInvoiceHeader.Balance = Data.MiscInvoiceHeader.Balance - amount;

        //    if (!await SaveDataAsync())
        //    {
        //        AddError("WithdrawAsync->SaveDataAsync error.");
        //        return false;
        //    }

        //    return true;
        //}
        public virtual async Task GetListByMiscInvoiceNumbersAsync(MiscInvoicePayload payload)
        {
            if (payload is null || !payload.HasMiscInvoiceNumbers)
            {
                AddError("InvoiceNumbers is required.");
                payload.Messages = this.Messages;
                payload.Success = false;
            }
            //var rowNums = await new InvoiceList(dbFactory).GetRowNumListAsync(payload.InvoiceNumbers, payload.MasterAccountNum, payload.ProfileNum);

            var result = new List<MiscInvoiceDataDto>();
            foreach (var miscInvoiceNumber in payload.MiscInvoiceNumbers)
            {
                if (!(await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, miscInvoiceNumber)))
                    continue;
                result.Add(this.ToDto());
                this.DetachData(this.Data);
            }
            payload.MiscInvoices = result;
        }

        public virtual async Task<bool> CheckNumberExistAsync(int masterAccountNum, int profileNum, string miscInvoiceNumber)
        {
            NewData();
            if (string.IsNullOrEmpty(miscInvoiceNumber))
            {
                AddError($"Number is required.");
                return false;
            }
            var success = _data.GetByNumber(masterAccountNum, profileNum, miscInvoiceNumber);
            return success;
        }

        public async Task PayAsync(string uuid, decimal payAmount)
        {
            var sql = $"UPDATE MiscInvoiceHeader SET PaidAmount=PaidAmount+({payAmount}), Balance=Balance-({payAmount}) WHERE MiscInvoiceUuid='{uuid}'";
            await dbFactory.Db.ExecuteAsync(sql);
        }
        public void Pay(string uuid, decimal payAmount)
        {
            var sql = $"UPDATE MiscInvoiceHeader SET PaidAmount=PaidAmount+({payAmount}), Balance=Balance-({payAmount}) WHERE MiscInvoiceUuid='{uuid}'";
            dbFactory.Db.Execute(sql);
        }
        protected void AddActivityLogForCurrentData()
        {
            this.AddActivityLog(new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.MiscInvoice,
                Action = (int)this.ProcessMode,
                LogSource = "MiscInvoiceService",

                MasterAccountNum = this.Data.MiscInvoiceHeader.MasterAccountNum,
                ProfileNum = this.Data.MiscInvoiceHeader.ProfileNum,
                DatabaseNum = this.Data.MiscInvoiceHeader.DatabaseNum,
                ProcessUuid = this.Data.MiscInvoiceHeader.MiscInvoiceUuid,
                ProcessNumber = this.Data.MiscInvoiceHeader.MiscInvoiceNumber,
                //ChannelNum = this.Data.SalesOrderHeaderInfo.ChannelNum,
                //ChannelAccountNum = this.Data.SalesOrderHeaderInfo.ChannelAccountNum,

                LogMessage = string.Empty
            });
        }

        public async Task<bool> UpdateInvoiceBalanceAsync(string transUuid, bool isRollBack = false)
        {
            var op = isRollBack ? "-" : "+";
            var opp = isRollBack ? "+" : "-";

            var sql = $@"
UPDATE ins 
SET 
PaidAmount = (CASE 
    WHEN COALESCE(trs.TransType,0) = 1 THEN COALESCE(ins.PaidAmount,0){op}COALESCE(trs.TotalAmount,0)
    ELSE ins.PaidAmount
END), 
Balance = COALESCE(ins.Balance,0){opp}COALESCE(trs.TotalAmount,0),
MiscInvoiceStatus = (CASE 
    WHEN (COALESCE(ins.Balance,0){opp}COALESCE(trs.TotalAmount,0)) <= 0 AND (COALESCE(ins.MiscInvoiceStatus,0)!=@2) THEN @2
    WHEN (COALESCE(ins.Balance,0){opp}COALESCE(trs.TotalAmount,0)) > 0 AND (COALESCE(ins.MiscInvoiceStatus,0)!=@1) THEN @1
    ELSE COALESCE(ins.MiscInvoiceStatus,0)
END)
FROM MiscInvoiceHeader ins
INNER JOIN MiscInvoiceTransaction trs ON (trs.MiscInvoiceUuid = ins.MiscInvoiceUuid AND trs.TransUuid = @0)
";
            var result = await dbFactory.Db.ExecuteAsync(
                sql,
                transUuid.ToSqlParameter("@0"),
                ((int)InvoiceStatusEnum.Outstanding).ToSqlParameter("@1"),
                ((int)InvoiceStatusEnum.Paid).ToSqlParameter("@2")
            );
            return result > 0;
        }

    }
}



