

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default InvoiceTransactionService Calculator class.
    /// </summary>
    public partial class InvoiceTransactionDtoPrepareDefault : IPrepare<InvoiceTransactionService, InvoiceTransactionData, InvoiceTransactionDataDto>
    {
        public InvoiceTransactionDtoPrepareDefault(InvoiceTransactionService invoiceTransactionService)
        {
            _invoiceTransactionService = invoiceTransactionService;
        }

        protected InvoiceTransactionService _invoiceTransactionService;
        protected InvoiceTransactionService Service 
        { 
            get => _invoiceTransactionService; 
        }
        protected IDataBaseFactory dbFactory 
        { 
            get => Service.dbFactory; 
        }
        #region message
        [XmlIgnore, JsonIgnore]
        protected IList<MessageClass> Messages
        {
            get => Service.Messages;
        }
        protected IList<MessageClass> AddInfo(string message, string code = null) => Service.AddInfo(message, code);
        protected IList<MessageClass> AddWarning(string message, string code = null) => Service.AddWarning(message, code);
        protected IList<MessageClass> AddError(string message, string code = null) => Service.AddError(message, code);
        protected IList<MessageClass> AddFatal(string message, string code = null) => Service.AddFatal(message, code);
        protected IList<MessageClass> AddDebug(string message, string code = null) => Service.AddDebug(message, code);

        #endregion message

        #region Service Property

        private CustomerService _customerService;

        protected CustomerService customerService
        {
            get
            {
                if (_customerService is null)
                    _customerService = new CustomerService(dbFactory);
                return _customerService;
            }
        }

        private InventoryService _inventoryService;

        protected InventoryService inventoryService
        {
            get
            {
                if (_inventoryService is null)
                    _inventoryService = new InventoryService(dbFactory);
                return _inventoryService;
            }
        }

        #endregion

        private DateTime now = DateTime.UtcNow;

        /// <summary>
        /// Check Dto data, fill customer and inventory info.
        /// </summary>
        public virtual async Task<bool> PrepareDtoAsync(InvoiceTransactionDataDto dto)
        {
            if (dto == null || !dto.HasInvoiceTransaction)
                return false;

            // Load customer info to Dto 
            //if (!await CheckCustomerAsync(dto))
            //{
            //    AddError($"Cannot find or create customer for {dto.InvoiceTransactionHeader.OrderSourceCode}.");
            //}

            //// Load inventory info to Dto 
            //// check sku and warehouse exist, otherwise add new SKU and Warehouse
            //if (!await CheckInventoryAsync(dto))
            //{
            //    AddError($"Cannot find or create SKU for {dto.InvoiceTransactionHeader.OrderSourceCode}.");
            //}

            return true;
        }

        #region GetDataWithCache
        /// <summary>
        /// get inventory data
        /// </summary>
        /// <param name="data"></param>
        /// <param name="sku"></param>
        /// <returns></returns>
        public virtual InventoryData GetInventoryData(InvoiceTransactionData data, string sku)
        {
            var key = data.InvoiceTransaction.MasterAccountNum + "_" + data.InvoiceTransaction.ProfileNum + '_' + sku;
            return data.GetCache(key, () =>
            {
                if (inventoryService.GetByNumber(data.InvoiceTransaction.MasterAccountNum, data.InvoiceTransaction.ProfileNum, sku))
                    return inventoryService.Data;
                return null;
            });
        }
        /// <summary>
        /// get inventory data
        /// </summary>
        /// <param name="data"></param>
        /// <param name="sku"></param>
        /// <returns></returns>
        public virtual InventoryData GetInventoryData_InventoryUuid(InvoiceTransactionData data, string inventoryUuid)
        {
            var key = data.InvoiceTransaction.MasterAccountNum + "_" + data.InvoiceTransaction.ProfileNum + '_' + inventoryUuid;
            return data.GetCache(key, () =>
            {
                if (inventoryService.GetDataById(inventoryUuid))
                    return inventoryService.Data;
                return null;
            });
        }
        /// <summary>
        /// Get Customer Data by customerCode
        /// </summary>
        /// <param name="data"></param>
        /// <param name="customerCode"></param>
        /// <returns></returns>
        public virtual CustomerData GetCustomerData(InvoiceTransactionData data, string customerCode)
        {
            var key = data.InvoiceTransaction.MasterAccountNum + "_" + data.InvoiceTransaction.ProfileNum + '_' + customerCode;
            return data.GetCache(key, () =>
            {
                if (customerService.GetByNumber(data.InvoiceTransaction.MasterAccountNum, data.InvoiceTransaction.ProfileNum, customerCode))
                    return customerService.Data;
                return null;
            });
        }
        #endregion

        /// <summary>
        /// Load info from customer to Dto
        /// Try use customer uuid, code, name or phone find customer
        /// If customer code not exist, add new customer. 
        /// </summary>
        //protected async Task<bool> CheckCustomerAsync(InvoiceTransactionDataDto dto)
        //{
        //    if (!string.IsNullOrEmpty(dto.InvoiceTransactionHeader.CustomerCode))
        //        return true;

        //    // try to find customer
        //    var find = new CustomerFindClass()
        //    {
        //        MasterAccountNum = dto.InvoiceTransactionHeader.MasterAccountNum.ToInt(),
        //        ProfileNum = dto.InvoiceTransactionHeader.ProfileNum.ToInt(),
        //        CustomerUuid = dto.InvoiceTransactionHeader.CustomerUuid,
        //        CustomerCode = dto.InvoiceTransactionHeader.CustomerCode,
        //        ChannelNum = dto.InvoiceTransactionHeaderInfo.ChannelNum.ToInt(),
        //        ChannelAccountNum = dto.InvoiceTransactionHeaderInfo.ChannelAccountNum.ToInt(),
        //        CustomerName = dto.InvoiceTransactionHeader.CustomerName,
        //        Phone1 = dto.InvoiceTransactionHeaderInfo.BillToDaytimePhone,
        //        Email = dto.InvoiceTransactionHeaderInfo.BillToEmail,
        //    };

        //    // if not found exist customer, add new customer
        //    if (!(await customerService.GetCustomerByCustomerFindAsync(find)))
        //    {
        //        await AddNewCustomerFromDtoAsync(dto, customerService);
        //    }

        //    // load info from customer data
        //    var customer = customerService.Data.Customer;

        //    dto.InvoiceTransactionHeader.CustomerUuid = customer.CustomerUuid;
        //    dto.InvoiceTransactionHeader.CustomerCode = customer.CustomerCode;
        //    dto.InvoiceTransactionHeader.CustomerName = customer.CustomerName;
        //    dto.InvoiceTransactionHeader.Terms = customer.Terms;
        //    dto.InvoiceTransactionHeader.TermsDays = customer.TermsDays;

        //    if (string.IsNullOrEmpty(dto.InvoiceTransactionHeader.SalesRep))
        //    {
        //        dto.InvoiceTransactionHeader.SalesRep = customer.SalesRep;
        //        dto.InvoiceTransactionHeader.CommissionRate = customer.CommissionRate;
        //    }
        //    if (string.IsNullOrEmpty(dto.InvoiceTransactionHeader.SalesRep2))
        //    {
        //        dto.InvoiceTransactionHeader.SalesRep2 = customer.SalesRep2;
        //        dto.InvoiceTransactionHeader.CommissionRate2 = customer.CommissionRate2;
        //    }
        //    if (string.IsNullOrEmpty(dto.InvoiceTransactionHeader.SalesRep3))
        //    {
        //        dto.InvoiceTransactionHeader.SalesRep3 = customer.SalesRep3;
        //        dto.InvoiceTransactionHeader.CommissionRate3 = customer.CommissionRate3;
        //    }
        //    if (string.IsNullOrEmpty(dto.InvoiceTransactionHeader.SalesRep4))
        //    {
        //        dto.InvoiceTransactionHeader.SalesRep4 = customer.SalesRep4;
        //        dto.InvoiceTransactionHeader.CommissionRate4 = customer.CommissionRate4;
        //    }
        //    return true;
        //}

        //protected async Task<bool> AddNewCustomerFromDtoAsync(InvoiceTransactionDataDto dto, CustomerService service)
        //{
        //    customerService.NewData();
        //    var newCustomer = customerService.Data;
        //    newCustomer.Customer.MasterAccountNum = dto.InvoiceTransactionHeader.MasterAccountNum.ToInt();
        //    newCustomer.Customer.ProfileNum = dto.InvoiceTransactionHeader.ProfileNum.ToInt();
        //    newCustomer.Customer.DatabaseNum = dto.InvoiceTransactionHeader.DatabaseNum.ToInt();
        //    newCustomer.Customer.CustomerUuid = Guid.NewGuid().ToString();
        //    newCustomer.Customer.CustomerCode = string.Empty;
        //    newCustomer.Customer.CustomerName = dto.InvoiceTransactionHeaderInfo.BillToName;
        //    newCustomer.Customer.CustomerType = (int)CustomerType.ImportNewCustomer;
        //    newCustomer.Customer.CustomerStatus = (int)CustomerStatus.Active;
        //    newCustomer.Customer.FirstDate = DateTime.UtcNow.Date;
        //    newCustomer.Customer.ChannelNum = dto.InvoiceTransactionHeaderInfo.ChannelNum.ToInt();
        //    newCustomer.Customer.ChannelAccountNum = dto.InvoiceTransactionHeaderInfo.ChannelAccountNum.ToInt();
        //    newCustomer.AddCustomerAddress(new CustomerAddress()
        //    {
        //        AddressCode = AddressCodeType.Ship,
        //        Name = dto.InvoiceTransactionHeaderInfo.ShipToName,
        //        Company = dto.InvoiceTransactionHeaderInfo.ShipToCompany,
        //        AddressLine1 = dto.InvoiceTransactionHeaderInfo.ShipToAddressLine1,
        //        AddressLine2 = dto.InvoiceTransactionHeaderInfo.ShipToAddressLine2,
        //        AddressLine3 = dto.InvoiceTransactionHeaderInfo.ShipToAddressLine3,
        //        City = dto.InvoiceTransactionHeaderInfo.ShipToCity,
        //        State = dto.InvoiceTransactionHeaderInfo.ShipToState,
        //        StateFullName = dto.InvoiceTransactionHeaderInfo.ShipToStateFullName,
        //        PostalCode = dto.InvoiceTransactionHeaderInfo.ShipToPostalCode,
        //        PostalCodeExt = dto.InvoiceTransactionHeaderInfo.ShipToPostalCodeExt,
        //        County = dto.InvoiceTransactionHeaderInfo.ShipToCounty,
        //        Country = dto.InvoiceTransactionHeaderInfo.ShipToCountry,
        //        Email = dto.InvoiceTransactionHeaderInfo.ShipToEmail,
        //        DaytimePhone = dto.InvoiceTransactionHeaderInfo.ShipToDaytimePhone,
        //        NightPhone = dto.InvoiceTransactionHeaderInfo.ShipToNightPhone,
        //    });
        //    newCustomer.AddCustomerAddress(new CustomerAddress()
        //    {
        //        AddressCode = AddressCodeType.Bill,
        //        Name = dto.InvoiceTransactionHeaderInfo.BillToName,
        //        Company = dto.InvoiceTransactionHeaderInfo.BillToCompany,
        //        AddressLine1 = dto.InvoiceTransactionHeaderInfo.BillToAddressLine1,
        //        AddressLine2 = dto.InvoiceTransactionHeaderInfo.BillToAddressLine2,
        //        AddressLine3 = dto.InvoiceTransactionHeaderInfo.BillToAddressLine3,
        //        City = dto.InvoiceTransactionHeaderInfo.BillToCity,
        //        State = dto.InvoiceTransactionHeaderInfo.BillToState,
        //        StateFullName = dto.InvoiceTransactionHeaderInfo.BillToStateFullName,
        //        PostalCode = dto.InvoiceTransactionHeaderInfo.BillToPostalCode,
        //        PostalCodeExt = dto.InvoiceTransactionHeaderInfo.BillToPostalCodeExt,
        //        County = dto.InvoiceTransactionHeaderInfo.BillToCounty,
        //        Country = dto.InvoiceTransactionHeaderInfo.BillToCountry,
        //        Email = dto.InvoiceTransactionHeaderInfo.BillToEmail,
        //        DaytimePhone = dto.InvoiceTransactionHeaderInfo.BillToDaytimePhone,
        //        NightPhone = dto.InvoiceTransactionHeaderInfo.BillToNightPhone,
        //    });
        //    return await customerService.AddCustomerAsync(newCustomer);
        //}

        ///// <summary>
        ///// Load info from inventory to Dto
        ///// Try use inventory uuid, sku, upc or phone find customer
        ///// If customer code not exist, add new customer. 
        ///// </summary>
        //protected async Task<bool> CheckInventoryAsync(InvoiceTransactionDataDto dto)
        //{
        //    if (dto == null || dto.InvoiceTransactionItems == null || dto.InvoiceTransactionItems.Count == 0)
        //    {
        //        AddError($"Sales Order items not found");
        //        return false;
        //    }

        //    var header = dto.InvoiceTransactionHeader;
        //    var masterAccountNum = dto.InvoiceTransactionHeader.MasterAccountNum.ToInt();
        //    var profileNum = dto.InvoiceTransactionHeader.ProfileNum.ToInt();

        //    // find product SKU for each item
        //    var findSku = dto.InvoiceTransactionItems.Select(x => new ProductFindClass() 
        //        { 
        //            SKU = x.SKU,
        //            UPC = x.SKU,
        //        }
        //    ).ToList();
        //    findSku = (await inventoryService.FindSkuByProductFindAsync(findSku, masterAccountNum, profileNum)).ToList();
        //    foreach (var item in dto.InvoiceTransactionItems)
        //    {
        //        if (item == null) continue;
        //        var sku = findSku.FindBySku(item.SKU);
        //        if (sku == null || sku.FoundSKU.IsZero()) continue;
        //        item.SKU = sku.FoundSKU;
        //    }

        //    // find inventory data
        //    var find = dto.InvoiceTransactionItems.Select(x => new InventoryFindClass() { SKU = x.SKU, WarehouseCode = x.WarehouseCode }).ToList();
        //    var notExistSkus = await inventoryService.FindNotExistSkuWarehouseAsync(find, masterAccountNum, profileNum);
        //    if (notExistSkus == null || notExistSkus.Count == 0)
        //        return true;

        //    var rtn = true;
        //    foreach (var item in dto.InvoiceTransactionItems)
        //    {
        //        if (item == null || item.SKU.IsZero()) continue;

        //        if (notExistSkus.FindBySkuWarehouse(item.SKU, item.WarehouseCode) != null)
        //        {
        //            await inventoryService.AddNewProductOrInventoryAsync(new ProductBasic()
        //            {
        //                DatabaseNum = header.DatabaseNum.ToInt(),
        //                MasterAccountNum = header.MasterAccountNum.ToInt(),
        //                ProfileNum = header.ProfileNum.ToInt(),
        //                SKU = item.SKU,
        //            });
        //        }
        //    }
        //    return rtn;
        //}

    }
}



