

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default InvoiceTransactionService Calculator class.
    /// </summary>
    public partial class InvoiceTransactionServiceCalculatorDefault : ICalculator<InvoiceTransactionData>
    {
        protected IDataBaseFactory dbFactory { get; set; }

        public InvoiceTransactionServiceCalculatorDefault(IMessage serviceMessage, IDataBaseFactory dbFactory)
        {
            this.ServiceMessage = serviceMessage;
            this.dbFactory = dbFactory;
        }

        public virtual void PrepareData(InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {

        }

        private DateTime now = DateTime.Now;

        #region Service Property


        private InventoryService _inventoryService;
        protected InventoryService inventoryService => _inventoryService ??= new InventoryService(dbFactory);

        private InvoiceService _invoiceService;
        protected InvoiceService invoiceService => _invoiceService ??= new InvoiceService(dbFactory);
        #endregion

        #region GetDataWithCache

        /// <summary>
        /// get inventory data
        /// </summary>
        /// <param name="data"></param>
        /// <param name="sku"></param>
        /// <returns></returns>
        public virtual InventoryData GetInventoryData(InvoiceTransactionData data, string sku)
        {
            var key = data.InvoiceTransaction.MasterAccountNum + "_" + data.InvoiceTransaction.ProfileNum + '_' + sku;
            return data.GetCache(key, () =>
            {
                inventoryService.GetByNumber(data.InvoiceTransaction.MasterAccountNum, data.InvoiceTransaction.ProfileNum, sku);
                return inventoryService.Data;
            });
        }

        public virtual InvoiceData GetInvoiceData(InvoiceTransactionData data, string invoiceNumber)
        {
            var key = data.InvoiceTransaction.MasterAccountNum + "_" + data.InvoiceTransaction.ProfileNum + '_' + invoiceNumber;
            return data.GetCache(key, () =>
            {
                invoiceService.GetByNumber(data.InvoiceTransaction.MasterAccountNum, data.InvoiceTransaction.ProfileNum, invoiceNumber);
                return invoiceService.Data;
            });
        }


        #endregion

        public virtual bool SetDefault(InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            SetDefaultSummary(data, processingMode);
            SetDefaultDetail(data, processingMode);
            return true;
        }

        public virtual bool SetDefaultSummary(InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null || data.InvoiceTransaction == null)
                return false;

            if (data.InvoiceTransaction.TransTime.IsZero()) data.InvoiceTransaction.TransTime = now.TimeOfDay;
            if (data.InvoiceTransaction.TransDate.IsZero())
            {
                data.InvoiceTransaction.TransDate = now.Date;
                data.InvoiceTransaction.TransTime = now.TimeOfDay;
            }
            data.InvoiceTransaction.UpdateDateUtc = now;

            if (processingMode == ProcessingMode.Add)
            {
                //set default tran num  
                if (data.InvoiceTransaction.TransNum.IsZero())
                {
                    using (var tx = new ScopedTransaction(dbFactory))
                    {
                        data.InvoiceTransaction.TransNum = InvoiceTransactionHelper.GetTranSeqNum(data.InvoiceTransaction.InvoiceNumber, data.InvoiceTransaction.ProfileNum.ToInt());
                    }
                }
                //for Add mode, always reset uuid
                data.InvoiceTransaction.TransUuid = Guid.NewGuid().ToString();
            }

            //Set default for invoice
            var invoiceData = GetInvoiceData(data, data.InvoiceTransaction.InvoiceNumber);
            if (invoiceData != null)
            {
                data.InvoiceTransaction.InvoiceUuid = invoiceData.InvoiceHeader.InvoiceUuid;
            }

            //EnterBy
            //UpdateBy


            return true;
        }

        public virtual bool SetDefaultDetail(InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null || data.InvoiceReturnItems == null || data.InvoiceReturnItems.Count == 0)
                return false;

            //TODO: add set default for detail list logic
            // This is generated sample code

            foreach (var item in data.InvoiceReturnItems)
            {
                SetDefault(item, data, processingMode);
            }
            return true;
        }

        //TODO: add set default for detail line logic
        //This is generated sample code
        protected virtual bool SetDefault(InvoiceReturnItems item, InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            item.UpdateDateUtc = now;
            if (item.ReturnTime.IsZero()) item.ReturnTime = now.TimeOfDay;
            if (item.ReturnDate.IsZero())
            {
                item.ReturnDate = now.Date;
                item.ReturnTime = now.TimeOfDay;
            } 

            if (processingMode == ProcessingMode.Add)
            {
                //for Add mode, always reset uuid
                item.ReturnItemUuid = Guid.NewGuid().ToString();
            }

            //Set default for invoice
            var invoiceData = GetInvoiceData(data, data.InvoiceTransaction.InvoiceNumber);
            if (invoiceData != null)
            {
                item.InvoiceUuid = invoiceData.InvoiceHeader.InvoiceUuid;
                //item.InvoiceDiscountPrice=invoiceData.InvoiceHeader.DiscountAmount
                var invoiceItem= invoiceData.InvoiceItems.Where(i => i.InvoiceItemsUuid == item.InvoiceItemsUuid).FirstOrDefault();
                if (invoiceItem != null)
                {
                    item.InvoiceWarehouseCode = invoiceItem.WarehouseCode;
                    item.InvoiceWarehouseUuid = invoiceItem.WarehouseUuid;
                }
                
            } 
            //Set SKU info
            var inventoryData = GetInventoryData(data, item.SKU);
            if (inventoryData != null)
            {
                item.ProductUuid = inventoryData.ProductBasic.ProductUuid;
                var inventory = inventoryService.GetInventory(inventoryData, item);
                item.InventoryUuid = inventory.InventoryUuid;
                item.WarehouseCode = inventory.WarehouseCode;
                item.WarehouseUuid = inventory.WarehouseUuid;
                item.LotNum = inventory.LotNum;
                item.UOM = inventory.UOM;
                item.Currency = inventory.Currency;
            }

            return true;
        }

        public virtual bool Calculate(InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            PrepareData(data);
            CalculateDetail(data, processingMode);
            CalculateSummary(data, processingMode);
            return true;
        }

        public virtual bool CalculateSummary(InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            //TODO: add calculate summary object logic
            /* This is generated sample code

            var setting = new ERPSetting();
            var sum = data.InvoiceHeader;

            sum.ShippingAmount = sum.ShippingAmount.ToAmount();
            sum.MiscAmount = sum.MiscAmount.ToAmount();
            sum.ChargeAndAllowanceAmount = sum.ChargeAndAllowanceAmount.ToAmount();

            // if exist DiscountRate, calculate discount amount, otherwise use entry discount amount
            if (!sum.DiscountRate.IsZero())
                sum.DiscountAmount = (sum.SubTotalAmount * sum.DiscountRate.ToRate()).ToAmount();
            else
                sum.DiscountRate = 0;

            // tax calculate should deduct discount from taxable amount
            sum.TaxAmount = ((sum.TaxableAmount - sum.DiscountAmount * (sum.TaxableAmount / sum.SubTotalAmount).ToRate()) * sum.TaxRate).ToAmount();

            if (setting.TaxForShippingAndHandling)
            {
                sum.ShippingTaxAmount = (sum.ShippingAmount * sum.TaxRate).ToAmount();
                sum.MiscTaxAmount = (sum.MiscAmount * sum.TaxRate).ToAmount();
                sum.TaxAmount = (sum.TaxAmount + sum.ShippingTaxAmount + sum.MiscTaxAmount).ToAmount();
            }

            sum.SalesAmount = (sum.SubTotalAmount - sum.DiscountAmount).ToAmount();
            sum.TotalAmount =(
                sum.SalesAmount +
                sum.TaxAmount +
                sum.ShippingAmount +
                sum.MiscAmount +
                sum.ChargeAndAllowanceAmount
                ).ToAmount();

            sum.Balance = (sum.TotalAmount - sum.PaidAmount - sum.CreditAmount).ToAmount();

            sum.DueDate = sum.InvoiceDate.AddDays(sum.TermsDays);

            */
            return true;
        }

        public virtual bool CalculateDetail(InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            //TODO: add calculate summary object logic
            /* This is generated sample code

            var sum = data.InvoiceTransaction;
            sum.SubTotalAmount = 0;
            sum.TaxableAmount = 0;
            sum.NonTaxableAmount = 0;
            sum.UnitCost = 0;
            sum.AvgCost = 0;
            sum.LotCost = 0;

            foreach (var item in data.InvoiceItems)
            {
                if (item is null || item.IsEmpty)
                    continue;
                SetDefault(item, data, processingMode);
                CalculateDetail(item, data, processingMode);
                if (item.IsAr)
                {
                    sum.SubTotalAmount += item.ExtAmount;
                    sum.TaxableAmount += item.TaxableAmount;
                    sum.NonTaxableAmount += item.NonTaxableAmount;
                }
                sum.UnitCost += item.UnitCost;
                sum.AvgCost += item.AvgCost;
                sum.LotCost += item.LotCost;
            }

            */
            return true;
        }

        //TODO: add set default for detail line logic
        /* This is generated sample code
        protected virtual bool CalculateDetail(InvoiceItems item, InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (item is null || item.IsEmpty)
                return false;

            var setting = new ERPSetting();
            var sum = data.InvoiceHeader;
            //var prod = data.GetCache<ProductBasic>(ProductId);
            //var inv = data.GetCache<Inventory>(InventoryId);
            //var invCost = new ItemCostClass(inv);
            var invCost = new ItemCostClass();

            item.Price = item.Price.ToPrice();
            item.ShippingAmount = item.ShippingAmount.ToAmount();
            item.MiscAmount = item.MiscAmount.ToAmount();
            item.ChargeAndAllowanceAmount = item.ChargeAndAllowanceAmount.ToAmount();
            item.OrderQty = item.OrderQty.ToQty();
            item.ShipQty = item.ShipQty.ToQty();
            item.CancelledQty = item.CancelledQty.ToQty();

            item.PackType = string.Empty;
            if (string.IsNullOrEmpty(item.PackType) || item.PackType.EqualsIgnoreSpace(PackType.Each))
                item.PackQty = 1;

            if (item.PackQty > 1)
            {
                item.OrderQty = item.OrderPack * item.PackQty;
                item.ShipQty = item.ShipPack * item.PackQty;
                item.CancelledQty = item.CancelledPack * item.PackQty;
            }
            else
            {
                item.OrderPack = item.OrderQty;
                item.ShipPack = item.ShipQty;
                item.CancelledPack = item.CancelledQty;
            }

            //PriceRule
            // if exist DiscountRate, calculate after discount unit price
            if (!item.DiscountRate.IsZero())
            {
                item.DiscountPrice = (item.Price * (item.DiscountRate.ToRate() / 100)).ToPrice();
                item.ExtAmount = (item.DiscountPrice * item.ShipQty).ToAmount();
                item.DiscountAmount = (item.Price * item.ShipQty).ToAmount() - item.ExtAmount;
            }
            else
            {
                item.DiscountPrice = item.Price;
                item.ExtAmount = (item.Price * item.ShipQty).ToAmount() - item.DiscountAmount.ToAmount();
            }

            if (item.Taxable)
            {
                item.TaxableAmount = item.ExtAmount;
                item.NonTaxableAmount = 0;
                if (item.TaxRate.IsZero())
                    item.TaxRate = sum.TaxRate;
            }
            else
            {
                item.TaxableAmount = 0;
                item.NonTaxableAmount = item.ExtAmount;
                item.TaxRate = 0;
            }
            item.TaxAmount = (item.TaxableAmount * item.TaxRate).ToAmount();

            if (setting.TaxForShippingAndHandling)
            {
                item.ShippingTaxAmount = (item.ShippingAmount * item.TaxRate).ToAmount();
                item.MiscTaxAmount = (item.MiscAmount * item.TaxRate).ToAmount();
            }

            item.ItemTotalAmount =(
                item.ExtAmount +
                item.TaxAmount +
                item.ShippingAmount +
                item.ShippingTaxAmount +
                item.MiscAmount +
                item.MiscTaxAmount +
                item.ChargeAndAllowanceAmount
                ).ToAmount();

            item.UnitCost = invCost.UnitCost;
            item.AvgCost = invCost.AvgCost;
            item.LotCost = invCost.AvgCost;
            if (!item.Costable)
            {
                item.UnitCost = 0;
                item.AvgCost = 0;
                item.LotCost = 0;
            }
            else if (!item.IsProfit)
            {
                item.UnitCost = item.ExtAmount;
                item.AvgCost = item.ExtAmount;
                item.LotCost = item.ExtAmount;
            }

            return true;
        }
        */

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

    }

}



