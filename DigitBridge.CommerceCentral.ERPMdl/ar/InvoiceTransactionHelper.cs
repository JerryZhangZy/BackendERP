


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Data;
using Microsoft.Data.SqlClient;

using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a InvoiceTransactionHelper SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class InvoiceTransactionHelper
    {
        public static bool ExistNumber(int number, string invoiceNumber, int profileNum)
        {

            var sql = $@"
SELECT COUNT(1) FROM InvoiceTransaction tbl
WHERE InvoiceNumber = @invoiceNumber
AND ProfileNum = @profileNum
AND TransNum = @number
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                invoiceNumber.ToSqlParameter("invoiceNumber"),
                profileNum.ToSqlParameter("profileNum"),
                number.ToSqlParameter("number")
            );
            return result > 0;
        }

        public static async Task<bool> ExistNumberAsync(int number, string invoiceNumber, int profileNum)
        {

            var sql = $@"
SELECT COUNT(1) FROM InvoiceTransaction tbl
WHERE InvoiceNumber = @invoiceNumber
AND ProfileNum = @profileNum
AND TransNum = @number
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                invoiceNumber.ToSqlParameter("invoiceNumber"),
                profileNum.ToSqlParameter("profileNum"),
                number.ToSqlParameter("number")
            );
            return result > 0;
        }

        public static async Task<bool> ExistCheckNum(int masterAccountNum, int profileNum, string checkNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM InvoiceTransaction tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND CheckNum = @checkNum
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                checkNum.ToSqlParameter("checkNum")
            );
            return result > 0;
        }

        public static bool ExistId(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM InvoiceTransaction tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND TransUuid = @uuid
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                uuid.ToSqlParameter("uuid")
            );
            return result > 0;
        }

        public static async Task<bool> ExistIdAsync(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM InvoiceTransaction tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND TransUuid = @uuid
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                uuid.ToSqlParameter("uuid")
            );
            return result > 0;
        }

        public static bool ExistRowNum(long rowNum, int masterAccountNum, int profileNum, int transType)
        {
            var sql = $@"
SELECT COUNT(1) FROM InvoiceTransaction tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND RowNum= @rowNum
AND TransType=@transType
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                rowNum.ToSqlParameter("rowNum"),
                transType.ToSqlParameter("transType")
            );
            return result > 0;
        }

        public static async Task<bool> ExistRowNumAsync(long rowNum, int masterAccountNum, int profileNum, int transType)
        {
            var sql = $@"
SELECT COUNT(1) FROM InvoiceTransaction tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND RowNum= @rowNum
AND TransType=@transType
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                rowNum.ToSqlParameter("rowNum"),
                transType.ToSqlParameter("transType")
            );
            return result > 0;
        }

        public static async Task<int> GetTranSeqNumAsync(string invoiceNumber, int profileNum)
        {
            var sql = $@"
SELECT isnull(max(TransNum),0)+1 FROM InvoiceTransaction tbl
WHERE ProfileNum = @profileNum
AND invoiceNumber= @invoiceNumber
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                profileNum.ToSqlParameter("profileNum"),
                invoiceNumber.ToSqlParameter("invoiceNumber")
            );
            return result;
        }
        public static int GetTranSeqNum(string invoiceNumber, int profileNum)
        {
            var sql = $@"
SELECT isnull(max(TransNum),0)+1 FROM InvoiceTransaction tbl
WHERE ProfileNum = @profileNum
AND invoiceNumber= @invoiceNumber
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                profileNum.ToSqlParameter("profileNum"),
                invoiceNumber.ToSqlParameter("invoiceNumber")
            );
            return result;
        }

        public static List<(long rowNum, string sku, decimal returnQty)> GetReturnItemsByInvoiceUuid(IDataBaseFactory dbFactory, string inoviceUuid)
        {

            var sql = $@"
SELECT RowNum,Sku,ReturnQty 
FROM InvoiceReturnItems  
where InvoiceUuid = @inoviceUuid
";
            using (var tx = new ScopedTransaction(dbFactory))
            {
                return SqlQuery.Execute(sql, (long rowNum, string sku, decimal returnQty) => (rowNum, sku, returnQty), inoviceUuid.ToSqlParameter("inoviceUuid"));
            }
        }

        public async static Task<decimal> GetPaidAmountByInvoiceUuidAsync(IDataBaseFactory dbFactory, string inoviceUuid)
        {

            var sql = $@"
select sum(TotalAmount) from InvoiceTransaction
where InvoiceUuid=@inoviceUuid and TransType=@transType

";
            using (var tx = new ScopedTransaction(dbFactory))
            {
                return (await SqlQuery.ExecuteScalarAsync<decimal?>(sql, inoviceUuid.ToSqlParameter("inoviceUuid"), ((int)TransTypeEnum.Payment).ToSqlParameter("transType"))).ToAmount();
            }
        }
    }
}



