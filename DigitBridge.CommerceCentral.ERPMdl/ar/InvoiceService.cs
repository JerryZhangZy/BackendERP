

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.Base.Common;
using Newtonsoft.Json;
using DigitBridge.CommerceCentral.ERPApiSDK;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class InvoiceService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override InvoiceService Init()
        {
            base.Init();
            SetDtoMapper(new InvoiceDataDtoMapperDefault());
            SetCalculator(new InvoiceServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new InvoiceServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(InvoiceDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(InvoiceDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoice)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Invoice))
                return false;

            // load data from dto
            FromDto(payload.Invoice);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoice)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Invoice)))
                return false;

            // load data from dto
            FromDto(payload.Invoice);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InvoiceDataDto dto)
        {
            if (dto is null || !dto.HasInvoiceHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.InvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InvoiceDataDto dto)
        {
            if (dto is null || !dto.HasInvoiceHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.InvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoice || payload.Invoice.InvoiceHeader.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Invoice))
                return false;

            // load data 
            GetData(payload.Invoice.InvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(payload.Invoice);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoice)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Invoice)))
                return false;

            // load data 
            await GetDataAsync(payload.Invoice.InvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(payload.Invoice);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Get multi sale order with detail by InvoiceNumbers
        /// </summary>
        /// <param name="payload"></param>
        /// <returns></returns>
        public virtual async Task GetListByInvoiceNumbersAsync(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoiceNumbers)
            {
                AddError("InvoiceNumbers is required.");
                payload.Messages = this.Messages;
                payload.Success = false;
            }
            //var rowNums = await new InvoiceList(dbFactory).GetRowNumListAsync(payload.InvoiceNumbers, payload.MasterAccountNum, payload.ProfileNum);

            var result = new List<InvoiceDataDto>();
            foreach (var invoiceNumber in payload.InvoiceNumbers)
            {
                if (!(await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, invoiceNumber)))
                    continue;
                result.Add(this.ToDto());
                this.DetachData(this.Data);
            }
            payload.Invoices = result;
        }
        /// <summary>
        ///  get InvoiceHeader data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="invoiceNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetByNumberAsync(PayloadBase payload, string invoiceNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, invoiceNumber);
        }
        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="invoiceNumber"></param>
        /// <returns></returns>
        public virtual bool GetByNumber(InvoicePayload payload, string invoiceNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, invoiceNumber);
        }

        /// <summary>
        /// get full InvoiceData by number
        /// </summary>
        public virtual async Task<bool> GetDataByNumberAsync(int masterAccountNum, int profileNum, string number)
        {
            if (ProcessMode == ProcessingMode.Add)
                return false;
            if (Data is null)
                NewData();

            var rowNum = await Data.GetRowNumAsync(number, profileNum, masterAccountNum);

            var success = await this.GetDataAsync(rowNum.ToLong());
            if (!success)
                AddError($"Data not found for number : {number}");
            return success;
        }

        /// <summary>
        /// get full InvoiceData by number
        /// </summary>
        public virtual bool GetDataByNumber(int masterAccountNum, int profileNum, string number)
        {
            if (ProcessMode == ProcessingMode.Add)
                return false;
            if (Data is null)
                NewData();

            var rowNum = Data.GetRowNum(number, profileNum, masterAccountNum);

            var success = this.GetData(rowNum.ToLong());
            if (!success)
                AddError($"Data not found for number : {number}");
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="invoiceNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByInvoiceNumberAsync(InvoicePayload payload, string invoiceNumber)
        {
            if (string.IsNullOrEmpty(invoiceNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, invoiceNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="invoiceNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(InvoicePayload payload, string invoiceNumber)
        {
            if (string.IsNullOrEmpty(invoiceNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, invoiceNumber);
            success = success && DeleteData();
            return success;
        }

        public virtual async Task<bool> UpdateInvoiceDocNumberAsync(string invoiceUuid, string docNumber)
        {
            Edit();
            if (await GetDataByIdAsync(invoiceUuid))
            {
                Data.InvoiceHeader.QboDocNumber = docNumber;
                return await SaveDataAsync();
            }
            return false;
        }

        public virtual bool UpdateInvoiceDocNumber(string invoiceUuid, string docNumber)
        {
            Edit();
            if (GetDataById(invoiceUuid))
            {
                Data.InvoiceHeader.QboDocNumber = docNumber;
                return SaveData();
            }
            return false;
        }

        public async Task<bool> ExistInvoiceNumber(string invoiceNum, int masterAccountNum, int profileNum)
        {
            return await InvoiceHelper.ExistNumberAsync(invoiceNum, masterAccountNum, profileNum);
        }

        public async Task<bool> ReceivedInvoiceTransactionReturnbackItem(InvoiceTransactionDataDto transaction)
        {
            int masterAccountNum = transaction.InvoiceDataDto.InvoiceHeader.MasterAccountNum.ToInt();
            int profileNum = transaction.InvoiceDataDto.InvoiceHeader.ProfileNum.ToInt();
            string invoiceNumber = transaction.InvoiceDataDto.InvoiceHeader.InvoiceNumber;
            await GetDataByNumberAsync(masterAccountNum, profileNum, invoiceNumber);
            decimal returnAmount =
                transaction.InvoiceTransaction.TotalAmount.ToDecimal() - transaction.InvoiceTransaction.DiscountAmount.ToDecimal();
            this.Data.InvoiceHeader.CreditAmount += returnAmount;
            this.Data.InvoiceHeader.Balance -= returnAmount;

            return await SaveDataAsync();
        }
        #region To qbo queue 

        private QboInvoiceClient _qboInvoiceClient;

        protected QboInvoiceClient qboInvoiceClient
        {
            get
            {
                if (_qboInvoiceClient is null)
                    _qboInvoiceClient = new QboInvoiceClient();
                return _qboInvoiceClient;
            }
        }


        /// <summary>
        /// convert erp invoice to a queue message then put it to qbo queue
        /// </summary>
        /// <param name="masterAccountNum"></param>
        /// <param name="profileNum"></param>
        /// <returns></returns>
        public async Task<bool> AddQboInvoiceEventAsync(int masterAccountNum, int profileNum)
        {
            var eventDto = new AddErpEventDto()
            {
                MasterAccountNum = masterAccountNum,
                ProfileNum = profileNum,
                ProcessUuid = Data.InvoiceHeader.InvoiceUuid,
            };
            return await qboInvoiceClient.SendAddQboInvoiceAsync(eventDto);
            //return await ErpEventClientHelper.AddEventERPAsync(eventDto, "/addQuicksBooksInvoice");
        }

        public async Task<bool> VoidQboInvoiceEventAsync(int masterAccountNum, int profileNum)
        {
            var eventDto = new AddErpEventDto()
            {
                MasterAccountNum = masterAccountNum,
                ProfileNum = profileNum,
                ProcessUuid = Data.InvoiceHeader.InvoiceUuid,
            };
            return await qboInvoiceClient.SendVoidQboInvoiceAsync(eventDto);
            //return await ErpEventClientHelper.AddEventERPAsync(eventDto, "/addQuicksBooksInvoiceVoid");
        }

        #endregion

        #region Pay invoice

        public async Task<bool> PayInvoiceAsync(InvoiceTransaction trans)
        {
            var changedPaidAmount = trans.TransType == (int)TransTypeEnum.Payment
                ? trans.TotalAmount - trans.OriginalPaidAmount
                : trans.OriginalPaidAmount - trans.TotalAmount;

            var sql = $@"
update InvoiceHeader set PaidAmount=PaidAmount+@0,Balance=Balance-@0
where InvoiceNumber=@1 
and MasterAccountNum=@2 
and ProfileNum=@3
";
            var result = await dbFactory.Db.ExecuteAsync(sql,
                    changedPaidAmount.ToSqlParameter("@0"),
                    trans.InvoiceNumber.ToSqlParameter("@1"),
                    trans.MasterAccountNum.ToSqlParameter("@2"),
                    trans.ProfileNum.ToSqlParameter("@3")
                    );
            return result > 0;
        }

        public bool PayInvoice(InvoiceTransaction trans)
        {
            var changedPaidAmount = trans.TransType == (int)TransTypeEnum.Payment
                ? trans.TotalAmount - trans.OriginalPaidAmount
                : trans.OriginalPaidAmount - trans.TotalAmount;

            var sql = $@"
update InvoiceHeader set PaidAmount=PaidAmount+@0,Balance=Balance-@0
where InvoiceNumber=@1 
and MasterAccountNum=@2 
and ProfileNum=@3
";
            var result = dbFactory.Db.Execute(sql,
                    changedPaidAmount.ToSqlParameter("@0"),
                    trans.InvoiceNumber.ToSqlParameter("@1"),
                    trans.MasterAccountNum.ToSqlParameter("@2"),
                    trans.ProfileNum.ToSqlParameter("@3")
                    );
            return result > 0;
        }

        #endregion
    }
}


