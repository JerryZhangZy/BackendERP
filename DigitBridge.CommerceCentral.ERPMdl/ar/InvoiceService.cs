
    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class InvoiceService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override InvoiceService Init()
        {
            base.Init();
            SetDtoMapper(new InvoiceDataDtoMapperDefault());
            SetCalculator(new InvoiceServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new InvoiceServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(InvoiceDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(InvoiceDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto).ConfigureAwait(false)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync().ConfigureAwait(false);
        }

        public virtual bool Add(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoice)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Invoice))
                return false;

            // load data from dto
            FromDto(payload.Invoice);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoice)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload).ConfigureAwait(false)))
                return false;

            if (!(await ValidateAsync(payload.Invoice).ConfigureAwait(false)))
                return false;

            // load data from dto
            FromDto(payload.Invoice);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync().ConfigureAwait(false);
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InvoiceDataDto dto)
        {
            if (dto is null || !dto.HasInvoiceHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.InvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InvoiceDataDto dto)
        {
            if (dto is null || !dto.HasInvoiceHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto).ConfigureAwait(false)))
                return false;

            // load data 
            await GetDataAsync(dto.InvoiceHeader.RowNum.ToLong()).ConfigureAwait(false);

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoice || payload.Invoice.InvoiceHeader.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Invoice))
                return false;

            // load data 
            GetData(payload.Invoice.InvoiceHeader.RowNum.ToLong());

            // load data from dto
            FromDto(payload.Invoice);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoice)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload).ConfigureAwait(false)))
                return false;

            if (!(await ValidateAsync(payload.Invoice).ConfigureAwait(false)))
                return false;

            // load data 
            await GetDataAsync(payload.Invoice.InvoiceHeader.RowNum.ToLong()).ConfigureAwait(false);

            // load data from dto
            FromDto(payload.Invoice);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Get invoice with detail by invoiceNumber
        /// </summary>
        /// <param name="invoiceNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetByInvoiceNumberAsync(string invoiceNumber, InvoicePayload payload)
        {
            if (string.IsNullOrEmpty(invoiceNumber))
                return false;
            List();

            if (!(await ValidateAccountAsync(payload,invoiceNumber).ConfigureAwait(false)))
                return false; 

            var rowNum = await _data.GetRowNumAsync(invoiceNumber, payload.ProfileNum, payload.MasterAccountNum);
            if (!rowNum.HasValue)
                return false;
            var success = await GetDataAsync(rowNum.Value);
            //if (success) ToDto();
            return success;
        }

        /// <summary>
        /// Delete invoice by invoiceUuid
        /// </summary>
        /// <param name="rowNum"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByRowNumAsync( InvoicePayload payload, long rowNum)
        {
            payload.Invoice = new InvoiceDataDto();
            payload.Invoice.InvoiceHeader = new InvoiceHeaderDto();
            payload.Invoice.InvoiceHeader.RowNum = rowNum;

            //set delete mode
            Delete();

            if (!(await ValidateAccountAsync(payload).ConfigureAwait(false)))
                return false;

            //load data
            var success = await GetDataAsync(rowNum.ToLong());
            //delete salesorder and its sub items
            success = success && DeleteData();
            return success;
        }
        /// <summary>
        /// Get invoice list by Uuid list
        /// </summary>
        public virtual async Task<InvoicePayload> GetListByInvoiceUuidAsync(InvoicePayload payload)
        {
            if (payload is null || !payload.HasInvoiceUuids)
                return null;
            var invoiceUuids = payload.InvoiceUuids;

            List();
            var result = new List<InvoiceDataDto>();
            foreach (var id in invoiceUuids)
            {
                if (!(await this.GetDataByIdAsync(id)))
                    continue;
                result.Add(this.ToDto());
                this.DetachData(this.Data);
            }
            payload.Invoices = result;
            return payload;
        }
    }
}



