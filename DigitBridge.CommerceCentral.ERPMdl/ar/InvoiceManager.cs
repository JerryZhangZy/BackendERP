//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.AspNetCore.Http;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a InvoiceService.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public class InvoiceManager : IInvoiceManager, IMessage
    {

        public InvoiceManager() : base() { }

        public InvoiceManager(IDataBaseFactory dbFactory)
        {
            SetDataBaseFactory(dbFactory);
        }

        [XmlIgnore, JsonIgnore]
        protected InvoiceService _invoiceService;
        [XmlIgnore, JsonIgnore]
        public InvoiceService invoiceService
        {
            get
            {
                if (_invoiceService is null)
                    _invoiceService = new InvoiceService(dbFactory);
                return _invoiceService;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected InvoiceDataDtoCsv _invoiceDataDtoCsv;
        [XmlIgnore, JsonIgnore]
        public InvoiceDataDtoCsv invoiceDataDtoCsv
        {
            get
            {
                if (_invoiceDataDtoCsv is null)
                    _invoiceDataDtoCsv = new InvoiceDataDtoCsv();
                return _invoiceDataDtoCsv;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected InvoiceList _invoiceList;
        [XmlIgnore, JsonIgnore]
        public InvoiceList invoiceList
        {
            get
            {
                if (_invoiceList is null)
                    _invoiceList = new InvoiceList(dbFactory);
                return _invoiceList;
            }
        }

        public async Task<byte[]> ExportAsync(InvoicePayload payload)
        {
            var rowNumList = await invoiceList.GetRowNumListAsync(payload);
            var dtoList = new List<InvoiceDataDto>();
            foreach (var x in rowNumList)
            {
                if (invoiceService.GetData(x))
                    dtoList.Add(invoiceService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new InvoiceDataDto());
            return invoiceDataDtoCsv.Export(dtoList);
        }

        public byte[] Export(InvoicePayload payload)
        {
            var rowNumList = invoiceList.GetRowNumList(payload);
            var dtoList = new List<InvoiceDataDto>();
            foreach (var x in rowNumList)
            {
                if (invoiceService.GetData(x))
                    dtoList.Add(invoiceService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new InvoiceDataDto());
            return invoiceDataDtoCsv.Export(dtoList);
        }

        public void Import(InvoicePayload payload, IFormFileCollection files)
        {
            if (files == null || files.Count == 0)
            {
                AddError("no files upload");
                return;
            }
            foreach (var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list = invoiceDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.Invoice = item;
                    if (invoiceService.Add(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in invoiceService.Messages)
                            Messages.Add(msg);
                        invoiceService.Messages.Clear();
                    }
                }
                if (payload.HasInvoice)
                    payload.Invoice = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        public async Task ImportAsync(InvoicePayload payload, IFormFileCollection files)
        {
            if (files == null || files.Count == 0)
            {
                AddError("no files upload");
                return;
            }
            foreach (var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list = invoiceDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.Invoice = item;
                    if (await invoiceService.AddAsync(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in invoiceService.Messages)
                            Messages.Add(msg);
                        invoiceService.Messages.Clear();
                    }
                }
                if (payload.HasInvoice)
                    payload.Invoice = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        #region DataBase
        [XmlIgnore, JsonIgnore]
        protected IDataBaseFactory _dbFactory;

        [XmlIgnore, JsonIgnore]
        public IDataBaseFactory dbFactory
        {
            get
            {
                if (_dbFactory is null)
                    _dbFactory = DataBaseFactory.CreateDefault();
                return _dbFactory;
            }
        }

        public void SetDataBaseFactory(IDataBaseFactory dbFactory)
        {
            _dbFactory = dbFactory;
        }

        #endregion DataBase

        #region Messages
        protected IList<MessageClass> _messages;
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (_messages is null)
                    _messages = new List<MessageClass>();
                return _messages;
            }
            set { _messages = value; }
        }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             Messages.Add(message, MessageLevel.Info, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Warning, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Error, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Fatal, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Debug, code);

        #endregion Messages

        /// <summary>
        /// Load OrderShipment and SalesOrder, create Invoice for each OrderShipment.
        /// </summary>
        /// <param name="centralOrderUuid"></param>
        /// <returns>Success Create Invoice, Invoice Number</returns>
        public async Task<(bool, string)> CreateInvoiceByOrderShipmentIdAsync(string orderShimentUuid)
        {
            string invoiceNumber = "";

            //Get OrderShipment by uuid
            var osData = await GetOrderShipmentAsync(orderShimentUuid);
            if (osData is null)
            {
                AddError($"OrderShipment uuid {orderShimentUuid} not found.");
                return (false, "");
            }

            //Get Sale by uuid
            string salesOrderUuid = "";// osData.OrderShipmentHeader.s
            if (string.IsNullOrEmpty(salesOrderUuid))
            {
                long orderDCAssignmentNum = osData.OrderShipmentHeader.OrderDCAssignmentNum ?? 0;
                if (orderDCAssignmentNum == 0)
                {
                    AddError($"No OrderDCAssignmentNum of OrderShipment {orderShimentUuid}.");
                    return (false, "");
                }
                salesOrderUuid = await GetSalesOrderUuidAsync(orderDCAssignmentNum);
            }
            if (string.IsNullOrEmpty(salesOrderUuid))
            {
                AddError($"SalesOrder uuid {orderShimentUuid} not found.");
                return (false, "");
            }

            if ((await ExistSalesOrderInInvoiceAsync(salesOrderUuid)))
            {
                AddError($"SalesOrderUuid {salesOrderUuid} has transferred to sales order.");
                return (false, "");
            }

            var soData = await GetSalesOrderAsync(salesOrderUuid);
            if (soData is null)
            {
                AddError($"SalesOrder {salesOrderUuid} not found.");
                return (false, "");
            }
       
            //Create Invoice
            var invoiceData = await CreateInvoiceAsync(osData, soData);

            bool ret = invoiceData != null;
            if(ret)
            {
                invoiceNumber = invoiceData.InvoiceHeader.InvoiceNumber;
            }
            return (ret, invoiceNumber);
        }

        /// <summary>
        /// Get OrderShipmentData by centralOrderUuid
        /// </summary>
        /// <param name="orderShimentUuid"></param>
        /// <returns>OrderShipmentData</returns>
        protected async Task<OrderShipmentData> GetOrderShipmentAsync(string orderShimentUuid)
        {
            //Get OrderShipment by uuid
            var osSrv = new OrderShipmentService(dbFactory);

            if (!(await osSrv.GetDataByIdAsync(orderShimentUuid)))
                return null;
            return osSrv.Data;
        }

        /// <summary>
        /// Get SalesOrderData by OrderDCAssignmentNum
        /// </summary>
        /// <param name="orderDCAssignmentNum"></param>
        /// <returns>SalesOrderData</returns>
        protected async Task<string> GetSalesOrderUuidAsync(long orderDCAssignmentNum)
        {
            //Get SalesOrderData by uuid
            using (var trs = new ScopedTransaction(dbFactory))
                return await SalesOrderHelper.GetSalesOrderUuidAsync(orderDCAssignmentNum);
        }

        /// <summary>
        /// Check SalesOrder is already exist in Invoice
        /// </summary>
        /// <param name="salesOrderUuid"></param>
        /// <returns>Exist or Not</returns>
        protected async Task<bool> ExistSalesOrderInInvoiceAsync(string salesOrderUuid)
        {
            using (var trs = new ScopedTransaction(dbFactory))
                return await InvoiceHelper.ExistSalesOrderUuidAsync(salesOrderUuid);
        }

        /// <summary>
        /// Get SalesOrderData by salesOrderUuid
        /// </summary>
        /// <param name="salesOrderUuid"></param>
        /// <returns>SalesOrderData</returns>
        protected async Task<SalesOrderData> GetSalesOrderAsync(string salesOrderUuid)
        {
            //Get SalesOrder by uuid
            var soSrv = new SalesOrderService(dbFactory);

            if (!(await soSrv.GetDataByIdAsync(salesOrderUuid)))
                return null;
            return soSrv.Data;
        }

        /// <summary>
        /// Create one invoice from one orderShipment and one salesOrder.
        /// </summary>
        /// <param name="coData"></param>
        /// <param name="dcAssigmentData"></param>
        /// <returns>Success Create Invoice</returns>
        public async Task<InvoiceData> CreateInvoiceAsync(OrderShipmentData osData, SalesOrderData soData)
        {
            string salesOrderUuid = soData.SalesOrderHeader.SalesOrderUuid;
            if ((await ExistSalesOrderUuidAsync(salesOrderUuid)))
            {
                AddError($"SalesOrder has transferred to Invoice.{salesOrderUuid}");
                return null;
            }

            InvoiceTransfer invoiceTransfer = new InvoiceTransfer(this, "");
            var invoiceData = invoiceTransfer.FromOrderShipmentAndSalesOrder(osData, soData);

            var inSrv = new InvoiceService(dbFactory);

            inSrv.DetachData(null);
            inSrv.Add();

            inSrv.AttachData(invoiceData);
            inSrv.Data.CheckIntegrity();

            if (await inSrv.SaveDataAsync())
                return inSrv.Data;
            return null;
        }

        /// <summary>
        /// Check SalesOrderUuid is already exist in Invoice
        /// </summary>
        /// <param name="salesOrderUuid"></param>
        /// <returns>Exist or Not</returns>
        protected async Task<bool> ExistSalesOrderUuidAsync(string salesOrderUuid)
        {
            using (var trs = new ScopedTransaction(dbFactory))
                return await InvoiceHelper.ExistSalesOrderUuidAsync(salesOrderUuid);
        }
    }
}
