

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default InvoiceTransactionService Validator class.
    /// </summary>
    public partial class InvoiceTransactionServiceValidatorDefault : IValidator<InvoiceTransactionData>, IMessage
    {
        public virtual bool IsValid { get; set; }
        public InvoiceTransactionServiceValidatorDefault() { }
        public InvoiceTransactionServiceValidatorDefault(IMessage serviceMessage) { ServiceMessage = serviceMessage; }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

        public virtual void Clear()
        {
            IsValid = true;
            Messages = new List<MessageClass>();
        }

        public virtual bool ValidatePayload(InvoiceTransactionData data, IPayload payload, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            var pl = payload as SalesOrderPayload;
            if (processingMode == ProcessingMode.Add)
            {
                //TODO set MasterAccountNum, ProfileNum and DatabaseNum from payload
                data.InvoiceTransaction.MasterAccountNum = pl.MasterAccountNum;
                data.InvoiceTransaction.ProfileNum = pl.ProfileNum;
                data.InvoiceTransaction.DatabaseNum = pl.DatabaseNum;
            }
            else
            {
                //TODO check MasterAccountNum, ProfileNum and DatabaseNum between data and payload
                //if (
                //    data.SalesOrderHeader.MasterAccountNum != pl.MasterAccountNum ||
                //    data.SalesOrderHeader.ProfileNum != pl.ProfileNum
                //)
                //    IsValid = false;
                //AddError($"Sales Order not found.");
                //return IsValid;
            }
            return true;
        }

        public virtual bool Validate(InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!ValidateAllMode(data))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => ValidateAdd(data),
                ProcessingMode.Edit => ValidateEdit(data),
                ProcessingMode.List => false,
                ProcessingMode.Delete => ValidateDelete(data),
                ProcessingMode.Void => ValidateDelete(data),
                ProcessingMode.Cancel => ValidateDelete(data),
                _ => false,
            };
        }
        protected virtual bool ValidateAllMode(InvoiceTransactionData data)
        {
            var dbFactory = data.dbFactory;
            if (string.IsNullOrEmpty(data.InvoiceTransaction.TransUuid))
            {
                IsValid = false;
                AddError($"Unique Id cannot be empty.");
                return IsValid;
            }
            //if (string.IsNullOrEmpty(data.InvoiceTransaction.CustomerUuid))
            //{
            //    IsValid = false;
            //    AddError($"Customer cannot be empty.");
            //    return IsValid;
            //}
            return true;

        }

        protected virtual bool ValidateAdd(InvoiceTransactionData data)
        {
            var dbFactory = data.dbFactory;
            if (data.InvoiceTransaction.RowNum != 0 && dbFactory.Exists<InvoiceTransaction>(data.InvoiceTransaction.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} is duplicate.");
                return IsValid;
            }
            return true;

        }

        protected virtual bool ValidateEdit(InvoiceTransactionData data)
        {
            var dbFactory = data.dbFactory;
            if (data.InvoiceTransaction.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} not found.");
                return IsValid;
            }

            if (data.InvoiceTransaction.RowNum != 0 && !dbFactory.Exists<InvoiceTransaction>(data.InvoiceTransaction.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        protected virtual bool ValidateDelete(InvoiceTransactionData data)
        {
            var dbFactory = data.dbFactory;
            if (data.InvoiceTransaction.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} not found.");
                return IsValid;
            }

            if (data.InvoiceTransaction.RowNum != 0 && !dbFactory.Exists<InvoiceTransaction>(data.InvoiceTransaction.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} not found.");
                return IsValid;
            }
            return true;
        }


        #region Async Methods

        public virtual async Task<bool> ValidateAsync(InvoiceTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!(await ValidateAllModeAsync(data).ConfigureAwait(false)))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => await ValidateAddAsync(data).ConfigureAwait(false),
                ProcessingMode.Edit => await ValidateEditAsync(data).ConfigureAwait(false),
                ProcessingMode.List => false,
                ProcessingMode.Delete => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Void => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Cancel => await ValidateDeleteAsync(data).ConfigureAwait(false),
                _ => false,
            };
        }

        protected virtual async Task<bool> ValidateAllModeAsync(InvoiceTransactionData data)
        {
            var dbFactory = data.dbFactory;
            if (string.IsNullOrEmpty(data.InvoiceTransaction.TransUuid))
            {
                IsValid = false;
                AddError($"Unique Id cannot be empty.");
                return IsValid;
            }
            //if (string.IsNullOrEmpty(data.InvoiceTransaction.CustomerUuid))
            //{
            //    IsValid = false;
            //    AddError($"Customer cannot be empty.");
            //    return IsValid;
            //}
            return true;

        }

        protected virtual async Task<bool> ValidateAddAsync(InvoiceTransactionData data)
        {
            var dbFactory = data.dbFactory;
            if (data.InvoiceTransaction.RowNum != 0 && (await dbFactory.ExistsAsync<InvoiceTransaction>(data.InvoiceTransaction.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} is duplicate.");
                return IsValid;
            }
            return true;

        }

        protected virtual async Task<bool> ValidateEditAsync(InvoiceTransactionData data)
        {
            var dbFactory = data.dbFactory;
            if (data.InvoiceTransaction.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} not found.");
                return IsValid;
            }

            if (data.InvoiceTransaction.RowNum != 0 && !(await dbFactory.ExistsAsync<InvoiceTransaction>(data.InvoiceTransaction.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        protected virtual async Task<bool> ValidateDeleteAsync(InvoiceTransactionData data)
        {
            var dbFactory = data.dbFactory;
            if (data.InvoiceTransaction.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} not found.");
                return IsValid;
            }

            if (data.InvoiceTransaction.RowNum != 0 && !(await dbFactory.ExistsAsync<InvoiceTransaction>(data.InvoiceTransaction.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.InvoiceTransaction.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        #endregion Async Methods

        #region Validating
        public void Validating(IPayload payload, ProcessingMode processingMode, IDataBaseFactory dbFactory)
        {
            var pl = payload as InvoiceTransactionPayload;
            if (processingMode == ProcessingMode.Add)
            {
                Validating_Add(pl, dbFactory);
            }
            else if (processingMode == ProcessingMode.Edit)
            {
                Validating_Update(pl, dbFactory);
            }
            else
            {
                //todo
            }
        }
        private void Validating_Add(InvoiceTransactionPayload pl, IDataBaseFactory dbFactory)
        {
            if (pl is null || !pl.HasInvoiceTransaction)
                throw new NoContentException("No data to be added.");

            var invoiceTransaction = pl.InvoiceTransaction.InvoiceTransaction;

            if (dbFactory.Exists<InvoiceTransaction>($" TransUuid='{invoiceTransaction.TransUuid}'"))
            {
                throw new InvalidParameterException($"InvoiceTransaction.TransUuid: {invoiceTransaction.TransUuid} is duplicate.");
            }
            if (dbFactory.Exists<InvoiceTransaction>($" ProfileNum={pl.ProfileNum} and TransNum='{invoiceTransaction.TransNum}' and InvoiceNumber='{invoiceTransaction.InvoiceNumber}'"))
            {
                throw new InvalidParameterException($"[InvoiceTransaction.InvoiceNumber: {invoiceTransaction.InvoiceNumber},[InvoiceTransaction.TransNum: {invoiceTransaction.TransNum} ] is duplicate.");
            }
        }
        private void Validating_Update(InvoiceTransactionPayload pl, IDataBaseFactory dbFactory)
        {
            if (pl is null || !pl.HasInvoiceTransaction)
                throw new NoContentException("No data to be updated.");

            var invoiceTransaction = pl.InvoiceTransaction.InvoiceTransaction;

            if (!invoiceTransaction.RowNum.HasValue)
            {
                throw new InvalidParameterException("InvoiceTransaction.RowNum is required.");
            }
            if (invoiceTransaction.RowNum.ToLong() <= 0)
            {
                throw new InvalidParameterException("InvoiceTransaction.RowNum is invalid.");
            }
            if (dbFactory.Exists<InvoiceTransaction>($" TransUuid='{invoiceTransaction.TransUuid}' AND RowNum<>{invoiceTransaction.RowNum} "))
            {
                throw new InvalidParameterException($"InvoiceTransaction.TransUuid: {invoiceTransaction.TransUuid} is duplicate.");
            }
            if (dbFactory.Exists<InvoiceTransaction>($" ProfileNum={pl.ProfileNum} and TransNum='{invoiceTransaction.TransNum}' and InvoiceNumber='{invoiceTransaction.InvoiceNumber}' AND RowNum<>{invoiceTransaction.RowNum} "))
            {
                throw new InvalidParameterException($"[InvoiceTransaction.InvoiceNumber: {invoiceTransaction.InvoiceNumber},InvoiceTransaction.TransNum: {invoiceTransaction.TransNum} ] is duplicate.");
            }
        }
        #endregion

        #region Validated db data
        public void Validated(InvoiceTransactionData data, IPayload payload, ProcessingMode processingMode)
        {
            if (processingMode == ProcessingMode.Add)
            {
                data.InvoiceTransaction.MasterAccountNum = payload.MasterAccountNum;
                data.InvoiceTransaction.ProfileNum = payload.ProfileNum;
                data.InvoiceTransaction.DatabaseNum = payload.DatabaseNum;
            }
            else
            {
                if (data.InvoiceTransaction.RowNum <= 0)
                {
                    throw new NoContentException("No data found");
                }

                // check MasterAccountNum, ProfileNum and DatabaseNum between data and payload
                if (data.InvoiceTransaction.MasterAccountNum != payload.MasterAccountNum || data.InvoiceTransaction.ProfileNum != payload.ProfileNum)
                    throw new InvalidRequestException();
            }
        }
        #endregion
    }
}



