

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default InvoiceTransactionService Validator class.
    /// </summary>
    public partial class InvoiceReturnServiceValidatorDefault : InvoiceTransactionServiceValidatorDefault
    {
        public InvoiceReturnServiceValidatorDefault() : base() { }
        public InvoiceReturnServiceValidatorDefault(IMessage serviceMessage, IDataBaseFactory dbFactory) : base(serviceMessage, dbFactory) { }

        public override bool ValidateAccount(IPayload payload, string number = null, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var pl = (payload as InvoiceReturnPayload);
            if (pl is null || pl.InvoiceTransaction is null || pl.InvoiceTransaction.InvoiceTransaction is null)
            {
                AddError("InvoiceTransaction is require.");
                return false;
            }
            pl.InvoiceTransaction.InvoiceTransaction.TransType = (int)TransTypeEnum.Return;
            return base.ValidateAccount(payload, number, processingMode);
        }
        public override async Task<bool> ValidateAccountAsync(IPayload payload, string number = null, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var pl = (payload as InvoiceReturnPayload);
            if (pl is null || pl.InvoiceTransaction is null || pl.InvoiceTransaction.InvoiceTransaction is null)
            {
                AddError("InvoiceTransaction is require.");
                return false;
            }

            pl.InvoiceTransaction.InvoiceTransaction.TransType = (int)TransTypeEnum.Return;
            return await base.ValidateAccountAsync(payload, number, processingMode);
        }
        public override bool Validate(InvoiceTransactionDataDto dto, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            if (dto is null || dto.InvoiceTransaction is null)
            {
                AddError("InvoiceTransaction is require.");
                isValid = false;
            }
            if (processingMode == ProcessingMode.Add)
            {
                dto.InvoiceTransaction.TransType = (int)TransTypeEnum.Return;
                // payment shouldn include return item
                if (!dto.HasInvoiceReturnItems)
                {
                    isValid = false;
                    AddError($"InvoiceReturnItems is required.");
                }
            }
            return isValid && base.Validate(dto, processingMode);
        }
        public override async Task<bool> ValidateAsync(InvoiceTransactionDataDto dto, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;

            if (dto is null || dto.InvoiceTransaction is null)
            {
                AddError("InvoiceTransaction is require.");
                isValid = false;
            }

            if (processingMode == ProcessingMode.Add)
            {
                dto.InvoiceTransaction.TransType = (int)TransTypeEnum.Return;
                // payment shouldn include return item
                if (!dto.HasInvoiceReturnItems)
                {
                    isValid = false;
                    AddError($"InvoiceReturnItems is required.");
                }
            }
            return isValid && (await base.ValidateAsync(dto, processingMode));
        }

        protected override bool ValidateAdd(InvoiceTransactionData data)
        {
            var isValid = base.ValidateAdd(data);
            isValid = isValid && ValidReturnQty(data.InvoiceReturnItems);
            return isValid;
        }
        protected override async Task<bool> ValidateAddAsync(InvoiceTransactionData data)
        {
            var isValid = await base.ValidateAddAsync(data);
            isValid = isValid && ValidReturnQty(data.InvoiceReturnItems);
            return isValid;
        }
        protected override bool ValidateEdit(InvoiceTransactionData data)
        {
            var isValid = base.ValidateEdit(data);
            isValid = isValid && ValidReturnQty(data.InvoiceReturnItems);
            return isValid;
        }
        protected override async Task<bool> ValidateEditAsync(InvoiceTransactionData data)
        {
            var isValid = await base.ValidateEditAsync(data);
            isValid = isValid && ValidReturnQty(data.InvoiceReturnItems);
            return isValid;
        }

        private bool ValidReturnQty(IList<InvoiceReturnItems> invoiceReturnItems)
        {
            var isValid = true;

            if (invoiceReturnItems == null || invoiceReturnItems.Count == 0)
                return isValid;

            foreach (var item in invoiceReturnItems)
            {
                //return qty cannot > open qty
                if (item.ReturnQty > item.OpenQty)
                {
                    isValid = false;
                    AddError($"Return item ReturnQty cannot greater than OpenQty. [Sku:{item.SKU},ReturnQty{item.ReturnQty},OpenQty{item.OpenQty}]");
                }
            }
            return isValid;
        }
    }
}



