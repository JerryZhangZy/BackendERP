




//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.AspNetCore.Http;
using DigitBridge.CommerceCentral.ERPMdl.so;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a SalesOrderService.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public class SalesOrderManager : IMessage
    {
        protected SalesOrderService salesOrderService;
        protected SalesOrderDataDtoCsv salesOrderDataDtoCsv;

        private ChannelOrderService _channelOrderSrv;
        private DCAssignmentService _dcAssignmentSrv;

        public SalesOrderManager() : base() { }
        public SalesOrderManager(IDataBaseFactory dbFactory)
        {
            SetDataBaseFactory(dbFactory);
            salesOrderService = new SalesOrderService(dbFactory);
            salesOrderDataDtoCsv = new SalesOrderDataDtoCsv();

            _channelOrderSrv = new ChannelOrderService(dbFactory);
            _dcAssignmentSrv = new DCAssignmentService(dbFactory);

        }

        public async Task<byte[]> ExportAsync(SalesOrderPayload payload)
        {
            var rowNumList = new List<long>();
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNumList = await SalesOrderHelper.GetRowNumsAsync(payload.MasterAccountNum, payload.ProfileNum);
            }
            var dtoList = new List<SalesOrderDataDto>();
            rowNumList.ForEach(x =>
            {
                if (salesOrderService.GetData(x))
                    dtoList.Add(salesOrderService.ToDto());
            });
            if (dtoList.Count == 0)
                dtoList.Add(new SalesOrderDataDto());
            return salesOrderDataDtoCsv.Export(dtoList);
        }

        public byte[] Export(SalesOrderPayload payload)
        {
            var rowNumList = new List<long>();
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNumList = SalesOrderHelper.GetRowNums(payload.MasterAccountNum, payload.ProfileNum);
            }
            var dtoList = new List<SalesOrderDataDto>();
            rowNumList.ForEach(x =>
            {
                if (salesOrderService.GetData(x))
                    dtoList.Add(salesOrderService.ToDto());
            });
            if (dtoList.Count == 0)
                dtoList.Add(new SalesOrderDataDto());
            return salesOrderDataDtoCsv.Export(dtoList);
        }


        public void Import(SalesOrderPayload payload, IFormFileCollection files)
        {
            if (files == null || files.Count == 0)
            {
                AddError("no files upload");
                return;
            }
            foreach (var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list = salesOrderDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.SalesOrder = item;
                    if (salesOrderService.Add(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in salesOrderService.Messages)
                            Messages.Add(msg);
                        salesOrderService.Messages.Clear();
                    }
                }
                if (payload.HasSalesOrder)
                    payload.SalesOrder = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        public async Task ImportAsync(SalesOrderPayload payload, IFormFileCollection files)
        {
            if (files == null || files.Count == 0)
            {
                AddError("no files upload");
                return;
            }
            foreach (var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list = salesOrderDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.SalesOrder = item;
                    if (await salesOrderService.AddAsync(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in salesOrderService.Messages)
                            Messages.Add(msg);
                        salesOrderService.Messages.Clear();
                    }
                }
                if (payload.HasSalesOrder)
                    payload.SalesOrder = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        public async Task<bool> CreateSalesOrderByChannelOrderIdAsync(string centralOrderUuid)
        {
            //Get CentralOrder by uuid
            bool ret = await _channelOrderSrv.GetDataByIdAsync(centralOrderUuid);

            if (ret)
            {
                //Get DCAssignments by uuid
                var dcAssigmentDataList = await _dcAssignmentSrv.GetByCentralOrderUuidAsync(centralOrderUuid);

                if(dcAssigmentDataList != null && dcAssigmentDataList.Count > 0)
                {
                    //Create SalesOrder
                    var soDataList = new List<SalesOrderData>();

                    foreach(var dcAssigmentData in dcAssigmentDataList)
                    {
                        var coData = _channelOrderSrv.Data;

                        var soData = SalesOrderMapper.ChannelOrderToSalesOrder(dcAssigmentData, coData);

                        salesOrderService.Add();

                        salesOrderService.AttachData(soData);

                        await salesOrderService.SaveDataAsync();
                    }
                }
            }

            if (ret)
            {
                //Transfer ChannelOrder Data to SalesOrderData

            }
            return ret;
        }

        #region DataBase
        [XmlIgnore, JsonIgnore]
        protected IDataBaseFactory _dbFactory;

        [XmlIgnore, JsonIgnore]
        public IDataBaseFactory dbFactory
        {
            get
            {
                if (_dbFactory is null)
                    _dbFactory = DataBaseFactory.CreateDefault();
                return _dbFactory;
            }
        }

        public void SetDataBaseFactory(IDataBaseFactory dbFactory)
        {
            _dbFactory = dbFactory;
        }

        #endregion DataBase

        #region Messages
        protected IList<MessageClass> _messages;
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (_messages is null)
                    _messages = new List<MessageClass>();
                return _messages;
            }
            set { _messages = value; }
        }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             Messages.Add(message, MessageLevel.Info, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Warning, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Error, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Fatal, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Debug, code);

        #endregion Messages


    }
}



