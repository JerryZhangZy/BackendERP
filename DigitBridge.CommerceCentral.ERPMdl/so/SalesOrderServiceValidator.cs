

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.Data.SqlClient;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default SalesOrderService Validator class.
    /// </summary>
    public partial class SalesOrderServiceValidatorDefault : IValidator<SalesOrderData,SalesOrderDataDto>, IMessage
    {
        #region Validating
        public void Validating(IPayload payload, ProcessingMode processingMode, IDataBaseFactory dbFactory)
        {
            var pl = payload as SalesOrderPayload;
            if (processingMode == ProcessingMode.Add)
            {
                Validating_Add(pl, dbFactory);
            }
            else if (processingMode == ProcessingMode.Edit)
            {
                Validating_Update(pl, dbFactory);
            }
            else
            {
                //todo
            }
        }
        private void Validating_Add(SalesOrderPayload pl, IDataBaseFactory dbFactory)
        {
            if (pl is null || !pl.HasSalesOrder)
                throw new NoContentException("No data to be added.");

            var data = pl.SalesOrder;

            if (string.IsNullOrEmpty(data.SalesOrderHeader.SalesOrderUuid))
            {
                throw new InvalidParameterException($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
                //AddError($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
            }
            if (string.IsNullOrEmpty(data.SalesOrderHeader.OrderNumber))
            {
                throw new InvalidParameterException($"SalesOrderHeader.OrderNumber cannot be empty.");
                //AddError($"SalesOrderHeader.OrderNumber cannot be empty.");
            }
            if (data.SalesOrderItemsUuids != null && data.SalesOrderItemsUuids.Count(i => string.IsNullOrEmpty(i.Trim())) > 0)
            {
                throw new InvalidParameterException($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
                //AddError($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
            }
            if (dbFactory.Exists<SalesOrderHeader>($" SalesOrderUuid='{data.SalesOrderHeader.SalesOrderUuid}'"))
            {
                throw new InvalidParameterException($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
                //AddError($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
            }
            if (dbFactory.Exists<SalesOrderHeader>($" ProfileNum={data.SalesOrderHeader.ProfileNum} and OrderNumber='{data.SalesOrderHeader.OrderNumber}'"))
            {
                throw new InvalidParameterException($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
                //AddError($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
            }
            var itemUuidsInDB = DuplicateItemUuids(data.SalesOrderItemsUuids, dbFactory);
            if (!string.IsNullOrEmpty(itemUuidsInDB))
            {
                throw new InvalidParameterException($"{itemUuidsInDB} is duplicate.");
                //AddError($"{itemUuidsInDB} is duplicate.");
            }

        }
        private void Validating_Update(SalesOrderPayload pl, IDataBaseFactory dbFactory)
        {
            if (pl is null || !pl.HasSalesOrder)
                throw new NoContentException("No data to be added.");

            var data = pl.SalesOrder;
            if (!data.SalesOrderHeader.RowNum.HasValue)
            {
                throw new InvalidParameterException("SalesOrderHeader.RowNum is required.");
            }
            if (data.SalesOrderHeader.RowNum.ToLong() <= 0)
            {
                throw new InvalidParameterException("SalesOrderHeader.RowNum is invalid.");
            }
            if (string.IsNullOrEmpty(data.SalesOrderHeader.SalesOrderUuid))
            {
                throw new InvalidParameterException($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
                //AddError($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
            }
            if (string.IsNullOrEmpty(data.SalesOrderHeader.OrderNumber))
            {
                throw new InvalidParameterException($"SalesOrderHeader.OrderNumber cannot be empty.");
                //AddError($"SalesOrderHeader.OrderNumber cannot be empty.");
            }
            if (data.SalesOrderItemsUuids != null && data.SalesOrderItemsUuids.Count(i => string.IsNullOrEmpty(i.Trim())) > 0)
            {
                throw new InvalidParameterException($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
                //AddError($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
            }
            if (dbFactory.Exists<SalesOrderHeader>($" SalesOrderUuid='{data.SalesOrderHeader.SalesOrderUuid}' AND RowNum<>{data.SalesOrderHeader.RowNum} "))
            {
                throw new InvalidParameterException($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
                //AddError($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
            }
            if (dbFactory.Exists<SalesOrderHeader>($" ProfileNum={data.SalesOrderHeader.ProfileNum} and OrderNumber='{data.SalesOrderHeader.OrderNumber}' AND RowNum<>{data.SalesOrderHeader.RowNum} "))
            {
                throw new InvalidParameterException($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
                //AddError($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
            }

            //todo batch check each item rownum and uuid
            //var itemUuidsInDB = DuplicateItemUuids(data.SalesOrderItemsUuids, dbFactory,data.rounums);
            //if (!string.IsNullOrEmpty(itemUuidsInDB))
            //{
            //    throw new InvalidParameterException($"{itemUuidsInDB} is duplicate.");
            //    //AddError($"{itemUuidsInDB} is duplicate.");
            //}
        }
        #endregion
        private string DuplicateItemUuids(IList<string> salesOrderItemsUuids, IDataBaseFactory dbFactory, long? itemRowNum = null)
        {
            if (salesOrderItemsUuids == null || salesOrderItemsUuids.Count == 0)
                return null;
            var allDuplicate = salesOrderItemsUuids.GroupBy(x => x)
              .Where(g => g.Count() > 1)
              .Select(y => new { SalesOrderItemsUuid = y.Key })
              .ToList();
            if (allDuplicate != null && allDuplicate.Count > 0)
            {
                return allDuplicate.ObjectToString();
            }
            if (itemRowNum.HasValue)
            {
                return dbFactory.GetValue<SalesOrderItems, string>($"SELECT SalesOrderItemsUuid FROM SalesOrderItems where  RowNum<>{itemRowNum.Value} AND SalesOrderItemsUuid in ('{string.Join("','", salesOrderItemsUuids)}') for json path ");
            }
            else
            {
                return dbFactory.GetValue<SalesOrderItems, string>($"SELECT SalesOrderItemsUuid FROM SalesOrderItems where SalesOrderItemsUuid in ('{string.Join("','", salesOrderItemsUuids)}') for json path ");
            }

        }
        #region Validated db data
        public void Validated(SalesOrderData data, IPayload payload, ProcessingMode processingMode)
        {
            if (processingMode == ProcessingMode.Add)
            {
                data.SalesOrderHeader.MasterAccountNum = payload.MasterAccountNum;
                data.SalesOrderHeader.ProfileNum = payload.ProfileNum;
                data.SalesOrderHeader.DatabaseNum = payload.DatabaseNum;
            }
            else
            {
                if (data.SalesOrderHeader.RowNum <= 0)
                {
                    throw new NoContentException("No data found");
                }

                // check MasterAccountNum, ProfileNum and DatabaseNum between data and payload
                if (data.SalesOrderHeader.MasterAccountNum != payload.MasterAccountNum || data.SalesOrderHeader.ProfileNum != payload.ProfileNum)
                    throw new InvalidRequestException();

                // No matter what item.SalesOrderUuid is posted, it will be override  
                // todo Do this in function _OnBeforeSave?
                if (data.SalesOrderItems != null && data.SalesOrderItems.Count > 0)
                {
                    foreach (var item in data.SalesOrderItems)
                    {
                        item.SalesOrderUuid = data.SalesOrderHeader.SalesOrderUuid;
                    }
                }
            }
        }
        #endregion
    }
}



