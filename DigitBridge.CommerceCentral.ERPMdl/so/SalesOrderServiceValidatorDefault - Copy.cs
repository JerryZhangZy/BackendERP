

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.Data.SqlClient;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default SalesOrderService Validator class.
    /// </summary>
    public partial class SalesOrderServiceValidatorDefault : IValidator<SalesOrderData>, IMessage
    {
        public virtual bool IsValid { get; set; }

        public SalesOrderServiceValidatorDefault() { }
        public SalesOrderServiceValidatorDefault(IMessage serviceMessage) { ServiceMessage = serviceMessage; }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

        public virtual void Clear()
        {
            IsValid = true;
            Messages = new List<MessageClass>();
        }

        public virtual bool ValidatePayload(SalesOrderData data, IPayload payload, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            var pl = payload as SalesOrderPayload;
            if (processingMode == ProcessingMode.Add)
            {
                //set MasterAccountNum, ProfileNum and DatabaseNum from payload
                data.SalesOrderHeader.MasterAccountNum = pl.MasterAccountNum;
                data.SalesOrderHeader.ProfileNum = pl.ProfileNum;
                data.SalesOrderHeader.DatabaseNum = pl.DatabaseNum;
            }
            else
            {
                //check MasterAccountNum, ProfileNum and DatabaseNum between data and payload
                if (
                    data.SalesOrderHeader.MasterAccountNum != pl.MasterAccountNum ||
                    data.SalesOrderHeader.ProfileNum != pl.ProfileNum
                )
                {
                    IsValid = false;
                    AddError($"Sales Order not found.");
                    return IsValid;
                }

            }
            return true;
        }

        public virtual bool Validate(SalesOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!ValidateAllMode(data))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => ValidateAdd(data),
                ProcessingMode.Edit => ValidateEdit(data),
                ProcessingMode.List => false,
                ProcessingMode.Delete => ValidateDelete(data),
                ProcessingMode.Void => ValidateDelete(data),
                ProcessingMode.Cancel => ValidateDelete(data),
                _ => false,
            };
        }
        protected virtual bool ValidateAllMode(SalesOrderData data)
        {
            //var dbFactory = data.dbFactory;
            //var isValid = true;
            //if (string.IsNullOrEmpty(data.SalesOrderHeader.SalesOrderUuid))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
            //}
            //if (string.IsNullOrEmpty(data.SalesOrderHeader.OrderNumber))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.OrderNumber cannot be empty.");
            //}
            //if (data.SalesOrderItemsUuids != null && data.SalesOrderItemsUuids.Count(i => string.IsNullOrEmpty(i.Trim())) > 0)
            //{
            //    isValid = false;
            //    AddError($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
            //} 
            return IsValid;

        }

        protected virtual bool ValidateAdd(SalesOrderData data)
        {
            //var isValid = true;
            //var dbFactory = data.dbFactory;
            //if (data.SalesOrderHeader.RowNum != 0 && dbFactory.Exists<SalesOrderHeader>(data.SalesOrderHeader.RowNum))
            //{
            //    isValid = false;
            //    AddError($"RowNum: {data.SalesOrderHeader.RowNum} is duplicate.");
            //}

            //if (dbFactory.Exists<SalesOrderHeader>($" SalesOrderUuid='{data.SalesOrderHeader.SalesOrderUuid}'"))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
            //}
            //if (dbFactory.Exists<SalesOrderHeader>($" ProfileNum={data.SalesOrderHeader.ProfileNum} and OrderNumber='{data.SalesOrderHeader.OrderNumber}'"))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} ]is duplicate.");
            //}
            //var itemUuidsInDB = data.DuplicateItemUuids();
            //if (!string.IsNullOrEmpty(itemUuidsInDB))
            //{
            //    isValid = false;
            //    AddError($"{itemUuidsInDB} is duplicate.");
            //}
            //IsValid = isValid;
            return IsValid;
        }

        //private async Task<bool> ExistsUKAsync(int profileNum, string OrderNumber, IDataBaseFactory dbFactory)
        //{
        //    //todo error parameters was replace by @0,@1
        //    var conditionSql = " ProfileNum=@ProfileNum and OrderNumber=@OrderNumber";
        //    var parameters = new SqlParameter[]
        //       {
        //            new SqlParameter("@ProfileNum",profileNum),
        //            new SqlParameter("@OrderNumber",OrderNumber)
        //       };
        //    // parameters was replace by @0,@1
        //    return await dbFactory.ExistsAsync<SalesOrderHeader>(conditionSql, parameters);
        //    // correct
        //    //return await dbFactory.ExistsAsync<SalesOrderHeader>($" ProfileNum={profileNum} and OrderNumber='{OrderNumber}'");
        //}


        protected virtual bool ValidateEdit(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            //if (data.SalesOrderHeader.RowNum == 0)
            //{
            //    IsValid = false;
            //    AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
            //    return IsValid;
            //}

            //if (data.SalesOrderHeader.RowNum != 0 && !dbFactory.Exists<SalesOrderHeader>(data.SalesOrderHeader.RowNum))
            //{
            //    IsValid = false;
            //    AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
            //    return IsValid;
            //}

            //if (dbFactory.Exists<SalesOrderHeader>($" SalesOrderUuid='{data.SalesOrderHeader.SalesOrderUuid}'"))
            //{
            //    IsValid = false;
            //    AddError($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
            //    return IsValid;
            //}
            //if (dbFactory.Exists<SalesOrderHeader>($" ProfileNum={data.SalesOrderHeader.ProfileNum} and OrderNumber='{data.SalesOrderHeader.OrderNumber}'"))
            //{
            //    IsValid = false;
            //    AddError($"[SalesOrderHeader.ProfileNum: {data.SalesOrderHeader.ProfileNum},[SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} ]is duplicate.");
            //    return IsValid;
            //}
            return true;
        }

        protected virtual bool ValidateDelete(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (data.SalesOrderHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.SalesOrderHeader.RowNum != 0 && !dbFactory.Exists<SalesOrderHeader>(data.SalesOrderHeader.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }
            return true;
        }


        #region Async Methods

        public virtual async Task<bool> ValidateAsync(SalesOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!(await ValidateAllModeAsync(data).ConfigureAwait(false)))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => await ValidateAddAsync(data).ConfigureAwait(false),
                ProcessingMode.Edit => await ValidateEditAsync(data).ConfigureAwait(false),
                ProcessingMode.List => false,
                ProcessingMode.Delete => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Void => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Cancel => await ValidateDeleteAsync(data).ConfigureAwait(false),
                _ => false,
            };
        }

        protected virtual async Task<bool> ValidateAllModeAsync(SalesOrderData data)
        {
            //var dbFactory = data.dbFactory;
            var isValid = true;
            //if (string.IsNullOrEmpty(data.SalesOrderHeader.SalesOrderUuid))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
            //}
            //if (string.IsNullOrEmpty(data.SalesOrderHeader.OrderNumber))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.OrderNumber cannot be empty.");
            //}
            //if (data.SalesOrderItemsUuids != null && data.SalesOrderItemsUuids.Count(i => string.IsNullOrEmpty(i.Trim())) > 0)
            //{
            //    isValid = false;
            //    AddError($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
            //}
            this.IsValid = isValid;
            return isValid;
        }

        protected virtual async Task<bool> ValidateAddAsync(SalesOrderData data)
        {
            //var isValid = true;
            //var dbFactory = data.dbFactory;
            //if (data.SalesOrderHeader.RowNum != 0 && await dbFactory.ExistsAsync<SalesOrderHeader>(data.SalesOrderHeader.RowNum))
            //{
            //    isValid = false;
            //    AddError($"RowNum: {data.SalesOrderHeader.RowNum} is duplicate.");
            //}
            //if (await dbFactory.ExistsAsync<SalesOrderHeader>($" SalesOrderUuid='{data.SalesOrderHeader.SalesOrderUuid}'"))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
            //}
            //if (await dbFactory.ExistsAsync<SalesOrderHeader>($" ProfileNum={data.SalesOrderHeader.ProfileNum} and OrderNumber='{data.SalesOrderHeader.OrderNumber}'"))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
            //}
            //var itemUuidsInDB = await data.DuplicateItemUuidsAsync();
            //if (!string.IsNullOrEmpty(itemUuidsInDB))
            //{
            //    isValid = false;
            //    AddError($"{itemUuidsInDB} is duplicate.");
            //}

            //IsValid = isValid;
            return IsValid;
        }

        protected virtual async Task<bool> ValidateEditAsync(SalesOrderData data)
        {
            var isValid = true;
            //var dbFactory = data.dbFactory;
            //if (data.SalesOrderHeader.RowNum == 0)
            //{
            //    isValid = false;
            //    AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
            //}

            //if (data.SalesOrderHeader.RowNum != 0 && !(await dbFactory.ExistsAsync<SalesOrderHeader>(data.SalesOrderHeader.RowNum)))
            //{
            //    isValid = false;
            //    AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
            //}  
            //if (await dbFactory.ExistsAsync<SalesOrderHeader>($" SalesOrderUuid='{data.SalesOrderHeader.SalesOrderUuid}'"))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
            //}
            //if (await dbFactory.ExistsAsync<SalesOrderHeader>($" ProfileNum={data.SalesOrderHeader.ProfileNum} and OrderNumber='{data.SalesOrderHeader.OrderNumber}'"))
            //{
            //    isValid = false;
            //    AddError($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
            //}
            //var itemUuidsInDB = await data.DuplicateItemUuidsAsync();
            //if (!string.IsNullOrEmpty(itemUuidsInDB))
            //{
            //    isValid = false;
            //    AddError($"{itemUuidsInDB} is duplicate.");
            //}
            IsValid = isValid;
            return isValid;
        }

        protected virtual async Task<bool> ValidateDeleteAsync(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (data.SalesOrderHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.SalesOrderHeader.RowNum != 0 && !(await dbFactory.ExistsAsync<SalesOrderHeader>(data.SalesOrderHeader.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }
            return true;
        }
        #endregion Async Methods

        #region Validte before data loaded

        public bool Validate_Loading(IPayload payload, ProcessingMode processingMode, IDataBaseFactory dbFactory = null)
        {
            if (processingMode == ProcessingMode.Add)
            {
                Validate_Loading_Add(payload, dbFactory);
            }
            else if (processingMode == ProcessingMode.Edit)
            {
                Validate_Loading_Edit(payload, dbFactory);
            }
            else
            {
                //todo
            }
            return true;
        }
        private void Validate_Loading_Add(IPayload payload, IDataBaseFactory dbFactory)
        {
            var pl = payload as SalesOrderPayload;
            if (pl is null || !pl.HasSalesOrder)
                throw new NoContentException("No data to be added.");

            var data = pl.SalesOrder; 

            if (string.IsNullOrEmpty(data.SalesOrderHeader.SalesOrderUuid))
            {
                throw new InvalidParameterException($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
                //AddError($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
            }
            if (string.IsNullOrEmpty(data.SalesOrderHeader.OrderNumber))
            {
                throw new InvalidParameterException($"SalesOrderHeader.OrderNumber cannot be empty.");
                //AddError($"SalesOrderHeader.OrderNumber cannot be empty.");
            }
            if (data.SalesOrderItemsUuids != null && data.SalesOrderItemsUuids.Count(i => string.IsNullOrEmpty(i.Trim())) > 0)
            {
                throw new InvalidParameterException($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
                //AddError($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
            }
            if (dbFactory.Exists<SalesOrderHeader>($" SalesOrderUuid='{data.SalesOrderHeader.SalesOrderUuid}'"))
            {
                throw new InvalidParameterException($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
                //AddError($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
            }
            if (dbFactory.Exists<SalesOrderHeader>($" ProfileNum={data.SalesOrderHeader.ProfileNum} and OrderNumber='{data.SalesOrderHeader.OrderNumber}'"))
            {
                throw new InvalidParameterException($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
                //AddError($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
            }
            var itemUuidsInDB = DuplicateItemUuids(data.SalesOrderItemsUuids, dbFactory);
            if (!string.IsNullOrEmpty(itemUuidsInDB))
            {
                throw new InvalidParameterException($"{itemUuidsInDB} is duplicate.");
                //AddError($"{itemUuidsInDB} is duplicate.");
            }

        }
        private string DuplicateItemUuids(IList<string> salesOrderItemsUuids, IDataBaseFactory dbFactory, long? itemRowNum = null)
        {
            if (salesOrderItemsUuids == null || salesOrderItemsUuids.Count == 0)
                return null;
            var allDuplicate = salesOrderItemsUuids.GroupBy(x => x)
              .Where(g => g.Count() > 1)
              .Select(y => new { SalesOrderItemsUuid = y.Key })
              .ToList();
            if (allDuplicate != null && allDuplicate.Count > 0)
            {
                return allDuplicate.ObjectToString();
            }
            if (itemRowNum.HasValue)
            {
                return dbFactory.GetValue<SalesOrderItems, string>($"SELECT SalesOrderItemsUuid FROM SalesOrderItems where  RowNum<>{itemRowNum.Value} AND SalesOrderItemsUuid in ('{string.Join("','", salesOrderItemsUuids)}') for json path ");
            }
            else
            {
                return dbFactory.GetValue<SalesOrderItems, string>($"SELECT SalesOrderItemsUuid FROM SalesOrderItems where SalesOrderItemsUuid in ('{string.Join("','", salesOrderItemsUuids)}') for json path ");
            }

        }
        private void Validate_Loading_Edit(IPayload payload, IDataBaseFactory dbFactory)
        {
            var pl = payload as SalesOrderPayload;
            if (pl is null || !pl.HasSalesOrder)
                throw new NoContentException("No data to be added.");

            var data = pl.SalesOrder;
            if (!data.SalesOrderHeader.RowNum.HasValue)
            {
                throw new InvalidParameterException("SalesOrderHeader.RowNum is required.");
            }
            if (data.SalesOrderHeader.RowNum.ToLong() <= 0)
            {
                throw new InvalidParameterException("SalesOrderHeader.RowNum is invalid.");
            }
            if (string.IsNullOrEmpty(data.SalesOrderHeader.SalesOrderUuid))
            {
                throw new InvalidParameterException($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
                //AddError($"SalesOrderHeader.SalesOrderUuid cannot be empty.");
            }
            if (string.IsNullOrEmpty(data.SalesOrderHeader.OrderNumber))
            {
                throw new InvalidParameterException($"SalesOrderHeader.OrderNumber cannot be empty.");
                //AddError($"SalesOrderHeader.OrderNumber cannot be empty.");
            }
            if (data.SalesOrderItemsUuids != null && data.SalesOrderItemsUuids.Count(i => string.IsNullOrEmpty(i.Trim())) > 0)
            {
                throw new InvalidParameterException($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
                //AddError($"SalesOrderItems.SalesOrderItemsUuid cannot be empty.");
            }
            if (dbFactory.Exists<SalesOrderHeader>($" SalesOrderUuid='{data.SalesOrderHeader.SalesOrderUuid}' AND RowNum<>{data.SalesOrderHeader.RowNum} "))
            {
                throw new InvalidParameterException($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
                //AddError($"SalesOrderHeader.SalesOrderUuid: {data.SalesOrderHeader.SalesOrderUuid} is duplicate.");
            }
            if (dbFactory.Exists<SalesOrderHeader>($" ProfileNum={data.SalesOrderHeader.ProfileNum} and OrderNumber='{data.SalesOrderHeader.OrderNumber}' AND RowNum<>{data.SalesOrderHeader.RowNum} "))
            {
                throw new InvalidParameterException($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
                //AddError($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
            }

            //todo batch check each item rownum and uuid
            //var itemUuidsInDB = DuplicateItemUuids(data.SalesOrderItemsUuids, dbFactory,data.rounums);
            //if (!string.IsNullOrEmpty(itemUuidsInDB))
            //{
            //    throw new InvalidParameterException($"{itemUuidsInDB} is duplicate.");
            //    //AddError($"{itemUuidsInDB} is duplicate.");
            //}
        }
        #endregion

        #region Validte after data loaded
        public bool Validate_Loaded(SalesOrderData data, IPayload payload, ProcessingMode processingMode)
        {
            if (processingMode == ProcessingMode.Add)
            {
                Validate_Loaded_Add(data, payload);
            }
            else if (processingMode == ProcessingMode.Edit)
            {
                Validate_Loaded_Edit(data, payload);
            }
            else
            {
                //todo 
            }
            return true;
        }
        private void Validate_Loaded_Add(SalesOrderData data, IPayload payload)
        {
            var pl = payload as SalesOrderPayload;
            // set MasterAccountNum, ProfileNum and DatabaseNum from payload
            data.SalesOrderHeader.MasterAccountNum = pl.MasterAccountNum;
            data.SalesOrderHeader.ProfileNum = pl.ProfileNum;
            data.SalesOrderHeader.DatabaseNum = pl.DatabaseNum;

        }
        private void Validate_Loaded_Edit(SalesOrderData data, IPayload payload)
        {
            var pl = payload as SalesOrderPayload;
            //check MasterAccountNum, ProfileNum and DatabaseNum between db data and payload
            if (data.SalesOrderHeader.MasterAccountNum != pl.MasterAccountNum ||
                data.SalesOrderHeader.ProfileNum != pl.ProfileNum)
            {
                throw new InvalidRequestException();
            }
            // No matter what item.SalesOrderUuid is posted, it will be override  
            // todo Do this in function _OnBeforeSave?
            if (data.SalesOrderItems != null && data.SalesOrderItems.Count > 0)
            {
                foreach (var item in data.SalesOrderItems)
                {
                    item.SalesOrderUuid = data.SalesOrderHeader.SalesOrderUuid;
                }
            }
        }
        #endregion
    }
}



