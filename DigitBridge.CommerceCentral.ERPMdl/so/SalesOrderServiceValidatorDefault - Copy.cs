

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default SalesOrderService Validator class.
    /// </summary>
    public partial class SalesOrderServiceValidatorDefault : IValidator<SalesOrderData, SalesOrderDataDto>, IMessage
    {
        public virtual bool IsValid { get; set; }
        public SalesOrderServiceValidatorDefault() { }
        public SalesOrderServiceValidatorDefault(IMessage serviceMessage) { ServiceMessage = serviceMessage; }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

        public virtual void Clear()
        {
            IsValid = true;
            Messages = new List<MessageClass>();
        }

        public virtual bool ValidatePayload(SalesOrderData data, IPayload payload, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            var pl = payload as SalesOrderPayload;
            if (processingMode == ProcessingMode.Edit)
            {
                //check MasterAccountNum, ProfileNum and DatabaseNum between data and payload
                if (data.SalesOrderHeader.MasterAccountNum != pl.MasterAccountNum ||
                    data.SalesOrderHeader.ProfileNum != pl.ProfileNum)
                    isValid = false;
                AddError($"Invalid request.");
            }
            else
            {
                //TODO
            } 
            return isValid;
        }

        public virtual bool Validate(SalesOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!ValidateAllMode(data))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => ValidateAdd(data),
                ProcessingMode.Edit => ValidateEdit(data),
                ProcessingMode.List => false,
                ProcessingMode.Delete => ValidateDelete(data),
                ProcessingMode.Void => ValidateDelete(data),
                ProcessingMode.Cancel => ValidateDelete(data),
                _ => false,
            };
        }
        protected virtual bool ValidateAllMode(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (string.IsNullOrEmpty(data.SalesOrderHeader.SalesOrderUuid))
            {
                IsValid = false;
                AddError($"Unique Id cannot be empty.");
                return IsValid;
            }
            //if (string.IsNullOrEmpty(data.SalesOrderHeader.CustomerUuid))
            //{
            //    IsValid = false;
            //    AddError($"Customer cannot be empty.");
            //    return IsValid;
            //}
            return true;

        }

        protected virtual bool ValidateAdd(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (data.SalesOrderHeader.RowNum != 0 && dbFactory.Exists<SalesOrderHeader>(data.SalesOrderHeader.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} is duplicate.");
                return IsValid;
            }
            return true;

        }

        protected virtual bool ValidateEdit(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (data.SalesOrderHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.SalesOrderHeader.RowNum != 0 && !dbFactory.Exists<SalesOrderHeader>(data.SalesOrderHeader.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        protected virtual bool ValidateDelete(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (data.SalesOrderHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.SalesOrderHeader.RowNum != 0 && !dbFactory.Exists<SalesOrderHeader>(data.SalesOrderHeader.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }
            return true;
        }


        #region Async Methods

        public virtual async Task<bool> ValidateAsync(SalesOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!(await ValidateAllModeAsync(data).ConfigureAwait(false)))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => await ValidateAddAsync(data).ConfigureAwait(false),
                ProcessingMode.Edit => await ValidateEditAsync(data).ConfigureAwait(false),
                ProcessingMode.List => false,
                ProcessingMode.Delete => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Void => await ValidateDeleteAsync(data).ConfigureAwait(false),
                ProcessingMode.Cancel => await ValidateDeleteAsync(data).ConfigureAwait(false),
                _ => false,
            };
        }

        protected virtual async Task<bool> ValidateAllModeAsync(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (string.IsNullOrEmpty(data.SalesOrderHeader.SalesOrderUuid))
            {
                IsValid = false;
                AddError($"Unique Id cannot be empty.");
                return IsValid;
            }
            //if (string.IsNullOrEmpty(data.SalesOrderHeader.CustomerUuid))
            //{
            //    IsValid = false;
            //    AddError($"Customer cannot be empty.");
            //    return IsValid;
            //}
            return true;

        }

        protected virtual async Task<bool> ValidateAddAsync(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (data.SalesOrderHeader.RowNum != 0 && (await dbFactory.ExistsAsync<SalesOrderHeader>(data.SalesOrderHeader.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} is duplicate.");
                return IsValid;
            }
            return true;

        }

        protected virtual async Task<bool> ValidateEditAsync(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (data.SalesOrderHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.SalesOrderHeader.RowNum != 0 && !(await dbFactory.ExistsAsync<SalesOrderHeader>(data.SalesOrderHeader.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        protected virtual async Task<bool> ValidateDeleteAsync(SalesOrderData data)
        {
            var dbFactory = data.dbFactory;
            if (data.SalesOrderHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.SalesOrderHeader.RowNum != 0 && !(await dbFactory.ExistsAsync<SalesOrderHeader>(data.SalesOrderHeader.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.SalesOrderHeader.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        #endregion Async Methods

        #region Validate dto (invoke this before data loaded)
        /// <summary>
        /// Copy MasterAccountNum, ProfileNum and DatabaseNum to dto, then validate dto.
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="dbFactory"></param>
        /// <param name="processingMode"></param>
        /// <returns></returns>
        public virtual bool Validate(IPayload payload, IDataBaseFactory dbFactory, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true; 
            //TODO 
            //var pl = (<#= StructureClass.MainTable.Name #>Payload)payload;
            //if (pl is null || !pl.Has <#= StructureClass.MainTable.Name #>)
            //{
            //    isValid = false;
            //    AddError($"No data found");
            //}
            //else
            //{
            //    var dto = pl.SalesOrder;
            //    //No matter what processingMode is,copy MasterAccountNum, ProfileNum and DatabaseNum from payload to dto
            //    dto.<#= StructureClass.MainTable.Name #>.MasterAccountNum = pl.MasterAccountNum;
            //    dto.<#= StructureClass.MainTable.Name #>.ProfileNum = pl.ProfileNum;
            //    dto.<#= StructureClass.MainTable.Name #>.DatabaseNum = pl.DatabaseNum;
            //    isValid = Validate(dto, dbFactory, processingMode);
            //}
            return isValid;
        }
        /// <summary>
        /// Validate dto.
        /// </summary>
        /// <param name="dto"></param>
        /// <param name="dbFactory"></param>
        /// <param name="processingMode"></param>
        /// <returns></returns>
        public virtual bool Validate(SalesOrderDataDto dto, IDataBaseFactory dbFactory, ProcessingMode processingMode = ProcessingMode.Edit)
        { 
            var isValid = true;
            if (dto is null)
            {
                isValid = false;
                AddError($"No data found");
            }
            if (processingMode == ProcessingMode.Add)
            {
                //Init property
                //if (string.IsNullOrEmpty(dto.SalesOrderHeader.SalesOrderUuid))
                //{
                dto.SalesOrderHeader.SalesOrderUuid = new Guid().ToString();
                //} 

                if (dto.SalesOrderItems != null && dto.SalesOrderItems.Count > 0)
                {
                    foreach (var detailItem in dto.SalesOrderItems)
                    {
                        //if (string.IsNullOrEmpty(detailItem.SalesOrderItemsUuid))
                        //{
                        detailItem.SalesOrderItemsUuid = new Guid().ToString();
                        //}
                    }
                }
                //TODO what to do for ordernum

                //if (dbFactory.Exists<SalesOrderHeader>($" ProfileNum={dto.SalesOrderHeader.ProfileNum} and OrderNumber='{dto.SalesOrderHeader.OrderNumber}'"))
                //{
                //    throw new InvalidParameterException($"SalesOrderHeader.OrderNumber: {dto.SalesOrderHeader.OrderNumber} is duplicate.");
                //    //AddError($"SalesOrderHeader.OrderNumber: {data.SalesOrderHeader.OrderNumber} is duplicate.");
                //} 
            }
            if (processingMode == ProcessingMode.Edit)
            {
                // This property should not be changed.
                dto.SalesOrderHeader.MasterAccountNum = null;
                dto.SalesOrderHeader.ProfileNum = null;
                dto.SalesOrderHeader.DatabaseNum = null;
                dto.SalesOrderHeader.SalesOrderUuid = null;
                dto.SalesOrderHeader.OrderNumber = null;

                if (!dto.SalesOrderHeader.RowNum.HasValue)
                {
                    isValid = false;
                    AddError("SalesOrderHeader.RowNum is required.");
                }
                if (dto.SalesOrderHeader.RowNum.ToLong() <= 0)
                {
                    isValid = false;
                    AddError("SalesOrderHeader.RowNum is invalid."); 
                }
            }
            else
            {
                //TODO
            }
            IsValid = isValid;
            return isValid;
        }
        #endregion

        #region Validate dto async (invoke this before data loaded)
        /// <summary>
        /// Copy MasterAccountNum, ProfileNum and DatabaseNum to dto, then validate dto.
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="dbFactory"></param>
        /// <param name="processingMode"></param>
        /// <returns></returns>
        public virtual async Task<bool> ValidateAsync(IPayload payload, IDataBaseFactory dbFactory, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            var pl = (SalesOrderPayload)payload;
            if (pl is null || !pl.HasSalesOrder)
            {
                isValid = false;
                AddError($"No data found");
            }
            else
            {
                var dto = pl.SalesOrder;
                //No matter what processingMode is,copy MasterAccountNum, ProfileNum and DatabaseNum from payload to dto
                dto.SalesOrderHeader.MasterAccountNum = pl.MasterAccountNum;
                dto.SalesOrderHeader.ProfileNum = pl.ProfileNum;
                dto.SalesOrderHeader.DatabaseNum = pl.DatabaseNum;
                isValid = await ValidateAsync(dto, dbFactory, processingMode);
            }
            return isValid;
        }
        /// <summary>
        /// Validate dto.
        /// </summary>
        /// <param name="dto"></param>
        /// <param name="dbFactory"></param>
        /// <param name="processingMode"></param>
        /// <returns></returns>
        public virtual async Task<bool> ValidateAsync(SalesOrderDataDto dto, IDataBaseFactory dbFactory, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            if (processingMode == ProcessingMode.Add)
            {
                //Init property
                //if (string.IsNullOrEmpty(dto.SalesOrderHeader.SalesOrderUuid))
                //{
                dto.SalesOrderHeader.SalesOrderUuid = new Guid().ToString();
                //} 

                if (dto.SalesOrderItems != null && dto.SalesOrderItems.Count > 0)
                {
                    foreach (var detailItem in dto.SalesOrderItems)
                    {
                        //if (string.IsNullOrEmpty(detailItem.SalesOrderItemsUuid))
                        //{
                        detailItem.SalesOrderItemsUuid = new Guid().ToString();
                        //}
                    }
                }



            }
            if (processingMode == ProcessingMode.Edit)
            {
                // This property should not be changed.
                dto.SalesOrderHeader.MasterAccountNum = null;
                dto.SalesOrderHeader.ProfileNum = null;
                dto.SalesOrderHeader.DatabaseNum = null;
                dto.SalesOrderHeader.SalesOrderUuid = null; 
                dto.SalesOrderHeader.OrderNumber = null;
                if (!dto.SalesOrderHeader.RowNum.HasValue)
                {
                    isValid = false;
                    AddError("SalesOrderHeader.RowNum is required.");
                }
                if (dto.SalesOrderHeader.RowNum.ToLong() <= 0)
                {
                    isValid = false;
                    AddError("SalesOrderHeader.RowNum is invalid.");
                }
            }
            else
            {
                //TODO
            }
            IsValid = isValid;
            return isValid;
        }
        #endregion
    }
}



