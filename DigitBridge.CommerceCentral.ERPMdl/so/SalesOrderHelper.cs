
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Data;
using Microsoft.Data.SqlClient;

using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a SalesOrderHelper SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class SalesOrderHelper
    {
        public static bool ExistNumber(string number, int masterAccountNum, int profileNum, IDataBaseFactory dbFactory = null)
        {

            var sql = $@"
SELECT COUNT(1) FROM SalesOrderHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND OrderNumber = @number
";
            return ExecuteScalar(sql, dbFactory, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 number.ToSqlParameter("number")); 
        }

        public static async Task<bool> ExistNumberAsync(string number, int masterAccountNum, int profileNum, IDataBaseFactory dbFactory = null)
        {

            var sql = $@"
SELECT COUNT(1) FROM SalesOrderHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND OrderNumber = @number
";
            return await ExecuteScalarAsync(sql, dbFactory, masterAccountNum.ToSqlParameter("masterAccountNum"),
                  profileNum.ToSqlParameter("profileNum"),
                  number.ToSqlParameter("number")); 
        }
        public static bool ExistNumber(string number, int profileNum, IDataBaseFactory dbFactory = null)
        {

            var sql = $@"
SELECT COUNT(1) FROM SalesOrderHeader tbl
WHERE ProfileNum = @profileNum
AND OrderNumber = @number
";
            return ExecuteScalar(sql, dbFactory,
                 profileNum.ToSqlParameter("profileNum"),
                 number.ToSqlParameter("number")); 
        }

        public static async Task<bool> ExistNumberAsync(string number, int profileNum, IDataBaseFactory dbFactory = null)
        {
 
            var sql = $@"
SELECT COUNT(1) FROM SalesOrderHeader tbl
WHERE  ProfileNum = @profileNum
AND OrderNumber = @number
";
           return await ExecuteScalarAsync(sql, dbFactory,
                 profileNum.ToSqlParameter("profileNum"),
                 number.ToSqlParameter("number")); 
        }
        public static bool ExistId(string uuid, int masterAccountNum, int profileNum, IDataBaseFactory dbFactory = null)
        {
            var sql = $@"
SELECT COUNT(1) FROM SalesOrderHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND SalesOrderUuid = @uuid
";
            return ExecuteScalar(sql, dbFactory, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 uuid.ToSqlParameter("uuid"));
        }

        public static async Task<bool> ExistIdAsync(string uuid, int masterAccountNum, int profileNum, IDataBaseFactory dbFactory = null)
        {
            var sql = $@"
SELECT COUNT(1) FROM SalesOrderHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND SalesOrderUuid = @uuid
";
           return await ExecuteScalarAsync(sql, dbFactory, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 uuid.ToSqlParameter("uuid"));
        }

        public static bool ExistRowNum(long rowNum, int masterAccountNum, int profileNum, IDataBaseFactory dbFactory = null)
        {
            var sql = $@"
SELECT COUNT(1) FROM SalesOrderHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND RowNum= @rowNum
";
            return ExecuteScalar(sql, dbFactory, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 rowNum.ToSqlParameter("rowNum"));
        }

        public static async Task<bool> ExistRowNumAsync(long rowNum, int masterAccountNum, int profileNum, IDataBaseFactory dbFactory = null)
        {
            var sql = $@"
SELECT COUNT(1) FROM SalesOrderHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND RowNum= @rowNum
";
            return await ExecuteScalarAsync(sql, dbFactory, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 rowNum.ToSqlParameter("rowNum"));
        }
        private static bool ExecuteScalar(string sql, IDataBaseFactory dbFactory, params IDataParameter[] parameters)
        {
            if (dbFactory == null)
            {
                return SqlQuery.ExecuteScalar<int>(sql, parameters) > 0;
            }
            else
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    return SqlQuery.ExecuteScalar<int>(sql, parameters) > 0;
                }
            }
        }
        private static async Task<bool> ExecuteScalarAsync(string sql, IDataBaseFactory dbFactory, params IDataParameter[] parameters)
        {
            if (dbFactory == null)
            {
                return await SqlQuery.ExecuteScalarAsync<int>(sql, parameters) > 0;
            }
            else
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    return await SqlQuery.ExecuteScalarAsync<int>(sql, parameters) > 0;
                }
            }
        }
    }
}



