
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using DigitBridge.CommerceCentral.YoPoco;
using CsvHelper;
using System.IO;
using DigitBridge.Base.Utility;
using System.Dynamic;
using System.Linq;
using DigitBridge.CommerceCentral.ERPDb;
using CsvHelper.Configuration;
using System.Threading.Tasks;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a SalesOrderDataDto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    [Serializable()]
    public partial class SalesOrderIOCsv : CsvHelper<SalesOrderDataDto>
    {
        public SalesOrderIOCsv(SalesOrderIOFormat format): base(format)
        {
        }

        public override void GetMapper()
        {
            _mappers = new List<ClassMap>() 
            {
                new CsvFormatMapper<SalesOrderHeaderDto>(Format),
                new CsvFormatMapper<SalesOrderHeaderInfoDto>(Format),
                new CsvFormatMapper<SalesOrderHeaderAttributesDto>(Format),
                new CsvFormatMapper<SalesOrderItemsDto>(Format),
                new CsvFormatMapper<SalesOrderItemsAttributesDto>(Format),
            };
        }

        #region import
        public override async Task ReadEntitiesAsync(CsvReader csv, IList<SalesOrderDataDto> data)
        {
            var hasReadSummary = false;
            var headerFound = false;
            SalesOrderDataDto dto = new SalesOrderDataDto().NewData(); 

            while (await csv.ReadAsync())
            {
                if (!headerFound)
                {
                    if ((Format?.IsheaderLine(csv)).ToBool())
                    {
                        csv.ReadHeader();
                        hasReadSummary = false;
                        headerFound = true;
                        continue;
                    }
                }

                if (string.IsNullOrEmpty(Format.KeyName))
                {
                    if (!hasReadSummary)
                    {
                        await ReadSummaryRecordAsync(csv, dto);
                        hasReadSummary = true;
                    }
                    await ReadDetailRecordAsync(csv, dto);
                }
                else
                {
                    var keys = GetKeyField(csv);
                    if (keys != null)
                    {
                        if (!ObjectSchema.CompareProperties<SalesOrderHeaderDto>(dto.SalesOrderHeader, keys))
                        {
                            data.Add(dto);
                            dto = new SalesOrderDataDto().NewData();
                            hasReadSummary = false;
                        }
                        if (!hasReadSummary)
                        {
                            await ReadSummaryRecordAsync(csv, dto);
                            hasReadSummary = true;
                        }
                        await ReadDetailRecordAsync(csv, dto);
                    }

                }
            }
            if (dto != null)
                data.Add(dto);
        }

        protected virtual async Task<bool> ReadSummaryRecordAsync(CsvReader csv, SalesOrderDataDto dto)
        {
            try
            {
                dto.SalesOrderHeader = csv.GetRecord<SalesOrderHeaderDto>();
                dto.SalesOrderHeaderInfo = csv.GetRecord<SalesOrderHeaderInfoDto>();
                dto.SalesOrderHeaderAttributes = csv.GetRecord<SalesOrderHeaderAttributesDto>();
                return true;
            }
            catch (Exception e)
            {
                return false;
                //throw;
            }
        }

        protected virtual async Task<bool> ReadDetailRecordAsync(CsvReader csv, SalesOrderDataDto dto)
        {
            try
            {
                var ln = csv.GetRecord<SalesOrderItemsDto>();
                if (ln == null || !ln.HasSKU)
                    return false;
                dto.SalesOrderItems.Add(ln);
                return true;
            }
            catch (Exception e)
            {
                return false;
                //throw;
            }
        }
        #endregion import

        #region export
        public override async Task<byte[]> ExportAsync(IEnumerable<SalesOrderDataDto> datas)
        {
            if (Format == null || datas == null || !datas.Any()) return null;

            Format.SortByIndex();
            var dataList = datas.ToList();
            var lines = new List<IList<string>>();
            var headers = GetHeader(datas);

            foreach (var data in dataList)
            {
                if (data == null) continue;
                var lns = GetDataLines(data);
                if (lns == null || lns.Count == 0) continue;
                lines.Concat(lns);
            }
            return await ExportAsync(lines, headers);
        }

        protected virtual IList<string> GetHeader(IEnumerable<SalesOrderDataDto> datas)
        {
            if (Format == null || datas == null || !datas.Any()) return null;

            var dataList = datas.ToList();
            var headers = new List<string>();

            // build salesOrderHeader header and data
            var (header1, values1) = Format.GetHeaderAndData<SalesOrderHeaderDto>(dataList[0].SalesOrderHeader);
            if (header1 != null) headers.AddRange(header1);

            // build salesOrderHeaderInfo header and data
            var (header2, values2) = Format.GetHeaderAndData<SalesOrderHeaderInfoDto>(dataList[0].SalesOrderHeaderInfo);
            if (header2 != null) headers.AddRange(header2);

            // build salesOrderHeaderItems header and data
            var (header3, values3) = Format.GetHeaderAndData<SalesOrderItemsDto>(dataList[0].SalesOrderItems[0]);
            if (header3 != null) headers.AddRange(header3);
            return headers;
        }

        protected virtual IList<IList<string>> GetDataLines(SalesOrderDataDto data)
        {
            if (Format == null || data == null) return null;

            var lines = new List<IList<string>>();
            var lnSummary = new List<string>();

            // build salesOrderHeader data
            var (header1, values1) = Format.GetHeaderAndData<SalesOrderHeaderDto>(data.SalesOrderHeader);
            if (values1 != null) lnSummary.AddRange(values1);

            // build salesOrderHeaderInfo data
            var (header2, values2) = Format.GetHeaderAndData<SalesOrderHeaderInfoDto>(data.SalesOrderHeaderInfo);
            if (values2 != null) lnSummary.AddRange(values2);

            // build SalesOrderItems data
            foreach (var item in data.SalesOrderItems)
            {
                if (item == null || string.IsNullOrEmpty(item.SKU)) continue;
                var (headerLine, valuesLine) = Format.GetHeaderAndData<SalesOrderItemsDto>(item);
                var ln = new List<string>(lnSummary);
                if (valuesLine != null) ln.AddRange(valuesLine);
                lines.Add(ln);
            }
            return lines;
        }

        #endregion export
    }
}



