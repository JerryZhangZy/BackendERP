
              
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using DigitBridge.CommerceCentral.YoPoco;
using CsvHelper;
using System.IO;
using DigitBridge.Base.Utility;
using System.Dynamic;
using System.Linq;
using DigitBridge.CommerceCentral.ERPDb;
using CsvHelper.Configuration;
using System.Threading.Tasks;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a SalesOrderDataDto Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    [Serializable()]
    public partial class SalesOrderIOCsv : CsvHelper<SalesOrderDataDto>
    {
        public SalesOrderIOCsv(SalesOrderIOFormat format): base(format)
        {
        }

        //public override void RegisterMapper(CsvContext context)
        //{
        //    context.RegisterClassMap(new CsvFormatMapper<SalesOrderHeaderDto>(Format));
        //    context.RegisterClassMap(new CsvFormatMapper<SalesOrderHeaderInfoDto>(Format));
        //    context.RegisterClassMap(new CsvFormatMapper<SalesOrderHeaderAttributesDto>(Format));
        //    context.RegisterClassMap(new CsvFormatMapper<SalesOrderItemsDto>(Format));
        //    context.RegisterClassMap(new CsvFormatMapper<SalesOrderItemsAttributesDto>(Format));
        //}

        public override void GetMapper()
        {
            _mappers = new List<ClassMap>() 
            {
                new CsvFormatMapper<SalesOrderHeaderDto>(Format),
                new CsvFormatMapper<SalesOrderHeaderInfoDto>(Format),
                new CsvFormatMapper<SalesOrderHeaderAttributesDto>(Format),
                new CsvFormatMapper<SalesOrderItemsDto>(Format),
                new CsvFormatMapper<SalesOrderItemsAttributesDto>(Format),
            };
        }

        public override async Task ReadEntitiesAsync(CsvReader csv, IList<SalesOrderDataDto> data)
        {
            var hasReadSummary = false;
            var headerFound = false;
            SalesOrderDataDto dto = new SalesOrderDataDto().NewData(); 

            while (await csv.ReadAsync())
            {
                if (!headerFound)
                {
                    if ((Format?.IsheaderLine(csv)).ToBool())
                    {
                        csv.ReadHeader();
                        hasReadSummary = false;
                        headerFound = true;
                        continue;
                    }
                }

                if (string.IsNullOrEmpty(Format.KeyName))
                {
                    if (!hasReadSummary)
                    {
                        await ReadSummaryRecordAsync(csv, dto);
                        hasReadSummary = true;
                    }
                    await ReadDetailRecordAsync(csv, dto);
                }
                else
                {
                    var keys = GetKeyField(csv);
                    if (keys != null)
                    {
                        if (!ObjectSchema.CompareProperties<SalesOrderHeaderDto>(dto.SalesOrderHeader, keys))
                        {
                            data.Add(dto);
                            dto = new SalesOrderDataDto().NewData();
                            hasReadSummary = false;
                        }
                        if (!hasReadSummary)
                        {
                            await ReadSummaryRecordAsync(csv, dto);
                            hasReadSummary = true;
                        }
                        await ReadDetailRecordAsync(csv, dto);
                    }

                }
            }
            if (dto != null)
                data.Add(dto);
        }


        protected virtual async Task<bool> ReadSummaryRecordAsync(CsvReader csv, SalesOrderDataDto dto)
        {
            try
            {
                dto.SalesOrderHeader = csv.GetRecord<SalesOrderHeaderDto>();
                dto.SalesOrderHeaderInfo = csv.GetRecord<SalesOrderHeaderInfoDto>();
                dto.SalesOrderHeaderAttributes = csv.GetRecord<SalesOrderHeaderAttributesDto>();
                return true;
            }
            catch (Exception e)
            {
                return false;
                //throw;
            }
        }

        protected virtual async Task<bool> ReadDetailRecordAsync(CsvReader csv, SalesOrderDataDto dto)
        {
            try
            {
                var ln = csv.GetRecord<SalesOrderItemsDto>();
                if (ln == null || !ln.HasSKU)
                    return false;
                dto.SalesOrderItems.Add(ln);
                return true;
            }
            catch (Exception e)
            {
                return false;
                //throw;
            }
        }

        protected override async Task WriteCsvAsync(SalesOrderDataDto data, CsvWriter csv)
        {
            // combine multiple Dto to one dynamic object
            var headerRecords = data.MergeHeaderRecord(true).ToList();
            await WriteEntitiesAsync(csv, headerRecords, "H");

            var detailRecords = data.MergeDetailRecord(true).ToList();

            await WriteEntitiesAsync(csv, detailRecords, "L");
        }

    }
}



