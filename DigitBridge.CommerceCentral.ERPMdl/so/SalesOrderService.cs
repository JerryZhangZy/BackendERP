

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class SalesOrderService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override SalesOrderService Init()
        {
            base.Init();
            SetDtoMapper(new SalesOrderDataDtoMapperDefault());
            SetCalculator(new SalesOrderServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new SalesOrderServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(SalesOrderDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            Calculate();

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(SalesOrderDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto).ConfigureAwait(false)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync().ConfigureAwait(false);
        }

        public virtual bool Add(SalesOrderPayload payload)
        {
            if (payload is null || !payload.HasSalesOrder)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.SalesOrder))
                return false;

            // load data from dto
            FromDto(payload.SalesOrder);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(SalesOrderPayload payload)
        {
            if (payload is null || !payload.HasSalesOrder)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload).ConfigureAwait(false)))
                return false;

            if (!(await ValidateAsync(payload.SalesOrder).ConfigureAwait(false)))
                return false;

            // load data from dto
            FromDto(payload.SalesOrder);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync().ConfigureAwait(false);
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(SalesOrderDataDto dto)
        {
            if (dto is null || !dto.HasSalesOrderHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.SalesOrderHeader.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(SalesOrderDataDto dto)
        {
            if (dto is null || !dto.HasSalesOrderHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto).ConfigureAwait(false)))
                return false;

            // load data 
            await GetDataAsync(dto.SalesOrderHeader.RowNum.ToLong()).ConfigureAwait(false);

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(SalesOrderPayload payload)
        {
            if (payload is null || !payload.HasSalesOrder || payload.SalesOrder.SalesOrderHeader.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.SalesOrder))
                return false;

            // load data 
            GetData(payload.SalesOrder.SalesOrderHeader.RowNum.ToLong());

            // load data from dto
            FromDto(payload.SalesOrder);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(SalesOrderPayload payload)
        {
            if (payload is null || !payload.HasSalesOrder)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload).ConfigureAwait(false)))
                return false;

            if (!(await ValidateAsync(payload.SalesOrder).ConfigureAwait(false)))
                return false;

            // load data 
            await GetDataAsync(payload.SalesOrder.SalesOrderHeader.RowNum.ToLong()).ConfigureAwait(false);

            // load data from dto
            FromDto(payload.SalesOrder);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Delete salesorder by order number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByRowNumAsync(SalesOrderPayload payload, long rowNum)
        {
            payload.SalesOrder = new SalesOrderDataDto();
            payload.SalesOrder.SalesOrderHeader = new SalesOrderHeaderDto();
            payload.SalesOrder.SalesOrderHeader.RowNum = rowNum;

            //set delete mode
            Delete();

            if (!(await ValidateAccountAsync(payload).ConfigureAwait(false)))
                return false;

            //load data
            var success = await GetDataAsync(rowNum.ToLong());
            //delete salesorder and its sub items
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Get sale order with detail by orderNumber
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetByOrderNumberAsync(SalesOrderPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            List();
            if (!(await ValidateAccountAsync(payload, orderNumber).ConfigureAwait(false)))
                return false;
            var rowNum = await _data.GetRowNumAsync(orderNumber, payload.MasterAccountNum, payload.ProfileNum);
            if (!rowNum.HasValue)
                return false;
            var success = await GetDataAsync(rowNum.Value);
            //if (success) ToDto();
            return success;
        }
        /// <summary>
        /// Get multi sale order with detail by orderNumbers
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task GetListByOrderNumbersAsync(SalesOrderPayload payload)
        {
            if (payload is null || !payload.HasOrderNumbers)
            {
                AddError("OrderNumbers is required.");
                payload.Messages = this.Messages;
                payload.Success = false;
            }
            var rowNums = await new SalesOrderList(dbFactory).GetRowNumListAsync(payload.OrderNumbers, payload.MasterAccountNum, payload.ProfileNum);

            var result = new List<SalesOrderDataDto>();
            foreach (var rowNum in rowNums)
            {
                if (!(await this.GetDataAsync(rowNum)))
                    continue;
                result.Add(this.ToDto());
                this.DetachData(this.Data);
            }
            payload.SalesOrders = result;
        }



        ///// <summary>
        ///// Get sale order list by Uuid list
        ///// </summary>
        //public virtual async Task<SalesOrderPayload> GetListBySalesOrderUuidsNumberAsync(SalesOrderPayload salesOrderPayload)
        //{
        //    if (salesOrderPayload is null || !salesOrderPayload.HasSalesOrderUuids)
        //    {
        //        AddError("SalesOrderUuids is required.");
        //        salesOrderPayload.Messages = this.Messages;
        //        return salesOrderPayload;
        //    }

        //    var salesOrderUuids = salesOrderPayload.SalesOrderUuids;

        //    List();
        //    var result = new List<SalesOrderDataDto>();
        //    foreach (var id in salesOrderUuids)
        //    {
        //        if (!(await this.GetDataByIdAsync(id)))
        //            continue;
        //        result.Add(this.ToDto());
        //        this.DetachData(this.Data);
        //    }
        //    salesOrderPayload.SalesOrders = result;
        //    return salesOrderPayload;
        //}
    }
}



