
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class ApTransactionService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override ApTransactionService Init()
        {
            base.Init();
            SetDtoMapper(new ApTransactionDataDtoMapperDefault());
            SetCalculator(new ApTransactionServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new ApTransactionServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        #region add & update 
        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        protected virtual bool Add(ApTransactionDataDto dto)
        {
            if (dto is null)
            {
                AddError("ApInvoiceTransaction is required.");
                return false;
            }
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            //load invoice data.
            if (!LoadApInvoice(dto.ApInvoiceTransaction.MasterAccountNum.Value, dto.ApInvoiceTransaction.ProfileNum.Value, dto.ApInvoiceTransaction.ApInvoiceNum))
                return false;

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        protected virtual async Task<bool> AddAsync(ApTransactionDataDto dto)
        {
            if (dto is null)
            {
                AddError("ApInvoiceTransaction is required.");
                return false;
            }
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            //load invoice data.
            if (!LoadApInvoice(dto.ApInvoiceTransaction.MasterAccountNum.Value, dto.ApInvoiceTransaction.ProfileNum.Value, dto.ApInvoiceTransaction.ApInvoiceNum))
                return false;

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        protected virtual bool Add(ApTransactionPayload payload)
        {
            if (payload is null || !payload.HasApTransaction)
            {
                AddError("ApInvoiceTransaction is required.");
                return false;
            }

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.ApTransaction))
                return false;

            // load data from dto
            FromDto(payload.ApTransaction);

            //load invoice data.
            if (!LoadApInvoice(payload.MasterAccountNum, payload.ProfileNum, payload.ApTransaction.ApInvoiceTransaction.ApInvoiceNum))
                return false;

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        protected virtual async Task<bool> AddAsync(ApTransactionPayload payload)
        {
            if (payload is null || !payload.HasApTransaction)
            {
                AddError($"ApInvoiceTransaction is required.");
                return false;
            }


            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.ApTransaction)))
                return false;

            // load data from dto
            FromDto(payload.ApTransaction);

            //load invoice data.
            //load invoice data.
            if (!await LoadApInvoiceAsync(payload.MasterAccountNum, payload.ProfileNum, payload.ApTransaction.ApInvoiceTransaction.ApInvoiceNum))
                return false;

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        protected virtual bool Update(ApTransactionDataDto dto)
        {
            if (dto is null || !dto.HasApInvoiceTransaction)
            {
                AddError("ApInvoiceTransaction is required.");
                return false;
            }
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            if (!GetData(dto.ApInvoiceTransaction.RowNum.ToLong()))
                return false;

            // Keep a copy of Original Paid Amount
            Data.ApInvoiceTransaction.OriginalPaidAmount = Data.ApInvoiceTransaction.Amount;

            // load data from dto
            FromDto(dto);

            //load invoice data.
            if (!LoadApInvoice(Data.ApInvoiceTransaction.ApInvoiceUuid))
                return false;

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        protected virtual async Task<bool> UpdateAsync(ApTransactionDataDto dto)
        {
            if (dto is null || !dto.HasApInvoiceTransaction)
            {
                AddError("ApInvoiceTransaction is required.");
                return false;
            }
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            if (!await GetDataAsync(dto.ApInvoiceTransaction.RowNum.ToLong()))
                return false;

            // Keep a copy of Original Paid Amount
            Data.ApInvoiceTransaction.OriginalPaidAmount = Data.ApInvoiceTransaction.Amount;

            // load data from dto
            FromDto(dto);

            //load invoice data.
            if (!await LoadApInvoiceAsync(Data.ApInvoiceTransaction.ApInvoiceUuid))
                return false;

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        protected virtual bool Update(ApTransactionPayload payload)
        {
            if (payload is null || !payload.HasApTransaction || payload.ApTransaction.ApInvoiceTransaction.RowNum.ToLong() <= 0)
            {
                AddError("ApInvoiceTransaction is required.");
                return false;
            }
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.ApTransaction))
                return false;

            // load data 
            if (!GetData(payload.ApTransaction.ApInvoiceTransaction.RowNum.ToLong()))
                return false;

            // Keep a copy of Original Paid Amount
            Data.ApInvoiceTransaction.OriginalPaidAmount = Data.ApInvoiceTransaction.Amount;

            // load data from dto
            FromDto(payload.ApTransaction);

            //load invoice data.
            if (!LoadApInvoice(Data.ApInvoiceTransaction.ApInvoiceUuid))
                return false;

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        protected virtual async Task<bool> UpdateAsync(ApTransactionPayload payload)
        {
            if (payload is null || !payload.HasApTransaction)
            {
                AddError("ApInvoiceTransaction is required.");
                return false;
            }

            //set edit mode before validate
            Edit();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.ApTransaction)))
                return false;

            // load data 
            if (!(await GetDataAsync(payload.ApTransaction.ApInvoiceTransaction.RowNum.ToLong())))
                return false;

            // Keep a copy of Original Paid Amount
            Data.ApInvoiceTransaction.OriginalPaidAmount = Data.ApInvoiceTransaction.Amount;

            // load data from dto
            FromDto(payload.ApTransaction);

            //load invoice data.
            if (!await LoadApInvoiceAsync(Data.ApInvoiceTransaction.ApInvoiceUuid))
                return false;

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        #endregion 

        #region get by ap invoice number 

        protected async Task<bool> GetByNumberAsync(ApTransactionPayload payload, string apInvoiceNumber, TransTypeEnum transType, int transNum)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, apInvoiceNumber, (int)transType, transNum);
        }
        protected async Task<bool> GetByNumberAsync(int masterAccountNum, int profileNum, string apInvoiceNumber, TransTypeEnum transType, int transNum)
        {
            List();
            var success = await GetByNumberAsync(masterAccountNum, profileNum, apInvoiceNumber, (int)transType, transNum);
            LoadApInvoice(masterAccountNum, profileNum, apInvoiceNumber);
            return success;
        }

        protected virtual async Task<List<ApInvoiceTransaction>> GetDataListAsync(int masterAccountNum, int profileNum, string apInvoiceNumber, TransTypeEnum transType, int? transNum = null)
        {
            if (string.IsNullOrEmpty(apInvoiceNumber)) return null;
            //LoadApInvoice(invoiceNumber, profileNum, masterAccountNum);
            return await _data.GetListByNumberAsync(masterAccountNum, profileNum, apInvoiceNumber, (int)transType, transNum);
        }
        protected virtual async Task<List<ApTransactionDataDto>> GetDtoListAsync(int masterAccountNum, int profileNum, string invoiceNumber, TransTypeEnum transType, int? transNum = null)
        {
            if (string.IsNullOrEmpty(invoiceNumber)) return null;
            var dataList = await GetDataListAsync(masterAccountNum, profileNum, invoiceNumber, transType, transNum);
            if (dataList == null || dataList.Count == 0) return null;
            var dtoList = new List<ApTransactionDataDto>();
            foreach (var dataItem in dataList)
            {
                var data = new ApTransactionData() { ApInvoiceTransaction = dataItem };
                dtoList.Add(this.DtoMapper.WriteDto(data, null));
            }
            return dtoList;
        }

        #endregion

        #region Load ap invoice
        /// <summary>
        /// Load Invoice data.
        /// </summary>
        /// <param name="invoiceUuid"></param>
        protected bool LoadApInvoice(int masterAccountNum, int profileNum, string apInvoiceNumber)
        {
            // load ap invoice data
            var data = new ApInvoiceData(dbFactory);
            var success = data.GetByNumber(masterAccountNum, profileNum, apInvoiceNumber);
            if (!success) return success;

            if (Data == null)
                NewData();
            Data.ApInvoiceData = data;
            Data.ApInvoiceTransaction.ApInvoiceUuid = data.ApInvoiceHeader.ApInvoiceUuid;

            return success;
        }
        /// <summary>
        /// Load Invoice data.
        /// </summary>
        /// <param name="invoiceUuid"></param>
        protected async Task<bool> LoadApInvoiceAsync(int masterAccountNum, int profileNum, string apInvoiceNumber)
        {
            // load ap invoice data
            var data = new ApInvoiceData(dbFactory);
            var success = await data.GetByNumberAsync(masterAccountNum, profileNum, apInvoiceNumber);
            if (!success) return success;

            if (Data == null)
                NewData();
            Data.ApInvoiceData = data;
            Data.ApInvoiceTransaction.ApInvoiceUuid = data.ApInvoiceHeader.ApInvoiceUuid;

            return success;
        }
        /// <summary>
        /// Load Invoice data.
        /// </summary>
        /// <param name="invoiceUuid"></param>
        protected async Task<bool> LoadApInvoiceAsync(string apInvoiceUuid)
        {
            // load invoice data
            var data = new ApInvoiceData(dbFactory);
            var success = await data.GetByIdAsync(apInvoiceUuid);
            if (!success)
            {
                AddError($"Data not found for apInvoiceUuid:{apInvoiceUuid}");
                return success;
            }

            if (Data == null)
                NewData();
            Data.ApInvoiceData = data;
            Data.ApInvoiceTransaction.ApInvoiceUuid = data.ApInvoiceHeader.ApInvoiceUuid;

            return success;
        }
        /// <summary>
        /// Load Invoice data.
        /// </summary>
        /// <param name="invoiceUuid"></param>
        protected bool LoadApInvoice(string apInvoiceUuid)
        {
            // load invoice data
            var data = new ApInvoiceData(dbFactory);
            var success = data.GetById(apInvoiceUuid);
            if (!success)
            {
                AddError($"Data not found for apInvoiceUuid:{apInvoiceUuid}");
                return success;
            }

            if (Data == null)
                NewData();
            Data.ApInvoiceData = data;
            Data.ApInvoiceTransaction.ApInvoiceUuid = data.ApInvoiceHeader.ApInvoiceUuid;

            return success;
        }
        #endregion

        #region delete by ap invoice number
        /// <summary>
        /// Delete invoice by invoice number
        /// </summary>
        /// <param name="invoiceNumber"></param>
        /// <returns></returns>
        protected virtual async Task<bool> DeleteByNumberAsync(ApTransactionPayload payload, string apInvoiceNumber, TransTypeEnum transType, int transNum)
        {
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, apInvoiceNumber, (int)transType, transNum);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="apInvoiceNumber"></param>
        /// <returns></returns>
        protected virtual bool DeleteByNumber(ApTransactionPayload payload, string apInvoiceNumber, TransTypeEnum transType, int transNum)
        {
            if (string.IsNullOrEmpty(apInvoiceNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, apInvoiceNumber, (int)transType, transNum);
            success = success && DeleteData();
            return success;
        }

        #endregion
    }
}



