
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.Base.Common;
using DigitBridge.CommerceCentral.AzureStorage;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class EventERPService
    {
        protected string StorageAccount;

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override EventERPService Init()
        {
            base.Init();
            SetDtoMapper(new EventERPDataDtoMapperDefault());
            SetCalculator(new EventERPServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new EventERPServiceValidatorDefault(this, this.dbFactory));
            return this;
        }

        #region send message to queue

        protected ERPQueueMessage GetMessage()
        {
            var erpdata = Data.Event_ERP;
            return new ERPQueueMessage
            {
                ERPEventType = (ErpEventType)erpdata.ERPEventType,
                DatabaseNum = erpdata.DatabaseNum,
                MasterAccountNum = erpdata.MasterAccountNum,
                ProfileNum = erpdata.ProfileNum,
                ProcessUuid = erpdata.ProcessUuid,
                ProcessData = erpdata.ProcessData,
                ProcessSource = erpdata.ProcessSource,
                EventUuid = erpdata.EventUuid,
            };
        }

        protected bool InQueue()
        {
            var message = GetMessage();
            var queueName = message.ERPEventType.GetErpEventQueueName();
            QueueUniversal<ERPQueueMessage>.SendMessage(queueName, StorageAccount, message);
            return true;
        }
        protected async Task<bool> InQueueAsync()
        {
            var message = GetMessage();
            var queueName = message.ERPEventType.GetErpEventQueueName();
            await QueueUniversal<ERPQueueMessage>.SendMessageAsync(queueName, StorageAccount, message);
            return true;
        }

        #endregion

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(EventERPDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            if (!SaveData())
            {
                return false;
            }

            return InQueue();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(EventERPDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            if (!await SaveDataAsync())
            {
                return false;
            }
            return await InQueueAsync();
        }

        public virtual bool Add(EventERPPayload payload)
        {
            if (payload is null || !payload.HasEventERP)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.EventERP))
                return false;

            // load data from dto
            FromDto(payload.EventERP);

            // validate data for Add processing
            if (!Validate())
                return false;

            if (!SaveData())
            {
                return false;
            }

            return InQueue();
        }

        public virtual async Task<bool> AddAsync(EventERPPayload payload)
        {
            if (payload is null || !payload.HasEventERP)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.EventERP)))
                return false;

            // load data from dto
            FromDto(payload.EventERP);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            if (!await SaveDataAsync())
            {
                return false;
            }
            return await InQueueAsync();
        }
        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(EventERPDataDto dto)
        {
            if (dto is null || !dto.HasEvent_ERP)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.Event_ERP.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(EventERPDataDto dto)
        {
            if (dto is null || !dto.HasEvent_ERP)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.Event_ERP.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(EventERPPayload payload)
        {
            if (payload is null || !payload.HasEventERP || payload.EventERP.Event_ERP.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            // if (!ValidateAccount(payload))
            //     return false;
            //
            // if (!Validate(payload.EventERP))
            //     return false;

            // load data 
            if (!GetDataById(payload.EventERP.Event_ERP.EventUuid))
            {
                AddError($"{payload.EventERP.Event_ERP.EventUuid}Data not found");
                return false;
            }
            // load data from dto
            FromDto(payload.EventERP);

            // validate data for Add processing
            // if (!Validate())
            //     return false;

            if (Data.Event_ERP.ActionStatus == 0)
                return _data.Delete();
            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(EventERPPayload payload)
        {
            if (payload is null || !payload.HasEventERP)
                return false;
            //set edit mode before validate
            Edit();

            // if (!(await ValidateAccountAsync(payload)))
            //     return false;
            //
            // if (!(await ValidateAsync(payload.EventERP)))
            //     return false;

            // load data 
            if (!await GetDataByIdAsync(payload.EventERP.Event_ERP.EventUuid))
            {
                return false;
            }

            // load data from dto
            FromDto(payload.EventERP);

            // validate data for Add processing
            // if (!(await ValidateAsync()))
            //     return false;
            if (Data.Event_ERP.ActionStatus == (int)ErpEventActionStatus.Success)
                return await _data.DeleteAsync();
            return await SaveDataAsync();
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(EventERPPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(EventERPPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(EventERPPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(EventERPPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        #region Resend event 
        /// <summary>
        /// resend event by event uuid.
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="eventUuid"></param>
        /// <returns></returns>
        public virtual async Task<bool> ResendEventAsync(string eventUuid)
        {
            if (string.IsNullOrEmpty(eventUuid))
            {
                AddError("eventUuid cann't be emtpy.");
                return false;
            }
            Edit();

            if (!await GetDataByIdAsync(eventUuid))
                return false;

            if (!await InQueueAsync())
            {
                AddError("Send event to queue failed.");
                return false;
            }

            this.Data.Event_ERP.ActionStatus = (int)ErpEventActionStatus.Pending;
            this.Data.Event_ERP.ActionDateUtc = DateTime.UtcNow;
            await SaveDataAsync();
            return true;
        }


        /// <summary>
        /// resend event by event uuid array.
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="eventUuid"></param>
        /// <returns></returns>
        public virtual async Task<bool> ResendEventsAsync(EventERPPayload payload)
        {
            if (!payload.HasEventUuids)
            {
                AddError("eventuuids cann't be emtpy.");
                return false;
            }

            foreach (var eventUuid in payload.EventUuids)
            {
                var success = await ResendEventAsync(eventUuid);
                if (success)
                {
                    payload.SentEventUuids.Add(eventUuid);
                }
                else
                    payload.Success = false;
            }

            return payload.Success;
        }

        #endregion

        #region Add event and queue message

        public virtual async Task<bool> AddAsync(EventERPPayload payload, ErpEventType eventType)
        {
            if (payload is null || !payload.HasNewEvent)
                return false;

            if (payload.NewEvent.ProcessUuid.IsZero())
            {
                AddError("ProcessUuid cannot be emtpy.");
                return false;
            }

            var success = await AddEventAndQueueAsync(payload.NewEvent, eventType);
            if (success)
                payload.Event = this.Data.Event_ERP;

            return success;
        }

        protected async Task<bool> AddEventAndQueueAsync(NewEvent newEvent, ErpEventType eventType)
        {
            Add();
            _data = new EventERPData()
            {
                Event_ERP = new Event_ERP()
                {
                    MasterAccountNum = newEvent.MasterAccountNum,
                    ProfileNum = newEvent.ProfileNum,
                    ProcessUuid = newEvent.ProcessUuid,
                    ActionStatus = (int)ErpEventActionStatus.Pending,
                    ERPEventType = (int)eventType,
                    ActionDateUtc = DateTime.UtcNow,
                    EventUuid = Guid.NewGuid().ToString(),
                }
            };

            if (!await SaveDataAsync())
            {
                AddError("Add event failed.");
                return false;
            }
            return await InQueueAsync();
        }

        #endregion
    }
}



