
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.Base.Common;
using System.Text;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class EventProcessERPService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override EventProcessERPService Init()
        {
            base.Init();
            SetDtoMapper(new EventProcessERPDataDtoMapperDefault());
            SetCalculator(new EventProcessERPServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new EventProcessERPServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(EventProcessERPDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(EventProcessERPDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(EventProcessERPPayload payload)
        {
            if (payload is null || !payload.HasEventProcessERP)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.EventProcessERP))
                return false;

            // load data from dto
            FromDto(payload.EventProcessERP);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(EventProcessERPPayload payload)
        {
            if (payload is null || !payload.HasEventProcessERP)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.EventProcessERP)))
                return false;

            // load data from dto
            FromDto(payload.EventProcessERP);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(EventProcessERPDataDto dto)
        {
            if (dto is null || !dto.HasEventProcessERP)
                return false;
            //set edit mode before validate
            Edit();
            //if (!(await ValidateAsync(dto)))
            //    return false;

            // load data by event uuid.
            if (!GetDataById(dto.EventProcessERP.EventUuid))
                return false;

            // load data from dto
            FromDto(dto);

            //// validate data for Add processing
            //if (!(await ValidateAsync()))
            //    return false; 

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(EventProcessERPDataDto dto)
        {
            if (dto is null || !dto.HasEventProcessERP)
                return false;
            //set edit mode before validate
            Edit();
            //if (!(await ValidateAsync(dto)))
            //    return false;

            // load data by event uuid.
            if (!await GetDataByIdAsync(dto.EventProcessERP.EventUuid))
                return false;

            // load data from dto
            FromDto(dto);

            //// validate data for Add processing
            //if (!(await ValidateAsync()))
            //    return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(EventProcessERPPayload payload)
        {
            if (payload is null || !payload.HasEventProcessERP || payload.EventProcessERP.EventProcessERP.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.EventProcessERP))
                return false;

            // load data 
            GetData(payload.EventProcessERP.EventProcessERP.RowNum.ToLong());

            // load data from dto
            FromDto(payload.EventProcessERP);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(EventProcessERPPayload payload)
        {
            if (payload is null || !payload.HasEventProcessERP)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.EventProcessERP)))
                return false;

            // load data 
            await GetDataAsync(payload.EventProcessERP.EventProcessERP.RowNum.ToLong());

            // load data from dto
            FromDto(payload.EventProcessERP);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(EventProcessERPPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(EventProcessERPPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(EventProcessERPPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(EventProcessERPPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        public async Task<bool> ExistProcessUuidAsync(int erpEventProcessType, string processUuid)
        {
            return await dbFactory.ExistsAsync<EventProcessERP>("ERPEventProcessType=@0 AND ProcessUuid=@1"
                , erpEventProcessType.ToSqlParameter("erpEventProcessType")
                , processUuid.ToSqlParameter("processUuid")
            );
        }

        public async Task<long> GetRowNumByProcessUuidAsync(int erpEventProcessType, string processUuid)
        {
            using (var trs = new ScopedTransaction(dbFactory))
                return await EventProcessERPHelper.GetRowNumByProcessUuidAsync(erpEventProcessType, processUuid);
        }

        public long GetRowNumByProcessUuid(int erpEventProcessType, string processUuid)
        {
            using (var trs = new ScopedTransaction(dbFactory))
                return EventProcessERPHelper.GetRowNumByProcessUuid(erpEventProcessType, processUuid);
        }

        public virtual async Task<bool> GetByProcessUuidAsync(int erpEventProcessType, string processUuid)
        {
            if (this.ProcessMode == ProcessingMode.Add) return false;
            var rowNum = await GetRowNumByProcessUuidAsync(erpEventProcessType, processUuid);
            if (rowNum == 0) return false;
            return await GetDataAsync(rowNum);
        }

        /// <summary>
        /// Add new EventProcessERP
        /// </summary>
        public virtual async Task<bool> AddEventProcessERPAsync(EventProcessERP data) =>
            await AddEventProcessERPAsync(new EventProcessERPData(this.dbFactory, data));

        public virtual async Task<bool> AddEventProcessERPAsync(EventProcessERPData data)
        {
            if (data is null)
                return false;

            var rowNum = await GetRowNumByProcessUuidAsync(data.EventProcessERP.ERPEventProcessType, data.EventProcessERP.ProcessUuid);

            // if ProcessUuid exist and not complete process, can resend this processUuid
            if (rowNum > 0)
            {
                if (await EditAsync(rowNum))
                {
                    if (this.Data.EventProcessERP.ProcessStatusEnum == EventProcessProcessStatusEnum.Pending)
                    {
                        this.Data.EventProcessERP.ActionStatusEnum = EventProcessActionStatusEnum.Pending;
                        this.Data.EventProcessERP.LastUpdateDate = DateTime.UtcNow;
                        return await SaveDataAsync();
                    }
                }
            }

            Add();
            this.AttachData(data);
            this.Data.EventProcessERP.LastUpdateDate = DateTime.UtcNow;
            this.Data.EventProcessERP.EventUuid = Guid.NewGuid().ToString();
            return await SaveDataAsync();
        }

        /// <summary>
        /// Add new EventProcessERP
        /// </summary>
        public virtual bool AddEventProcessERP(EventProcessERP data) =>
            AddEventProcessERP(new EventProcessERPData(this.dbFactory, data));

        public virtual bool AddEventProcessERP(EventProcessERPData data)
        {
            if (data is null)
                return false;

            var rowNum = GetRowNumByProcessUuid(data.EventProcessERP.ERPEventProcessType, data.EventProcessERP.ProcessUuid);

            // if ProcessUuid exist and not complete process, can resend this processUuid
            if (rowNum > 0)
            {
                if (Edit(rowNum))
                {
                    if (data.EventProcessERP.ProcessStatusEnum == EventProcessProcessStatusEnum.Pending)
                    {
                        data.EventProcessERP.ActionStatusEnum = EventProcessActionStatusEnum.Pending;
                        data.EventProcessERP.LastUpdateDate = DateTime.UtcNow;
                        return SaveData();
                    }
                }
            }

            Add();
            data.EventProcessERP.LastUpdateDate = DateTime.UtcNow;
            data.EventProcessERP.EventUuid = Guid.NewGuid().ToString();
            this.AttachData(data);
            return SaveData();
        }


        #region batch update event process 
        public virtual async Task<bool> UpdateActionStatusAsync(AcknowledgePayload ackPayload)
        {
            var sql = $@"  
            UPDATE epe 
            SET ActionStatus = @0, ActionDate = getdate()
            FROM EventProcessERP epe
            INNER JOIN @1 EventUuidList ON (EventUuidList.item = epe.ProcessUuid) 
            WHERE epe.ActionStatus=@2
                  AND epe.ERPEventProcessType=@3
                  --AND MasterAccountNum=@4
                  --AND ProfileNum=@5
            ";

            var result = await dbFactory.Db.ExecuteAsync(sql,
                ((int)EventProcessActionStatusEnum.Downloaded).ToParameter("@ActionStatus_New"),
                ackPayload.ProcessUuids.ToParameter<string>("@EventUuidList"),
                 ((int)EventProcessActionStatusEnum.Pending).ToParameter("@ActionStatus_Original"),
                 ((int)ackPayload.EventProcessType).ToParameter("@ERPEventProcessType")
            //payload.MasterAccountNum.ToParameter("@MasterAccountNum"),
            //payload.ProfileNum.ToParameter("@ProfileNum")
            );
            //affect record equal the request data count.
            var success = result == ackPayload.ProcessUuids.Count;
            if (!success)
            {
                AddError($"Total record is {ackPayload.ProcessUuids.Count}, actual affect record is {result}");
            }

            return success;
        }

        public virtual async Task<bool> UpdateProcessStatusAsync(AcknowledgeProcessPayload ackPayload)
        {
            if (ackPayload == null || !ackPayload.HasProcessResults)
                return false;
            var erpEventProcessType = (int)ackPayload.EventProcessType;
            if (erpEventProcessType <= 0) return false;

            var success = true;
            foreach (var result in ackPayload.ProcessResults)
            {
                if (result == null || string.IsNullOrEmpty(result.ProcessUuid)) continue;
                // load by processUuid 
                this.Edit();
                if (!(await this.GetByProcessUuidAsync(erpEventProcessType, result.ProcessUuid)))
                {
                    AddInfo($"Data not found. ProcessUuid is :{result.ProcessUuid}");
                    continue;
                }

                // if event already closed, don't update process status 
                if (this.Data.EventProcessERP.CloseStatusEnum == EventCloseStatusEnum.Closed)
                {
                    AddInfo($"Data already closed. ProcessUuid is :{result.ProcessUuid} ");
                    continue;
                }

                // if ActionStatus is still pending, ack receive.
                if (this.Data.EventProcessERP.ActionStatus == (int)EventProcessActionStatusEnum.Pending)
                {
                    this.Data.EventProcessERP.ActionStatus = (int)EventProcessActionStatusEnum.Downloaded;
                    this.Data.EventProcessERP.ActionDate = DateTime.UtcNow;
                    AddInfo($"Due to data actionstatus is still pending, Do ack received also. ProcessUuid is :{result.ProcessUuid} ");
                }


                this.Data.EventProcessERP.ProcessStatus = result.ProcessStatus;
                this.Data.EventProcessERP.ProcessDate = DateTime.UtcNow;
                this.Data.EventProcessERP.ProcessData = (result.ProcessData == null) ? string.Empty : result.ProcessData.ToString();
                await this.SaveDataAsync();
            }
            return success;
        }

        public virtual async Task<bool> UpdateCloseStatusAsync(int erpEventProcessType, string processUuid, int closeStatus)
        {
            var sql = $@"  
            UPDATE epe 
            SET CloseStatus = @0, CloseDate = getdate()
            FROM EventProcessERP epe
            WHERE epe.ProcessUuid=@1
                AND epe.CloseStatus!=@2
                AND epe.ERPEventProcessType=@3
            ";

            var result = await dbFactory.Db.ExecuteAsync(sql,
                closeStatus.ToParameter("@0"),
                processUuid.ToParameter("@1"),
                closeStatus.ToParameter("@2"),
                erpEventProcessType.ToParameter("@3")
            //payload.MasterAccountNum.ToParameter("@MasterAccountNum"),
            //payload.ProfileNum.ToParameter("@ProfileNum")
            );
            return result > 0;
        }

        #endregion
        public async Task<StringBuilder> GetUnprocessedEvent(int masterAccountNum, int profileNum, int channelNum, int channelAccountNum, EventProcessTypeEnum erpEventProcessType)
        {
            var payload = new EventProcessERPPayload()
            {
                MasterAccountNum = masterAccountNum,
                ProfileNum = profileNum,
                Filter = new Newtonsoft.Json.Linq.JObject()
                {
                    { "ChannelNum", channelNum },
                    { "ChannelAccountNum", channelAccountNum },
                    { "ERPEventProcessType", (int)erpEventProcessType }
                }
            };
            var srv = new EventProcessERPList(dbFactory, new EventProcessERPQuery());
            await srv.GetEventProcessERPListAsync(payload);
            return payload.EventProcessERPList;
        }
    }
}



