
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class EventProcessERPService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override EventProcessERPService Init()
        {
            base.Init();
            SetDtoMapper(new EventProcessERPDataDtoMapperDefault());
            SetCalculator(new EventProcessERPServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new EventProcessERPServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(EventProcessERPDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(EventProcessERPDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(EventProcessERPPayload payload)
        {
            if (payload is null || !payload.HasEventProcessERP)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.EventProcessERP))
                return false;

            // load data from dto
            FromDto(payload.EventProcessERP);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(EventProcessERPPayload payload)
        {
            if (payload is null || !payload.HasEventProcessERP)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.EventProcessERP)))
                return false;

            // load data from dto
            FromDto(payload.EventProcessERP);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(EventProcessERPDataDto dto)
        {
            if (dto is null || !dto.HasEventProcessERP)
                return false;
            //set edit mode before validate
            Edit();
            //if (!(await ValidateAsync(dto)))
            //    return false;

            // load data by event uuid.
            if (!GetDataById(dto.EventProcessERP.EventUuid))
                return false;

            // load data from dto
            FromDto(dto);

            //// validate data for Add processing
            //if (!(await ValidateAsync()))
            //    return false; 

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(EventProcessERPDataDto dto)
        {
            if (dto is null || !dto.HasEventProcessERP)
                return false;
            //set edit mode before validate
            Edit();
            //if (!(await ValidateAsync(dto)))
            //    return false;

            // load data by event uuid.
            if (!await GetDataByIdAsync(dto.EventProcessERP.EventUuid))
                return false;

            // load data from dto
            FromDto(dto);

            //// validate data for Add processing
            //if (!(await ValidateAsync()))
            //    return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(EventProcessERPPayload payload)
        {
            if (payload is null || !payload.HasEventProcessERP || payload.EventProcessERP.EventProcessERP.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.EventProcessERP))
                return false;

            // load data 
            GetData(payload.EventProcessERP.EventProcessERP.RowNum.ToLong());

            // load data from dto
            FromDto(payload.EventProcessERP);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(EventProcessERPPayload payload)
        {
            if (payload is null || !payload.HasEventProcessERP)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.EventProcessERP)))
                return false;

            // load data 
            await GetDataAsync(payload.EventProcessERP.EventProcessERP.RowNum.ToLong());

            // load data from dto
            FromDto(payload.EventProcessERP);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(EventProcessERPPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(EventProcessERPPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(EventProcessERPPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(EventProcessERPPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

    }
}



