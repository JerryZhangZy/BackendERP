    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Newtonsoft.Json;
using System.Xml.Serialization;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class ActivityLogService
    {
        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override ActivityLogService Init()
        {
            base.Init();
            SetDtoMapper(new ActivityLogDataDtoMapperDefault());
            SetCalculator(new ActivityLogServiceCalculatorDefault(this,this.dbFactory));
            AddValidator(new ActivityLogServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(ActivityLogDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(ActivityLogDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(ActivityLogPayload payload)
        {
            if (payload is null || !payload.HasActivityLog)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.ActivityLog))
                return false;

            // load data from dto
            FromDto(payload.ActivityLog);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(ActivityLogPayload payload)
        {
            if (payload is null || !payload.HasActivityLog)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.ActivityLog)))
                return false;

            // load data from dto
            FromDto(payload.ActivityLog);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(ActivityLogDataDto dto)
        {
            if (dto is null || !dto.HasActivityLog)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.ActivityLog.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(ActivityLogDataDto dto)
        {
            if (dto is null || !dto.HasActivityLog)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.ActivityLog.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(ActivityLogPayload payload)
        {
            if (payload is null || !payload.HasActivityLog || payload.ActivityLog.ActivityLog.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.ActivityLog))
                return false;

            // load data 
            GetData(payload.ActivityLog.ActivityLog.RowNum.ToLong());

            // load data from dto
            FromDto(payload.ActivityLog);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(ActivityLogPayload payload)
        {
            if (payload is null || !payload.HasActivityLog)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.ActivityLog)))
                return false;

            // load data 
            await GetDataAsync(payload.ActivityLog.ActivityLog.RowNum.ToLong());

            // load data from dto
            FromDto(payload.ActivityLog);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(ActivityLogPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(ActivityLogPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(ActivityLogPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(ActivityLogPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }


        /// <summary>
        /// Add new ActivityLog
        /// </summary>
        public virtual async Task<bool> AddActivityLogAsync(ActivityLog data) => 
            await AddActivityLogAsync(new ActivityLogData(this.dbFactory, data));

        public virtual async Task<bool> AddActivityLogAsync(ActivityLogData data)
        {
            if (data is null)
                return false;

            // set Add mode and clear data
            Add();
            data.ActivityLog.LogDate = DateTime.Now;
            data.ActivityLog.LogUuid = Guid.NewGuid().ToString();
            this.AttachData(data);
            var rtn = await SaveDataAsync();

            await this.AddEventProcessERPAsync(data.ActivityLog);
            return rtn;
        }

        public virtual bool AddActivityLog(ActivityLog data) =>
            AddActivityLog(new ActivityLogData(this.dbFactory, data));

        public virtual bool AddActivityLog(ActivityLogData data)
        {
            if (data is null)
                return false;

            // set Add mode and clear data
            Add();
            data.ActivityLog.LogDate = DateTime.Now;
            data.ActivityLog.LogUuid = Guid.NewGuid().ToString();
            this.AttachData(data);
            return SaveData();
        }


        #region EventProcessERPService Service
        [XmlIgnore, JsonIgnore]
        protected IEventProcessERPService _EventProcessERPService;

        [XmlIgnore, JsonIgnore]
        public IEventProcessERPService EventProcessERPService
        {
            get
            {
                if (_EventProcessERPService is null)
                    _EventProcessERPService = new EventProcessERPService(this.dbFactory);
                return _EventProcessERPService;
            }
        }

        protected virtual async Task<bool> AddEventProcessERPAsync(ActivityLog log)
        {
            var eventProcessTypes = GetERPEventProcessTypeByActivityLogType(log.Type);
            if (eventProcessTypes == null || eventProcessTypes.Count <= 0)
                return false;

            foreach (var eventProcessType in eventProcessTypes)
            {
                await this.EventProcessERPService.AddEventProcessERPAsync(new EventProcessERP(this.dbFactory)
                {
                    ChannelNum = log.ChannelNum,
                    ChannelAccountNum = log.ChannelAccountNum,
                    ERPEventProcessType = (int)eventProcessType,
                    ProcessSource = string.Empty,
                    ProcessUuid = log.ProcessUuid,
                    ProcessData = string.Empty,
                    ActionStatus = (int)EventProcessActionStatusEnum.Pending,
                    EventMessage = string.Empty
                });
            }
            return true;
        }

        protected virtual bool AddEventProcessERP(ActivityLog log)
        {
            var eventProcessTypes = GetERPEventProcessTypeByActivityLogType(log.Type);
            if (eventProcessTypes == null || eventProcessTypes.Count <= 0)
                return false;

            foreach (var eventProcessType in eventProcessTypes)
            {
                this.EventProcessERPService.AddEventProcessERP(new EventProcessERP(this.dbFactory)
                {
                    MasterAccountNum = log.MasterAccountNum,
                    ProfileNum = log.ProfileNum,
                    DatabaseNum = log.DatabaseNum,
                    ChannelNum = log.ChannelNum,
                    ChannelAccountNum = log.ChannelAccountNum,
                    ERPEventProcessType = (int)eventProcessType,
                    ProcessSource = string.Empty,
                    ProcessUuid = log.ProcessUuid,
                    ProcessData = string.Empty,
                    ActionStatusEnum = EventProcessActionStatusEnum.Pending,
                    ActionDate = DateTime.Now,
                    ProcessStatusEnum = EventProcessProcessStatusEnum.Pending,
                    //ProcessDate = DateTime.Now,
                    CloseStatusEnum = EventCloseStatusEnum.Open,
                    //CloseDate = DateTime.Now,
                    EventMessage = string.Empty
                });
            }
            return true;
        }


        protected virtual IList<EventProcessTypeEnum> GetERPEventProcessTypeByActivityLogType(int logType)
        {
            var eventProcessTypes = new List<EventProcessTypeEnum>();
            switch (logType)
            {
                case (int)ActivityLogType.SalesOrder:
                    eventProcessTypes.Add(EventProcessTypeEnum.SalesOrderToWMS);
                    break;
                case (int)ActivityLogType.Invoice:
                    eventProcessTypes.Add(EventProcessTypeEnum.InvoiceToCommerceCentral);
                    break;
                case (int)ActivityLogType.PurchaseOrder:
                    eventProcessTypes.Add(EventProcessTypeEnum.PoToWMS);
                    break;
                default:
                    break;
            }
            return eventProcessTypes;
        }

        #endregion EventProcessERPService Service


    }
}



