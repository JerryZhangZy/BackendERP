

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default SalesOrderService Calculator class.
    /// </summary>
    public partial class WarehouseTransferDtoPrepareDefault : IPrepare<WarehouseTransferService, WarehouseTransferData, WarehouseTransferDataDto>
    {
        private int masterAccountNum;
        private int  profileNum;
        public WarehouseTransferDtoPrepareDefault(WarehouseTransferService warehouseTransferService, int masterAccountNum,int profileNum)
        {
            this.masterAccountNum = masterAccountNum;
            this.profileNum = profileNum;
            _warehouseTransferService = warehouseTransferService;
        }

        protected WarehouseTransferService _warehouseTransferService;
        protected WarehouseTransferService Service 
        { 
            get => _warehouseTransferService; 
        }
        protected IDataBaseFactory dbFactory 
        { 
            get => Service.dbFactory; 
        }

        private InventoryService _inventoryService;
        protected InventoryService InventoryService => _inventoryService ??= new InventoryService(dbFactory);
        #region message
        [XmlIgnore, JsonIgnore]
        protected IList<MessageClass> Messages
        {
            get => Service.Messages;
        }
        protected IList<MessageClass> AddInfo(string message, string code = null) => Service.AddInfo(message, code);
        protected IList<MessageClass> AddWarning(string message, string code = null) => Service.AddWarning(message, code);
        protected IList<MessageClass> AddError(string message, string code = null) => Service.AddError(message, code);
        protected IList<MessageClass> AddFatal(string message, string code = null) => Service.AddFatal(message, code);
        protected IList<MessageClass> AddDebug(string message, string code = null) => Service.AddDebug(message, code);

        #endregion message

        #region Service Property

       

    

        #endregion

        private DateTime now = DateTime.UtcNow;

        /// <summary>
        /// Check Dto data, fill customer and inventory info.
        /// </summary>
        public virtual async Task<bool> PrepareDtoAsync(WarehouseTransferDataDto dto)
        {
            if (dto == null || dto.WarehouseTransferHeader == null)
                return false;

            dto.WarehouseTransferHeader.MasterAccountNum = this.masterAccountNum;
            dto.WarehouseTransferHeader.ProfileNum = this.profileNum;

            foreach (var item in dto.WarehouseTransferItems)
            {
                this.FillDataToWarehouseTransferItem(dto, item);
            }

            return true;
        }

        private bool FillDataToWarehouseTransferItem(WarehouseTransferDataDto data, WarehouseTransferItemsDto item)
        {

            item.FromWarehouseUuid = data.WarehouseTransferHeader.FromWarehouseUuid;
            item.FromWarehouseCode = data.WarehouseTransferHeader.FromWarehouseCode;
            item.ToWarehouseUuid = data.WarehouseTransferHeader.ToWarehouseUuid;
            item.ToWarehouseCode = data.WarehouseTransferHeader.ToWarehouseCode;

            #region fill from inventory data

            var inv = GetInventory(item.SKU, item.FromWarehouseCode, data.WarehouseTransferHeader.MasterAccountNum.Value, data.WarehouseTransferHeader.ProfileNum.Value);
            if (inv == null) return false;
            if (item.ItemDate.IsZero()) item.ItemDate = DateTime.UtcNow.Date;
            if (item.ItemTime.IsZero()) item.ItemTime = DateTime.UtcNow.TimeOfDay.ToDateTime();
            item.LotNum = inv.LotNum;
            if (item.Description.IsZero()) item.Description = inv.LotDescription;
            if (item.Notes.IsZero()) item.Notes = inv.Notes;
            item.FromWarehouseUuid = inv.WarehouseUuid;
            item.FromInventoryUuid = inv.InventoryUuid;
            item.UOM = inv.UOM;
            item.PackType = inv.PackType;
            item.PackQty = inv.PackQty;
            item.UnitCost = inv.UnitCost;
            item.AvgCost = inv.AvgCost;
            item.LotInDate = inv.LotInDate;
            item.LotExpDate = inv.LotExpDate;
            item.FromBeforeInstockQty = inv.Instock;
            item.ProductUuid = inv.ProductUuid;
            #endregion

            #region fill to inventory data

            var inventory = GetInventory(item.SKU, item.ToWarehouseCode, data.WarehouseTransferHeader.MasterAccountNum.Value, data.WarehouseTransferHeader.ProfileNum.Value);

            if (inventory == null)
                return false;
            item.ToWarehouseUuid = inventory.WarehouseUuid;
            item.ToInventoryUuid = inventory.InventoryUuid;
            item.ToBeforeInstockQty = inventory.Instock;

            #endregion

            #region create InTransit Warehouse Inventory
            InventoryService.CreateInTransitWarehouseInventory(data.WarehouseTransferHeader.MasterAccountNum.Value, data.WarehouseTransferHeader.ProfileNum.Value, item.SKU, inv.ProductUuid);
            #endregion
            return true;
        }
        private Inventory GetInventory(string sku, string warehouseCode, int masterAccountNum, int profileNum)
        {
            var inventory = InventoryService.GetInventoryDataByWarehouseAsync(sku, warehouseCode, masterAccountNum, profileNum, true).GetAwaiter().GetResult();
            if (inventory == null)
            {
                AddError($"Sku {sku} or warehouse {warehouseCode} not found.");
                return null;
            }
            return inventory.Inventory.FirstOrDefault(r => r.WarehouseCode == warehouseCode);
        }

    }
}



