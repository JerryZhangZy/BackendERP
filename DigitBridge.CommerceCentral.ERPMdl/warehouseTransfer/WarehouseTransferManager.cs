//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.AspNetCore.Http;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a WarehouseTransferService.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public class WarehouseTransferManager :  IWarehouseTransferManager , IMessage
    {

        public WarehouseTransferManager() : base() {}

        public WarehouseTransferManager(IDataBaseFactory dbFactory)
        {
            SetDataBaseFactory(dbFactory);
        }
        
        [XmlIgnore, JsonIgnore]
        protected WarehouseTransferService _warehouseTransferService;
        [XmlIgnore, JsonIgnore]
        public WarehouseTransferService warehouseTransferService
        {
            get
            {
                if (_warehouseTransferService is null)
                    _warehouseTransferService = new WarehouseTransferService(dbFactory);
                return _warehouseTransferService;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected WarehouseTransferDataDtoCsv _warehouseTransferDataDtoCsv;
        [XmlIgnore, JsonIgnore]
        public WarehouseTransferDataDtoCsv warehouseTransferDataDtoCsv
        {
            get
            {
                if (_warehouseTransferDataDtoCsv is null)
                    _warehouseTransferDataDtoCsv = new WarehouseTransferDataDtoCsv();
                return _warehouseTransferDataDtoCsv;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected WarehouseTransferList _warehouseTransferList;
        [XmlIgnore, JsonIgnore]
        public WarehouseTransferList warehouseTransferList
        {
            get
            {
                if (_warehouseTransferList is null)
                    _warehouseTransferList = new WarehouseTransferList(dbFactory);
                return _warehouseTransferList;
            }
        }

        public async Task<byte[]> ExportAsync(WarehouseTransferPayload payload)
        {
            var rowNumList =await warehouseTransferList.GetRowNumListAsync(payload);
            var dtoList = new List<WarehouseTransferDataDto>();
           foreach(var x in rowNumList)
            {
                if (warehouseTransferService.GetData(x))
                    dtoList.Add(warehouseTransferService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new WarehouseTransferDataDto());
            return warehouseTransferDataDtoCsv.Export(dtoList);
        }

        public byte[] Export(WarehouseTransferPayload payload)
        {
            var rowNumList =warehouseTransferList.GetRowNumList(payload);
            var dtoList = new List<WarehouseTransferDataDto>();
            foreach (var x in rowNumList)
            {
                if (warehouseTransferService.GetData(x))
                    dtoList.Add(warehouseTransferService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new WarehouseTransferDataDto());
            return warehouseTransferDataDtoCsv.Export(dtoList);
        }

        public void Import(WarehouseTransferPayload payload, IFormFileCollection files)
        {
            if(files==null||files.Count==0)
            {
                AddError("no files upload");
                return;
            }
            foreach(var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var tlist = warehouseTransferDataDtoCsv.Import(file.OpenReadStream());
                var list = new List<WarehouseTransferDataDto>();
                foreach (var item in tlist)
                {
                    if (!item.HasWarehouseTransferHeader)
                    {
                        if (item.HasWarehouseTransferItems)
                        {
                            foreach (var uitem in item.WarehouseTransferItems)
                            {
                                var data = new WarehouseTransferDataDto()
                                {
                                    WarehouseTransferHeader = new WarehouseTransferHeaderDto
                                    {
                                        FromWarehouseCode = uitem.FromWarehouseCode,
                                        FromWarehouseUuid = uitem.FromWarehouseUuid,
                                        ToWarehouseCode = uitem.ToWarehouseCode,
                                        ToWarehouseUuid = uitem.ToWarehouseUuid,
                                        DatabaseNum = payload.DatabaseNum,
                                        ProfileNum = payload.ProfileNum,
                                        MasterAccountNum = payload.MasterAccountNum,
                                        WarehouseTransferType = (int)payload.InventoryUpdateType
                                    },
                                    WarehouseTransferItems = new List<WarehouseTransferItemsDto>() { uitem }
                                };
                                list.Add(data);
                            }
                        }
                    }
                    else
                    {
                        list.Add(item);
                    }
                }
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.WarehouseTransfer = item;
                    if (warehouseTransferService.Add(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in warehouseTransferService.Messages)
                            Messages.Add(msg);
                        warehouseTransferService.Messages.Clear();
                    }
                }
                if (payload.HasWarehouseTransfer)
                    payload.WarehouseTransfer = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        public async Task ImportAsync(WarehouseTransferPayload payload, IFormFileCollection files)
        {
            if(files==null||files.Count==0)
            {
                AddError("no files upload");
                return;
            }
            foreach(var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var tlist = warehouseTransferDataDtoCsv.Import(file.OpenReadStream());
                var list = new List<WarehouseTransferDataDto>();
                foreach (var item in tlist)
                {
                    if (!item.HasWarehouseTransferHeader)
                    {
                        if (item.HasWarehouseTransferItems)
                        {
                            foreach (var uitem in item.WarehouseTransferItems)
                            {
                                var data = new WarehouseTransferDataDto()
                                {
                                    WarehouseTransferHeader = new WarehouseTransferHeaderDto
                                    {
                                        FromWarehouseCode = uitem.FromWarehouseCode,
                                        FromWarehouseUuid = uitem.FromWarehouseUuid,
                                        ToWarehouseCode=uitem.ToWarehouseCode,
                                        ToWarehouseUuid=uitem.ToWarehouseUuid,
                                        DatabaseNum = payload.DatabaseNum,
                                        ProfileNum = payload.ProfileNum,
                                        MasterAccountNum = payload.MasterAccountNum,
                                        WarehouseTransferType=(int)payload.InventoryUpdateType
                                    },
                                    WarehouseTransferItems = new List<WarehouseTransferItemsDto>() { uitem }
                                };
                                list.Add(data);
                            }
                        }
                    }
                    else
                    {
                        list.Add(item);
                    }
                }
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.WarehouseTransfer = item;
                    if (await warehouseTransferService.AddAsync(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in warehouseTransferService.Messages)
                            Messages.Add(msg);
                        warehouseTransferService.Messages.Clear();
                    }
                }
                if (payload.HasWarehouseTransfer)
                    payload.WarehouseTransfer = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }
        public async Task SaveImportDataAsync(IList<WarehouseTransferDataDto> dtos, ImportExportFilesPayload payload)
        {
            if (dtos == null || dtos.Count == 0)
            {
                AddError("no files upload");
                return;
            }
            WarehouseTransferPayload  warehouseTransferPayload = new WarehouseTransferPayload()
            {
                MasterAccountNum = payload.MasterAccountNum,
                ProfileNum = payload.ProfileNum
            };
            foreach (var dto in dtos)
            {

                warehouseTransferPayload.WarehouseTransfer = dto;
                await warehouseTransferService.ImportAsync(warehouseTransferPayload);
                warehouseTransferPayload.WarehouseTransfer = null;


            }
        }


        #region DataBase
        [XmlIgnore, JsonIgnore]
        protected IDataBaseFactory _dbFactory;

        [XmlIgnore, JsonIgnore]
        public IDataBaseFactory dbFactory
        {
            get
            {
                if (_dbFactory is null)
                    _dbFactory = DataBaseFactory.CreateDefault();
                return _dbFactory;
            }
        }

        public void SetDataBaseFactory(IDataBaseFactory dbFactory)
        {
            _dbFactory = dbFactory;
        }

        #endregion DataBase

        #region Messages
        protected IList<MessageClass> _messages;
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (_messages is null)
                    _messages = new List<MessageClass>();
                return _messages;
            }
            set { _messages = value; }
        }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             Messages.Add(message, MessageLevel.Info, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Warning, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Error, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Fatal, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Debug, code);

        #endregion Messages
    }
}
