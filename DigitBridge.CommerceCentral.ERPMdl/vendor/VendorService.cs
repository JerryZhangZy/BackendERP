    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using System.Xml.Serialization;
using System.Text.Json.Serialization;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class VendorService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override VendorService Init()
        {
            base.Init();
            SetDtoMapper(new VendorDataDtoMapperDefault());
            SetCalculator(new VendorServiceCalculatorDefault(this,this.dbFactory));
            AddValidator(new VendorServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        protected VendorAddressService _vendorAddressService;
        [XmlIgnore, JsonIgnore]
        public VendorAddressService vendorAddressService
        {
            get
            {
                if (_vendorAddressService is null)
                    _vendorAddressService = new VendorAddressService(dbFactory);
                return _vendorAddressService;
            }
        }
        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(VendorDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(VendorDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(VendorPayload payload)
        {
            if (payload is null || !payload.HasVendor)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Vendor))
                return false;

            // load data from dto
            FromDto(payload.Vendor);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(VendorPayload payload)
        {
            if (payload is null || !payload.HasVendor)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Vendor)))
                return false;

            // load data from dto
            FromDto(payload.Vendor);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }
    
        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(VendorDataDto dto)
        {
            if (dto is null || !dto.HasVendor)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.Vendor.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(VendorDataDto dto)
        {
            if (dto is null || !dto.HasVendor)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.Vendor.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(VendorPayload payload)
        {
            if (payload is null || !payload.HasVendor || payload.Vendor.Vendor.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Vendor))
                return false;

            // load data 
            GetData(payload.Vendor.Vendor.RowNum.ToLong());

            // load data from dto
            FromDto(payload.Vendor);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(VendorPayload payload)
        {
            if (payload is null || !payload.HasVendor)
                return false;

            //set edit mode before validate
            Edit();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Vendor)))
                return false;

            // set Add mode and clear data
            await EditAsync(payload.Vendor.Vendor.RowNum.ToLong());

            // load data from dto
            FromDto(payload.Vendor);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }


        public VendorPayload GetVendorsByCodeArray(VendorPayload payload)
        {
            if (!payload.HasVendorCodes)
                return payload;
            var list = new List<VendorDataDto>();
            var msglist = new List<MessageClass>();
            var rowNumList = new List<long>();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                rowNumList = VendorServiceHelper.GetRowNumsByVendorCodes(payload.VendorCodes, payload.MasterAccountNum, payload.ProfileNum);
            }
            foreach (var rowNum in rowNumList)
            {
                if (GetData(rowNum))
                    list.Add(ToDto());
            }
            payload.Vendors = list;
            payload.Messages = msglist;
            return payload;
        }

        public async Task<VendorPayload> GetVendorsByCodeArrayAsync(VendorPayload payload)
        {
            if (!payload.HasVendorCodes)
                return payload;
            var list = new List<VendorDataDto>();
            var msglist = new List<MessageClass>();
            var rowNumList = new List<long>();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                rowNumList = await VendorServiceHelper.GetRowNumsByVendorCodesAsync(payload.VendorCodes, payload.MasterAccountNum, payload.ProfileNum);
            }
            foreach (var rowNum in rowNumList)
            {
                if (await GetDataAsync(rowNum))
                    list.Add(ToDto());
            }
            payload.Vendors = list;
            payload.Messages = msglist;
            return payload;
        }

        public async Task<bool> GetVendorByVendorCodeAsync(VendorPayload payload, string vendorCode)
        {
            if (string.IsNullOrEmpty(vendorCode))
                return false;
            List();
            if (!(await ValidateAccountAsync(payload, vendorCode)))
                return false;
            long rowNum = 0;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNum = await VendorServiceHelper.GetRowNumByVendorCodeAsync(vendorCode, payload.MasterAccountNum, payload.ProfileNum);
            }
            return await GetDataAsync(rowNum);
        }

        public async Task<bool> DeleteByCodeAsync(VendorPayload payload, string vendorCode)
        {
            if (string.IsNullOrEmpty(vendorCode))
                return false;
            Delete();
            if (!(await ValidateAccountAsync(payload, vendorCode)))
                return false;
            long rowNum = 0;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNum = await VendorServiceHelper.GetRowNumByVendorCodeAsync(vendorCode, payload.MasterAccountNum, payload.ProfileNum);
            }
            var success = await GetDataAsync(rowNum);
            return success && (await DeleteDataAsync());
        }

        public async Task<Vendor> GetVendorByNameAsync(string vendorName)
        {
            return (await dbFactory.FindAsync<Vendor>("WHERE VendorName=@0",
                vendorName.ToSqlParameter("VendorName"))).FirstOrDefault();
        }
        public async Task<Vendor> GetVendorByCodeAsync(string vendorCode)
        {
            return (await dbFactory.FindAsync<Vendor>("WHERE VendorCode=@0",
                vendorCode.ToSqlParameter("VendorCode"))).FirstOrDefault();
        }
        public Vendor GetVendorByName(string vendorName)
        {
            return dbFactory.Find<Vendor>("WHERE VendorName=@0",
                vendorName.ToSqlParameter("VendorName")).FirstOrDefault();
        }
        public Vendor GetVendorByCode(string vendorCode)
        {
           
            return dbFactory.Find<Vendor>("WHERE VendorCode=@0",
                vendorCode.ToSqlParameter("VendorCode")).FirstOrDefault();
        }



        public async Task<bool> AddVendorAddressAsync(VendorAddressPayload payload)
        {
           return await vendorAddressService.AddAsync(payload);
        }

        public async Task<bool> UpdateVendorAddressAsync(VendorAddressPayload payload)
        {
            return await vendorAddressService.UpdateAsync(payload);
        }

        public async Task<bool> DeleteByVendorAddressUuidAsync( string addressUuid)
        {
            return await vendorAddressService.DeleteByVendorAddressUuidAsync(addressUuid);
            
        }

        public VendorAddressDataDto ToVendorAddressDto()
        {

           return vendorAddressService.ToDto();
        }


    }
}



