    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using System.Xml.Serialization;
using System.Text.Json.Serialization;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class VendorService
    {

        #region override methods

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override VendorService Init()
        {
            base.Init();
            SetDtoMapper(new VendorDataDtoMapperDefault());
            SetCalculator(new VendorServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new VendorServiceValidatorDefault(this, this.dbFactory));
            return this;
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override async Task BeforeSaveAsync()
        {
            try
            {
                await base.BeforeSaveAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override void BeforeSave()
        {
            try
            {
                base.BeforeSave();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override async Task AfterSaveAsync()
        {
            try
            {
                await base.AfterSaveAsync();

            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override void AfterSave()
        {
            try
            {
                base.AfterSave();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override async Task SaveSuccessAsync()
        {
            try
            {
                await base.SaveSuccessAsync();
                if (this.Data?.Vendor != null)
                {
                    if (_ProcessMode == ProcessingMode.Add)
                    {
                        await initNumbersService.UpdateMaxNumberAsync(this.Data.Vendor.MasterAccountNum, this.Data.Vendor.ProfileNum, ActivityLogType.Vendor, this.Data.Vendor.VendorCode);
                    }
                }
            }
            catch (Exception ex)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override void SaveSuccess()
        {
            try
            {
                base.SaveSuccess();

                if (this.Data?.Vendor != null)
                {
                    if (_ProcessMode == ProcessingMode.Add)
                    {
                          initNumbersService.UpdateMaxNumber(this.Data.Vendor.MasterAccountNum, this.Data.Vendor.ProfileNum, ActivityLogType.Vendor, this.Data.Vendor.VendorCode);
                    }
                }
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Sub class should override this method to return new ActivityLog object for service
        /// </summary>
        protected override ActivityLog GetActivityLog() =>
            new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.Vendor,
                Action = (int)this.ProcessMode,
                LogSource = "VendorService",

                MasterAccountNum = this.Data.Vendor.MasterAccountNum,
                ProfileNum = this.Data.Vendor.ProfileNum,
                DatabaseNum = this.Data.Vendor.DatabaseNum,
                ProcessUuid = this.Data.Vendor.VendorUuid,
                ProcessNumber = this.Data.Vendor.VendorCode,
                ChannelNum = 0,
                ChannelAccountNum = 0,

                LogMessage = string.Empty
            };

        #endregion override methods


        protected VendorAddressService _vendorAddressService;
        [XmlIgnore, JsonIgnore]
        public VendorAddressService vendorAddressService
        {
            get
            {
                if (_vendorAddressService is null)
                    _vendorAddressService = new VendorAddressService(dbFactory);
                return _vendorAddressService;
            }
        }





        /// <summary>
        /// Add to ActivityLog record for current data and processMode
        /// Should Call this method after successful save, update, delete
        /// </summary>
        protected void AddActivityLogForCurrentData()
        {
            this.AddActivityLog(new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.Vendor,
                Action = (int)this.ProcessMode,
                LogSource = "VendorService",

                MasterAccountNum = this.Data.Vendor.MasterAccountNum,
                ProfileNum = this.Data.Vendor.ProfileNum,
                DatabaseNum = this.Data.Vendor.DatabaseNum,
                ProcessUuid = this.Data.Vendor.VendorUuid,
                ProcessNumber = this.Data.Vendor.VendorCode,
 
                LogMessage = string.Empty
            });
        }

        /// <summary>
        /// Add to ActivityLog record for current data and processMode
        /// Should Call this method after successful save, update, delete
        /// </summary>
        protected async Task AddActivityLogForCurrentDataAsync()
        {
            await this.AddActivityLogAsync(new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.Vendor,
                Action = (int)this.ProcessMode,
                LogSource = "VendorService",

                MasterAccountNum = this.Data.Vendor.MasterAccountNum,
                ProfileNum = this.Data.Vendor.ProfileNum,
                DatabaseNum = this.Data.Vendor.DatabaseNum,
                ProcessUuid = this.Data.Vendor.VendorUuid,
                ProcessNumber = this.Data.Vendor.VendorCode,

                LogMessage = string.Empty

            }) ;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(VendorDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(VendorDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
              await  AddActivityLogForCurrentDataAsync();
            return result;
        }

        public virtual bool Add(VendorPayload payload)
        {
            if (payload is null || !payload.HasVendor)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Vendor))
                return false;

            // load data from dto
            FromDto(payload.Vendor);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        public virtual async Task<bool> AddAsync(VendorPayload payload)
        {
            if (payload is null || !payload.HasVendor)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Vendor)))
                return false;

            // load data from dto
            FromDto(payload.Vendor);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
              await  AddActivityLogForCurrentDataAsync();
            return result;

        }
    
        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(VendorDataDto dto)
        {
            if (dto is null || !dto.HasVendor)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.Vendor.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(VendorDataDto dto)
        {
            if (dto is null || !dto.HasVendor)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.Vendor.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
               await AddActivityLogForCurrentDataAsync();
            return result;
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(VendorPayload payload)
        {
            if (payload is null || !payload.HasVendor || payload.Vendor.Vendor.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.Vendor))
                return false;

            // load data 
            GetData(payload.Vendor.Vendor.RowNum.ToLong());

            // load data from dto
            FromDto(payload.Vendor);

            // validate data for Add processing
            if (!Validate())
                return false;

            var result= SaveData();
            if (result)
                AddActivityLogForCurrentData();
            return result;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(VendorPayload payload)
        {
            if (payload is null || !payload.HasVendor)
                return false;

            //set edit mode before validate
            Edit();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Vendor)))
                return false;

            // set Add mode and clear data
            await EditAsync(payload.Vendor.Vendor.RowNum.ToLong());

            // load data from dto
            FromDto(payload.Vendor);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result= await SaveDataAsync();
            if (result)
               await AddActivityLogForCurrentDataAsync();
            return result;
        }


        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> ImportAsync(VendorPayload payload)
        {
            if (payload is null || !payload.HasVendor)
                return false;
            #region delete
            //if (!string.IsNullOrWhiteSpace(payload.Vendor.Vendor.VendorUuid))
            //{
            //    var rownum = await GetRowNumAsync(payload.MasterAccountNum, payload.ProfileNum, payload.Vendor.Vendor.VendorUuid);
            //    if (rownum >= 0)
            //        await DeleteAsync(rownum);
            //}
            #endregion

            #region add
            //return await this.AddAsync(payload);

            if (payload is null || !payload.HasVendor)
                return false;
            Add();
            FromDto(payload.Vendor);
            return await SaveDataAsync();
            #endregion
        }

     
        public virtual async Task<long> GetRowNumAsync(int masterAccountNum, int profileNum, string vendorUuid)
        {
            return await dbFactory.Db.ExecuteScalarAsync<long>("SELECT RowNum FROM Vendor WHERE MasterAccountNum=@0 AND ProfileNum=@1  AND VendorUuid=@2 "
                ,
                masterAccountNum.ToSqlParameter("0"),
                profileNum.ToSqlParameter("1"),
                vendorUuid.ToSqlParameter("2")
                );
        }

        public VendorPayload GetVendorsByCodeArray(VendorPayload payload)
        {
            if (!payload.HasVendorCodes)
                return payload;
            var list = new List<VendorDataDto>();
            var msglist = new List<MessageClass>();
            var rowNumList = new List<long>();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                rowNumList = VendorServiceHelper.GetRowNumsByVendorCodes(payload.VendorCodes, payload.MasterAccountNum, payload.ProfileNum);
            }
            foreach (var rowNum in rowNumList)
            {
                if (GetData(rowNum))
                    list.Add(ToDto());
            }
            payload.Vendors = list;
            payload.Messages = msglist;
            return payload;
        }

        public async Task<VendorPayload> GetVendorsByCodeArrayAsync(VendorPayload payload)
        {
            if (!payload.HasVendorCodes)
                return payload;
            var list = new List<VendorDataDto>();
            var msglist = new List<MessageClass>();
            var rowNumList = new List<long>();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                rowNumList = await VendorServiceHelper.GetRowNumsByVendorCodesAsync(payload.VendorCodes, payload.MasterAccountNum, payload.ProfileNum);
            }
            foreach (var rowNum in rowNumList)
            {
                if (await GetDataAsync(rowNum))
                    list.Add(ToDto());
            }
            payload.Vendors = list;
            payload.Messages = msglist;
            return payload;
        }

        public async Task<bool> GetVendorByVendorCodeAsync(VendorPayload payload, string vendorCode)
        {
            if (string.IsNullOrEmpty(vendorCode))
                return false;
            List();
            if (!(await ValidateAccountAsync(payload, vendorCode)))
                return false;
            long rowNum = 0;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNum = await VendorServiceHelper.GetRowNumByVendorCodeAsync(vendorCode, payload.MasterAccountNum, payload.ProfileNum);
            }
            if (rowNum == 0)
            {
                AddError($"Data not found for {vendorCode}.");
                return false;
            }


            return await GetDataAsync(rowNum);
        }

        public async Task<bool> DeleteByCodeAsync(VendorPayload payload, string vendorCode)
        {
            if (string.IsNullOrEmpty(vendorCode))
                return false;
            Delete();
            if (!(await ValidateAccountAsync(payload, vendorCode)))
                return false;
            long rowNum = 0;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNum = await VendorServiceHelper.GetRowNumByVendorCodeAsync(vendorCode, payload.MasterAccountNum, payload.ProfileNum);
            }
            var success = await GetDataAsync(rowNum);
            if (success)
            {
                var result = await DeleteDataAsync();
                if (result)
                   await AddActivityLogForCurrentDataAsync();
                return result;
            }

            return false;
            
        }

        public async Task<Vendor> GetVendorByNameAsync(string vendorName)
        {
            return (await dbFactory.FindAsync<Vendor>("WHERE VendorName=@0",
                vendorName.ToSqlParameter("VendorName"))).FirstOrDefault();
        }
        public async Task<Vendor> GetVendorByCodeAsync(string vendorCode)
        {
            return (await dbFactory.FindAsync<Vendor>("WHERE VendorCode=@0",
                vendorCode.ToSqlParameter("VendorCode"))).FirstOrDefault();
        }
        public Vendor GetVendorByName(string vendorName)
        {
            return dbFactory.Find<Vendor>("WHERE VendorName=@0",
                vendorName.ToSqlParameter("VendorName")).FirstOrDefault();
        }
        public Vendor GetVendorByCode(string vendorCode)
        {
           
            return dbFactory.Find<Vendor>("WHERE VendorCode=@0",
                vendorCode.ToSqlParameter("VendorCode")).FirstOrDefault();
        }

        /// <summary>
        /// Get CustomerData by CustomerFindClass
        /// </summary>
        public async Task<bool> AddVendorAsync(VendorData data)
        {
            if (data == null)
                return false;

            // set Add mode and clear data
            Add();
            this.AttachData(data);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public async Task<bool> AddVendorAddressAsync(VendorAddressPayload payload)
        {
           return await vendorAddressService.AddAsync(payload);
        }

        public async Task<bool> UpdateVendorAddressAsync(VendorAddressPayload payload)
        {
            return await vendorAddressService.UpdateAsync(payload);
        }

        public async Task<bool> DeleteVendorAddressAsync(int masterAccountNum,int profileNum, string vendorCode, string addressCode)
        {
            string vendorUuid = string.Empty;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                long rowNum = await VendorServiceHelper.GetRowNumByVendorCodeAsync(vendorCode, masterAccountNum, profileNum);
                if (GetData(rowNum))
                {
                    vendorUuid = this.Data.Vendor.VendorUuid;
                }
            }

            return await vendorAddressService.DeleteByVendorAddressUuidAsync(vendorUuid, addressCode);
            
        }

        public async Task<IList<VendorDataDto>> GetVendorDtosAsync(IList<long> rownums)
        {
            if (rownums == null)
                return null;

            List();
            var datas = new List<VendorDataDto>();
            foreach (var rownum in rownums)
            {
                if (!await GetDataAsync(rownum))
                {
                    AddError($"Get WarehouseTransfer by rownum error, rownum:{rownum}");
                }
                else
                {
                    datas.Add(this.ToDto());
                    this.DetachData(this.Data);
                }
            }

            return datas;
        }

        public VendorAddressDataDto ToVendorAddressDto()
        {

           return vendorAddressService.ToDto();
        }
        public async Task<string> GetNextNumberAsync(int masterAccountNum, int profileNum)
        {
            return await initNumbersService.GetNextNumberAsync(masterAccountNum, profileNum, Base.Common.ActivityLogType.Vendor);

        }
        public  string GetNextNumber(int masterAccountNum, int profileNum)
        {
            return  initNumbersService.GetNextNumber(masterAccountNum, profileNum, Base.Common.ActivityLogType.Vendor);

        }
        public bool ExistVendorCode(string vendorCode, int masterAccountNum, int profileNum)
        {
            return dbFactory.Exists<Vendor>(
                  $"WHERE MasterAccountNum = @0 AND ProfileNum = @1 AND VendorCode = @2",
                  masterAccountNum,
                  profileNum,
                  vendorCode);
        }
        public bool ExistVendor(string vendorUuid, int masterAccountNum, int profileNum)
        {
            return dbFactory.Exists<Vendor>(
                $"WHERE MasterAccountNum = @0 AND ProfileNum = @1 AND vendorUuid = @2",
                masterAccountNum,
                profileNum,
                vendorUuid);
        }
        /// <summary>
        /// Get CustomerData by CustomerFindClass
        /// </summary>
        public async Task<bool> GetCustomerByCustomerFindAsync(VendorFindClass find)
        {
            if (find == null)
                return false;

            List();
            var rowNum = await GetRowNumByVendorFindAsync(find);
            if (rowNum == 0)
                return false;
            return await GetDataAsync(rowNum);
        }
        /// <summary>
        /// Get row num by CustomerFindClass 
        /// 1. try find by CustomerUuid
        /// 2. try find by CustomerCode
        /// 3. try find by Phone1 + CustomerName
        /// 4. try find by Email + CustomerName
        /// </summary>
        public virtual async Task<long> GetRowNumByVendorFindAsync(VendorFindClass find)
        {
            if (find == null)
                return 0;

            var sql = $@"
                SELECT  
                COALESCE(
                    (SELECT TOP 1 RowNum FROM Vendor WHERE VendorUuid=@2 AND VendorUuid != ''),
                    (SELECT TOP 1 RowNum FROM Vendor WHERE MasterAccountNum=@0 AND ProfileNum=@1 AND VendorCode=@3 AND VendorCode!=''),
                    0
                )
            ";
            return (await dbFactory.GetValueAsync<Vendor, long?>(
                    sql,
                    find.MasterAccountNum,      //0
                    find.ProfileNum,            //1
                    find.VendorUuid,
                    find.VendorCode
                )).ToLong();
        }

        public async Task<bool> GetVendorByVendorUuidAsync(VendorPayload payload, string vendorUuid)
        {
            if (string.IsNullOrEmpty(vendorUuid))
                return false;
            List();

            long rowNum = await GetRowNumAsync(payload.MasterAccountNum, payload.ProfileNum, vendorUuid);
            if (rowNum <= 0) return false;
            return await GetDataAsync(rowNum);

        }
    }
}



