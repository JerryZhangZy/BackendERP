//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.CommerceCentral.YoPoco;
using Microsoft.Data.SqlClient;
using Helper = DigitBridge.CommerceCentral.ERPDb.VendorHelper;
using VdrHelper = DigitBridge.CommerceCentral.ERPDb.VendorAddressHelper;
using VtrHelper = DigitBridge.CommerceCentral.ERPDb.VendorAttributesHelper;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public class VendorList : SqlQueryBuilder<VendorQuery>
    {
        public VendorList(IDataBaseFactory dbFactory) : base(dbFactory)
        {
        }
        public VendorList(IDataBaseFactory dbFactory, VendorQuery queryObject)
            : base(dbFactory, queryObject)
        {
        }
        
        #region override methods

        protected override string GetSQL_select()
        {
            this.SQL_Select = $@"
SELECT 
{Helper.VendorUuid()},
{Helper.VendorCode()},
{Helper.VendorName()},
{Helper.Contact()},
{Helper.Phone1()},
{Helper.Email()},
{Helper.VendorType()},
{Helper.VendorStatus()},
{Helper.BusinessType()},
{Helper.PriceRule()},
{Helper.FirstDate()},
{Helper.Currency()},
{Helper.Priority()},
{Helper.Area()},
{Helper.TaxId()},
{Helper.ClassCode()},
{Helper.DepartmentCode()}
";
            return this.SQL_Select;
        }

        protected override string GetSQL_from()
        {
            this.SQL_From = $@"
 FROM {Helper.TableName} {Helper.TableAllies} 
";
            return this.SQL_From;
        }

        public override SqlParameter[] GetSqlParameters()
        {
            var paramList = base.GetSqlParameters().ToList();
                        
            //paramList.Add("@SalesOrderStatus".ToEnumParameter<SalesOrderStatus>());
            //paramList.Add("@SalesOrderType".ToEnumParameter<SalesOrderType>());

            return paramList.ToArray();
        }
        
        #endregion override methods
        
        public virtual VendorPayload GetVendorList(VendorPayload payload)
        {
            if (payload == null)
                payload = new VendorPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            var result = false;
            try
            {
                payload.VendorListCount = Count();
                result = ExcuteJson(sb);
                if (result)
                    payload.VendorList = sb;
            }
            catch (Exception ex)
            {
                payload.VendorListCount = 0;
                payload.VendorList = null;
                return payload;
                throw;
            }
            return payload;
        }

        public virtual async Task<VendorPayload> GetVendorListAsync(VendorPayload payload)
        {
            if (payload == null)
                payload = new VendorPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            var result = false;
            try
            {
                payload.VendorListCount = await CountAsync();
                result = await ExcuteJsonAsync(sb);
                if (result)
                    payload.VendorList = sb;
            }
            catch (Exception ex)
            {
                payload.VendorListCount = 0;
                payload.VendorList = null;
                return payload;
                throw;
            }
            payload.Success = result;
            return payload;
        }

        public virtual async Task<IList<long>> GetRowNumListAsync(VendorPayload payload)
        {
            if (payload == null)
                payload = new VendorPayload();

            this.LoadRequestParameter(payload);
            var rowNumList = new List<long>();

            var sql = $@"
SELECT distinct {Helper.TableAllies}.RowNum 
{GetSQL_from()} 
{GetSQL_where()}
ORDER BY  {Helper.TableAllies}.RowNum  
OFFSET {payload.FixedSkip} ROWS FETCH NEXT {payload.FixedTop} ROWS ONLY
";
            try
            {
                using (var trs = new ScopedTransaction(dbFactory))
                {
                    rowNumList = await SqlQuery.ExecuteAsync(
                        sql,
                        (long rowNum) => rowNum,
                        GetSqlParameters().ToArray()
                    );
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return rowNumList;
        }

        public virtual IList<long> GetRowNumList(VendorPayload payload)
        {
            if (payload == null)
                payload = new VendorPayload();

            this.LoadRequestParameter(payload);
            var rowNumList = new List<long>();
            var sql = $@"
SELECT distinct {Helper.TableAllies}.RowNum 
{GetSQL_from()} 
{GetSQL_where()}
ORDER BY  {Helper.TableAllies}.RowNum  
OFFSET {payload.FixedSkip} ROWS FETCH NEXT {payload.FixedTop} ROWS ONLY
";
            try
            {
                using (var trs = new ScopedTransaction(dbFactory))
                {
                    rowNumList = SqlQuery.Execute(
                        sql,
                        (long rowNum) => rowNum,
                        GetSqlParameters().ToArray()
                    );
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return rowNumList;
        }

        private string GetExportSql()
        {
            var sql = $@"
select JSON_QUERY((SELECT * FROM Vendor i where i.RowNum={Helper.TableAllies}.RowNum FOR JSON PATH,WITHOUT_ARRAY_WRAPPER)) AS Vendor,
(select {VdrHelper.TableAllies}.* from VendorAddress {VdrHelper.TableAllies} where {Helper.TableAllies}.VendorUuid={VdrHelper.TableAllies}.VendorUuid FOR JSON PATH ) as VendorAddress,
JSON_QUERY((select * from VendorAttributes {VtrHelper.TableAllies} where {Helper.TableAllies}.VendorUuid={VtrHelper.TableAllies}.VendorUuid FOR JSON PATH ,WITHOUT_ARRAY_WRAPPER)) as VendorAttributes 
from Vendor {Helper.TableAllies}
";
            return sql;
        }
        private string GetExportCommandText(VendorPayload payload)
        {
            this.LoadRequestParameter(payload);
            return $@"
{GetExportSql()}
{GetSQL_where()}
ORDER BY  {Helper.TableAllies}.RowNum  
OFFSET {payload.FixedSkip} ROWS FETCH NEXT {payload.FixedTop} ROWS ONLY
FOR JSON PATH
";
        }
        public virtual async Task GetExportJsonListAsync(VendorPayload payload)
        {
            if (payload == null)
                payload = new VendorPayload();

            var sql = GetExportCommandText(payload);

            try
            {
                payload.VendorListCount = await CountAsync();
                StringBuilder sb = new StringBuilder();
                var result = await ExcuteJsonAsync(sb, sql, GetSqlParameters().ToArray());
                if (result)
                    payload.VendorDataList = sb;
            }
            catch (Exception ex)
            {
                payload.VendorDataList = null;
                throw;
            }
        }
    }
}
