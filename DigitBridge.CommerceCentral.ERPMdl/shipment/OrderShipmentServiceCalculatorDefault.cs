

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default OrderShipmentService Calculator class.
    /// </summary>
    public partial class OrderShipmentServiceCalculatorDefault : ICalculator<OrderShipmentData>
    {
        protected IDataBaseFactory dbFactory { get; set; }

        public OrderShipmentServiceCalculatorDefault(IMessage serviceMessage, IDataBaseFactory dbFactory)
        {
            this.ServiceMessage = serviceMessage;
            this.dbFactory = dbFactory;
        }

        public virtual void PrepareData(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            //if(data==null||data.SalesOrderHeader==null)
            //    return;
            //if (string.IsNullOrEmpty(data.SalesOrderHeader.CustomerUuid))
            //{
            //    using var trx = new ScopedTransaction(dbFactory);
            //    data.SalesOrderHeader.CustomerUuid = CustomerServiceHelper.GetCustomerUuidByCustomerCode(
            //        data.SalesOrderHeader.CustomerCode, data.SalesOrderHeader.MasterAccountNum,
            //        data.SalesOrderHeader.ProfileNum);
            //}
            //// get customer data
            //GetCustomerData(data,data.SalesOrderHeader.CustomerUuid);

            //if (data.SalesOrderItems != null)
            //{
            //    var skuList = data.SalesOrderItems
            //        .Where(r => string.IsNullOrEmpty(r.ProductUuid) && !string.IsNullOrEmpty(r.SKU)).Select(r => r.SKU)
            //        .Distinct().ToList();
            //    using var trx = new ScopedTransaction(dbFactory);
            //    var list = InventoryServiceHelper.GetKeyInfoBySkus(skuList, data.SalesOrderHeader.MasterAccountNum,
            //        data.SalesOrderHeader.ProfileNum);
            //    foreach (var tuple in list)
            //    {
            //        data.SalesOrderItems.First(r => r.SKU == tuple.Item3).ProductUuid = tuple.Item2;
            //    }

            //    // get inventory data
            //    foreach (var item in data.SalesOrderItems)
            //    {
            //        if (string.IsNullOrEmpty(item.ProductUuid)) continue;
            //        GetInventoryData(data, item.ProductUuid);
            //    }
            //}
        }

        #region Service Property

        //private CustomerService _customerService;
        //protected CustomerService customerService => _customerService ??= new CustomerService(dbFactory);

        //private InventoryService _inventoryService;
        //protected InventoryService inventoryService => _inventoryService ??= new InventoryService(dbFactory);

        #endregion

        #region GetDataWithCache

        //public virtual InventoryData GetInventoryData(SalesOrderData data, string productUuid)
        //{
        //    return data.GetCache(productUuid, () => inventoryService.GetDataById(productUuid) ? inventoryService.Data : null);
        //}

        //public virtual CustomerData GetCustomerData(SalesOrderData data, string customerUuid)
        //{
        //    return data.GetCache(customerUuid, () => customerService.GetDataById(customerUuid) ? customerService.Data : null);
        //}

        #endregion

        public virtual bool SetDefault(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            ResetUuidForAddingMode(data, processingMode);
            SetDefaultSummary(data, processingMode);
            SetDefaultDetail(data, processingMode);
            return true;
        }

        public virtual bool SetDefaultSummary(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            //TODO: add set default summary data logic
            /* This is generated sample code
            var sum = data.OrderShipmentHeader;
            if (sum.InvoiceDate.IsZero()) sum.InvoiceDate = DateTime.UtcNow.Date;
            if (sum.InvoiceTime.IsZero()) sum.InvoiceTime = DateTime.UtcNow.TimeOfDay;

            //UpdateDateUtc
            //EnterBy
            //UpdateBy
            */

            return true;
        }

        public virtual bool SetDefaultDetail(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            //TODO: add set default for detail list logic
            /* This is generated sample code

            foreach (var item in data.InvoiceItems)
            {
                if (item is null || item.IsEmpty)
                    continue;
                SetDefault(item, data, processingMode);
            }

            */
            return true;
        }

        //TODO: add set default for detail line logic
        /* This is generated sample code
        protected virtual bool SetDefault(InvoiceItems item, OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (item is null || item.IsEmpty)
                return false;

            var setting = new ERPSetting();
            var sum = data.OrderShipmentHeader;
            //var prod = data.GetCache<ProductBasic>(ProductId);
            //var inv = data.GetCache<Inventory>(InventoryId);
            //var invCost = new ItemCostClass(inv);
            var invCost = new ItemCostClass();

            //InvoiceItemType
            //InvoiceItemStatus
            //ItemDate
            //ItemTime
            //ShipDate
            //EtaArrivalDate

            //SKU
            //ProductUuid
            //InventoryUuid
            //WarehouseUuid
            //LotNum
            //Description
            //Notes
            //UOM
            //Currency

            return true;
        }
        */


        public virtual bool Calculate(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            PrepareData(data);
            CalculateDetail(data, processingMode);
            CalculateSummary(data, processingMode);
            return true;
        }

        public virtual bool CalculateSummary(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            var setting = new ERPSetting();
            var sum = data.OrderShipmentHeader;

            return true;
        }

        public virtual bool CalculateDetail(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            var setting = new ERPSetting();
            var sum = data.OrderShipmentHeader;

            sum.TotalPackages = 0;
            sum.TotalShippedQty = 0;
            sum.TotalCanceledQty = 0;

            // calculate total package and shipped items
            foreach (var package in data.OrderShipmentPackage)
            {
                if (package == null) continue;
                CalculateDetail(package, data, processingMode);
                sum.TotalPackages += 1;
                sum.TotalShippedQty += package.PackageQty;
            }

            // calculate total cancelled items
            foreach (var canItem in data.OrderShipmentCanceledItem)
            {
                if (canItem == null) continue;
                sum.TotalCanceledQty += canItem.CanceledQty;
            }

            return true;
        }

        protected virtual bool CalculateDetail(OrderShipmentPackage package, OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (package is null)
                return false;

            var setting = new ERPSetting();
            package.PackageQty = 0;
            foreach (var item in package.OrderShipmentShippedItem)
            {
                if (item == null) continue;
                package.PackageQty += item.ShippedQty;
            }
            return true;
        }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

        #region Reset uuid
        protected virtual void ResetUuidForAddingMode(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isAddMode = processingMode == ProcessingMode.Add;
            var isEditMode = processingMode == ProcessingMode.Edit;
            if (isAddMode)
            {
                //for Add mode, always reset uuid
                data.OrderShipmentHeader.OrderShipmentUuid = Guid.NewGuid().ToString();
            }

            if (data.OrderShipmentPackage != null && data.OrderShipmentPackage.Count > 0)
            {
                foreach (var packageItem in data.OrderShipmentPackage)
                {
                    if (isAddMode || (isEditMode && packageItem.RowNum.IsZero()))
                        packageItem.OrderShipmentPackageUuid = Guid.NewGuid().ToString();
                    if (packageItem.OrderShipmentShippedItem != null && packageItem.OrderShipmentShippedItem.Count > 0)
                    {
                        foreach (var subItem in packageItem.OrderShipmentShippedItem)
                        {
                            if (isAddMode || (isEditMode && packageItem.RowNum.IsZero()))
                                subItem.OrderShipmentShippedItemUuid = Guid.NewGuid().ToString();
                            subItem.OrderShipmentPackageUuid = packageItem.OrderShipmentPackageUuid;
                        }
                    }
                }
            }
            if (data.OrderShipmentCanceledItem != null && data.OrderShipmentCanceledItem.Count > 0)
            {
                foreach (var detailItem in data.OrderShipmentCanceledItem)
                {
                    if (isAddMode || (isEditMode && detailItem.RowNum.IsZero()))
                        detailItem.OrderShipmentCanceledItemUuid = Guid.NewGuid().ToString();
                }

            }
        }
        #endregion
    }

}



