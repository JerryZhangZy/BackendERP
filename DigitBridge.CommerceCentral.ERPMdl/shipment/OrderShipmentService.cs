

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class OrderShipmentService
    {

        #region override methods

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override OrderShipmentService Init()
        {
            base.Init();
            SetDtoMapper(new OrderShipmentDataDtoMapperDefault());
            SetCalculator(new OrderShipmentServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new OrderShipmentServiceValidatorDefault(this, this.dbFactory));
            return this;
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override async Task BeforeSaveAsync()
        {
            try
            {
                await base.BeforeSaveAsync();
                if (this.Data?.OrderShipmentHeader != null)
                {
                    //await inventoryService.UpdateOpenSoQtyFromSalesOrderItemAsync(this.Data.SalesOrderHeader.SalesOrderUuid, true);
                }
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override void BeforeSave()
        {
            try
            {
                base.BeforeSave();
                if (this.Data?.OrderShipmentHeader != null)
                {
                    //inventoryService.UpdateOpenSoQtyFromSalesOrderItem(this.Data.SalesOrderHeader.SalesOrderUuid, true);
                }
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override async Task AfterSaveAsync()
        {
            try
            {
                await base.AfterSaveAsync();
                if (this.Data?.OrderShipmentHeader != null)
                {
                    //await inventoryService.UpdateOpenSoQtyFromSalesOrderItemAsync(this.Data.SalesOrderHeader.SalesOrderUuid);
                }
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override void AfterSave()
        {
            try
            {
                base.AfterSave();
                if (this.Data?.OrderShipmentHeader != null)
                {
                    //inventoryService.UpdateOpenSoQtyFromSalesOrderItem(this.Data.SalesOrderHeader.SalesOrderUuid);
                }
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override async Task SaveSuccessAsync()
        {
            try
            {
                await base.SaveSuccessAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override void SaveSuccess()
        {
            try
            {
                base.SaveSuccess();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Sub class should override this method to return new ActivityLog object for service
        /// </summary>
        protected override ActivityLog GetActivityLog() =>
            new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.Shipment,
                Action = (int)this.ProcessMode,
                LogSource = "OrderShipmentService",

                MasterAccountNum = this.Data.OrderShipmentHeader.MasterAccountNum,
                ProfileNum = this.Data.OrderShipmentHeader.ProfileNum,
                DatabaseNum = this.Data.OrderShipmentHeader.DatabaseNum,
                ProcessUuid = this.Data.OrderShipmentHeader.OrderShipmentUuid,
                ProcessNumber = this.Data.OrderShipmentHeader.OrderShipmentNum.ToString(),
                ChannelNum = this.Data.OrderShipmentHeader.ChannelNum,
                ChannelAccountNum = this.Data.OrderShipmentHeader.ChannelAccountNum,

                LogMessage = string.Empty
            };

        #endregion override methods


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(OrderShipmentDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var rtn = SaveData();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(OrderShipmentDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var rtn = await SaveDataAsync();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        public virtual bool Add(OrderShipmentPayload payload)
        {
            if (payload is null || !payload.HasOrderShipment)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.OrderShipment))
                return false;

            // load data from dto
            FromDto(payload.OrderShipment);

            // validate data for Add processing
            if (!Validate())
                return false;

            var rtn = SaveData();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        public virtual async Task<bool> AddAsync(OrderShipmentPayload payload)
        {
            if (payload is null || !payload.HasOrderShipment)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.OrderShipment)))
                return false;

            // load data from dto
            FromDto(payload.OrderShipment);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var rtn = await SaveDataAsync();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(OrderShipmentDataDto dto)
        {
            if (dto is null || !dto.HasOrderShipmentHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.OrderShipmentHeader.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            var rtn = SaveData();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(OrderShipmentDataDto dto)
        {
            if (dto is null || !dto.HasOrderShipmentHeader)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.OrderShipmentHeader.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var rtn = await SaveDataAsync();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        public async Task GetListByOrderShipmentNumbersAsync(OrderShipmentPayload payload, IList<string> orderShipmentNumbers)
        {
            if (payload is null || !payload.HasOrderShipmentNumbers)
            {
                AddError("OrderShipmentNumbers is required.");
                payload.Messages = this.Messages;
                payload.Success = false;
            }
            //var rowNums = await new InvoiceList(dbFactory).GetRowNumListAsync(payload.InvoiceNumbers, payload.MasterAccountNum, payload.ProfileNum);

            var result = new List<OrderShipmentDataDto>();
            foreach (var orderShipmentNumber in payload.OrderShipmentNumbers)
            {
                if (!(await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderShipmentNumber.ToString())))
                    continue;
                result.Add(this.ToDto());
                this.DetachData(this.Data);
            }
            payload.OrderShipments = result;
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(OrderShipmentPayload payload)
        {
            if (payload is null || !payload.HasOrderShipment || payload.OrderShipment.OrderShipmentHeader.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.OrderShipment))
                return false;

            // load data 
            GetData(payload.OrderShipment.OrderShipmentHeader.RowNum.ToLong());

            // load data from dto
            FromDto(payload.OrderShipment);

            // validate data for Add processing
            if (!Validate())
                return false;

            var rtn = SaveData();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(OrderShipmentPayload payload)
        {
            if (payload is null || !payload.HasOrderShipment)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.OrderShipment)))
                return false;

            // load data 
            await GetDataAsync(payload.OrderShipment.OrderShipmentHeader.RowNum.ToLong());

            // load data from dto
            FromDto(payload.OrderShipment);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var rtn = await SaveDataAsync();
            if (rtn) AddActivityLogForCurrentData();
            return rtn;
        }

        InventoryLogService logService;
        /// <summary>
        /// Delete order shipment by order shipment number
        /// </summary>
        /// <param name="orderShipmentNum"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(OrderShipmentPayload payload, long orderShipmentNum)
        {
            if (orderShipmentNum.IsZero())
            {
                AddError("orderShipmentNum is invalid");
                return false;
            }
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderShipmentNum.ToString());
            success = success && DeleteData();
            if (success)
            {
                if (logService == null) logService = new InventoryLogService(dbFactory);
                await logService.UpdateByDeleteShipmentAsync(Data.OrderShipmentHeader.OrderShipmentUuid);
                AddActivityLogForCurrentData();
            }
            return success;
        }

        public virtual async Task<bool> GetDataAsync(OrderShipmentPayload payload, string number)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, number);
        }

        public virtual bool GetData(OrderShipmentPayload payload, string number)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, number);
        }
        protected void AddActivityLogForCurrentData()
        {
            this.AddActivityLog(new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.Shipment,
                Action = (int)this.ProcessMode,
                LogSource = "OrderShipmentService",

                MasterAccountNum = this.Data.OrderShipmentHeader.MasterAccountNum,
                ProfileNum = this.Data.OrderShipmentHeader.ProfileNum,
                DatabaseNum = this.Data.OrderShipmentHeader.DatabaseNum,
                ProcessUuid = this.Data.OrderShipmentHeader.OrderShipmentUuid,
                ProcessNumber = this.Data.OrderShipmentHeader.OrderShipmentNum.ToString(),
                ChannelNum = this.Data.OrderShipmentHeader.ChannelAccountNum,
                ChannelAccountNum = this.Data.OrderShipmentHeader.ChannelAccountNum,

                LogMessage = string.Empty
            });
        }

        public bool MarkShipmentTransferredToInvoice(string ordershipmentUuid)
        {
            Edit();
            if (GetDataById(ordershipmentUuid))
            {
                Data.OrderShipmentHeader.ProcessStatus = OrderShipmentProcessStatusEnum.InvoiceReady.ToInt();
                Data.OrderShipmentHeader.ProcessDateUtc = DateTime.UtcNow;
                return SaveData();
            }
            return false;
        }

        public async Task<bool> UpdateProcessStatusAsync(string ordershipmentUuid, OrderShipmentProcessStatusEnum status)
        {
            var sql = $@"
UPDATE OrderShipmentHeader 
SET ProcessStatus=@0, ProcessDateUtc=@1
WHERE OrderShipmentUuid=@2 
";
            return await dbFactory.Db.ExecuteAsync(
                sql,
                ((int)status).ToSqlParameter("@0"),
                DateTime.UtcNow.ToSqlParameter("@1"),
                ordershipmentUuid.ToSqlParameter("@2")
            ) > 0;

            //Edit();
            //if (GetDataById(ordershipmentUuid))
            //{
            //    if (Data.OrderShipmentHeader.ProcessStatus == (int)OrderShipmentProcessStatusEnum.Pending)
            //    {
            //        Data.OrderShipmentHeader.ProcessStatus = (int)OrderShipmentProcessStatusEnum.InvoiceReady;
            //        Data.OrderShipmentHeader.ProcessDateUtc = DateTime.UtcNow;
            //        return await SaveDataAsync();
            //    }
            //    return true;
            //}
            //return false;
        }

    }
}



