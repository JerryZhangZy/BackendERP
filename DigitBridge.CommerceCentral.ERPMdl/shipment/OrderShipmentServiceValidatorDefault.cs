

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default OrderShipmentService Validator class.
    /// </summary>
    public partial class OrderShipmentServiceValidatorDefault : IValidator<OrderShipmentData, OrderShipmentDataDto>, IMessage
    {
        public virtual bool IsValid { get; set; }
        public OrderShipmentServiceValidatorDefault() { }
        public OrderShipmentServiceValidatorDefault(IMessage serviceMessage, IDataBaseFactory dbFactory)
        {
            this.ServiceMessage = serviceMessage;
            this.dbFactory = dbFactory;
        }

        protected IDataBaseFactory dbFactory { get; set; }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

        public virtual void Clear()
        {
            IsValid = true;
            Messages = new List<MessageClass>();
        }

        public virtual bool ValidateAccount(IPayload payload, string number = null, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            var pl = payload as OrderShipmentPayload;
            var dto = pl.OrderShipment;

            if (processingMode == ProcessingMode.Add)
            {
                //For Add mode is,set MasterAccountNum, ProfileNum and DatabaseNum from payload to dto
                dto.OrderShipmentHeader.MasterAccountNum = pl.MasterAccountNum;
                dto.OrderShipmentHeader.ProfileNum = pl.ProfileNum;
                dto.OrderShipmentHeader.DatabaseNum = pl.DatabaseNum;
                if (dto.HasOrderShipmentCanceledItem)
                {
                    foreach (var item in dto.OrderShipmentCanceledItem)
                    {
                        item.MasterAccountNum = pl.MasterAccountNum;
                        item.ProfileNum = pl.ProfileNum;
                        item.DatabaseNum = pl.DatabaseNum;
                    }
                }
                if (dto.HasOrderShipmentPackage)
                {
                    foreach (var item in dto.OrderShipmentPackage)
                    {
                        item.MasterAccountNum = pl.MasterAccountNum;
                        item.ProfileNum = pl.ProfileNum;
                        item.DatabaseNum = pl.DatabaseNum;

                        if (item.OrderShipmentShippedItem == null) continue;
                        for (int i = 0; i < item.OrderShipmentShippedItem.Count; i++)
                        {
                            var subItem = item.OrderShipmentShippedItem[i];
                            subItem.MasterAccountNum = pl.MasterAccountNum;
                            subItem.ProfileNum = pl.ProfileNum;
                            subItem.DatabaseNum = pl.DatabaseNum;
                        }
                    }
                }
            }
            else
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    if (!dto.OrderShipmentHeader.RowNum.IsZero())
                        isValid = OrderShipmentHelper.ExistRowNum(dto.OrderShipmentHeader.RowNum.ToLong(), pl.MasterAccountNum, pl.ProfileNum);
                    if (!isValid)
                        AddError($"Data not found.");
                }
            }
            IsValid = isValid;
            return isValid;
        }

        public virtual async Task<bool> ValidateAccountAsync(IPayload payload, string number = null, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            var pl = payload as OrderShipmentPayload;
            var dto = pl.OrderShipment;

            if (processingMode == ProcessingMode.Add)
            {
                //For Add mode is,set MasterAccountNum, ProfileNum and DatabaseNum from payload to dto
                dto.OrderShipmentHeader.MasterAccountNum = pl.MasterAccountNum;
                dto.OrderShipmentHeader.ProfileNum = pl.ProfileNum;
                dto.OrderShipmentHeader.DatabaseNum = pl.DatabaseNum;
                if (dto.HasOrderShipmentCanceledItem)
                {
                    foreach (var item in dto.OrderShipmentCanceledItem)
                    {
                        item.MasterAccountNum = pl.MasterAccountNum;
                        item.ProfileNum = pl.ProfileNum;
                        item.DatabaseNum = pl.DatabaseNum;
                    }
                }
                if (dto.HasOrderShipmentPackage)
                {
                    foreach (var item in dto.OrderShipmentPackage)
                    {
                        item.MasterAccountNum = pl.MasterAccountNum;
                        item.ProfileNum = pl.ProfileNum;
                        item.DatabaseNum = pl.DatabaseNum;

                        if (item.OrderShipmentShippedItem == null) continue;
                        for (int i = 0; i < item.OrderShipmentShippedItem.Count; i++)
                        {
                            var subItem = item.OrderShipmentShippedItem[i];
                            subItem.MasterAccountNum = pl.MasterAccountNum;
                            subItem.ProfileNum = pl.ProfileNum;
                            subItem.DatabaseNum = pl.DatabaseNum;
                        }
                    }
                }
            }
            else
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    if (!dto.OrderShipmentHeader.RowNum.IsZero())
                        isValid = await OrderShipmentHelper.ExistRowNumAsync(dto.OrderShipmentHeader.RowNum.ToLong(), pl.MasterAccountNum, pl.ProfileNum);
                    if (!isValid)
                        AddError($"Data not found.");
                }
            }
            IsValid = isValid;
            return isValid;
        }

        #region validate data

        public virtual bool Validate(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!ValidateAllMode(data))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => ValidateAdd(data),
                ProcessingMode.Edit => ValidateEdit(data),
                ProcessingMode.List => false,
                ProcessingMode.Delete => ValidateDelete(data),
                ProcessingMode.Void => ValidateDelete(data),
                ProcessingMode.Cancel => ValidateDelete(data),
                _ => false,
            };
        }
        protected virtual bool ValidateAllMode(OrderShipmentData data)
        {
            var header = data.OrderShipmentHeader;
            var isValid = true;
            if (string.IsNullOrEmpty(header.OrderShipmentUuid))
            {
                isValid = false;
                AddError($"Unique Id cannot be empty.");
            }
            if (data.OrderShipmentCanceledItem != null && data.OrderShipmentCanceledItem.Count > 0
                && data.OrderShipmentCanceledItem.Count(i => i.CanceledQty <= 0) > 0)
            {
                isValid = false;
                AddError($"CanceledQty error.");
            }

            //if (header.ShipmentID.IsZero())
            //{
            //    isValid = false;
            //    AddError($"ShipmentID cannot be empty.");
            //}
            //if (header.ChannelAccountNum.IsZero())
            //{
            //    isValid = false;
            //    AddError($"ChannelAccountNum cannot be empty.");
            //}

            return isValid;
        }

        protected virtual bool ValidateAdd(OrderShipmentData data)
        {
            var dbFactory = data.dbFactory;

            var header = data.OrderShipmentHeader;
            header.RowNum = 0;
            //if (!string.IsNullOrEmpty(header.MainTrackingNumber))
            //{
            //    using (var tx = new ScopedTransaction(dbFactory))
            //    {
            //        var exist = OrderShipmentHelper.ExistMainTrackingNumber(header.MainTrackingNumber, header.MasterAccountNum, header.ProfileNum);
            //        if (exist)
            //        {
            //            AddError($"Data existed for MainTrackingNumber:{header.MainTrackingNumber}");
            //            return false;
            //        }

            //    }
            //}
            if (data.OrderShipmentPackage != null && data.OrderShipmentPackage.Count > 0)
            {
                foreach (var item in data.OrderShipmentPackage)
                {
                    if (item.OrderShipmentShippedItem.Count(j => j.ShippedQty <= 0) > 0)
                    {
                        AddError($"ShippedQty is invalid in package. PackageID :{item.PackageID}");
                        IsValid = false;
                    }
                }
                if (!IsValid)
                    return false;
            }

            if (!header.ShipmentID.IsZero())
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    var exist = OrderShipmentHelper.ExistShipmentID(header.ShipmentID, header.MasterAccountNum, header.ProfileNum);
                    if (exist)
                    {
                        AddError($"Data existed for ShipmentID:{header.ShipmentID}");
                        return false;
                    }

                }
            }

            //if (data.OrderShipmentPackage != null && data.OrderShipmentPackage.Count > 0)
            //{
            //    foreach (var package in data.OrderShipmentPackage)
            //    {
            //        if (!package.PackageTrackingNumber.IsZero())
            //        {
            //            using (var tx = new ScopedTransaction(dbFactory))
            //            {
            //                var exist = OrderShipmentHelper.ExistChannelAccountNumPackageTrackingNumber(package.ChannelAccountNum, package.PackageTrackingNumber, package.MasterAccountNum, package.ProfileNum);
            //                if (exist)
            //                {
            //                    AddError($"Data existed for ChannelAccountNum:{package.ChannelAccountNum} and PackageTrackingNumber:{package.PackageTrackingNumber}");
            //                    return false;
            //                }

            //            }
            //        }
            //    }
            //}


            return true;

        }

        protected virtual bool ValidateEdit(OrderShipmentData data)
        {
            var dbFactory = data.dbFactory;
            if (data.OrderShipmentHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.OrderShipmentHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.OrderShipmentPackage != null && data.OrderShipmentPackage.Count > 0)
            {
                foreach (var item in data.OrderShipmentPackage)
                {
                    if (item.OrderShipmentShippedItem.Count(j => j.ShippedQty <= 0) > 0)
                    {
                        AddError($"ShippedQty is invalid in package. PackageID :{item.PackageID}");
                        IsValid = false;
                    }
                }
                if (!IsValid)
                    return false;
            }

            //if (data.OrderShipmentHeader.RowNum != 0 && !dbFactory.Exists<OrderShipmentHeader>(data.OrderShipmentHeader.RowNum))
            //{
            //    IsValid = false;
            //    AddError($"RowNum: {data.OrderShipmentHeader.RowNum} not found.");
            //    return IsValid;
            //}
            return true;
        }

        protected virtual bool ValidateDelete(OrderShipmentData data)
        {
            var dbFactory = data.dbFactory;
            if (data.OrderShipmentHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.OrderShipmentHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.OrderShipmentHeader.RowNum != 0 && !dbFactory.Exists<OrderShipmentHeader>(data.OrderShipmentHeader.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.OrderShipmentHeader.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        #endregion

        #region Async validate data

        public virtual async Task<bool> ValidateAsync(OrderShipmentData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();
            if (!(await ValidateAllModeAsync(data)))
                return false;

            return processingMode switch
            {
                ProcessingMode.Add => await ValidateAddAsync(data),
                ProcessingMode.Edit => await ValidateEditAsync(data),
                ProcessingMode.List => false,
                ProcessingMode.Delete => await ValidateDeleteAsync(data),
                ProcessingMode.Void => await ValidateDeleteAsync(data),
                ProcessingMode.Cancel => await ValidateDeleteAsync(data),
                _ => false,
            };
        }

        protected virtual async Task<bool> ValidateAllModeAsync(OrderShipmentData data)
        {
            var header = data.OrderShipmentHeader;
            var isValid = true;
            if (string.IsNullOrEmpty(header.OrderShipmentUuid))
            {
                isValid = false;
                AddError($"Unique Id cannot be empty.");
            }
            if (data.OrderShipmentCanceledItem != null && data.OrderShipmentCanceledItem.Count > 0
                && data.OrderShipmentCanceledItem.Count(i => i.CanceledQty <= 0) > 0)
            {
                isValid = false;
                AddError($"CanceledQty error.");
            }

            //if (header.ShipmentID.IsZero())
            //{
            //    isValid = false;
            //    AddError($"ShipmentID cannot be empty.");
            //}

            //if (header.ChannelAccountNum.IsZero())
            //{
            //    isValid = false;
            //    AddError($"ChannelAccountNum cannot be empty.");
            //}

            return isValid;

        }

        protected virtual async Task<bool> ValidateAddAsync(OrderShipmentData data)
        {
            var dbFactory = data.dbFactory;

            var header = data.OrderShipmentHeader;
            header.RowNum = 0;
            //if (!string.IsNullOrEmpty(header.MainTrackingNumber))
            //{
            //    using (var tx = new ScopedTransaction(dbFactory))
            //    {
            //        var exist = await OrderShipmentHelper.ExistMainTrackingNumberAsync(header.MainTrackingNumber, header.MasterAccountNum, header.ProfileNum);
            //        if (exist)
            //        {
            //            AddError($"Data existed for MainTrackingNumber:{header.MainTrackingNumber}");
            //            return false;
            //        }

            //    }
            //}
            if (data.OrderShipmentPackage != null && data.OrderShipmentPackage.Count > 0)
            {
                foreach (var item in data.OrderShipmentPackage)
                {
                    if (item.OrderShipmentShippedItem.Count(j => j.ShippedQty <= 0) > 0)
                    {
                        AddError($"ShippedQty is invalid in package. PackageID :{item.PackageID}");
                        IsValid = false;
                    }
                }
                if (!IsValid)
                    return false;
            }

            if (!header.ShipmentID.IsZero())
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    var exist = await OrderShipmentHelper.ExistShipmentIDAsync(header.ShipmentID, header.MasterAccountNum, header.ProfileNum);
                    if (exist)
                    {
                        AddError($"Data existed for ShipmentID:{header.ShipmentID}");
                        return false;
                    }

                }
            }

            //if (data.OrderShipmentPackage != null && data.OrderShipmentPackage.Count > 0)
            //{
            //    foreach (var package in data.OrderShipmentPackage)
            //    {
            //        if (!package.PackageTrackingNumber.IsZero())
            //        {
            //            using (var tx = new ScopedTransaction(dbFactory))
            //            {
            //                var exist = await OrderShipmentHelper.ExistChannelAccountNumPackageTrackingNumberAsync(package.ChannelAccountNum, package.PackageTrackingNumber, package.MasterAccountNum, package.ProfileNum);
            //                if (exist)
            //                {
            //                    AddError($"Data existed for ChannelAccountNum:{package.ChannelAccountNum} and PackageTrackingNumber:{package.PackageTrackingNumber}");
            //                    return false;
            //                }

            //            }
            //        }
            //    }
            //}

            return true;

        }

        protected virtual async Task<bool> ValidateEditAsync(OrderShipmentData data)
        {
            var dbFactory = data.dbFactory;
            if (data.OrderShipmentHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.OrderShipmentHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.OrderShipmentPackage != null && data.OrderShipmentPackage.Count > 0)
            {
                foreach (var item in data.OrderShipmentPackage)
                {
                    if (item.OrderShipmentShippedItem.Count(j => j.ShippedQty <= 0) > 0)
                    {
                        AddError($"ShippedQty is invalid in package. PackageID :{item.PackageID}");
                        IsValid = false;
                    }
                }
                if (!IsValid)
                    return false;
            }

            //if (data.OrderShipmentHeader.RowNum != 0 && !(await dbFactory.ExistsAsync<OrderShipmentHeader>(data.OrderShipmentHeader.RowNum)))
            //{
            //    IsValid = false;
            //    AddError($"RowNum: {data.OrderShipmentHeader.RowNum} not found.");
            //    return IsValid;
            //}
            return true;
        }

        protected virtual async Task<bool> ValidateDeleteAsync(OrderShipmentData data)
        {
            var dbFactory = data.dbFactory;
            if (data.OrderShipmentHeader.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.OrderShipmentHeader.RowNum} not found.");
                return IsValid;
            }

            if (data.OrderShipmentHeader.RowNum != 0 && !(await dbFactory.ExistsAsync<OrderShipmentHeader>(data.OrderShipmentHeader.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.OrderShipmentHeader.RowNum} not found.");
                return IsValid;
            }
            return true;
        }

        #endregion Async validate data

        #region Validate dto (invoke this before data loaded)
        /// <summary>
        /// Validate dto.
        /// </summary>
        /// <param name="dto"></param>
        /// <param name="dbFactory"></param>
        /// <param name="processingMode"></param>
        /// <returns></returns>
        public virtual bool Validate(OrderShipmentDataDto dto, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            if (dto is null)
            {
                isValid = false;
                AddError($"Data not found");
            }
            if (processingMode == ProcessingMode.Add)
            {
                //for Add mode, always reset uuid
                dto.OrderShipmentHeader.OrderShipmentUuid = Guid.NewGuid().ToString();
                if (dto.OrderShipmentPackage != null && dto.OrderShipmentPackage.Count > 0)
                {
                    foreach (var detailItem in dto.OrderShipmentPackage)
                    {
                        detailItem.OrderShipmentPackageUuid = Guid.NewGuid().ToString();
                        if (detailItem.OrderShipmentShippedItem != null && detailItem.OrderShipmentShippedItem.Count > 0)
                        {
                            foreach (var subItem in detailItem.OrderShipmentShippedItem)
                            {
                                subItem.OrderShipmentShippedItemUuid = Guid.NewGuid().ToString();
                            }
                        }
                    }
                }
                if (dto.OrderShipmentCanceledItem != null && dto.OrderShipmentCanceledItem.Count > 0)
                {
                    foreach (var detailItem in dto.OrderShipmentCanceledItem)
                        detailItem.OrderShipmentCanceledItemUuid = Guid.NewGuid().ToString();
                }
            }
            else if (processingMode == ProcessingMode.Edit)
            {
                if (dto.OrderShipmentHeader.RowNum.IsZero())
                {
                    isValid = false;
                    AddError("OrderShipmentHeader.RowNum is required.");
                }
                // This property should not be changed.
                dto.OrderShipmentHeader.MasterAccountNum = null;
                dto.OrderShipmentHeader.ProfileNum = null;
                dto.OrderShipmentHeader.DatabaseNum = null;
                dto.OrderShipmentHeader.OrderShipmentUuid = null;
                // TODO 
                //dto.SalesOrderHeader.OrderNumber = null;
                if (dto.OrderShipmentPackage != null && dto.OrderShipmentPackage.Count > 0)
                {
                    foreach (var detailItem in dto.OrderShipmentPackage)
                    {
                        detailItem.OrderShipmentPackageUuid = null;
                        if (detailItem.OrderShipmentShippedItem != null && detailItem.OrderShipmentShippedItem.Count > 0)
                        {
                            foreach (var subItem in detailItem.OrderShipmentShippedItem)
                            {
                                subItem.OrderShipmentShippedItemUuid = null;
                            }
                        }
                    }
                }
                if (dto.OrderShipmentCanceledItem != null && dto.OrderShipmentCanceledItem.Count > 0)
                {
                    foreach (var detailItem in dto.OrderShipmentCanceledItem)
                        detailItem.OrderShipmentCanceledItemUuid = null;
                }
            }
            IsValid = isValid;
            return isValid;
        }
        #endregion

        #region async Validate dto (invoke this before data loaded)
        /// <summary>
        /// Validate dto.
        /// </summary>
        /// <param name="dto"></param>
        /// <param name="dbFactory"></param>
        /// <param name="processingMode"></param>
        /// <returns></returns>
        public virtual async Task<bool> ValidateAsync(OrderShipmentDataDto dto, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            if (dto is null)
            {
                isValid = false;
                AddError($"Data not found");
            }
            if (processingMode == ProcessingMode.Add)
            {
                //for Add mode, always reset uuid
                dto.OrderShipmentHeader.OrderShipmentUuid = Guid.NewGuid().ToString();
                if (dto.OrderShipmentPackage != null && dto.OrderShipmentPackage.Count > 0)
                {
                    foreach (var detailItem in dto.OrderShipmentPackage)
                    {
                        detailItem.OrderShipmentPackageUuid = Guid.NewGuid().ToString();
                        detailItem.OrderShipmentUuid = dto.OrderShipmentHeader.OrderShipmentUuid;

                        if (detailItem.OrderShipmentShippedItem != null && detailItem.OrderShipmentShippedItem.Count > 0)
                        {
                            foreach (var subItem in detailItem.OrderShipmentShippedItem)
                            {
                                subItem.OrderShipmentShippedItemUuid = Guid.NewGuid().ToString();
                                subItem.OrderShipmentUuid = dto.OrderShipmentHeader.OrderShipmentUuid;
                                subItem.OrderShipmentPackageUuid = detailItem.OrderShipmentPackageUuid;
                            }
                        }
                    }
                }
                if (dto.OrderShipmentCanceledItem != null && dto.OrderShipmentCanceledItem.Count > 0)
                {
                    foreach (var detailItem in dto.OrderShipmentCanceledItem)
                    {
                        detailItem.OrderShipmentCanceledItemUuid = Guid.NewGuid().ToString();
                        detailItem.OrderShipmentUuid = dto.OrderShipmentHeader.OrderShipmentUuid;
                    }
                }
            }
            else if (processingMode == ProcessingMode.Edit)
            {
                if (dto.OrderShipmentHeader.RowNum.IsZero())
                {
                    isValid = false;
                    AddError("OrderShipmentHeader.RowNum is required.");
                }
                // This property should not be changed.
                dto.OrderShipmentHeader.MasterAccountNum = null;
                dto.OrderShipmentHeader.ProfileNum = null;
                dto.OrderShipmentHeader.DatabaseNum = null;
                dto.OrderShipmentHeader.OrderShipmentUuid = null;
                // TODO 
                //dto.SalesOrderHeader.OrderNumber = null;
                if (dto.OrderShipmentPackage != null && dto.OrderShipmentPackage.Count > 0)
                {
                    foreach (var detailItem in dto.OrderShipmentPackage)
                    {
                        detailItem.OrderShipmentPackageUuid = null;
                        detailItem.OrderShipmentNum = null;
                        detailItem.OrderShipmentUuid = null;
                        if (detailItem.OrderShipmentShippedItem != null && detailItem.OrderShipmentShippedItem.Count > 0)
                        {
                            foreach (var subItem in detailItem.OrderShipmentShippedItem)
                            {
                                subItem.OrderShipmentShippedItemUuid = null;
                                //subItem.OrderShipmentNum = null;
                            }
                        }
                    }
                }
                if (dto.OrderShipmentCanceledItem != null && dto.OrderShipmentCanceledItem.Count > 0)
                {
                    foreach (var detailItem in dto.OrderShipmentCanceledItem)
                        detailItem.OrderShipmentCanceledItemUuid = null;
                }
            }
            IsValid = isValid;
            return isValid;
        }
        #endregion
    }
}



