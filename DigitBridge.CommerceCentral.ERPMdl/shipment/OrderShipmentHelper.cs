


//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Data;
using Microsoft.Data.SqlClient;

using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a OrderShipmentHelper SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class OrderShipmentHelper
    {
        //        public static bool ExistNumber(string number, int masterAccountNum, int profileNum)
        //        {

        //            var sql = $@"
        //SELECT COUNT(1) FROM OrderShipmentHeader tbl
        //WHERE MasterAccountNum = @masterAccountNum
        //AND ProfileNum = @profileNum
        //AND OrderNumber = @number
        //";
        //            return ExecuteScalar(sql, masterAccountNum.ToSqlParameter("masterAccountNum"),
        //                 profileNum.ToSqlParameter("profileNum"),
        //                 number.ToSqlParameter("number")); 
        //        }

        //        public static async Task<bool> ExistNumberAsync(string number, int masterAccountNum, int profileNum)
        //        {
        ///*
        //            var sql = $@"
        //SELECT COUNT(1) FROM OrderShipmentHeader tbl
        //WHERE MasterAccountNum = @masterAccountNum
        //AND ProfileNum = @profileNum
        //AND OrderNumber = @number
        //";
        //           return await ExecuteScalarAsync(sql, masterAccountNum.ToSqlParameter("masterAccountNum"),
        //                 profileNum.ToSqlParameter("profileNum"),
        //                 number.ToSqlParameter("number"));
        //*/
        //            return true;
        //        }
        //        public static bool ExistNumber(string number, int profileNum)
        //        {
        ///*
        //            var sql = $@"
        //SELECT COUNT(1) FROM OrderShipmentHeader tbl
        //WHERE ProfileNum = @profileNum
        //AND OrderNumber = @number
        //";
        //            return ExecuteScalar(sql,
        //                 profileNum.ToSqlParameter("profileNum"),
        //                 number.ToSqlParameter("number"));
        //*/
        //            return true;
        //        }

        //        public static async Task<bool> ExistNumberAsync(string number, int profileNum)
        //        {
        ///*
        //            var sql = $@"
        //SELECT COUNT(1) FROM OrderShipmentHeader tbl
        //WHERE  ProfileNum = @profileNum
        //AND OrderNumber = @number
        //";
        //           return await ExecuteScalarAsync(sql,
        //                 profileNum.ToSqlParameter("profileNum"),
        //                 number.ToSqlParameter("number"));
        //*/
        //            return true;
        //        }
        public static bool ExistId(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM OrderShipmentHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND OrderShipmentUuid = @uuid
";
            var result = SqlQuery.ExecuteScalar<int>(sql, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 uuid.ToSqlParameter("uuid"));
            return result > 0;
        }

        public static async Task<bool> ExistIdAsync(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM OrderShipmentHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND OrderShipmentUuid = @uuid
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql, masterAccountNum.ToSqlParameter("masterAccountNum"),
                  profileNum.ToSqlParameter("profileNum"),
                  uuid.ToSqlParameter("uuid"));
            return result > 0;
        }

        public static bool ExistRowNum(long rowNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM OrderShipmentHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND OrderShipmentNum= @rowNum
";
            var result = SqlQuery.ExecuteScalar<int>(sql, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 rowNum.ToSqlParameter("rowNum"));
            return result > 0;
        }

        public static async Task<bool> ExistRowNumAsync(long rowNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM OrderShipmentHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND OrderShipmentNum= @rowNum
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 rowNum.ToSqlParameter("rowNum"));
            return result > 0;
        }

        public static bool ExistMainTrackingNumber(string mainTrackingNumber, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM OrderShipmentHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND MainTrackingNumber= @mainTrackingNumber
";
            var result = SqlQuery.ExecuteScalar<int>(sql, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 mainTrackingNumber.ToSqlParameter("mainTrackingNumber"));
            return result > 0;
        }

        public static async Task<bool> ExistMainTrackingNumberAsync(string mainTrackingNumber, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM OrderShipmentHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND MainTrackingNumber= @mainTrackingNumber
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql, masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 mainTrackingNumber.ToSqlParameter("mainTrackingNumber"));
            return result > 0;
        }


        public static bool ExistShipmentID(string shipmentID, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM OrderShipmentHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND ShipmentID= @shipmentID
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                 masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 shipmentID.ToSqlParameter("shipmentID")
                 );
            return result > 0;
        }

        public static async Task<bool> ExistShipmentIDAsync(string shipmentID, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM OrderShipmentHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND ShipmentID= @shipmentID
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                 masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 shipmentID.ToSqlParameter("shipmentID")
                 );
            return result > 0;
        }

        public static async Task<(string, string)> GetShipmentUuidAndInvoiceUuidAsync(string shipmentID, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT top 1 shipment.OrderShipmentUuid,shipment.InvoiceUuid
FROM OrderShipmentHeader shipment
WHERE shipment.MasterAccountNum = @masterAccountNum
AND shipment.ProfileNum = @profileNum
AND shipment.ShipmentID= @shipmentID
";
            var result = await SqlQuery.ExecuteAsync(sql,
                (string orderShipmentUuid, string invoiceUuid) => (orderShipmentUuid, invoiceUuid),
                 masterAccountNum.ToSqlParameter("masterAccountNum"),
                 profileNum.ToSqlParameter("profileNum"),
                 shipmentID.ToSqlParameter("shipmentID")
                 );
            return result.FirstOrDefault();
        }


//        public static bool ExistChannelAccountNumPackageTrackingNumber(int channelAccountNum, string packageTrackingNumber, int masterAccountNum, int profileNum)
//        {
//            var sql = $@"
//SELECT COUNT(1) FROM OrderShipmentPackage tbl
//WHERE MasterAccountNum = @masterAccountNum
//AND ProfileNum = @profileNum
//AND ChannelAccountNum= @channelAccountNum
//AND PackageTrackingNumber= @packageTrackingNumber
//";
//            var result = SqlQuery.ExecuteScalar<int>(sql,
//                 masterAccountNum.ToSqlParameter("masterAccountNum"),
//                 profileNum.ToSqlParameter("profileNum"),
//                 channelAccountNum.ToSqlParameter("channelAccountNum"),
//                 packageTrackingNumber.ToSqlParameter("packageTrackingNumber")
//                 );
//            return result > 0;
//        }

//        public static async Task<bool> ExistChannelAccountNumPackageTrackingNumberAsync(int channelAccountNum, string packageTrackingNumber, int masterAccountNum, int profileNum)
//        {
//            var sql = $@"
//SELECT COUNT(1) FROM OrderShipmentPackage tbl
//WHERE MasterAccountNum = @masterAccountNum
//AND ProfileNum = @profileNum
//AND ChannelAccountNum= @channelAccountNum
//AND PackageTrackingNumber= @packageTrackingNumber
//";
//            var result = SqlQuery.ExecuteScalar<int>(sql,
//                 masterAccountNum.ToSqlParameter("masterAccountNum"),
//                 profileNum.ToSqlParameter("profileNum"),
//                 channelAccountNum.ToSqlParameter("channelAccountNum"),
//                 packageTrackingNumber.ToSqlParameter("packageTrackingNumber")
//                 );
//            return result > 0;
//        }

        public static async Task<string> GetOrderShipmentUuidBySalesOrderUuidOrDCAssignmentNumAsync(string salesOrderUuid, string orderSourceCode)
        {
            var sql = $@"
                SELECT  
                COALESCE(
                    (SELECT TOP 1 OrderShipmentUuid FROM OrderShipmentHeader WHERE SalesOrderUuid != '' AND SalesOrderUuid=@salesOrderUuid),
                    (SELECT TOP 1 OrderShipmentUuid FROM OrderShipmentHeader WHERE OrderDCAssignmentNum != 0 AND 
                        ('{Consts.SalesOrderSourceCode_Prefix}' + Cast(OrderDCAssignmentNum as varchar))=@orderSourceCode)
                    ''
                )
            ";

            return await SqlQuery.ExecuteScalarAsync<string>(sql,
                 salesOrderUuid.ToSqlParameter("salesOrderUuid"),
                 orderSourceCode.ToSqlParameter("orderSourceCode")
                 );
        }

    }
}



