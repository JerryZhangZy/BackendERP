//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.AspNetCore.Http;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a OrderShipmentService.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public class OrderShipmentManager : IOrderShipmentManager, IMessage
    {

        public OrderShipmentManager() : base() { }

        public OrderShipmentManager(IDataBaseFactory dbFactory)
        {
            SetDataBaseFactory(dbFactory);
        }

        [XmlIgnore, JsonIgnore]
        protected OrderShipmentService _orderShipmentService;
        [XmlIgnore, JsonIgnore]
        public OrderShipmentService orderShipmentService
        {
            get
            {
                if (_orderShipmentService is null)
                    _orderShipmentService = new OrderShipmentService(dbFactory);
                return _orderShipmentService;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected OrderShipmentDataDtoCsv _orderShipmentDataDtoCsv;
        [XmlIgnore, JsonIgnore]
        public OrderShipmentDataDtoCsv orderShipmentDataDtoCsv
        {
            get
            {
                if (_orderShipmentDataDtoCsv is null)
                    _orderShipmentDataDtoCsv = new OrderShipmentDataDtoCsv();
                return _orderShipmentDataDtoCsv;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected OrderShipmentList _orderShipmentList;
        [XmlIgnore, JsonIgnore]
        public OrderShipmentList orderShipmentList
        {
            get
            {
                if (_orderShipmentList is null)
                    _orderShipmentList = new OrderShipmentList(dbFactory);
                return _orderShipmentList;
            }
        }

        public async Task<byte[]> ExportAsync(OrderShipmentPayload payload)
        {
            var rowNumList = await orderShipmentList.GetRowNumListAsync(payload);
            var dtoList = new List<OrderShipmentDataDto>();
            foreach (var x in rowNumList)
            {
                if (orderShipmentService.GetData(x))
                    dtoList.Add(orderShipmentService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new OrderShipmentDataDto());
            return orderShipmentDataDtoCsv.Export(dtoList);
        }

        public byte[] Export(OrderShipmentPayload payload)
        {
            var rowNumList = orderShipmentList.GetRowNumList(payload);
            var dtoList = new List<OrderShipmentDataDto>();
            foreach (var x in rowNumList)
            {
                if (orderShipmentService.GetData(x))
                    dtoList.Add(orderShipmentService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new OrderShipmentDataDto());
            return orderShipmentDataDtoCsv.Export(dtoList);
        }

        public void Import(OrderShipmentPayload payload, IFormFileCollection files)
        {
            if (files == null || files.Count == 0)
            {
                AddError("no files upload");
                return;
            }
            foreach (var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list = orderShipmentDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.OrderShipment = item;
                    if (orderShipmentService.Add(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in orderShipmentService.Messages)
                            Messages.Add(msg);
                        orderShipmentService.Messages.Clear();
                    }
                }
                if (payload.HasOrderShipment)
                    payload.OrderShipment = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        public async Task ImportAsync(OrderShipmentPayload payload, IFormFileCollection files)
        {
            if (files == null || files.Count == 0)
            {
                AddError("no files upload");
                return;
            }
            foreach (var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list = orderShipmentDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.OrderShipment = item;
                    if (await orderShipmentService.AddAsync(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in orderShipmentService.Messages)
                            Messages.Add(msg);
                        orderShipmentService.Messages.Clear();
                    }
                }
                if (payload.HasOrderShipment)
                    payload.OrderShipment = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        #region DataBase
        [XmlIgnore, JsonIgnore]
        protected IDataBaseFactory _dbFactory;

        [XmlIgnore, JsonIgnore]
        public IDataBaseFactory dbFactory
        {
            get
            {
                if (_dbFactory is null)
                    _dbFactory = DataBaseFactory.CreateDefault();
                return _dbFactory;
            }
        }

        public void SetDataBaseFactory(IDataBaseFactory dbFactory)
        {
            _dbFactory = dbFactory;
        }

        #endregion DataBase

        #region Messages
        protected IList<MessageClass> _messages;
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (_messages is null)
                    _messages = new List<MessageClass>();
                return _messages;
            }
            set { _messages = value; }
        }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             Messages.Add(message, MessageLevel.Info, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Warning, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Error, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Fatal, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Debug, code);

        #endregion Messages

        #region Create shipment

        public async Task<bool> CreateShipmentAsync(OrderShipmentPayload payload)
        {
            if (payload is null || !payload.HasOrderShipment)
            {
                return false;
            }

            payload.OrderShipment.OrderShipmentHeader.ProcessStatus = (int)OrderShipmentProcessStatusEnum.Default;
            var service = new OrderShipmentService(dbFactory);
            var success = await service.AddAsync(payload);
            if (!success)
            {
                this.Messages = this.Messages.Concat(service.Messages).ToList();
                return false;
            }
            var orderShipmentData = service.Data;

            // create invoice and set invoicenumber back to shipmentdata.
            success = await CreateInvoiceFromShipmentAsync(service.Data);
            if (!success)
                return false;

            //save shipmentdata to db.
            orderShipmentData.OrderShipmentHeader.ProcessStatus = (int)OrderShipmentProcessStatusEnum.Transferred;
            success = await service.SaveDataAsync();

            if (success)
            {
                payload.OrderShipment = service.ToDto(orderShipmentData);
            }

            return success;
        }



        /// <summary>
        /// Load OrderShipment and SalesOrder, create Invoice for each OrderShipment.
        /// </summary>
        /// <param name="centralOrderUuid"></param>
        /// <returns>Success Create Invoice, Invoice UUID</returns>
        public async Task<bool> CreateInvoiceFromShipmentAsync(OrderShipmentData shipmentData)
        {
            ////Get OrderShipment by uuid
            //var service = new OrderShipmentService(dbFactory);
            //var success = await service.GetDataByIdAsync(orderShimentUuid);
            //if (!success)
            //{
            //    this.Messages = this.Messages.Concat(service.Messages).ToList();
            //    return (success, null);
            //} 
            //var shipmentData = service.Data;
            var orderShimentUuid = shipmentData.UniqueId;
            var salesOrderUuid = await GetSalesOrderUuid(shipmentData);
            if (string.IsNullOrEmpty(salesOrderUuid))
            {
                AddError($"SalesOrder not found for orderShimentUuid:{orderShimentUuid}.");
                return false;
            }

            if (await ExistSalesOrderInInvoiceAsync(salesOrderUuid))
            {
                AddError($"SalesOrderUuid {salesOrderUuid} has been transferred to invoice.");
                return false;
            }

            var salesorderService = new SalesOrderService(dbFactory);
            var success = await salesorderService.GetDataByIdAsync(salesOrderUuid);
            if (!success)
            {
                this.Messages = this.Messages.Concat(salesorderService.Messages).ToList();
                return false;
            }

            var invoiceUuid = string.Empty;
            //Create Invoice 
            (success, invoiceUuid) = await CreateInvoiceAsync(shipmentData, salesorderService.Data);
            if (!success)
                return false;

            var soHeader = salesorderService.Data.SalesOrderHeader;
            var paymentManager = new InvoicePaymentManager(dbFactory);
            return await paymentManager.AddPaymentFromPresales(soHeader.MiscInvoiceUuid, invoiceUuid, soHeader.DepositAmount);
        }

        protected async Task<string> GetSalesOrderUuid(OrderShipmentData shipmentData)
        {
            var orderShimentUuid = shipmentData.UniqueId;
            //Get Sale by uuid
            long orderDCAssignmentNum = shipmentData.OrderShipmentHeader.OrderDCAssignmentNum ?? 0;
            if (orderDCAssignmentNum == 0)
            {
                AddError($"No OrderDCAssignmentNum of OrderShipment {orderShimentUuid}.");
                return null;
            }
            var salesOrderUuid = await GetSalesOrderUuidAsync(orderDCAssignmentNum);
            return salesOrderUuid;
        }

        /// <summary>
        /// Create one invoice from one orderShipment and one salesOrder.
        /// </summary>
        /// <param name="coData"></param>
        /// <param name="dcAssigmentData"></param>
        /// <returns>Success Create Invoice</returns>
        protected async Task<(bool, string)> CreateInvoiceAsync(OrderShipmentData shipmentData, SalesOrderData salesOrderData)
        {
            InvoiceTransfer invoiceTransfer = new InvoiceTransfer(this, "");
            var invoiceData = invoiceTransfer.FromOrderShipmentAndSalesOrder(shipmentData, salesOrderData);
            var invoiceService = new InvoiceService(dbFactory);

            var mapper = new InvoiceDataDtoMapperDefault();
            var dto = mapper.WriteDto(invoiceData, null);
            var success = await invoiceService.AddAsync(dto);
            if (!success)
            {
                this.Messages = this.Messages.Concat(invoiceService.Messages).ToList();
                return (false, null);
            }

            //set InvoiceNumber back to shipment.
            shipmentData.OrderShipmentHeader.InvoiceNumber = invoiceService.Data.InvoiceHeader.InvoiceNumber;
            return (true, invoiceService.Data.InvoiceHeader.InvoiceUuid);
        }

        /// <summary>
        /// Get SalesOrderData by OrderDCAssignmentNum
        /// </summary>
        /// <param name="orderDCAssignmentNum"></param>
        /// <returns>SalesOrderData</returns>
        protected async Task<string> GetSalesOrderUuidAsync(long orderDCAssignmentNum)
        {
            //Get SalesOrderData by uuid
            using (var trs = new ScopedTransaction(dbFactory))
                return await SalesOrderHelper.GetSalesOrderUuidAsync(orderDCAssignmentNum);
        }

        /// <summary>
        /// Check SalesOrder is already exist in Invoice
        /// </summary>
        /// <param name="salesOrderUuid"></param>
        /// <returns>Exist or Not</returns>
        protected async Task<bool> ExistSalesOrderInInvoiceAsync(string salesOrderUuid)
        {
            using (var trs = new ScopedTransaction(dbFactory))
                return await InvoiceHelper.ExistSalesOrderUuidAsync(salesOrderUuid);
        }
        #endregion
    }
}
