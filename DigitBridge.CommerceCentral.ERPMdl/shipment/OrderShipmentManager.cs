//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.AspNetCore.Http;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a OrderShipmentService.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public class OrderShipmentManager : IOrderShipmentManager, IMessage
    {

        public OrderShipmentManager() : base() { }

        public OrderShipmentManager(IDataBaseFactory dbFactory)
        {
            SetDataBaseFactory(dbFactory);
        }

        [XmlIgnore, JsonIgnore]
        protected OrderShipmentService _orderShipmentService;
        [XmlIgnore, JsonIgnore]
        public OrderShipmentService orderShipmentService
        {
            get
            {
                if (_orderShipmentService is null)
                    _orderShipmentService = new OrderShipmentService(dbFactory);
                return _orderShipmentService;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected OrderShipmentDataDtoCsv _orderShipmentDataDtoCsv;
        [XmlIgnore, JsonIgnore]
        public OrderShipmentDataDtoCsv orderShipmentDataDtoCsv
        {
            get
            {
                if (_orderShipmentDataDtoCsv is null)
                    _orderShipmentDataDtoCsv = new OrderShipmentDataDtoCsv();
                return _orderShipmentDataDtoCsv;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected OrderShipmentList _orderShipmentList;
        [XmlIgnore, JsonIgnore]
        public OrderShipmentList orderShipmentList
        {
            get
            {
                if (_orderShipmentList is null)
                    _orderShipmentList = new OrderShipmentList(dbFactory);
                return _orderShipmentList;
            }
        }

        public async Task<byte[]> ExportAsync(OrderShipmentPayload payload)
        {
            var rowNumList = await orderShipmentList.GetRowNumListAsync(payload);
            var dtoList = new List<OrderShipmentDataDto>();
            foreach (var x in rowNumList)
            {
                if (orderShipmentService.GetData(x))
                    dtoList.Add(orderShipmentService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new OrderShipmentDataDto());
            return orderShipmentDataDtoCsv.Export(dtoList);
        }

        public byte[] Export(OrderShipmentPayload payload)
        {
            var rowNumList = orderShipmentList.GetRowNumList(payload);
            var dtoList = new List<OrderShipmentDataDto>();
            foreach (var x in rowNumList)
            {
                if (orderShipmentService.GetData(x))
                    dtoList.Add(orderShipmentService.ToDto());
            };
            if (dtoList.Count == 0)
                dtoList.Add(new OrderShipmentDataDto());
            return orderShipmentDataDtoCsv.Export(dtoList);
        }

        public void Import(OrderShipmentPayload payload, IFormFileCollection files)
        {
            if (files == null || files.Count == 0)
            {
                AddError("no files upload");
                return;
            }
            foreach (var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list = orderShipmentDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.OrderShipment = item;
                    if (orderShipmentService.Add(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in orderShipmentService.Messages)
                            Messages.Add(msg);
                        orderShipmentService.Messages.Clear();
                    }
                }
                if (payload.HasOrderShipment)
                    payload.OrderShipment = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        public async Task ImportAsync(OrderShipmentPayload payload, IFormFileCollection files)
        {
            if (files == null || files.Count == 0)
            {
                AddError("no files upload");
                return;
            }
            foreach (var file in files)
            {
                if (!file.FileName.ToLower().EndsWith("csv"))
                {
                    AddError($"invalid file type:{file.FileName}");
                    continue;
                }
                var list = orderShipmentDataDtoCsv.Import(file.OpenReadStream());
                var readcount = list.Count();
                var addsucccount = 0;
                var errorcount = 0;
                foreach (var item in list)
                {
                    payload.OrderShipment = item;
                    if (await orderShipmentService.AddAsync(payload))
                        addsucccount++;
                    else
                    {
                        errorcount++;
                        foreach (var msg in orderShipmentService.Messages)
                            Messages.Add(msg);
                        orderShipmentService.Messages.Clear();
                    }
                }
                if (payload.HasOrderShipment)
                    payload.OrderShipment = null;
                AddInfo($"File:{file.FileName},Read {readcount},Import Succ {addsucccount},Import Fail {errorcount}.");
            }
        }

        #region DataBase
        [XmlIgnore, JsonIgnore]
        protected IDataBaseFactory _dbFactory;

        [XmlIgnore, JsonIgnore]
        public IDataBaseFactory dbFactory
        {
            get
            {
                if (_dbFactory is null)
                    _dbFactory = DataBaseFactory.CreateDefault();
                return _dbFactory;
            }
        }

        public void SetDataBaseFactory(IDataBaseFactory dbFactory)
        {
            _dbFactory = dbFactory;
        }

        #endregion DataBase

        #region Messages
        protected IList<MessageClass> _messages;
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (_messages is null)
                    _messages = new List<MessageClass>();
                return _messages;
            }
            set { _messages = value; }
        }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             Messages.Add(message, MessageLevel.Info, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Warning, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Error, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Fatal, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Debug, code);

        #endregion Messages

        #region Create shipment

        public async Task<WmsOrderShipmentPayload> CreateShipmentAsync(OrderShipmentPayload payload, InputOrderShipmentType wmsShipment)
        {
            var response = new WmsOrderShipmentPayload();
            //reset message.
            _messages = new List<MessageClass>();

            if (payload is null)
            {
                AddError("Request is invalid.");
                return response;
            }
            if (wmsShipment is null)
            {
                AddError("Shipment data cannot be empty.");
                return response;
            }

            if (wmsShipment.ShipmentHeader is null)
            {
                AddError("ShipmentHeader data cannot be empty.");
                return response;
            }

            response.MainTrackingNumber = wmsShipment.ShipmentHeader.MainTrackingNumber;

            var mapper = new WMSOrderShipmentMapper(payload.MasterAccountNum, payload.ProfileNum);
            var erpShipment = mapper.MapperToErpShipment(wmsShipment);
            erpShipment.OrderShipmentHeader.ProcessStatus = (int)OrderShipmentProcessStatusEnum.Default;

            var service = new OrderShipmentService(dbFactory);
            var success = await service.AddAsync(erpShipment);
            if (!success)
            {
                Messages.Add(service.Messages);
                return response;
            }
            var orderShipmentData = service.Data;

            // create invoice and set invoicenumber back to shipmentdata. 
            var invoiceManager = new InvoiceManager(dbFactory);
            (success, response.InvoiceUuid) = await invoiceManager.CreateInvoiceFromShipmentAsync(service.Data);
            if (!success)
            {
                this.Messages.Add(invoiceManager.Messages);
                return response;
            }

            //save shipmentdata to db.
            orderShipmentData.OrderShipmentHeader.ProcessStatus = (int)OrderShipmentProcessStatusEnum.Transferred;
            success = await service.SaveDataAsync();
            if (!success)
            {
                Messages.Add(service.Messages);
            }
            response.Success = success;

            return response;
        }
        public async Task<List<WmsOrderShipmentPayload>> CreateShipmentListAsync(OrderShipmentPayload payload, IList<InputOrderShipmentType> wmsShipments)
        {
            var resultList = new List<WmsOrderShipmentPayload>();
            if (wmsShipments is null || wmsShipments.Count == 0)
            {
                AddError("shipment data is required.");
                resultList.Add(new WmsOrderShipmentPayload()
                {
                    Messages = this.Messages,
                });
                return resultList;
            }
            foreach (var shipment in wmsShipments)
            {
                var shipmentPayload = new OrderShipmentPayload()
                {
                    MasterAccountNum = payload.MasterAccountNum,
                    ProfileNum = payload.ProfileNum,
                };
                var result = await CreateShipmentAsync(shipmentPayload, shipment);
                result.Messages = this.Messages;
                resultList.Add(result);
            }
            return resultList;
        }

        #endregion
    }
}
