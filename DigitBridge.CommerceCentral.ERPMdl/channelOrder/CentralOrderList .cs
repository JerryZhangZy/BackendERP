//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.CommerceCentral.YoPoco;
using Microsoft.Data.SqlClient;
using Helper = DigitBridge.CommerceCentral.ERPDb.OrderHeaderHelper;
using ordHelper = DigitBridge.CommerceCentral.ERPDb.SalesOrderHeaderHelper;
using ordiHelper = DigitBridge.CommerceCentral.ERPDb.SalesOrderHeaderInfoHelper;
using insHelper = DigitBridge.CommerceCentral.ERPDb.InvoiceHeaderHelper;
using insiHelper = DigitBridge.CommerceCentral.ERPDb.InvoiceHeaderInfoHelper;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public class CentralOrderList : SqlQueryBuilder<CentralOrderQuery>
    {
        public CentralOrderList(IDataBaseFactory dbFactory) : base(dbFactory)
        {
        }
        public CentralOrderList(IDataBaseFactory dbFactory, CentralOrderQuery queryObject)
            : base(dbFactory, queryObject)
        {
        }

        #region override methods

        protected override string GetSQL_select()
        {
            this.SQL_Select = $@"
SELECT 
{Helper.DatabaseNum()},
{Helper.CentralOrderNum()},
{Helper.MasterAccountNum()},
{Helper.ProfileNum()},
{Helper.ChannelNum()},
{Helper.ChannelAccountNum()},
{Helper.UserDataPresent()},
{Helper.UserDataRemoveDateUtc()},
{Helper.ChannelOrderID()},
{Helper.SecondaryChannelOrderID()},
{Helper.SellerOrderID()},
{Helper.Currency()},
{Helper.OriginalOrderDateUtc()},
{Helper.SellerPublicNote()},
{Helper.SellerPrivateNote()},
{Helper.EndBuyerInstruction()},
{Helper.TotalOrderAmount()},
{Helper.TotalTaxAmount()},
{Helper.TotalShippingAmount()},
{Helper.TotalShippingTaxAmount()},
{Helper.TotalShippingDiscount()},
{Helper.TotalShippingDiscountTaxAmount()},
{Helper.TotalInsuranceAmount()},
{Helper.TotalGiftOptionAmount()},
{Helper.TotalGiftOptionTaxAmount()},
{Helper.AdditionalCostOrDiscount()},
{Helper.PromotionAmount()},
{Helper.EstimatedShipDateUtc()},
{Helper.DeliverByDateUtc()},
{Helper.RequestedShippingCarrier()},
{Helper.RequestedShippingClass()},
{Helper.ResellerID()},
{Helper.FlagNum()},
{Helper.FlagDesc()},
{Helper.PaymentStatus()},
{Helper.PaymentUpdateUtc()},
{Helper.ShippingUpdateUtc()},
{Helper.EndBuyerUserID()},
{Helper.EndBuyerEmail()},
{Helper.PaymentMethod()},
{Helper.ShipToName()},
{Helper.ShipToFirstName()},
{Helper.ShipToLastName()},
{Helper.ShipToSuffix()},
{Helper.ShipToCompany()},
{Helper.ShipToCompanyJobTitle()},
{Helper.ShipToAttention()},
{Helper.ShipToDaytimePhone()},
{Helper.ShipToNightPhone()},
{Helper.ShipToAddressLine1()},
{Helper.ShipToAddressLine2()},
{Helper.ShipToAddressLine3()},
{Helper.ShipToCity()},
{Helper.ShipToState()},
{Helper.ShipToStateFullName()},
{Helper.ShipToPostalCode()},
{Helper.ShipToPostalCodeExt()},
{Helper.ShipToCounty()},
{Helper.ShipToCountry()},
{Helper.ShipToEmail()},
{Helper.BillToName()},
{Helper.BillToFirstName()},
{Helper.BillToLastName()},
{Helper.BillToSuffix()},
{Helper.BillToCompany()},
{Helper.BillToCompanyJobTitle()},
{Helper.BillToAttention()},
{Helper.BillToAddressLine1()},
{Helper.BillToAddressLine2()},
{Helper.BillToAddressLine3()},
{Helper.BillToCity()},
{Helper.BillToState()},
{Helper.BillToStateFullName()},
{Helper.BillToPostalCode()},
{Helper.BillToPostalCodeExt()},
{Helper.BillToCounty()},
{Helper.BillToCountry()},
{Helper.BillToEmail()},
{Helper.BillToDaytimePhone()},
{Helper.BillToNightPhone()},
{Helper.SignatureFlag()},
{Helper.PickupFlag()},
{Helper.MerchantDivision()},
{Helper.MerchantBatchNumber()},
{Helper.MerchantDepartmentSiteID()},
{Helper.ReservationNumber()},
{Helper.MerchantShipToAddressType()},
{Helper.CustomerOrganizationType()},
{Helper.OrderMark()},
{Helper.OrderMark2()},
{Helper.OrderStatus()},
{Helper.OrderStatusUpdateDateUtc()},
{Helper.EnterDateUtc()},
{Helper.DigitBridgeGuid()},
{Helper.DBChannelOrderHeaderRowID()},
{Helper.DCAssignmentStatus()},
{Helper.DCAssignmentDateUtc()},
{Helper.CentralOrderUuid()},
{Helper.RowNum()},
{Helper.TotalDueSellerAmount()},
{ordHelper.OrderNumber()},
{insHelper.InvoiceNumber()}
";
            return this.SQL_Select;
        }

        protected override string GetSQL_from()
        {
            this.SQL_From = $@"
FROM {Helper.TableName} {Helper.TableAllies}
LEFT JOIN {ordiHelper.TableName} {ordiHelper.TableAllies} ON {Helper.TableAllies}.CentralOrderNum = {ordiHelper.TableAllies}.CentralOrderNum
LEFT JOIN {ordHelper.TableName} {ordHelper.TableAllies} ON {ordiHelper.TableAllies}.SalesOrderUuid = {ordHelper.TableAllies}.SalesOrderUuid
LEFT JOIN {insiHelper.TableName} {insiHelper.TableAllies} ON {Helper.TableAllies}.CentralOrderNum = {insiHelper.TableAllies}.CentralOrderNum
LEFT JOIN {insHelper.TableName} {insHelper.TableAllies} ON {insiHelper.TableAllies}.InvoiceUuid = {insHelper.TableAllies}.InvoiceUuid
";
            return this.SQL_From;
        }

        public override SqlParameter[] GetSqlParameters()
        {
            var paramList = base.GetSqlParameters().ToList();

            //paramList.Add("@SalesOrderStatus".ToEnumParameter<SalesOrderStatus>());
            //paramList.Add("@SalesOrderType".ToEnumParameter<SalesOrderType>());

            return paramList.ToArray();
        }

        #endregion override methods

        public virtual void GetChannelOrderList(ChannelOrderPayload payload)
        {
            if (payload == null)
                payload = new ChannelOrderPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            try
            {
                payload.ChannelOrderListCount = Count();
                payload.Success = ExcuteJson(sb);
                if (payload.Success)
                    payload.ChannelOrderList = sb;
            }
            catch (Exception ex)
            {
                payload.ChannelOrderListCount = 0;
                payload.ChannelOrderList = null;
                AddError(ex.ObjectToString());
                payload.Messages = this.Messages;
            }
        }

        public virtual async Task GetChannelOrderListAsync(ChannelOrderPayload payload)
        {
            if (payload == null)
                payload = new ChannelOrderPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            try
            {
                payload.ChannelOrderListCount = await CountAsync();
                payload.Success = await ExcuteJsonAsync(sb);
                if (payload.Success)
                    payload.ChannelOrderList = sb;
            }
            catch (Exception ex)
            {
                payload.ChannelOrderListCount = 0;
                payload.ChannelOrderList = null;
                AddError(ex.ObjectToString());
                payload.Messages = this.Messages;
            }
        }

        public virtual async Task<IList<long>> GetRowNumListAsync(ChannelOrderPayload payload)
        {
            if (payload == null)
                payload = new ChannelOrderPayload();

            this.LoadRequestParameter(payload);
            var rowNumList = new List<long>();

            var sql = $@"
SELECT distinct {Helper.TableAllies}.CentralOrderNum 
{GetSQL_from()} 
{GetSQL_where()}
ORDER BY  {Helper.TableAllies}.CentralOrderNum  
OFFSET {payload.FixedSkip} ROWS FETCH NEXT {payload.FixedTop} ROWS ONLY
";
            try
            {
                using (var trs = new ScopedTransaction(dbFactory))
                {
                    rowNumList = await SqlQuery.ExecuteAsync(
                    sql,
                    (long rowNum) => rowNum,
                    GetSqlParameters().ToArray()
                );
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return rowNumList;
        }

        public virtual IList<long> GetRowNumList(ChannelOrderPayload payload)
        {
            if (payload == null)
                payload = new ChannelOrderPayload();

            this.LoadRequestParameter(payload);
            var rowNumList = new List<long>();
            var sql = $@"
SELECT distinct {Helper.TableAllies}.CentralOrderNum 
{GetSQL_from()} 
{GetSQL_where()}
ORDER BY  {Helper.TableAllies}.CentralOrderNum  
OFFSET {payload.FixedSkip} ROWS FETCH NEXT {payload.FixedTop} ROWS ONLY
";
            try
            {
                using (var trs = new ScopedTransaction(dbFactory))
                {
                    rowNumList = SqlQuery.Execute(
                    sql,
                    (long rowNum) => rowNum,
                    GetSqlParameters().ToArray()
                );
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return rowNumList;
        }
    }
}
