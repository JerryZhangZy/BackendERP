

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default InventoryUpdateService Calculator class.
    /// </summary>
    public partial class InventoryUpdateDtoPrepareDefault : IPrepare<InventoryUpdateService, InventoryUpdateData, InventoryUpdateDataDto>
    {
        public InventoryUpdateDtoPrepareDefault(InventoryUpdateService inventoryUpdateService)
        {
            _inventoryUpdateService = inventoryUpdateService;
        }

        protected InventoryUpdateService _inventoryUpdateService;
        protected InventoryUpdateService Service 
        { 
            get => _inventoryUpdateService; 
        }
        protected IDataBaseFactory dbFactory 
        { 
            get => Service.dbFactory; 
        }
        #region message
        [XmlIgnore, JsonIgnore]
        protected IList<MessageClass> Messages
        {
            get => Service.Messages;
        }
        protected IList<MessageClass> AddInfo(string message, string code = null) => Service.AddInfo(message, code);
        protected IList<MessageClass> AddWarning(string message, string code = null) => Service.AddWarning(message, code);
        protected IList<MessageClass> AddError(string message, string code = null) => Service.AddError(message, code);
        protected IList<MessageClass> AddFatal(string message, string code = null) => Service.AddFatal(message, code);
        protected IList<MessageClass> AddDebug(string message, string code = null) => Service.AddDebug(message, code);

        #endregion message

        #region Service Property

        private CustomerService _customerService;

        protected CustomerService customerService
        {
            get
            {
                if (_customerService is null)
                    _customerService = new CustomerService(dbFactory);
                return _customerService;
            }
        }

        private InventoryService _inventoryService;

        protected InventoryService inventoryService
        {
            get
            {
                if (_inventoryService is null)
                    _inventoryService = new InventoryService(dbFactory);
                return _inventoryService;
            }
        }

        #endregion

        private DateTime now = DateTime.UtcNow;

        /// <summary>
        /// Check Dto data, fill customer and inventory info.
        /// </summary>
        public virtual async Task<bool> PrepareDtoAsync(InventoryUpdateDataDto dto)
        {
            if (dto == null || dto.InventoryUpdateHeader == null)
                return false;

            // Load customer info to Dto 
            //if (!await CheckCustomerAsync(dto))
            //{
            //    AddError($"Cannot find or create customer for {dto.InventoryUpdateHeader.OrderSourceCode}.");
            //}

            //// Load inventory info to Dto 
            //// check sku and warehouse exist, otherwise add new SKU and Warehouse
            //if (!await CheckInventoryAsync(dto))
            //{
            //    AddError($"Cannot find or create SKU for {dto.InventoryUpdateHeader.OrderSourceCode}.");
            //}

            return true;
        }

        #region GetDataWithCache
        /// <summary>
        /// get inventory data
        /// </summary>
        /// <param name="data"></param>
        /// <param name="sku"></param>
        /// <returns></returns>
        public virtual InventoryData GetInventoryData(InventoryUpdateData data, string sku)
        {
            var key = data.InventoryUpdateHeader.MasterAccountNum + "_" + data.InventoryUpdateHeader.ProfileNum + '_' + sku;
            return data.GetCache(key, () =>
            {
                if (inventoryService.GetByNumber(data.InventoryUpdateHeader.MasterAccountNum, data.InventoryUpdateHeader.ProfileNum, sku))
                    return inventoryService.Data;
                return null;
            });
        }
        /// <summary>
        /// get inventory data
        /// </summary>
        /// <param name="data"></param>
        /// <param name="sku"></param>
        /// <returns></returns>
        public virtual InventoryData GetInventoryData_InventoryUuid(InventoryUpdateData data, string inventoryUuid)
        {
            var key = data.InventoryUpdateHeader.MasterAccountNum + "_" + data.InventoryUpdateHeader.ProfileNum + '_' + inventoryUuid;
            return data.GetCache(key, () =>
            {
                if (inventoryService.GetDataById(inventoryUuid))
                    return inventoryService.Data;
                return null;
            });
        }
        /// <summary>
        /// Get Customer Data by customerCode
        /// </summary>
        /// <param name="data"></param>
        /// <param name="customerCode"></param>
        /// <returns></returns>
        public virtual CustomerData GetCustomerData(InventoryUpdateData data, string customerCode)
        {
            var key = data.InventoryUpdateHeader.MasterAccountNum + "_" + data.InventoryUpdateHeader.ProfileNum + '_' + customerCode;
            return data.GetCache(key, () =>
            {
                if (customerService.GetByNumber(data.InventoryUpdateHeader.MasterAccountNum, data.InventoryUpdateHeader.ProfileNum, customerCode))
                    return customerService.Data;
                return null;
            });
        }
        #endregion

        /// <summary>
        /// Load info from customer to Dto
        /// Try use customer uuid, code, name or phone find customer
        /// If customer code not exist, add new customer. 
        /// </summary>
        //protected async Task<bool> CheckCustomerAsync(InventoryUpdateDataDto dto)
        //{
        //    if (!string.IsNullOrEmpty(dto.InventoryUpdateHeader.CustomerCode))
        //        return true;

        //    // try to find customer
        //    var find = new CustomerFindClass()
        //    {
        //        MasterAccountNum = dto.InventoryUpdateHeader.MasterAccountNum.ToInt(),
        //        ProfileNum = dto.InventoryUpdateHeader.ProfileNum.ToInt(),
        //        CustomerUuid = dto.InventoryUpdateHeader.CustomerUuid,
        //        CustomerCode = dto.InventoryUpdateHeader.CustomerCode,
        //        ChannelNum = dto.InventoryUpdateHeaderInfo.ChannelNum.ToInt(),
        //        ChannelAccountNum = dto.InventoryUpdateHeaderInfo.ChannelAccountNum.ToInt(),
        //        CustomerName = dto.InventoryUpdateHeader.CustomerName,
        //        Phone1 = dto.InventoryUpdateHeaderInfo.BillToDaytimePhone,
        //        Email = dto.InventoryUpdateHeaderInfo.BillToEmail,
        //    };

        //    // if not found exist customer, add new customer
        //    if (!(await customerService.GetCustomerByCustomerFindAsync(find)))
        //    {
        //        await AddNewCustomerFromDtoAsync(dto, customerService);
        //    }

        //    // load info from customer data
        //    var customer = customerService.Data.Customer;

        //    dto.InventoryUpdateHeader.CustomerUuid = customer.CustomerUuid;
        //    dto.InventoryUpdateHeader.CustomerCode = customer.CustomerCode;
        //    dto.InventoryUpdateHeader.CustomerName = customer.CustomerName;
        //    dto.InventoryUpdateHeader.Terms = customer.Terms;
        //    dto.InventoryUpdateHeader.TermsDays = customer.TermsDays;

        //    if (string.IsNullOrEmpty(dto.InventoryUpdateHeader.SalesRep))
        //    {
        //        dto.InventoryUpdateHeader.SalesRep = customer.SalesRep;
        //        dto.InventoryUpdateHeader.CommissionRate = customer.CommissionRate;
        //    }
        //    if (string.IsNullOrEmpty(dto.InventoryUpdateHeader.SalesRep2))
        //    {
        //        dto.InventoryUpdateHeader.SalesRep2 = customer.SalesRep2;
        //        dto.InventoryUpdateHeader.CommissionRate2 = customer.CommissionRate2;
        //    }
        //    if (string.IsNullOrEmpty(dto.InventoryUpdateHeader.SalesRep3))
        //    {
        //        dto.InventoryUpdateHeader.SalesRep3 = customer.SalesRep3;
        //        dto.InventoryUpdateHeader.CommissionRate3 = customer.CommissionRate3;
        //    }
        //    if (string.IsNullOrEmpty(dto.InventoryUpdateHeader.SalesRep4))
        //    {
        //        dto.InventoryUpdateHeader.SalesRep4 = customer.SalesRep4;
        //        dto.InventoryUpdateHeader.CommissionRate4 = customer.CommissionRate4;
        //    }
        //    return true;
        //}

        //protected async Task<bool> AddNewCustomerFromDtoAsync(InventoryUpdateDataDto dto, CustomerService service)
        //{
        //    customerService.NewData();
        //    var newCustomer = customerService.Data;
        //    newCustomer.Customer.MasterAccountNum = dto.InventoryUpdateHeader.MasterAccountNum.ToInt();
        //    newCustomer.Customer.ProfileNum = dto.InventoryUpdateHeader.ProfileNum.ToInt();
        //    newCustomer.Customer.DatabaseNum = dto.InventoryUpdateHeader.DatabaseNum.ToInt();
        //    newCustomer.Customer.CustomerUuid = Guid.NewGuid().ToString();
        //    newCustomer.Customer.CustomerCode = string.Empty;
        //    newCustomer.Customer.CustomerName = dto.InventoryUpdateHeaderInfo.BillToName;
        //    newCustomer.Customer.CustomerType = (int)CustomerType.ImportNewCustomer;
        //    newCustomer.Customer.CustomerStatus = (int)CustomerStatus.Active;
        //    newCustomer.Customer.FirstDate = DateTime.UtcNow.Date;
        //    newCustomer.Customer.ChannelNum = dto.InventoryUpdateHeaderInfo.ChannelNum.ToInt();
        //    newCustomer.Customer.ChannelAccountNum = dto.InventoryUpdateHeaderInfo.ChannelAccountNum.ToInt();
        //    newCustomer.AddCustomerAddress(new CustomerAddress()
        //    {
        //        AddressCode = AddressCodeType.Ship,
        //        Name = dto.InventoryUpdateHeaderInfo.ShipToName,
        //        Company = dto.InventoryUpdateHeaderInfo.ShipToCompany,
        //        AddressLine1 = dto.InventoryUpdateHeaderInfo.ShipToAddressLine1,
        //        AddressLine2 = dto.InventoryUpdateHeaderInfo.ShipToAddressLine2,
        //        AddressLine3 = dto.InventoryUpdateHeaderInfo.ShipToAddressLine3,
        //        City = dto.InventoryUpdateHeaderInfo.ShipToCity,
        //        State = dto.InventoryUpdateHeaderInfo.ShipToState,
        //        StateFullName = dto.InventoryUpdateHeaderInfo.ShipToStateFullName,
        //        PostalCode = dto.InventoryUpdateHeaderInfo.ShipToPostalCode,
        //        PostalCodeExt = dto.InventoryUpdateHeaderInfo.ShipToPostalCodeExt,
        //        County = dto.InventoryUpdateHeaderInfo.ShipToCounty,
        //        Country = dto.InventoryUpdateHeaderInfo.ShipToCountry,
        //        Email = dto.InventoryUpdateHeaderInfo.ShipToEmail,
        //        DaytimePhone = dto.InventoryUpdateHeaderInfo.ShipToDaytimePhone,
        //        NightPhone = dto.InventoryUpdateHeaderInfo.ShipToNightPhone,
        //    });
        //    newCustomer.AddCustomerAddress(new CustomerAddress()
        //    {
        //        AddressCode = AddressCodeType.Bill,
        //        Name = dto.InventoryUpdateHeaderInfo.BillToName,
        //        Company = dto.InventoryUpdateHeaderInfo.BillToCompany,
        //        AddressLine1 = dto.InventoryUpdateHeaderInfo.BillToAddressLine1,
        //        AddressLine2 = dto.InventoryUpdateHeaderInfo.BillToAddressLine2,
        //        AddressLine3 = dto.InventoryUpdateHeaderInfo.BillToAddressLine3,
        //        City = dto.InventoryUpdateHeaderInfo.BillToCity,
        //        State = dto.InventoryUpdateHeaderInfo.BillToState,
        //        StateFullName = dto.InventoryUpdateHeaderInfo.BillToStateFullName,
        //        PostalCode = dto.InventoryUpdateHeaderInfo.BillToPostalCode,
        //        PostalCodeExt = dto.InventoryUpdateHeaderInfo.BillToPostalCodeExt,
        //        County = dto.InventoryUpdateHeaderInfo.BillToCounty,
        //        Country = dto.InventoryUpdateHeaderInfo.BillToCountry,
        //        Email = dto.InventoryUpdateHeaderInfo.BillToEmail,
        //        DaytimePhone = dto.InventoryUpdateHeaderInfo.BillToDaytimePhone,
        //        NightPhone = dto.InventoryUpdateHeaderInfo.BillToNightPhone,
        //    });
        //    return await customerService.AddCustomerAsync(newCustomer);
        //}

        /// <summary>
        /// Load info from inventory to Dto
        /// Try use inventory uuid, sku, upc or phone find customer
        /// If customer code not exist, add new customer. 
        /// </summary>
        protected async Task<bool> CheckInventoryAsync(InventoryUpdateDataDto dto)
        {
            if (dto == null || dto.InventoryUpdateItems == null || dto.InventoryUpdateItems.Count == 0)
            {
                AddError($"Sales Order items not found");
                return false;
            }

            var header = dto.InventoryUpdateHeader;
            var masterAccountNum = dto.InventoryUpdateHeader.MasterAccountNum.ToInt();
            var profileNum = dto.InventoryUpdateHeader.ProfileNum.ToInt();

            // find product SKU for each item
            var findSku = dto.InventoryUpdateItems.Select(x => new ProductFindClass() 
                { 
                    SKU = x.SKU,
                    UPC = x.SKU,
                }
            ).ToList();
            findSku = (await inventoryService.FindSkuByProductFindAsync(findSku, masterAccountNum, profileNum)).ToList();
            foreach (var item in dto.InventoryUpdateItems)
            {
                if (item == null) continue;
                var sku = findSku.FindBySku(item.SKU);
                if (sku == null || sku.FoundSKU.IsZero()) continue;
                item.SKU = sku.FoundSKU;
            }

            // find inventory data
            var find = dto.InventoryUpdateItems.Select(x => new InventoryFindClass() { SKU = x.SKU, WarehouseCode = x.WarehouseCode }).ToList();
            var notExistSkus = await inventoryService.FindNotExistSkuWarehouseAsync(find, masterAccountNum, profileNum);
            if (notExistSkus == null || notExistSkus.Count == 0)
                return true;

            var rtn = true;
            foreach (var item in dto.InventoryUpdateItems)
            {
                if (item == null || item.SKU.IsZero()) continue;

                if (notExistSkus.FindBySkuWarehouse(item.SKU, item.WarehouseCode) != null)
                {
                    await inventoryService.AddNewProductOrInventoryAsync(new ProductBasic()
                    {
                        DatabaseNum = header.DatabaseNum.ToInt(),
                        MasterAccountNum = header.MasterAccountNum.ToInt(),
                        ProfileNum = header.ProfileNum.ToInt(),
                        SKU = item.SKU,
                    });
                }
            }
            return rtn;
        }

    }
}



