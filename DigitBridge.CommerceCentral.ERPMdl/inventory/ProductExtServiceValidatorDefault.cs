    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default InventoryService Validator class.
    /// </summary>
    public partial class ProductExtServiceValidatorDefault :InventoryServiceValidatorDefault
    {
        public ProductExtServiceValidatorDefault():base() { }
        public ProductExtServiceValidatorDefault(IMessage serviceMessage, IDataBaseFactory dbFactory) 
        { 
            ServiceMessage = serviceMessage; 
            this.dbFactory = dbFactory;
        }

        public override bool ValidateAccount(IPayload payload, string number = null, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            var pl = payload as InventoryPayload;
            var dto = pl.Inventory;

            using (var tx = new ScopedTransaction(dbFactory))
            {
                isValid = InventoryServiceHelper.ExistNumber(dto.ProductExt.SKU, pl.MasterAccountNum, pl.ProfileNum);
            }
            if (!isValid)
                AddError($"Data not found.");

            dto.ProductExt.MasterAccountNum = pl.MasterAccountNum;
            dto.ProductExt.ProfileNum = pl.ProfileNum;
            dto.ProductExt.DatabaseNum = pl.DatabaseNum;
            return isValid;
        }

        public override async Task<bool> ValidateAccountAsync(IPayload payload, string number = null, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            var pl = payload as InventoryPayload;
            var dto = pl.Inventory;

            using (var tx = new ScopedTransaction(dbFactory))
            {
                isValid =await InventoryServiceHelper.ExistNumberAsync(dto.ProductExt.SKU, pl.MasterAccountNum, pl.ProfileNum);
            }
            dto.ProductExt.MasterAccountNum = pl.MasterAccountNum;
            dto.ProductExt.ProfileNum = pl.ProfileNum;
            dto.ProductExt.DatabaseNum = pl.DatabaseNum;
            if (!isValid)
                AddError($"Data not found.");
            return isValid;
        }

        #region validate data

        public override bool Validate(InventoryData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var dbFactory = data.dbFactory;
            if (data.ProductBasic.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.ProductBasic.RowNum} not found.");
                return IsValid;
            }

            if (data.ProductBasic.RowNum != 0 && !dbFactory.Exists<ProductBasic>(data.ProductBasic.RowNum))
            {
                IsValid = false;
                AddError($"RowNum: {data.ProductBasic.RowNum} not found.");
                return IsValid;
            }
            return true;
        }
        #endregion

        #region Async validate data

        public override async Task<bool> ValidateAsync(InventoryData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            Clear();

            var dbFactory = data.dbFactory;
            if (data.ProductBasic.RowNum == 0)
            {
                IsValid = false;
                AddError($"RowNum: {data.ProductBasic.RowNum} not found.");
                return IsValid;
            }

            if (data.ProductBasic.RowNum != 0 && !(await dbFactory.ExistsAsync<ProductBasic>(data.ProductBasic.RowNum)))
            {
                IsValid = false;
                AddError($"RowNum: {data.ProductBasic.RowNum} not found.");
                return IsValid;
            }
            return true;
        }
        #endregion Async validate data

        #region Validate dto (invoke this before data loaded)
        /// <summary>
        /// Validate dto.
        /// </summary>
        /// <param name="dto"></param>
        /// <param name="dbFactory"></param>
        /// <param name="processingMode"></param>
        /// <returns></returns>
        public override bool Validate(InventoryDataDto dto, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            if (dto is null)
            {
                isValid = false;
                AddError($"Data not found");
            }
            if (string.IsNullOrEmpty(dto.ProductExt?.SKU))
            {
                isValid = false;
                AddError($"SKU is required.");
            }
            IsValid=isValid;
            return isValid;
        }
        #endregion

        #region async Validate dto (invoke this before data loaded)
        /// <summary>
        /// Validate dto.
        /// </summary>
        /// <param name="dto"></param>
        /// <param name="dbFactory"></param>
        /// <param name="processingMode"></param>
        /// <returns></returns>
        public override async Task<bool> ValidateAsync(InventoryDataDto dto, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var isValid = true;
            if (dto is null)
            {
                isValid = false;
                AddError($"Data not found");
            }
            if (string.IsNullOrEmpty(dto.ProductExt?.SKU))
            {
                isValid = false;
                AddError($"SKU is required.");
            }
            IsValid =isValid;
            return isValid;
        }
        #endregion

    }
}



