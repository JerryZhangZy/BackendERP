

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using System.Text;
using System.Xml.Serialization;
using Newtonsoft.Json;
using DigitBridge.Base.Utility.Enums;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class InventoryService
    {

        protected WarehouseService _warehouseService;
        [XmlIgnore, JsonIgnore]
        public WarehouseService warehouseService
        {
            get
            {
                if (_warehouseService is null)
                    _warehouseService = new WarehouseService(dbFactory);
                return _warehouseService;
            }
        }

        #region override methods

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override InventoryService Init()
        {
            base.Init();
            SetDtoMapper(new InventoryDataDtoMapperDefault());
            SetCalculator(new InventoryServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new InventoryServiceValidatorDefault(this, this.dbFactory));
            return this;
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override async Task BeforeSaveAsync()
        {
            try
            {
                await base.BeforeSaveAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override void BeforeSave()
        {
            try
            {
                base.BeforeSave();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override async Task AfterSaveAsync()
        {
            try
            {
                await base.AfterSaveAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override void AfterSave()
        {
            try
            {
                base.AfterSave();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override async Task SaveSuccessAsync()
        {
            try
            {
                await base.SaveSuccessAsync();
                if (this.ProcessMode == ProcessingMode.Add && this.Data != null)
                {
                    await ResetProductExtCentralProductNumAsync(
                        this.Data.ProductExt.ProductUuid,
                        this.Data.ProductExt.MasterAccountNum,
                        this.Data.ProductExt.ProfileNum
                        );
                }
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override void SaveSuccess()
        {
            try
            {
                base.SaveSuccess();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Sub class should override this method to return new ActivityLog object for service
        /// </summary>
        protected override ActivityLog GetActivityLog() =>
            new ActivityLog(dbFactory)
            {
                Type = (int)ActivityLogType.Inventory,
                Action = (int)this.ProcessMode,
                LogSource = "InventoryService",

                MasterAccountNum = this.Data.ProductBasic.MasterAccountNum,
                ProfileNum = this.Data.ProductBasic.ProfileNum,
                DatabaseNum = this.Data.ProductBasic.DatabaseNum,
                ProcessUuid = this.Data.ProductBasic.ProductUuid,
                ProcessNumber = this.Data.ProductBasic.SKU,
                ChannelNum = 0,
                ChannelAccountNum = 0,

                LogMessage = string.Empty
            };

        #endregion override methods


        public virtual bool GetDataBySku(string sku, int masterAccountNum, int profileNum)
        {
            long rowNum = 0;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNum = InventoryServiceHelper.GetRowNumBySku(sku, masterAccountNum, profileNum);
            }
            return GetData(rowNum);
        }

        public virtual async Task<bool> GetDataBySkuAsync(string sku, int masterAccountNum, int profileNum)
        {
            long rowNum = 0;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                rowNum = await InventoryServiceHelper.GetRowNumBySkuAsync(sku, masterAccountNum, profileNum);
            }
            if (rowNum <= 0)
            {
                AddError($"Data not found for {sku}.");
                return false;
            }
            return await GetDataAsync(rowNum);
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(InventoryDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            await IgnoreAddExistProductBasic();

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result = await SaveDataAsync();
            return result;
        }

        public virtual async Task<bool> AddAsync(InventoryPayload payload)
        {
            if (payload is null || !payload.HasInventory || !payload.Inventory.HasProductExt)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Inventory)))
                return false;

            // load data from dto
            FromDto(payload.Inventory);

            await IgnoreAddExistProductBasic();

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }



        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddInventoryAsync(InventoryDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();


            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            Data.AddIgnoreSave(InventoryData.ProductBasicTable);
            Data.AddIgnoreSave(InventoryData.ProductExtTable);
            Data.AddIgnoreSave(InventoryData.ProductExtAttributesTable);
            Data.AddIgnoreSave(InventoryData.InventoryAttributesTable);
            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result = await SaveDataAsync();
            return result;
        }


        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InventoryDataDto dto)
        {
            if (dto is null || !dto.HasProductBasic)
                return false;

            //set edit mode before validate
            Edit();

            if (!(await ValidateAsync(dto)))
                return false;

            var find = new ProductFindClass()
            {
                MasterAccountNum = (dto.ProductBasic == null) ? dto.ProductExt.MasterAccountNum.ToInt() : dto.ProductBasic.MasterAccountNum.ToInt(),
                ProfileNum = (dto.ProductBasic == null) ? dto.ProductExt.ProfileNum.ToInt() : dto.ProductBasic.ProfileNum.ToInt(),
                SKU = (dto.ProductBasic == null || string.IsNullOrEmpty(dto.ProductBasic.SKU)) ? dto.ProductExt.SKU : dto.ProductBasic.SKU,
            };
            var rowNum = await GetRowNumByProductFindAsync(find);

            if (rowNum <= 0 || (await EditAsync(rowNum)))
            {
                AddError($"SKU {find.SKU} not found.");
                return false;
            }

            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result = await SaveDataAsync();
            return result;
        }

        public async Task<bool> AddWithoutValidateAsync(InventoryDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            // load data from dto
            FromDto(dto);

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InventoryPayload payload)
        {
            if (payload is null || !payload.HasInventory)
                return false;

            //set edit mode before validate
            Edit();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.Inventory)))
                return false;

            var find = new ProductFindClass()
            {
                //MasterAccountNum = (payload.Inventory.ProductBasic == null) ? payload.Inventory.ProductExt.MasterAccountNum.ToInt() : payload.Inventory.ProductBasic.MasterAccountNum.ToInt(),
                MasterAccountNum = payload.MasterAccountNum,
                //ProfileNum = (payload.Inventory.ProductBasic == null) ? payload.Inventory.ProductExt.ProfileNum.ToInt() : payload.Inventory.ProductBasic.ProfileNum.ToInt(),
                ProfileNum = payload.ProfileNum,
                SKU = (payload.Inventory.ProductBasic == null || string.IsNullOrEmpty(payload.Inventory.ProductBasic.SKU)) ? payload.Inventory.ProductExt.SKU : payload.Inventory.ProductBasic.SKU,
            };
            var rowNum = await GetRowNumByProductFindAsync(find);

            if (rowNum <= 0 ||!(await EditAsync(rowNum)))
            {
                AddError($"SKU {find.SKU} not found.");
                return false;
            }

            // load data from dto
            FromDto(payload.Inventory);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result = await SaveDataAsync();
            return result;
        }

        public async Task<bool> DeleteBySkuAsync(InventoryPayload payload, string sku)
        {
            if (string.IsNullOrEmpty(sku))
                return false;
            Delete();
            if (!(await ValidateAccountAsync(payload, sku)))
                return false;

            var rowNum = await this.GetRowNumByProductFindAsync(new ProductFindClass()
            {
                MasterAccountNum = payload.MasterAccountNum,
                ProfileNum = payload.ProfileNum,
                SKU = sku,
            });
            if (rowNum.IsZero() || !(await GetDataAsync(rowNum)))
            {
                AddError($"Sku {sku} not found.");
                return false;
            }

            if (!(await CheckSkuAllowDeleteAsync(this.Data)))
                return false;

            return await DeleteDataAsync();
        }

        public InventoryPayload GetInventoryBySkuArray(InventoryPayload payload)
        {
            if (!payload.HasSkus)
                return payload;
            var list = new List<InventoryDataDto>();
            var msglist = new List<MessageClass>();
            var rowNumList = new List<long>();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                rowNumList = InventoryServiceHelper.GetRowNumsBySkus(payload.Skus, payload.MasterAccountNum, payload.ProfileNum);
            }
            foreach (var rownum in rowNumList)
            {
                if (GetData(rownum))
                    list.Add(ToDto());
            }
            payload.Inventorys = list;
            payload.Messages = msglist;
            return payload;
        }

        public async Task<InventoryPayload> GetInventoryBySkuArrayAsync(InventoryPayload payload)
        {
            if (!payload.HasSkus)
                return payload;
            var list = new List<InventoryDataDto>();
            var msglist = new List<MessageClass>();
            var rowNumList = new List<long>();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                rowNumList = await InventoryServiceHelper.GetRowNumsBySkusAsync(payload.Skus, payload.MasterAccountNum, payload.ProfileNum);
            }
            foreach (var rownum in rowNumList)
            {
                if (await GetDataAsync(rownum))
                    list.Add(ToDto());
            }
            payload.Inventorys = list;
            payload.Messages = msglist;
            return payload;
        }

        public bool GetInventoryBySku(InventoryPayload payload, string sku)
        {
            return GetDataBySku(sku, payload.MasterAccountNum, payload.ProfileNum);
        }

        public async Task<bool> GetInventoryBySkuAsync(InventoryPayload payload, string sku)
        {
            return await GetDataBySkuAsync(sku, payload.MasterAccountNum, payload.ProfileNum);
        }

        public List<Inventory> GetInventoriesBySkus(IList<string> skus, string warehouseCode)
        {
            return dbFactory.Find<Inventory>("WHERE WarehouseCode=@0 AND (EXISTS (SELECT * FROM @1 _SKU WHERE _SKU.item = [SKU]))",
                warehouseCode.ToSqlParameter("WarehouseCode"), skus.ToParameter<string>("SKU")).ToList();
        }
        public Inventory GetInventoryBySku(string sku, string warehouseCode)
        {
            return dbFactory.Find<Inventory>("WHERE WarehouseCode=@0 AND SKU=@1",
                warehouseCode.ToSqlParameter("WarehouseCode"), sku.ToSqlParameter("SKU")).FirstOrDefault();
        }

        public Inventory GetInventoryBySkuWithWarehouseUuid(string sku, string warehouseUuid)
        {
            return dbFactory.Find<Inventory>("WHERE WarehouseUuid=@0 AND SKU=@1",
                warehouseUuid.ToSqlParameter("WarehouseUuid"), sku.ToSqlParameter("SKU")).FirstOrDefault();
        }

        public Inventory GetInventoryByInventoryUuid(string inventoryUuid)
        {
            return dbFactory.Find<Inventory>("WHERE InventoryUuid=@0", inventoryUuid.ToSqlParameter("InventoryUuid")).FirstOrDefault();
        }

        public Inventory GetInventory(InventoryData inventoryData, dynamic sourceData, SKUType skuType = SKUType.GeneralMerchandise)
        {
            var inventory = new Inventory();
            if (inventoryData == null || inventoryData.Inventory == null || inventoryData.Inventory.Count == 0) return inventory;
            //TODO Add this logic.
            if (sourceData.InventoryUuid != null)
            {
                inventory = inventoryData.Inventory.Where(i => i.InventoryUuid == sourceData.InventoryUuid).FirstOrDefault();
            }
            else
            {
                switch (skuType)
                {
                    //TODO get inventory by sku type.
                    //case SKUType.ApparelAndShoes: inventory=  inventoryData.Inventory.Where(i => i.SKU == sourceData.SKU && i.WarehouseCode == sourceData.WarehouseCode &&i.ColorPatternCode==sourceData.ColorPatternCode).FirstOrDefault();break;
                    //case SKUType.FoodAndVitamin: inventory=  inventoryData.Inventory.Where(i => i.SKU == sourceData.SKU && i.WarehouseCode == sourceData.WarehouseCode).FirstOrDefault();break;
                    //case SKUType.ElectronicAndComputer: inventory=  inventoryData.Inventory.Where(i => i.SKU == sourceData.SKU && i.WarehouseCode == sourceData.WarehouseCode).FirstOrDefault();break;
                    //case SKUType.Application: inventory=  inventoryData.Inventory.Where(i => i.SKU == sourceData.SKU && i.WarehouseCode == sourceData.WarehouseCode).FirstOrDefault();break;
                    //case SKUType.Furniture: inventory=  inventoryData.Inventory.Where(i => i.SKU == sourceData.SKU && i.WarehouseCode == sourceData.WarehouseCode).FirstOrDefault();break;
                    default: inventory = inventoryData.Inventory.Where(i => i.SKU == sourceData.SKU && i.WarehouseCode == sourceData.WarehouseCode).FirstOrDefault(); break;
                }
            }
            if (inventory == null)
                inventory = new Inventory();
            return inventory;
        }

        public async Task<bool> SyncInventoryAvQtyToProductDistributionCenterQuantityAsync(InventoryPayload payload)
        {
            try
            {
                    var sql = $@"
update pdcq set 
                pdcq.AvailableQuantity= iv.Instock-iv.OpenSoQty-iv.OpenFulfillmentQty
from
     ProductDistributionCenterQuantity pdcq
         inner join DistributionCenter dc on DC.DistributionCenterNum = pdcq.DistributionCenterNum
         inner join ProductBasic pb on pb.CentralProductNum = pdcq.CentralProductNum
         inner join Inventory iv on iv.ProductUuid=pb.ProductUuid and iv.WarehouseUuid=dc.DistributionCenterUuid
where 
    pdcq.MasterAccountNum={payload.MasterAccountNum} and pdcq.ProfileNum={payload.ProfileNum}
    AND (pdcq.AvailableQuantity != iv.Instock-iv.OpenSoQty-iv.OpenFulfillmentQty OR (pdcq.AvailableQuantity IS NULL AND iv.Instock-iv.OpenSoQty-iv.OpenFulfillmentQty IS NOT NULL));";
                payload.SyncInventoryAvQtyCount = await dbFactory.Db.ExecuteAsync(sql);
                return true;
            }
            catch (Exception ex)
            {
                AddError(ex.Message);
                return false;
            }
        }

        public async Task<bool> UpdatAvgCostByPoReceiveAsync(PoTransactionData data)
        {
            //if (data == null || data.PoTransaction == null||!data.FirstAPReceiveStatus)
            //    return false;
            if (data == null || data.PoTransaction == null)
                return false;

            var header = data.PoTransaction;
            if (data.PoTransactionItems == null || data.PoTransactionItems.Count == 0)
            {
                return true;
            }
            foreach (var items in data.PoTransactionItems)
            {
                var inventory = GetInventoryByInventoryUuid(items.InventoryUuid);
                if (inventory == null)
                    continue;
                var itemCost = new ItemCostClass(inventory);

                var cost = itemCost.CalculateAvgCost(new ItemCostClass(items));
                await UpdateAvgCostAsync(cost);
            }

            return true;
        }

        public bool UpdatAvgCostByPoReceive(PoTransactionData data)
        {
            if (data == null || data.PoTransaction == null || !data.FirstAPReceiveStatus)
                return false;
            var header = data.PoTransaction;
            if (data.PoTransactionItems == null || data.PoTransactionItems.Count == 0)
            {
                return true;
            }
            foreach (var items in data.PoTransactionItems)
            {
                var inventory = GetInventoryByInventoryUuid(items.InventoryUuid);
                if (inventory == null)
                    continue;
                var itemCost = new ItemCostClass(inventory);
                var cost = itemCost.CalculateAvgCost(new ItemCostClass(items));
                UpdateAvgCost(cost);
            }

            return true;
        }

        private void UpdateAvgCost(string inventoryUuid, decimal avgCost, decimal baseCost)
        {
            dbFactory.Db.Execute("UPDATE Inventory SET AvgCost=@0 AND BaseCost=@1 WHERE InventoryUuid = @2", avgCost.ToSqlParameter("AvgCost"), baseCost.ToSqlParameter("BaseCost"), inventoryUuid.ToSqlParameter("inventoryUuid"));
        }

        private async Task UpdateAvgCostAsync(string inventoryUuid, decimal avgCost, decimal baseCost)
        {
            await dbFactory.Db.ExecuteAsync("UPDATE Inventory SET AvgCost=@0 AND BaseCost=@1 WHERE InventoryUuid = @2", avgCost.ToSqlParameter("AvgCost"), baseCost.ToSqlParameter("BaseCost"), inventoryUuid.ToSqlParameter("inventoryUuid"));
        }

        private void UpdateAvgCost(ItemCostClass cost)
        {
            dbFactory.Db.Execute("UPDATE Inventory SET AvgCost=@0 AND BaseCost=@1 WHERE InventoryUuid = @2", cost.AvgCost.ToSqlParameter("AvgCost"), cost.BaseCost.ToSqlParameter("BaseCost"), cost.InventoryUuid.ToSqlParameter("inventoryUuid"));
        }

        private async Task UpdateAvgCostAsync(ItemCostClass cost)
        {
            await dbFactory.Db.ExecuteAsync("UPDATE Inventory SET AvgCost=@0 , BaseCost=@1 WHERE InventoryUuid = @2", cost.AvgCost.ToSqlParameter("AvgCost"), cost.BaseCost.ToSqlParameter("BaseCost"), cost.InventoryUuid.ToSqlParameter("inventoryUuid"));
        } 

        public void UpdateOpenSoQtyFromSalesOrderItem(string salesOrderUuid, bool isReturnBack = false)
        {
            string op = isReturnBack ? "-" : "+";
            string command = $@"
UPDATE inv SET opensoqty=inv.opensoqty{op}(COALESCE(soi.orderqty,0)-COALESCE(soi.shipqty,0)-COALESCE(soi.cancelledqty,0))
FROM inventory inv INNER JOIN
    (SELECT SUM(orderqty) as orderqty, 
            SUM(shipqty) as shipqty, 
            SUM(cancelledqty) as cancelledqty, 
            inventoryuuid FROM salesorderitems 
    WHERE SalesOrderUuid='{salesOrderUuid}'  
    GROUP BY InventoryUuid) soi
ON inv.inventoryuuid=soi.inventoryuuid
";
            dbFactory.Db.Execute(command.ToString());
        }

        public async Task UpdateOpenSoQtyFromSalesOrderItemAsync(string salesOrderUuid, bool isReturnBack = false)
        {
            string op = isReturnBack ? "-" : "+";
            string command = $@"
UPDATE inv SET opensoqty=inv.OpenPoQty{op}(COALESCE(soi.orderqty,0)-COALESCE(soi.shipqty,0)-COALESCE(soi.cancelledqty,0))
FROM inventory inv 
INNER JOIN
    (
	SELECT SUM(orderqty) as orderqty, 
		SUM(shipqty) as shipqty, 
		SUM(cancelledqty) as cancelledqty, 
		inventoryuuid 
		FROM SalesOrderHeader orderHeader
		JOIN salesorderitems orderItem on orderItem.SalesOrderUuid=orderHeader.SalesOrderUuid
	WHERE orderHeader.SalesOrderUuid='{salesOrderUuid}' AND  orderHeader.OrderStatus={(int)SalesOrderStatus.Cancelled}
	GROUP BY InventoryUuid
    ) soi
ON inv.inventoryuuid=soi.inventoryuuid
";
            await dbFactory.Db.ExecuteAsync(command.ToString());
        }

        public async Task UpdateOpenPoQtyFromPoTransactionItemAsync(string transUuid, bool isReturnBack = false)
        {
            string op = isReturnBack ? "-" : "+";
            string command = $@"
UPDATE inv SET OpenPoQty=OpenPoQty{op}COALESCE(poi.qty,0)
FROM inventory inv 
INNER JOIN
    (SELECT SUM(COALESCE(poi1.PoQty,0) - COALESCE(poi1.ReceivedQty,0) - COALESCE(poi1.CancelledQty,0)) as qty, 
        poi1.inventoryuuid 
    FROM PoItems poi1
    INNER JOIN PoTransactionItems pot ON (pot.PoItemUuid = poi1.PoItemUuid)
    WHERE pot.TransUuid='{transUuid}'  
    GROUP BY poi1.InventoryUuid
) poi
ON inv.inventoryuuid=poi.inventoryuuid
";
            await dbFactory.Db.ExecuteAsync(command.ToString());
        }


        public async Task UpdateOpenPoQtyFromPoUuidAsync(string poUuid, bool isReturnBack = false)
        {
            string op = isReturnBack ? "-" : "+";
            string command = $@"
UPDATE inv SET OpenPoQty=OpenPoQty{op}COALESCE(poi.qty,0)
FROM inventory inv 
INNER JOIN
    (SELECT SUM(COALESCE(poi1.PoQty,0) - COALESCE(poi1.ReceivedQty,0) - COALESCE(poi1.CancelledQty,0)) as qty, 
        poi1.inventoryuuid 
    FROM PoItems poi1
    WHERE poi1.PoUuid='{poUuid}'  
    GROUP BY poi1.InventoryUuid
) poi
ON inv.inventoryuuid=poi.inventoryuuid
";
            await dbFactory.Db.ExecuteAsync(command.ToString());
        }


        public virtual async Task<IList<InventoryFindClass>> FindNotExistSkuWarehouseAsync(IList<InventoryFindClass> list, int masterAccountNum, int profileNum)
        {
            if (list == null || list.Count == 0)
                return null;
            IList<InventoryFindClass> result = null;
            using (var trx = new ScopedTransaction(dbFactory))
            {
                result = await InventoryServiceHelper.FindNotExistSkuWarehouseAsync(list, masterAccountNum, profileNum);
            }
            return result;
        }


        /// <summary>
        /// Get SKU by ProductFindClass list
        /// </summary>
        public virtual async Task<IList<ProductFindClass>> FindSkuByProductFindAsync(IList<ProductFindClass> list, int masterAccountNum, int profileNum)
        {
            if (list == null || list.Count == 0)
                return null;
            IList<ProductFindClass> result;
            using (var trx = new ScopedTransaction(dbFactory))
            {
                result = await InventoryServiceHelper.FindSkuByProductFindAsync(list, masterAccountNum, profileNum);
            }
            return result;
        }

        /// <summary>
        /// Get row num by CustomerFindClass 
        /// </summary>
        public virtual async Task<long> GetRowNumByProductFindAsync(ProductFindClass find)
        {
            if (find == null)
                return 0;

            var sql = $@"
                SELECT  
                COALESCE(
                    (SELECT TOP 1 CentralProductNum FROM ProductBasic WHERE SKU != '' AND SKU=@4 AND MasterAccountNum=@0 AND ProfileNum=@1 ),
                    (SELECT TOP 1 CentralProductNum FROM ProductBasic WHERE ProductUuid != '' AND ProductUuid=@3 AND MasterAccountNum=@0 AND ProfileNum=@1 ),
                    (SELECT TOP 1 CentralProductNum FROM ProductBasic WHERE CentralProductNum != 0 AND CentralProductNum=@2 AND MasterAccountNum=@0 AND ProfileNum=@1 ),
                    (SELECT TOP 1 CentralProductNum FROM ProductBasic WHERE UPC != '' AND UPC=@5 AND MasterAccountNum=@0 AND ProfileNum=@1 ),
                    0
                )
            ";
            return (await dbFactory.GetValueAsync<Customer, long?>(
                    sql,
                    find.MasterAccountNum,      //0
                    find.ProfileNum,            //1
                    find.CentralProductNum,     //2
                    find.ProductUuid,           //3
                    find.SKU,                   //4
                    find.UPC                    //5
                )).ToLong();
        }

        /// <summary>
        /// Get CustomerData by CustomerFindClass
        /// </summary>
        public async Task<bool> GetInventoryByProductFindAsync(ProductFindClass find)
        {
            if (find == null)
                return false;

            List();
            var rowNum = await GetRowNumByProductFindAsync(find);
            if (rowNum == 0)
                return false;
            return await GetDataAsync(rowNum);
        }

        /// <summary>
        /// Add new SKU
        /// This will add productBasic first
        /// And then add ProductExt and Inventory.
        /// </summary>
        public async Task<bool> AddNewProductOrInventoryAsync(ProductBasic productBasic)
        {
            if (productBasic == null || string.IsNullOrEmpty(productBasic.SKU))
                return false;

            var rowNum = await this.GetRowNumByProductFindAsync(new ProductFindClass()
            {
                MasterAccountNum = productBasic.MasterAccountNum,
                ProfileNum = productBasic.ProfileNum,
                SKU = productBasic.SKU,
            });

            if (rowNum == 0)
                return await AddNewProductAsync(productBasic);

            if (!(await EditAsync(rowNum)))
                return false;

            var data = this.Data;
            this.DetachData(null);
            return await AddInventoryForExistProductAsync(data);
        }

        /// <summary>
        /// Add new SKU
        /// This will add productBasic first
        /// And then add ProductExt and Inventory.
        /// </summary>
        public async Task<bool> AddNewProductAsync(ProductBasic productBasic)
        {
            if (productBasic == null || string.IsNullOrEmpty(productBasic.SKU))
                return false;

            // first Add ProductBasic table
            Add();
            NewData();
            var uuid = Guid.NewGuid().ToString();
            this.Data.ProductBasic = productBasic;
            this.Data.ProductBasic.ProductUuid = uuid;

            var result = await SaveDataAsync();
            if (!result) return false;

            if (!(await EditAsync(uuid)))
                return false;

            var data = this.Data;
            this.DetachData(null);

            return await AddInventoryForExistProductAsync(data);
        }

        /// <summary>
        /// If Exist ProductBasic but not exist ProductExt or Inventory for all warehouse
        /// This will add ProductExt and Inventory for all warehouse. 
        /// </summary>
        public async Task<bool> AddInventoryForExistProductAsync(InventoryData data)
        {
            if (data == null || data.ProductBasic == null || string.IsNullOrEmpty(data.ProductBasic.SKU))
                return false;

            // check and add ProductExt record
            var changed = await CreateProductExtAsync(data);

            // check inventory has all warehouse records
            changed = await CreateInventoryAsync(data);

            if (!changed)
                return true;

            Edit();
            this.AttachData(data);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            var result = await SaveDataAsync();
            return result;
        }

        /// <summary>
        /// Check ProductExt, if Not exist ProductExt then create new ProductExt from ProductBasic
        /// </summary>
        protected async Task<bool> CreateProductExtAsync(InventoryData data)
        {
            if (data == null || data.ProductBasic == null || string.IsNullOrEmpty(data.ProductBasic.SKU))
                return false;

            // check and add ProductExt record
            if (data.ProductExt == null || string.IsNullOrEmpty(data.ProductExt.SKU))
            {
                data.ProductExt = data.NewProductExt();
                data.ProductExt.DatabaseNum = data.ProductBasic.DatabaseNum;
                data.ProductExt.MasterAccountNum = data.ProductBasic.MasterAccountNum;
                data.ProductExt.ProfileNum = data.ProductBasic.ProfileNum;
                data.ProductExt.ProductUuid = data.ProductBasic.ProductUuid;
                data.ProductExt.CentralProductNum = data.ProductBasic.CentralProductNum;
                data.ProductExt.SKU = data.ProductBasic.SKU;
                data.ProductExt.StyleCode = data.ProductBasic.SKU;
                data.ProductExt.Taxable = true;
                data.ProductExt.IsAp = false;
                data.ProductExt.IsAr = false;
                data.ProductExt.Costable = false;
                data.ProductExt.Stockable = false;
                data.ProductExt.IsProfit = false;
                data.ProductExt.Release = false;
                data.ProductExt.UOM = "EA";
                data.ProductExt.QtyPerPallot = 1;
                data.ProductExt.QtyPerCase = 1;
                data.ProductExt.QtyPerBox = 1;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Check Exist Inventory for all warehouse, if Not then create new Inventory from All warehouse
        /// </summary>
        protected async Task<bool> CreateInventoryAsync(InventoryData data)
        {
            if (data == null || data.ProductBasic == null || string.IsNullOrEmpty(data.ProductBasic.SKU))
                return false;

            // check inventory has all warehouse records
            var allWhs = await warehouseService.GetWarehouseList(data.ProductBasic.MasterAccountNum, data.ProductBasic.ProfileNum);
            if (allWhs == null || allWhs.Count <= 0) return false;

            var rtn = false;
            foreach (var whs in allWhs)
            {
                if (string.IsNullOrEmpty(whs.DistributionCenterCode)) continue;
                // add new inventory record for not exist WarehouseCode
                if (data.Inventory == null || data.Inventory.Count <= 0 || data.Inventory.FindByWarehouseCode(whs.DistributionCenterCode) == null)
                {
                    data.AddInventory(new Inventory()
                    {
                        DatabaseNum = data.ProductBasic.DatabaseNum,
                        MasterAccountNum = data.ProductBasic.MasterAccountNum,
                        ProfileNum = data.ProductBasic.ProfileNum,
                        ProductUuid = data.ProductBasic.ProductUuid,
                        InventoryUuid = Guid.NewGuid().ToString(),

                        StyleCode = data.ProductExt.StyleCode,
                        ColorPatternCode = data.ProductExt.ColorPatternCode,
                        SizeType = data.ProductExt.SizeType,
                        SizeCode = data.ProductExt.SizeCode,
                        WidthCode = data.ProductExt.WidthCode,
                        LengthCode = data.ProductExt.LengthCode,
                        PriceRule = data.ProductExt.PriceRule,
                        LeadTimeDay = data.ProductExt.LeadTimeDay,
                        PoSize = data.ProductExt.PoSize,
                        MinStock = data.ProductExt.MinStock,
                        SKU = data.ProductExt.SKU,
                        Currency = data.ProductExt.Currency,
                        UOM = data.ProductExt.UOM,
                        QtyPerPallot = data.ProductExt.QtyPerPallot,
                        QtyPerCase = data.ProductExt.QtyPerCase,
                        QtyPerBox = data.ProductExt.QtyPerBox,
                        PackType = data.ProductExt.PackType,
                        PackQty = data.ProductExt.PackQty,
                        Instock = 0,
                        OnHand = 0,
                        OpenSoQty = 0,
                        OpenFulfillmentQty = 0,
                        AvaQty = 0,
                        OpenPoQty = 0,
                        OpenInTransitQty = 0,
                        OpenWipQty = 0,
                        ProjectedQty = 0,
                        BaseCost = 0,
                        TaxRate = 0,
                        TaxAmount = 0,
                        MiscAmount = 0,
                        ChargeAndAllowanceAmount = 0,
                        UnitCost = 0,
                        AvgCost = 0,
                        SalesCost = data.ProductBasic.MSRP,

                        WarehouseUuid = whs.DistributionCenterUuid,
                        WarehouseCode = whs.DistributionCenterCode,
                        WarehouseName = whs.DistributionCenterName,
                    });
                    rtn = true;
                }
            }
            return rtn;
        }

        public virtual async Task<InventoryData> GetInventoryDataByWarehouseAsync(string sku, string warehouseCode, int masterAccountNum, int profileNum, bool addNew = true)
        {
            if (string.IsNullOrEmpty(sku) || string.IsNullOrEmpty(warehouseCode))
                return null;

            var whs = new List<string>() { warehouseCode };
            this.NewData();
            var succes = await this.GetBySkuWarhouseAsync(sku, whs, masterAccountNum, profileNum);

            // if SKU or Warehouse not exist add new sku and warehouse
            if (!succes && addNew)
            {
                if (await this.AddNewProductOrInventoryAsync(new ProductBasic()
                {
                    DatabaseNum = dbFactory.DatabaseNum,
                    MasterAccountNum = masterAccountNum,
                    ProfileNum = profileNum,
                    SKU = sku,
                }))
                {
                    succes = true;
                }
            }
            if (!succes)
            {
                AddError($"Sku {sku} or warehouse {warehouseCode} not found.");
                return null;
            }

            var data = this.Data;
            this.DetachData(null);

            return data;
        }

        /// <summary>
        /// Get Sku and some warehouse inventory data
        /// This only get specified warehouse from inventory
        /// </summary>
        public virtual async Task<bool> GetBySkuWarhouseAsync(string sku, IList<string> warehouseCode, int masterAccountNum, int profileNum)
        {
            if (string.IsNullOrEmpty(sku) || warehouseCode == null || warehouseCode.Count == 0)
                return false;
            if (this.Data == null)
                this.NewData();
            var succes = await Data.GetBySkuWarhouseAsync(sku, warehouseCode, masterAccountNum, profileNum);
            succes = (succes && Data.ProductBasic != null && Data.Inventory != null && Data.Inventory.Count > 0);
            return succes;
        }

        /// <summary>
        /// Get only ProductBasic data by Sku
        /// </summary>
        public virtual async Task<ProductBasic> GetProductBasicBySkuAsync(string sku, int masterAccountNum, int profileNum)
        {
            if (string.IsNullOrEmpty(sku))
                return null;
            if (this.Data == null)
                this.NewData();
            return await Data.GetProductBasicBySkuAsync(sku, masterAccountNum, profileNum);
        }

        /// <summary>
        /// Get Inventory list for specified warehouse only
        /// </summary>
        public virtual async Task<IList<Inventory>> GetInventoryByIdWarehouseAsync(string productUuid, IList<string> warehouseCode)
        {
            if (string.IsNullOrEmpty(productUuid) || warehouseCode == null || warehouseCode.Count == 0)
                return null;
            if (this.Data == null)
                this.NewData();
            return await Data.GetInventoryByIdWarehouseAsync(productUuid, warehouseCode);
        }

        /// <summary>
        /// Get Inventory list for specified warehouse only
        /// </summary>
        public virtual async Task<IList<Inventory>> GetInventoryBySkuWarehouseAsync(string sku, IList<string> warehouseCode, int masterAccountNum, int profileNum)
        {
            if (string.IsNullOrEmpty(sku) || warehouseCode == null || warehouseCode.Count == 0)
                return null;
            if (this.Data == null)
                this.NewData();
            return await Data.GetInventoryBySkuWarehouseAsync(sku, warehouseCode, masterAccountNum, profileNum);
        }

        public bool CreateInTransitWarehouseInventory(int masterAccountNum, int profileNum, string sku,string productUuid)
        {
            bool isExist = dbFactory.Exists<Inventory>("MasterAccountNum=@0 and ProfileNum=@1 and  SKU=@2  and WarehouseCode=@3",
                 masterAccountNum.ToSqlParameter("0"),
                 profileNum.ToSqlParameter("1"),
                 sku.ToSqlParameter("2"),
                 InTransitToWarehouse.InTransitToWarehouseCode.ToSqlParameter("3")

                 );
            if (!isExist)
            {
                Add();
                this._data.Inventory.Add(new Inventory()
                {
                    MasterAccountNum = masterAccountNum,
                    ProfileNum = profileNum,
                    InventoryUuid = masterAccountNum + "-" + profileNum + "-" +InTransitToWarehouse.InTransitToWarehouseCode,
                    SKU = sku,
                    WarehouseCode = InTransitToWarehouse.InTransitToWarehouseCode,
                    WarehouseUuid = InTransitToWarehouse.InTransitToWarehouseCode,
                    ProductUuid = productUuid
                }); 
                this._data.ProductBasic.ProductUuid = productUuid;
                this._data.ProductBasic.SKU = sku;
                this._data.ProductBasic.MasterAccountNum = masterAccountNum;
                this._data.ProductBasic.ProfileNum = profileNum;
                
                Data.AddIgnoreSave(InventoryData.ProductBasicTable);
                Data.AddIgnoreSave(InventoryData.ProductExtTable);
                Data.AddIgnoreSave(InventoryData.ProductExtAttributesTable);
                this.Data.Save();
 
            }

            return true;
        }

        /// <summary>
        /// Get Inventory list for specified warehouse only
        /// </summary>
        protected virtual async Task IgnoreAddExistProductBasic()
        {
            if (this.Data == null)
                this.NewData();

            var sku = Data.ProductBasic.SKU;
            var masterAccountNum = Data.ProductBasic.MasterAccountNum;
            var profileNum = Data.ProductBasic.ProfileNum;
            if (string.IsNullOrEmpty(sku))
                return;

            var existProductBasic = false;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                existProductBasic = await InventoryServiceHelper.ExistNumberAsync(sku, masterAccountNum, profileNum);
            }
            if (existProductBasic)
                Data.AddIgnoreSave(InventoryData.ProductBasicTable);
        }


        protected virtual async Task ResetProductExtCentralProductNumAsync(string productUuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"UPDATE pex
SET CentralProductNum = pba.CentralProductNum 
FROM ProductExt pex 
INNER JOIN ProductBasic pba ON (pba.ProductUuid = pex.ProductUuid)
WHERE pex.CentralProductNum != pba.CentralProductNum AND
pba.MasterAccountNum=@0 AND 
pba.ProfileNum=@1 AND 
pba.ProductUuid=@2
";
            await dbFactory.Db.ExecuteAsync(sql,
                masterAccountNum.ToSqlParameter("@0"),
                profileNum.ToSqlParameter("@1"),
                productUuid.ToSqlParameter("@2")
            );
        }

        public virtual async Task<bool> CheckSkuAllowDeleteAsync(InventoryData data)
        {
            if (InventoryHasQuantity(data))
            {
                AddError($"Sku {data.ProductBasic.SKU} has stock quantity, cannot delete.");
                return false;
            }
            if (await HasPIMDataAsync(data.ProductBasic.MasterAccountNum, data.ProductBasic.ProfileNum, data.ProductBasic.CentralProductNum))
            {
                AddError($"Sku {data.ProductBasic.SKU} has PIM data, cannot delete.");
                return false;
            }
            return true;
        }

        public virtual bool InventoryHasQuantity(InventoryData data)
        {
            if (data == null || data.Inventory == null || data.Inventory.Count == 0)
                return false;
            foreach (var item in data.Inventory)
            {
                if (item == null || item.IsEmpty) continue;
                if (
                    Math.Abs(item.Instock) > 0.0001m ||
                    Math.Abs(item.OpenSoQty) > 0.0001m ||
                    Math.Abs(item.OpenPoQty) > 0.0001m ||
                    Math.Abs(item.OpenWipQty) > 0.0001m
                )
                {
                    return true;
                }
            }
            return false;
        }

        public virtual async Task<bool> HasPIMDataAsync(int masterAccountNum, int profileNum, long centralPproductNum)
        {

            var sql = $@"
SELECT COALESCE(
(SELECT 1 WHERE EXISTS (SELECT * FROM ProductAttributeRelationship WHERE MasterAccountNum = @0 AND ProfileNum = @1 AND CentralProductNum = @2)),
(SELECT 1 WHERE EXISTS (SELECT * FROM ProductChannelControlFlagRelationShip WHERE MasterAccountNum = @0 AND ProfileNum = @1 AND CentralProductNum = @2)),
(SELECT 1 WHERE EXISTS (SELECT * FROM ProductMediaRelationship WHERE MasterAccountNum = @0 AND ProfileNum = @1 AND CentralProductNum = @2)),
0)
";
            var result = await dbFactory.Db.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("@0"),
                profileNum.ToSqlParameter("@1"),
                centralPproductNum.ToSqlParameter("@2")
            );
            return result > 0;
        }

    }
}



