
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Data;
using Microsoft.Data.SqlClient;

using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a InventoryHelper SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class InventoryServiceHelper
    {
        public static bool ExistNumber(string number, int masterAccountNum, int profileNum)
        {

            var sql = $@"
SELECT COUNT(1) FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND SKU = @number
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                number.ToSqlParameter("number")
            );
            return result > 0;
        }

        public static async Task<bool> ExistNumberAsync(string number, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND SKU = @number
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                number.ToSqlParameter("number")
            );
            return result > 0;
        }

        public static bool ExistId(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND ProductUuid = @uuid
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                uuid.ToSqlParameter("uuid")
            );
            return result > 0;
        }

        public static async Task<bool> ExistIdAsync(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND ProductUuid = @uuid
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                uuid.ToSqlParameter("uuid")
            );
            return result > 0;
        }

        public static bool ExistRowNum(long rowNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND CentralProductNum= @rowNum
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                rowNum.ToSqlParameter("rowNum")
            );
            return result > 0;
        }

        public static async Task<bool> ExistRowNumAsync(long rowNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND CentralProductNum= @rowNum
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                rowNum.ToSqlParameter("rowNum")
            );
            return result > 0;
        }

        public static long GetRowNumBySku(string sku, int masterAccountNum, int profileNum)
        {

            var sql = $@"
SELECT Top 1 CentralProductNum FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND SKU = @sku
";
            var result = SqlQuery.ExecuteScalar<long>(sql, CommandType.Text,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                sku.ToSqlParameter("sku")
            );
            return result;
        }

        public static async Task<long> GetRowNumBySkuAsync(string sku, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT Top 1 CentralProductNum FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND SKU = @sku
";
            var result = await SqlQuery.ExecuteScalarAsync<long>(sql, CommandType.Text,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                sku.ToSqlParameter("sku")
            );
            return result;
        }

        public static List<long> GetRowNums(int masterAccountNum, int profileNum)
        {

            var sql = $@"
SELECT CentralProductNum FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum";
            return SqlQuery.Execute(sql, (long rowNum) => rowNum,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"));
        }

        public static async Task<List<long>> GetRowNumsAsync(int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT CentralProductNum FROM ProductBasic tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum";
            return await SqlQuery.ExecuteAsync(sql, (long rowNum) => rowNum,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"));
        }
        public static List<(string,string)> GetProductUuidsByInventoryUuids(IList<string> inventoryUuids, int masterAccountNum, int profileNum)
        {
            if (inventoryUuids == null || inventoryUuids.Count == 0)
                return new List<(string,string)>();
            var sql = $@"
SELECT InventoryUuid,ProductUuid FROM Inventory tbl
WHERE MasterAccountNum=@masterAccountNum
AND ProfileNum=@pofileNum
AND (EXISTS (SELECT * FROM @InventoryUuid _InventoryUuid WHERE _InventoryUuid.item = COALESCE([InventoryUuid],'')))";

            return SqlQuery.Execute(
                sql,
                (string inventoryUuid,string productUuid)=> (inventoryUuid,productUuid),
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("pofileNum"),
                inventoryUuids.ToParameter<string>("InventoryUuid"));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="skus"></param>
        /// <param name="masterAccountNum"></param>
        /// <param name="profileNum"></param>
        /// <returns>Tuple List,(RowNum,UniqueId,Code)</returns>
        public static List<(long,string,string)> GetKeyInfoBySkus(IList<string> skus, int masterAccountNum, int profileNum)
        {
            if (skus == null || skus.Count == 0)
                return new List<(long, string, string)>();
            var sql = $@"
SELECT CentralProductNum,ProductUuid,SKU FROM ProductBasic tbl
WHERE MasterAccountNum=@masterAccountNum
AND ProfileNum=@pofileNum
AND (EXISTS (SELECT * FROM @SKU _SKU WHERE _SKU.item = COALESCE([SKU],'')))";

            return SqlQuery.Execute(
                sql,
                (long rowNum, string customerUuid, string customerCode) => (rowNum,  customerUuid, customerCode),
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("pofileNum"),
                skus.ToParameter<string>("SKU"));
        }

        public static async Task<List<(long,string,string)>> GetKeyInfoBySkusAsync(IList<string> skus, int masterAccountNum, int profileNum)
        {
            if (skus == null || skus.Count == 0)
                return new List<(long, string, string)>();
            var sql = $@"
SELECT CentralProductNum,ProductUuid,SKU FROM ProductBasic tbl
WHERE MasterAccountNum=@masterAccountNum
AND ProfileNum=@pofileNum
AND (EXISTS (SELECT * FROM @SKU _SKU WHERE _SKU.item = COALESCE([SKU],'')))";

            return await SqlQuery.ExecuteAsync(
                sql,
                (long rowNum, string customerUuid, string customerCode) => (rowNum, customerUuid, customerCode),
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("pofileNum"),
                skus.ToParameter<string>("SKU"));
        }

        public static List<long> GetRowNumsBySkus(IList<string> skus, int masterAccountNum, int profileNum)
        {
            if (skus == null || skus.Count == 0)
                return new List<long>();
            var sql = $@"
SELECT CentralProductNum FROM ProductBasic tbl
WHERE MasterAccountNum=@masterAccountNum
AND ProfileNum=@pofileNum
AND (EXISTS (SELECT * FROM @SKU _SKU WHERE _SKU.item = COALESCE([SKU],'')))";

            return SqlQuery.Execute(
                sql,
                (long rowNum) => rowNum,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("pofileNum"),
                skus.ToParameter<string>("SKU"));
        }

        public static async Task<List<long>> GetRowNumsBySkusAsync(IList<string> skus, int masterAccountNum, int profileNum)
        {
            if (skus == null || skus.Count == 0)
                return new List<long>();
            var sql = $@"
SELECT CentralProductNum FROM ProductBasic tbl
WHERE MasterAccountNum=@masterAccountNum
AND ProfileNum=@pofileNum
AND (EXISTS (SELECT * FROM @SKU _SKU WHERE _SKU.item = COALESCE([SKU],'')))";

            return await SqlQuery.ExecuteAsync(
                sql,
                (long rowNum) => rowNum,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("pofileNum"),
                skus.ToParameter<string>("SKU"));
        }
    }
}



