    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.Base.Common;
using Newtonsoft.Json.Linq;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class SystemCodesService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override SystemCodesService Init()
        {
            base.Init();
            SetDtoMapper(new SystemCodesDataDtoMapperDefault());
            SetCalculator(new SystemCodesServiceCalculatorDefault(this,this.dbFactory));
            AddValidator(new SystemCodesServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(SystemCodesDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(SystemCodesDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(SystemCodesPayload payload)
        {
            if (payload is null || !payload.HasSystemCodes)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.SystemCodes))
                return false;

            // load data from dto
            FromDto(payload.SystemCodes);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public Task<bool> GetSystemCodesBySystemCodesUuidAsync(SystemCodesPayload payload, string systemCodesCode)
        {
            throw new NotImplementedException();
        }

        public virtual async Task<bool> AddAsync(SystemCodesPayload payload)
        {
            if (payload is null || !payload.HasSystemCodes)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.SystemCodes)))
                return false;

            // load data from dto
            FromDto(payload.SystemCodes);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(SystemCodesDataDto dto)
        {
            if (dto is null || !dto.HasSystemCodes)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.SystemCodes.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public Task<SystemCodesPayload> GetSystemCodessByUuidArrayAsync(SystemCodesPayload payload)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(SystemCodesDataDto dto)
        {
            if (dto is null || !dto.HasSystemCodes)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.SystemCodes.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(SystemCodesPayload payload)
        {
            if (payload is null || !payload.HasSystemCodes || payload.SystemCodes.SystemCodes.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.SystemCodes))
                return false;

            // load data 
            GetData(payload.SystemCodes.SystemCodes.RowNum.ToLong());

            // load data from dto
            FromDto(payload.SystemCodes);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public async Task DeleteByUuidAsync(SystemCodesPayload payload, string systemCodesUuid)
        {
            await dbFactory.Db.ExecuteAsync("DELETE SystemCodes WHERE SystemCodeUuid=@0", systemCodesUuid.ToSqlParameter("@0"));
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(SystemCodesPayload payload)
        {
            if (payload is null || !payload.HasSystemCodes)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.SystemCodes)))
                return false;

            // load data 
            await GetDataAsync(payload.SystemCodes.SystemCodes.RowNum.ToLong());

            // load data from dto
            FromDto(payload.SystemCodes);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(SystemCodesPayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(SystemCodesPayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(SystemCodesPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(SystemCodesPayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }



        /// <summary>
        /// Load Dto by code name
        /// If code name not exist, create new Dto object
        /// </summary>
        public virtual async Task<bool> GetByCodeNameAsync(SystemCodesPayload payload)
        {
            if (payload is null || string.IsNullOrEmpty(payload.SystemCodeName))
                return false;

            // get RowNum by SystemCodeName
            var rowNum = await GetRowNumByCodeNameAsync(payload, payload.SystemCodeName);

            // if not exist rowNum then add new record
            if (rowNum == 0 || !(await GetDataAsync(rowNum)))
            {
                if (payload.SystemCodes == null)
                    payload.SystemCodes = new SystemCodesDataDto();
                payload.SystemCodes.SystemCodes = 
                    GetNewSystemCode(payload.DatabaseNum, payload.MasterAccountNum, payload.ProfileNum, payload.SystemCodeName);
                return true;
            }
            payload.SystemCodes = this.ToDto();

            return true;
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> AddOrUpdateAsync(SystemCodesPayload payload)
        {
            if (payload is null || !payload.HasSystemCodes)
                return false;

            // get RowNum by SystemCodeName
            var rowNum = await GetRowNumByCodeNameAsync(payload, payload.SystemCodes.SystemCodes.SystemCodeName);

            // if not exist rowNum then add new record
            if (rowNum == 0)
            {
                return await AddAsync(payload);
            }
            // if exist rowNum then update record
            payload.SystemCodes.SystemCodes.RowNum = rowNum;
            return await UpdateAsync(payload);
        }

        /// <summary>
        /// Check SystemCodes record exist for code name 
        /// </summary>
        public virtual async Task<bool> ExistCodeNameAsync(SystemCodesPayload payload, string codeName)
        {
            if (string.IsNullOrEmpty(codeName))
                return false;

            return await dbFactory.ExistsAsync<SystemCodes>("MasterAccountNum=@0 AND ProfileNum=@1 AND SystemCodeName=@2"
                , payload.MasterAccountNum.ToSqlParameter("masterAccountNum")
                , payload.ProfileNum.ToSqlParameter("profileNum")
                , codeName.ToSqlParameter("codeName")
            );
        }

        /// <summary>
        /// Get row num by code name
        /// </summary>
        public virtual async Task<long> GetRowNumByCodeNameAsync(SystemCodesPayload payload, string codeName)
        {
            if (string.IsNullOrEmpty(codeName))
                return 0;

            return (await dbFactory.GetValueAsync<SystemCodes, long?>(
                "SELECT TOP 1 RowNum FROM SystemCodes WHERE MasterAccountNum=@0 AND ProfileNum=@1 AND SystemCodeName=@2 ",
                    payload.MasterAccountNum,
                    payload.ProfileNum,
                    codeName.TrimEnd()
                )).ToLong();
        }

        /// <summary>
        /// Check all defined code names, if not exist in systemCodes table, 
        /// Create new systemCodes record for that code names.
        /// </summary>
        public virtual async Task<bool> InitSystemCodesAsync(SystemCodesPayload payload)
        {
            var codes = SystemCodeNames.GetList();

            foreach (var codeName in codes)
            {
                if (string.IsNullOrEmpty(codeName)) continue;
                if ((await ExistCodeNameAsync(payload, codeName))) continue;
                var newPayload = payload.Clone<SystemCodesPayload>();
                newPayload.SystemCodes = new SystemCodesDataDto();
                newPayload.SystemCodes.SystemCodes = GetNewSystemCode(payload.DatabaseNum, payload.MasterAccountNum, payload.ProfileNum, codeName);
                await AddAsync(newPayload);
            }
            return true;
        }

        /// <summary>
        /// Get new SystemCodesDto object for one code name
        /// </summary>
        public virtual SystemCodesDto GetNewSystemCode(int databaseNum, int masterAccountNum, int profileNum, string codeName)
        {
            if (string.IsNullOrEmpty(codeName)) return null;
            return new SystemCodesDto()
                {
                    DatabaseNum = databaseNum,
                    MasterAccountNum = masterAccountNum,
                    ProfileNum = profileNum,
                    SystemCodeUuid = Guid.NewGuid().ToString(),
                    SystemCodeName = codeName,
                    Description = codeName,
                    InActive = false,
                    EffectiveStart = null,
                    EffectiveEnd = null,
                    Fields = SystemCodeNames.GetNewCodeField(codeName),
                };
        }

    }
}



