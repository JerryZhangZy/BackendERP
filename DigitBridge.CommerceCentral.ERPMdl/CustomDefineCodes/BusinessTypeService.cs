    
//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class BusinessTypeService
    {

        #region override methods

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override BusinessTypeService Init()
        {
            base.Init();
            SetDtoMapper(new BusinessTypeDataDtoMapperDefault());
            SetCalculator(new BusinessTypeServiceCalculatorDefault(this,this.dbFactory));
            AddValidator(new BusinessTypeServiceValidatorDefault(this, this.dbFactory));
            return this;
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override async Task BeforeSaveAsync() 
        {
            try
            {
                await base.BeforeSaveAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// Before update data (Add/Update/Delete). call this function to update relative data.
        /// For example: before save shipment, rollback instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// </summary>
        public override void BeforeSave() 
        {
            try
            {
                base.BeforeSave();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error before save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override async Task AfterSaveAsync() 
        {
            try
            {
                await base.AfterSaveAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// After save data (Add/Update/Delete), doesn't matter success or not, call this function to update relative data.
        /// For example: after save shipment, update instock in inventory table according to shipment table.
        /// Mostly, inside this function should call SQL script update other table depend on current database table records.
        /// So that, if update not success, database records will not change, this update still use then same data. 
        /// </summary>
        public override void AfterSave() 
        {
            try
            {
                base.AfterSave();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override async Task SaveSuccessAsync()
        {
            try
            {
                await base.SaveSuccessAsync();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Only save success (Add/Update/Delete), call this function to update relative data.
        /// For example: add activity log records.
        /// </summary>
        public override void SaveSuccess()
        {
            try
            {
                base.SaveSuccess();
            }
            catch (Exception)
            {
                AddWarning("Updating relative data caused an error after save success.");
            }
        }

        /// <summary>
        /// Sub class should override this method to return new ActivityLog object for service
        /// </summary>
        protected override ActivityLog GetActivityLog() => null;
            //new ActivityLog(dbFactory)
            //{
            //    Type = (int)ActivityLogType.Invoice,
            //    Action = (int)this.ProcessMode,
            //    LogSource = "BusinessTypeService",

            //    MasterAccountNum = this.Data.BusinessType.MasterAccountNum,
            //    ProfileNum = this.Data.BusinessType.ProfileNum,
            //    DatabaseNum = this.Data.BusinessType.DatabaseNum,
            //    ProcessUuid = this.Data.BusinessType.InvoiceUuid,
            //    ProcessNumber = this.Data.BusinessType.InvoiceNumber,
            //    ChannelNum = this.Data.BusinessType.ChannelAccountNum,
            //    ChannelAccountNum = this.Data.BusinessType.ChannelAccountNum,

            //    LogMessage = string.Empty
            //};

        #endregion override methods

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(BusinessTypeDataDto dto)
        {
            if (dto is null) 
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(BusinessTypeDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(BusinessTypePayload payload)
        {
            if (payload is null || !payload.HasBusinessType)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.BusinessType))
                return false;

            // load data from dto
            FromDto(payload.BusinessType);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(BusinessTypePayload payload)
        {
            if (payload is null || !payload.HasBusinessType)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.BusinessType)))
                return false;

            // load data from dto
            FromDto(payload.BusinessType);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(BusinessTypeDataDto dto)
        {
            if (dto is null || !dto.HasBusinessType)
                return false;
            //set edit mode before validate
            Edit();
            if (!Validate(dto))
                return false;

            // load data 
            GetData(dto.BusinessType.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(BusinessTypeDataDto dto)
        {
            if (dto is null || !dto.HasBusinessType)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAsync(dto)))
                return false;

            // load data 
            await GetDataAsync(dto.BusinessType.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(BusinessTypePayload payload)
        {
            if (payload is null || !payload.HasBusinessType || payload.BusinessType.BusinessType.RowNum.ToLong() <= 0)
                return false;
            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.BusinessType))
                return false;

            // load data 
            GetData(payload.BusinessType.BusinessType.RowNum.ToLong());

            // load data from dto
            FromDto(payload.BusinessType);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(BusinessTypePayload payload)
        {
            if (payload is null || !payload.HasBusinessType)
                return false;
            //set edit mode before validate
            Edit();
            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.BusinessType)))
                return false;

            // load data 
            await GetDataAsync(payload.BusinessType.BusinessType.RowNum.ToLong());

            // load data from dto
            FromDto(payload.BusinessType);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        ///  get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> GetDataAsync(BusinessTypePayload payload, string orderNumber)
        {
            return await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// get data by number
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool GetData(BusinessTypePayload payload, string orderNumber)
        {
            return GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual async Task<bool> DeleteByNumberAsync(BusinessTypePayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = await GetByNumberAsync(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        /// <summary>
        /// Delete data by number
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public virtual bool DeleteByNumber(BusinessTypePayload payload, string orderNumber)
        {
            if (string.IsNullOrEmpty(orderNumber))
                return false;
            //set delete mode
            Delete();
            //load data
            var success = GetByNumber(payload.MasterAccountNum, payload.ProfileNum, orderNumber);
            success = success && DeleteData();
            return success;
        }

        List<BusinessTypeDataDto> GetBusinessTypeData(int masterAccountNum, int profileNum)
        {
            List();
            var list = Data.GetBusinessTypes(masterAccountNum, profileNum);
            return list.Select(l =>
                DtoMapper.WriteDto(
                    new BusinessTypeData { BusinessType = l },
                    new BusinessTypeDataDto())
                ).ToList();
        }

        public bool GetBusinessTypes(BusinessTypePayload payload)
        {
            int masterAccountNum = payload.MasterAccountNum;
            int profileNum = payload.ProfileNum;
            try
            {
                payload.BusinessTypes = GetBusinessTypeData(masterAccountNum, profileNum);
                payload.Success = true;
            }
            catch (Exception ex)
            {
                payload.ReturnError(ex.Message);
            }

            return payload.Success;
        }

        public bool UpdateGetBusinessTypes(BusinessTypePayload payload)
        {
            int masterAccountNum = payload.MasterAccountNum;
            int profileNum = payload.ProfileNum;
            var list = GetBusinessTypeData(masterAccountNum, profileNum);

            try
            {
                foreach (var item in list)
                {
                    if (payload.BusinessTypes.Contains(item))
                    {
                        Update(item);
                        payload.BusinessTypes.Remove(item);
                    }
                    else
                    {
                        Delete(item.BusinessType.RowNum.ToInt());
                    }
                }

                foreach (var item in payload.BusinessTypes)
                {
                    item.BusinessType.MasterAccountNum = masterAccountNum;
                    item.BusinessType.ProfileNum = profileNum;
                    Add(item);
                }

                payload.Success = true;
                payload.BusinessTypes = GetBusinessTypeData(masterAccountNum, profileNum);
            }
            catch (Exception ex)
            {
                payload.ReturnError(ex.Message);
            }

            return payload.Success;
        }
    }
}



