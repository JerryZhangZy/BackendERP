    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Data;
using Microsoft.Data.SqlClient;

using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a PurchaseOrderHelper SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class PurchaseOrderHelper
    {
        public static bool ExistNumber(string number, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND PoNum = @number
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                number.ToSqlParameter("number")
            );
            return result > 0;
        }

        public static async Task<bool> ExistNumberAsync(string number, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND PoNum = @number
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                number.ToSqlParameter("number")
            );
            return result > 0;
        }

        public static bool ExistId(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND PoUuid = @uuid
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                uuid.ToSqlParameter("uuid")
            );
            return result > 0;
        }

        public static async Task<bool> ExistIdAsync(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND PoUuid = @uuid
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                uuid.ToSqlParameter("uuid")
            );
            return result > 0;
        }

        public static bool ExistRowNum(long rowNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND RowNum= @rowNum
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                rowNum.ToSqlParameter("rowNum")
            );
            return result > 0;
        }

        public static async Task<bool> ExistRowNumAsync(long rowNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND RowNum= @rowNum
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                rowNum.ToSqlParameter("rowNum")
            );
            return result > 0;
        }
        
        public static List<long> GetRowNums(int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT RowNum FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum";
            return SqlQuery.Execute(sql, (long rowNum) => rowNum,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"));
        }

        public static async Task<List<long>> GetRowNumsAsync(int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT RowNum FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum";
            return await SqlQuery.ExecuteAsync(sql, (long rowNum) => rowNum,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"));
        }

        public static long GetRowNumByPoNum(string poNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT Top 1 RowNum FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND PoNum = @poNum
";
            var result = SqlQuery.ExecuteScalar<long>(sql, CommandType.Text,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                poNum.ToSqlParameter("poNum")
            );
            return result;
        }

        public static List<long> GetRowNumsByPoNums(IList<string> poNums, int masterAccountNum, int profileNum)
        {
            if (poNums == null || poNums.Count == 0)
                return new List<long>();
            var sql = $@"
SELECT RowNum FROM PoHeader tbl
WHERE MasterAccountNum=@masterAccountNum
AND ProfileNum=@pofileNum
AND (EXISTS (SELECT * FROM @PoNum _PoNum WHERE _PoNum.item = [PoNum]))";

            return SqlQuery.Execute(
                sql,
                (long rowNum) => rowNum,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("pofileNum"),
                poNums.ToParameter<string>("PoNum"));
        }

        public static async Task<List<long>> GetRowNumsByPoNumsAsync(IList<string> poNums, int masterAccountNum, int profileNum)
        {
            if (poNums == null || poNums.Count == 0)
                return new List<long>();
            var sql = $@"
SELECT RowNum FROM PoHeader tbl
WHERE MasterAccountNum=@masterAccountNum
AND ProfileNum=@pofileNum
AND (EXISTS (SELECT * FROM @PoNum _PoNum WHERE _PoNum.item = [PoNum]))";

            return await SqlQuery.ExecuteAsync(
                sql,
                (long rowNum) => rowNum,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("pofileNum"),
                poNums.ToParameter<string>("PoNum"));
        }

        public static async Task<long> GetRowNumByPoNumAsync(string poNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT Top 1 RowNum FROM PoHeader tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND PoNum = @poNum
";
            var result =await SqlQuery.ExecuteScalarAsync<long>(sql, CommandType.Text,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                poNum.ToSqlParameter("poNum")
            );
            return result;
        }
        public static async Task<List<StringArray>> GetPoNumsByPoItemUuidAsync(List<StringArray> param, int masterAccountNum, int profileNum)
        {
            if (param == null || param.Count == 0)
                return new List<StringArray>(0);
            //            var sql = $@" 
            //SELECT (SELECT [PoNum]  FROM [dbo].[PoHeader] WHERE PoUuid=inv.PoUuid) as PoNum FROM [dbo].[PoItems] inv WHERE Exists (SELECT item0 AS PoItemUuid  FROM @SKUTable st WHERE inv.PoItemUuid=st.item0 ) And MasterAccountNum=@masterAccountNum and ProfileNum=@pofileNum
            //";
            var sql = $@" 
SELECT PoNum FROM [dbo].[PoHeader] inv WHERE Exists (SELECT item0 AS PoUuid  FROM @SKUTable st WHERE inv.PoUuid=st.item0 ) And MasterAccountNum=@masterAccountNum and ProfileNum=@pofileNum
";

            var sqlParameters = new IDataParameter[3]
            {
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("pofileNum"),
                param.ToStringArrayListParameters("SKUTable")
            };
            return await SqlQuery.ExecuteAsync(
                sql,
                ( string poNum) => new StringArray() { Item0 = poNum },
                sqlParameters);
        }
    }
}



