//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.CommerceCentral.YoPoco;
using Microsoft.Data.SqlClient;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public class PurchaseOrderList : SqlQueryBuilder<PurchaseOrderQuery>
    {
        public PurchaseOrderList(IDataBaseFactory dbFactory) : base(dbFactory)
        {
        }
        public PurchaseOrderList(IDataBaseFactory dbFactory, PurchaseOrderQuery queryObject)
            : base(dbFactory, queryObject)
        {
        }

        #region override methods

        protected override string GetSQL_select()
        {
            this.SQL_Select = $@"
SELECT 
{PoHeaderHelper.RowNum()}, 
{PoHeaderHelper.DatabaseNum()}, 
{PoHeaderHelper.MasterAccountNum()}, 
{PoHeaderHelper.ProfileNum()}, 
{PoHeaderHelper.PoUuid()}, 
{PoHeaderHelper.PoNum()}, 
{PoHeaderHelper.PoType()}, 
COALESCE(pott.text, '') PoTypeText, 
{PoHeaderHelper.PoStatus()}, 
COALESCE(post.text, '') PoStatusText,  
{PoHeaderHelper.PoDate()}, 
{PoHeaderHelper.EtaShipDate()}, 
{PoHeaderHelper.EtaArrivalDate()}, 
{PoHeaderHelper.CancelDate()},  
{PoHeaderHelper.PoTime()},  
{PoHeaderHelper.VendorUuid()}, 
{PoHeaderHelper.VendorNum()}, 
{PoHeaderHelper.VendorName()},  
{PoHeaderHelper.SubTotalAmount()},
{PoHeaderHelper.TotalAmount()},
{PoHeaderHelper.PoSourceCode()}, 
{PoHeaderInfoHelper.CentralOrderNum()},
{PoHeaderInfoHelper.ChannelNum()},
{PoHeaderInfoHelper.ChannelAccountNum()},
chanel.ChannelName,
channelAccount.ChannelAccountName,
{PoHeaderInfoHelper.ChannelOrderID()},
{PoHeaderInfoHelper.BillToEmail()},
{PoHeaderInfoHelper.ShipToName()}

";
            return this.SQL_Select;
        }

        protected override string GetSQL_from()
        {
            this.SQL_From = $@"
 FROM {PoHeaderHelper.TableName} {PoHeaderHelper.TableAllies} 
 LEFT JOIN {PoHeaderInfoHelper.TableName} {PoHeaderInfoHelper.TableAllies} ON ({PoHeaderInfoHelper.TableAllies}.PoUuid = {PoHeaderHelper.TableAllies}.PoUuid)
 LEFT JOIN @PoStatusText post ON ({PoHeaderHelper.TableAllies}.PoStatus = post.num)
 LEFT JOIN @PoTypeText pott ON ({PoHeaderHelper.TableAllies}.PoType = pott.num)
left join Setting_Channel chanel on ({PoHeaderInfoHelper.TableAllies}.ChannelNum = chanel.ChannelNum)
left join Setting_ChannelAccount channelAccount on ({PoHeaderInfoHelper.TableAllies}.ChannelAccountNum = channelAccount.ChannelAccountNum) 
 
";
            return this.SQL_From;
        }

        public override SqlParameter[] GetSqlParameters()
        {
            var paramList = base.GetSqlParameters().ToList();
            paramList.Add("@PoStatusText".ToEnumParameter<PoStatus>());
            paramList.Add("@PoTypeText".ToEnumParameter<PoType>());

            return paramList.ToArray();

        }


        #endregion override methods

        public virtual void GetPurchaseOrderList(PurchaseOrderPayload payload)
        {
            if (payload == null)
                payload = new PurchaseOrderPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            try
            {
                payload.PurchaseOrderListCount = Count();
                payload.Success = ExcuteJson(sb);
                if (payload.Success)
                    payload.PurchaseOrderList = sb;
            }
            catch (Exception ex)
            {
                payload.PurchaseOrderListCount = 0;
                payload.PurchaseOrderList = null;
                AddError(ex.ObjectToString());
                payload.Messages = this.Messages;
            }
        }

        public virtual async Task GetPurchaseOrderListAsync(PurchaseOrderPayload payload)
        {
            if (payload == null)
                payload = new PurchaseOrderPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            try
            {
                payload.PurchaseOrderListCount = await CountAsync();
                payload.Success = await ExcuteJsonAsync(sb);
                if (payload.Success)
                    payload.PurchaseOrderList = sb;
            }
            catch (Exception ex)
            {
                payload.PurchaseOrderListCount = 0;
                payload.PurchaseOrderList = null;
                AddError(ex.ObjectToString());
                payload.Messages = this.Messages;
            }
        }

        public virtual async Task<IList<long>> GetRowNumListAsync(PurchaseOrderPayload payload)
        {
            if (payload == null)
                payload = new PurchaseOrderPayload();

            this.LoadRequestParameter(payload);
            var rowNumList = new List<long>();

            var sql = $@"
SELECT distinct {PoHeaderHelper.TableAllies}.RowNum 
{GetSQL_from()} 
{GetSQL_where()}
ORDER BY  {PoHeaderHelper.TableAllies}.RowNum  
OFFSET {payload.FixedSkip} ROWS FETCH NEXT {payload.FixedTop} ROWS ONLY
";
            try
            {
                using (var trs = new ScopedTransaction(dbFactory))
                {
                    rowNumList = await SqlQuery.ExecuteAsync(
                    sql,
                    (long rowNum) => rowNum,
                    GetSqlParameters().ToArray()
                );
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return rowNumList;
        }

        public virtual IList<long> GetRowNumList(PurchaseOrderPayload payload)
        {
            if (payload == null)
                payload = new PurchaseOrderPayload();

            this.LoadRequestParameter(payload);
            var rowNumList = new List<long>();
            var sql = $@"
SELECT distinct {PoHeaderHelper.TableAllies}.RowNum 
{GetSQL_from()} 
{GetSQL_where()}
ORDER BY  {PoHeaderHelper.TableAllies}.RowNum  
OFFSET {payload.FixedSkip} ROWS FETCH NEXT {payload.FixedTop} ROWS ONLY
";
            try
            {
                using (var trs = new ScopedTransaction(dbFactory))
                {
                    rowNumList = SqlQuery.Execute(
                    sql,
                    (long rowNum) => rowNum,
                    GetSqlParameters().ToArray()
                );
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return rowNumList;
        }
    }
}
