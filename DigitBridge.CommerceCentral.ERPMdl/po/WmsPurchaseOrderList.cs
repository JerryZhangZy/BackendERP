//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.CommerceCentral.YoPoco;


namespace DigitBridge.CommerceCentral.ERPMdl
{
    public class WmsPurchaseOrderList : SqlQueryBuilder<WmsPurchaseOrderQuery>
    {
        public WmsPurchaseOrderList(IDataBaseFactory dbFactory) : base(dbFactory)
        {
        }
        public WmsPurchaseOrderList(IDataBaseFactory dbFactory, WmsPurchaseOrderQuery queryObject)
            : base(dbFactory, queryObject)
        {
        } 

        #region override methods

        protected override string GetSQL_select()
        {
            this.SQL_Select = $@"
SELECT 
poh.PoUuid as 'PoUuid',
poh.DatabaseNum as 'DatabaseNum',
poh.PoNum as 'PoNumber',
poh.VendorName as 'VendorName',
poh.VendorCode as 'VendorCode',
poh.PoDate as 'PoDate',
poh.CancelDate as 'CancelAfterDate',
poh.Terms as 'Terms',
pohi.WarehouseCode as 'WarehouseCode',
poh.EtaShipDate as 'RequestShipDate',
poh.EtaArrivalDate as 'ArrivalDueDate',
pohi.Notes as 'PublicNote',
--poh.PrivateNote as 'PrivateNote',
( 
    SELECT 
    poi.PoItemUuid as 'PoItemUuid',
    poi.SKU as 'SKU',
    poi.WarehouseCode as 'WarehouseCode',
    poi.Price as 'PoPrice',
    CAST(poi.PoQty as INT) as 'PoQty',
    CAST(poi.QtyForOther as INT) as 'QtyForOther',
    poi.EtaShipDate as 'LineRequestShipDate',
    poi.EtaArrivalDate as 'LineArrivalDueDate',
    poi.Notes as 'LinePublicNote',
    --poi.LinePrivateNote as 'LinePrivateNote',
    poi.Seq as 'Sequence',
    --poi.OriginaLineId as 'OriginaLineId',
    CAST(poi.ReceivedQty as INT) as 'HumanReceiveQty',
    --CAST(poi.HumanAdjustQty as INT) as 'HumanAdjustQty',
    poi.EnterDateUtc as 'EnterDate',
    prd.ProductTitle as 'Title'
    FROM PoItems poi
    LEFT JOIN ProductBasic prd
         ON ( prd.MasterAccountNum=poh.MasterAccountNum
          AND prd.ProfileNum=poh.ProfileNum
          AND prd.SKU=poi.SKU
          )
    WHERE poi.PoUuid = poh.PoUuid 
    FOR JSON PATH
) AS PoLineList  
            ";

            return this.SQL_Select;
        }

        protected override string GetSQL_from()
        {
            this.SQL_From = $@"
 FROM EventProcessERP epe
 INNER JOIN PoHeader poh  
        on  poh.MasterAccountNum=epe.MasterAccountNum
        and poh.ProfileNum=epe.ProfileNum
        and poh.PoUuid=epe.ProcessUuid
 LEFT JOIN PoHeaderInfo pohi ON (pohi.PoUuid = poh.PoUuid)
";
            return this.SQL_From;
        }

        #endregion override methods 

        public virtual void GetPurchaseOrderList(PurchaseOrderPayload payload)
        {
            if (payload == null)
                payload = new PurchaseOrderPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            try
            {
                payload.PurchaseOrderListCount = Count();
                payload.Success = ExcuteJson(sb);
                if (payload.Success)
                    payload.PurchaseOrderList = sb;
            }
            catch (Exception ex)
            {
                payload.PurchaseOrderListCount = 0;
                payload.PurchaseOrderList = null;
                AddError(ex.ObjectToString());
                payload.Success = false;
                payload.Messages = this.Messages;
            }
        }

        public virtual async Task GetPurchaseOrderListAsync(PurchaseOrderPayload payload)
        {
            if (payload == null)
                payload = new PurchaseOrderPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            try
            {
                payload.PurchaseOrderListCount = await CountAsync();
                payload.Success = await ExcuteJsonAsync(sb);
                if (payload.Success)
                    payload.PurchaseOrderList = sb;
            }
            catch (Exception ex)
            {
                payload.PurchaseOrderListCount = 0;
                payload.PurchaseOrderList = null;
                AddError(ex.ObjectToString());
                payload.Success = false;
                payload.Messages = this.Messages;
            }
        }

    }
}
