

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default SalesOrderService Calculator class.
    /// </summary>
    public partial class PurchaseOrderDtoPrepareDefault : IPrepare<PurchaseOrderService, PurchaseOrderData, PurchaseOrderDataDto>
    {
        private int _masterAccountNum;
        private int _profileNum;
        public PurchaseOrderDtoPrepareDefault(PurchaseOrderService purchaseOrderService,int masterAccountNum,int profileNum)
        {
            _purchaseOrderService = purchaseOrderService;
            this._masterAccountNum = masterAccountNum;
            this._profileNum = profileNum;
        }

        protected PurchaseOrderService _purchaseOrderService;
        protected PurchaseOrderService Service 
        { 
            get => _purchaseOrderService; 
        }
        protected IDataBaseFactory dbFactory 
        { 
            get => Service.dbFactory; 
        }
        #region message
        [XmlIgnore, JsonIgnore]
        protected IList<MessageClass> Messages
        {
            get => Service.Messages;
        }
        protected IList<MessageClass> AddInfo(string message, string code = null) => Service.AddInfo(message, code);
        protected IList<MessageClass> AddWarning(string message, string code = null) => Service.AddWarning(message, code);
        protected IList<MessageClass> AddError(string message, string code = null) => Service.AddError(message, code);
        protected IList<MessageClass> AddFatal(string message, string code = null) => Service.AddFatal(message, code);
        protected IList<MessageClass> AddDebug(string message, string code = null) => Service.AddDebug(message, code);

        #endregion message

        #region Service Property

        private VendorService _vendorService;

        protected VendorService vendorService
        {
            get
            {
                if (_vendorService is null)
                    _vendorService = new VendorService(dbFactory);
                return _vendorService;
            }
        }

        private InventoryService _inventoryService;

        protected InventoryService inventoryService
        {
            get
            {
                if (_inventoryService is null)
                    _inventoryService = new InventoryService(dbFactory);
                return _inventoryService;
            }
        }

        #endregion

        private DateTime now = DateTime.UtcNow;

        /// <summary>
        /// Check Dto data, fill customer and inventory info.
        /// </summary>
        public virtual async Task<bool> PrepareDtoAsync(PurchaseOrderDataDto dto)
        {
            if (dto == null || dto.PoHeader == null)
                return false;

            dto.PoHeader.MasterAccountNum = this._masterAccountNum;
            dto.PoHeader.ProfileNum = this._profileNum;


            // Load Vendor info to Dto 
            if (!await CheckVendorAsync(dto))
            {
                AddError($"Cannot find or create customer for {dto.PoHeader.VendorCode}.");
                return false;
            }

            // Load inventory info to Dto 
            // check sku and warehouse exist, otherwise add new SKU and Warehouse
            if (!await CheckInventoryAsync(dto))
            {
                AddError($"Cannot find or create SKU for {dto.PoHeader.PoNum}.");
            }

            return true;
        }

        #region GetDataWithCache
        /// <summary>
        /// get inventory data
        /// </summary>
        /// <param name="data"></param>
        /// <param name="sku"></param>
        /// <returns></returns>
        public virtual InventoryData GetInventoryData(PurchaseOrderData data, string sku)
        {
            var key = data.PoHeader.MasterAccountNum + "_" + data.PoHeader.ProfileNum + '_' + sku;
            return data.GetCache(key, () =>
            {
                if (inventoryService.GetByNumber(data.PoHeader.MasterAccountNum, data.PoHeader.ProfileNum, sku))
                    return inventoryService.Data;
                return null;
            });
        }
        /// <summary>
        /// get inventory data
        /// </summary>
        /// <param name="data"></param>
        /// <param name="sku"></param>
        /// <returns></returns>
        public virtual InventoryData GetInventoryData_InventoryUuid(PurchaseOrderData data, string inventoryUuid)
        {
            var key = data.PoHeader.MasterAccountNum + "_" + data.PoHeader.ProfileNum + '_' + inventoryUuid;
            return data.GetCache(key, () =>
            {
                if (inventoryService.GetDataById(inventoryUuid))
                    return inventoryService.Data;
                return null;
            });
        }
        /// <summary>
        /// Get Vendor Data by VendorCode
        /// </summary>
        /// <param name="data"></param>
        /// <param name="customerCode"></param>
        /// <returns></returns>
        public virtual VendorData GetCustomerData(PurchaseOrderData data, string vendorCode)
        {
            var key = data.PoHeader.MasterAccountNum + "_" + data.PoHeader.ProfileNum + '_' + vendorCode;
            return data.GetCache(key, () =>
            {
                if (vendorService.GetByNumber(data.PoHeader.MasterAccountNum, data.PoHeader.ProfileNum, vendorCode))
                    return vendorService.Data;
                return null;
            });
        }
        #endregion

        /// <summary>
        /// Load info from customer to Dto
        /// Try use customer uuid, code, name or phone find customer
        /// If customer code not exist, add new customer. 
        /// </summary>
        protected async Task<bool> CheckVendorAsync(PurchaseOrderDataDto dto)
        {
            if (!string.IsNullOrEmpty(dto.PoHeader.VendorCode))
                return true;

            // try to find Vendor
            var find = new VendorFindClass()
            {
                MasterAccountNum = dto.PoHeader.MasterAccountNum.ToInt(),
                ProfileNum = dto.PoHeader.ProfileNum.ToInt(),
                VendorUuid = dto.PoHeader.VendorUuid,
                VendorCode = dto.PoHeader.VendorCode,
                VendorName = dto.PoHeader.VendorName,
            };

            // if not found exist customer, add new customer
            if (!(await vendorService.GetCustomerByCustomerFindAsync(find)))
            {
                await AddNewCustomerFromDtoAsync(dto);
            }

            // load info from customer data
            var vendor = vendorService.Data.Vendor;

            dto.PoHeader.VendorUuid = vendor.VendorUuid;
            dto.PoHeader.VendorCode = vendor.VendorCode;
            dto.PoHeader.VendorName = vendor.VendorName;
 
            return true;
        }

        protected async Task<bool> AddNewCustomerFromDtoAsync(PurchaseOrderDataDto dto)
        {
            vendorService.NewData();
            var newVendor = vendorService.Data;
            newVendor.Vendor.MasterAccountNum = dto.PoHeader.MasterAccountNum.ToInt();
            newVendor.Vendor.ProfileNum = dto.PoHeader.ProfileNum.ToInt();
            newVendor.Vendor.DatabaseNum = dto.PoHeader.DatabaseNum.ToInt();
            newVendor.Vendor.VendorUuid = Guid.NewGuid().ToString();
            newVendor.Vendor.VendorCode = string.Empty;
            newVendor.Vendor.VendorName = dto.PoHeader.VendorName;
            newVendor.Vendor.VendorType = (int)VendorType.ImportNewVendor;
            newVendor.Vendor.VendorStatus = (int)VendorStatus.Active;
            newVendor.Vendor.FirstDate = DateTime.UtcNow.Date;
 
            newVendor.AddVendorAddress(new VendorAddress()
            {
                AddressCode = AddressCodeType.Ship,
                Name = dto.PoHeaderInfo.ShipToName,
                Company = dto.PoHeaderInfo.ShipToCompany,
                AddressLine1 = dto.PoHeaderInfo.ShipToAddressLine1,
                AddressLine2 = dto.PoHeaderInfo.ShipToAddressLine2,
                AddressLine3 = dto.PoHeaderInfo.ShipToAddressLine3,
                City = dto.PoHeaderInfo.ShipToCity,
                State = dto.PoHeaderInfo.ShipToState,
                StateFullName = dto.PoHeaderInfo.ShipToStateFullName,
                PostalCode = dto.PoHeaderInfo.ShipToPostalCode,
                PostalCodeExt = dto.PoHeaderInfo.ShipToPostalCodeExt,
                County = dto.PoHeaderInfo.ShipToCounty,
                Country = dto.PoHeaderInfo.ShipToCountry,
                Email = dto.PoHeaderInfo.ShipToEmail,
                DaytimePhone = dto.PoHeaderInfo.ShipToDaytimePhone,
                NightPhone = dto.PoHeaderInfo.ShipToNightPhone,
            });
            newVendor.AddVendorAddress(new VendorAddress()
            {
                AddressCode = AddressCodeType.Bill,
                Name = dto.PoHeaderInfo.BillToName,
                Company = dto.PoHeaderInfo.BillToCompany,
                AddressLine1 = dto.PoHeaderInfo.BillToAddressLine1,
                AddressLine2 = dto.PoHeaderInfo.BillToAddressLine2,
                AddressLine3 = dto.PoHeaderInfo.BillToAddressLine3,
                City = dto.PoHeaderInfo.BillToCity,
                State = dto.PoHeaderInfo.BillToState,
                StateFullName = dto.PoHeaderInfo.BillToStateFullName,
                PostalCode = dto.PoHeaderInfo.BillToPostalCode,
                PostalCodeExt = dto.PoHeaderInfo.BillToPostalCodeExt,
                County = dto.PoHeaderInfo.BillToCounty,
                Country = dto.PoHeaderInfo.BillToCountry,
                Email = dto.PoHeaderInfo.BillToEmail,
                DaytimePhone = dto.PoHeaderInfo.BillToDaytimePhone,
                NightPhone = dto.PoHeaderInfo.BillToNightPhone,
            });
            return await vendorService.AddVendorAsync(newVendor);
        }

        /// <summary>
        /// Load info from inventory to Dto
        /// Try use inventory uuid, sku, upc or phone find customer
        /// If customer code not exist, add new customer. 
        /// </summary>
        protected async Task<bool> CheckInventoryAsync(PurchaseOrderDataDto dto)
        {
            if (dto == null || dto.PoItems == null || dto.PoItems.Count == 0)
            {
                AddError($"PurchaseOrder items not found");
                return false;
            }

            var header = dto.PoHeader;
            var masterAccountNum = dto.PoHeader.MasterAccountNum.ToInt();
            var profileNum = dto.PoHeader.ProfileNum.ToInt();

            foreach (var item in dto.PoItems)
            {
                if (string.IsNullOrWhiteSpace(item.WarehouseCode))
                {
                    AddError($"PurchaseOrder items sku {item.SKU}'s WarehouseCode is null or empty");
                    return false;
                }

            }


            // find product SKU for each item
            var findSku = dto.PoItems.Select(x => new ProductFindClass() 
                { 
                    SKU = x.SKU,
                    UPC = x.SKU,
                }
            ).ToList();
            findSku = (await inventoryService.FindSkuByProductFindAsync(findSku, masterAccountNum, profileNum)).ToList();
            foreach (var item in dto.PoItems)
            {
                if (item == null) continue;
                var sku = findSku.FindBySku(item.SKU);
                if (sku == null || sku.FoundSKU.IsZero()) continue;
                item.SKU = sku.FoundSKU;
            }

            // find inventory data
            var find = dto.PoItems.Select(x => new InventoryFindClass() { SKU = x.SKU, WarehouseCode = x.WarehouseCode }).ToList();
            var notExistSkus = await inventoryService.FindNotExistSkuWarehouseAsync(find, masterAccountNum, profileNum);
            if (notExistSkus == null || notExistSkus.Count == 0)
                return true;

            var rtn = true;
            foreach (var item in dto.PoItems)
            {
                if (item == null || item.SKU.IsZero()) continue;

                if (notExistSkus.FindBySkuWarehouse(item.SKU, item.WarehouseCode) != null)
                {
                    await inventoryService.AddNewProductOrInventoryAsync(new ProductBasic()
                    {
                        DatabaseNum = header.DatabaseNum.ToInt(),
                        MasterAccountNum = header.MasterAccountNum.ToInt(),
                        ProfileNum = header.ProfileNum.ToInt(),
                        SKU = item.SKU,
                    });
                }
            }
            return rtn;
        }

    }
}



