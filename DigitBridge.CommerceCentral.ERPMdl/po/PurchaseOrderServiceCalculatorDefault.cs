

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default PurchaseOrderService Calculator class.
    /// </summary>
    public partial class PurchaseOrderServiceCalculatorDefault : ICalculator<PurchaseOrderData>
    {
        protected IDataBaseFactory dbFactory { get; set; }
        protected IPurchaseOrderService  _purchaseOrderService;
        public PurchaseOrderServiceCalculatorDefault(IPurchaseOrderService  purchaseOrderService, IDataBaseFactory dbFactory)
        {
            this.ServiceMessage = (IMessage)purchaseOrderService;
            this._purchaseOrderService = purchaseOrderService;
            this.dbFactory = dbFactory;
        }

        public virtual void PrepareData(PurchaseOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
        }

        private DateTime now = DateTime.UtcNow;

        #region Service Property

        //private CustomerService _customerService;

        //protected CustomerService customerService
        //{
        //    get
        //    {
        //        if (_customerService is null)
        //            _customerService = new CustomerService(dbFactory);
        //        return _customerService;
        //    }
        //}
        private InventoryService _inventoryService;
        protected InventoryService inventoryService => _inventoryService ??= new InventoryService(dbFactory);

        #endregion

        #region GetDataWithCache

        /// <summary>
        /// get inventory data
        /// </summary>
        /// <param name="data"></param>
        /// <param name="sku"></param>
        /// <returns></returns>
        public virtual InventoryData GetInventoryData(PurchaseOrderData data, string sku)
        {
            var header = data.PoHeader;
            var key = header.MasterAccountNum + "_" + header.ProfileNum + '_' + sku;
            return data.GetCache(key, () =>
            {
                if (inventoryService.GetByNumber(header.MasterAccountNum, header.ProfileNum, sku))
                    return inventoryService.Data;
                return null;
            });
        }
        ///// <summary>
        ///// Get Customer Data by customerCode
        ///// </summary>
        ///// <param name="data"></param>
        ///// <param name="customerCode"></param>
        ///// <returns></returns>
        //public virtual CustomerData GetCustomerData(PurchaseOrderData data, string customerCode)
        //{
        //    var header = data.PoHeader;
        //    var key = header.MasterAccountNum + "_" + header.ProfileNum + '_' + customerCode;
        //    return data.GetCache(key, () =>
        //    {
        //        customerService.GetByNumber(header.MasterAccountNum, header.ProfileNum, customerCode);
        //        return customerService.Data;
        //    });
        //}
        #endregion

        public virtual bool SetDefault(PurchaseOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            SetDefaultSummary(data, processingMode);
            SetDefaultDetail(data, processingMode);
            return true;
        }

        public virtual bool SetDefaultSummary(PurchaseOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            //TODO: add set default summary data logic
            //This is generated sample code 
            var sum = data.PoHeader;
            if (sum.PoTime.IsZero()) sum.PoTime = now.TimeOfDay;
            if (sum.PoDate.IsZero())
            {
                sum.PoDate = now.Date;
                sum.PoTime = now.TimeOfDay;
            }
            sum.UpdateDateUtc = now;
            //EnterBy
            //UpdateBy
            if (processingMode == ProcessingMode.Add)
            {
                if (string.IsNullOrEmpty(data.PoHeader.PoNum))
                {
                    data.PoHeader.PoNum =  _purchaseOrderService.GetNextNumberAsync(data.PoHeader.MasterAccountNum, data.PoHeader.ProfileNum).Result;
                }
                //for Add mode, always reset data's uuid
                data.PoHeader.PoUuid = Guid.NewGuid().ToString();
            }
            else if (processingMode == ProcessingMode.Edit)
            {
                //todo 
            }
            if (data.PoHeaderInfo != null)
            {
                data.PoHeaderInfo.UpdateDateUtc = now;
            }
            return true;
        }

        public virtual bool SetDefaultDetail(PurchaseOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null || data.PoItems == null || data.PoItems.Count == 0)
                return false;

            //TODO: add set default for detail list logic
            // This is generated sample code 
            foreach (var item in data.PoItems)
            {
                SetDefault(item, data, processingMode);
            }
            return true;
        }


        protected virtual bool SetDefault(PoItems item, PurchaseOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            item.UpdateDateUtc = now;
            if (item.PoTime.IsZero()) item.PoTime = now.TimeOfDay;
            if (item.PoDate.IsZero())
            {
                item.PoDate = now.Date;
                item.PoTime = now.TimeOfDay;
            }
            item.UpdateDateUtc = now;
            if (processingMode == ProcessingMode.Add)
            {
                item.PoItemUuid = Guid.NewGuid().ToString();
            }

            //Set SKU info
            var inventoryData = GetInventoryData(data, item.SKU);
            if (inventoryData != null)
            {
                item.ProductUuid = inventoryData.ProductBasic.ProductUuid;
                var inventory = inventoryService.GetInventory(inventoryData, item);
                item.InventoryUuid = inventory.InventoryUuid;
                item.WarehouseCode = inventory.WarehouseCode;
                item.WarehouseUuid = inventory.WarehouseUuid;
                //if (string.IsNullOrEmpty(item.Currency))
                //    item.Currency = inventory.Currency;
            }

            //var setting = new ERPSetting();
            //var sum = data.SalesOrderHeader;
            ////var prod = data.GetCache<ProductBasic>(ProductId);
            ////var inv = data.GetCache<Inventory>(InventoryId);
            ////var invCost = new ItemCostClass(inv);
            //var invCost = new ItemCostClass();

            ////InvoiceItemType
            ////InvoiceItemStatus 
            ////ShipDate
            ////EtaArrivalDate


            ////Description
            ////Notes 

            return true;
        }


        public virtual bool Calculate(PurchaseOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            PrepareData(data);
            CalculateDetail(data, processingMode);
            CalculateSummary(data, processingMode);
            return true;
        }

        public virtual bool CalculateSummary(PurchaseOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            var setting = new ERPSetting();
            var sum = data.PoHeader;

            sum.ShippingAmount = sum.ShippingAmount.ToAmount();
            sum.MiscAmount = sum.MiscAmount.ToAmount();
            sum.ChargeAndAllowanceAmount = sum.ChargeAndAllowanceAmount.ToAmount();

            // P/O level not support discount
            sum.DiscountAmount = 0;
            sum.DiscountRate = 0;

            // P/O level not support tax
            sum.TaxRate = 0;
            sum.TaxAmount = 0;

            sum.TotalAmount = (
                sum.SubTotalAmount - sum.DiscountAmount +
                sum.TaxAmount +
                sum.ShippingAmount +
                sum.MiscAmount +
                sum.ChargeAndAllowanceAmount
                ).ToAmount();

            return true;
        }

        public virtual bool CalculateDetail(PurchaseOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            var sum = data.PoHeader;
            sum.SubTotalAmount = 0;
            sum.TaxableAmount = 0;
            sum.NonTaxableAmount = 0;

            foreach (var item in data.PoItems)
            {
                if (item is null || item.IsEmpty)
                    continue;

                SetDefault(item, data, processingMode);
                CalculateDetail(item, data, processingMode);

                // sum all items EXtAmount to SubTotalAmount
                sum.SubTotalAmount += item.ExtAmount;
            }

            return true;
        }

        //TODO: add set default for detail line logic
        //This is generated sample code
        protected virtual bool CalculateDetail(PoItems item, PurchaseOrderData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (item is null || item.IsEmpty)
                return false;

            item.ItemTotalAmount = 0;
            item.TaxAmount = 0;
            item.DiscountPrice = 0;
            item.ExtAmount = 0;
            item.TaxableAmount = 0;
            item.NonTaxableAmount = 0;
            item.ShippingTaxAmount = 0;
            item.MiscTaxAmount = 0;

            var setting = new ERPSetting();
            var sum = data.PoHeader;
            //TODO need get inventory object and load inventory cost
            //var prod = data.GetCache<ProductBasic>(ProductId);
            //var inv = data.GetCache<Inventory>(InventoryId);
            //var invCost = new ItemCostClass(inv);
            var invCost = new ItemCostClass();

            // format number var
            item.Price = item.Price.ToPrice();
            item.ShippingAmount = item.ShippingAmount.ToAmount();
            item.MiscAmount = item.MiscAmount.ToAmount();
            item.ChargeAndAllowanceAmount = item.ChargeAndAllowanceAmount.ToAmount();
            item.PoQty = item.PoQty.ToQty();
            item.ReceivedQty = item.ReceivedQty.ToQty();
            item.CancelledQty = item.CancelledQty.ToQty();

            if (item.PoQty < item.ReceivedQty + item.CancelledQty)
                item.PoQty = item.ReceivedQty + item.CancelledQty;

            //PriceRule
            // if exist DiscountRate, calculate after discount unit price
            item.DiscountPrice = item.Price;
            if (!item.DiscountRate.IsZero())
            {
                item.DiscountPrice = (item.Price * (1 - item.DiscountRate.ToRate())).ToPrice();
            }
            // use after discount price to calculate ext. amount
            item.ExtAmount = (item.DiscountPrice * item.PoQty).ToAmount();
            item.ExtAmount -= item.DiscountAmount.ToAmount();

            // if item is taxable, need add taxAmount to extAmount
            if (!item.TaxRate.IsZero())
                item.TaxAmount = (item.ExtAmount * item.TaxRate).ToAmount();
            item.ExtAmount += item.TaxAmount.ToAmount();

            // this item total amount is item reference total
            item.ItemTotalAmount = item.ExtAmount;
            return true;
        }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

    }

}



