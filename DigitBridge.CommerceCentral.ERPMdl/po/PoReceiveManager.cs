//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.AspNetCore.Http;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a PurchaseOrderService.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public class PoReceiveManager : IPoReceiveManager, IMessage
    {

        public PoReceiveManager() : base() { }

        public PoReceiveManager(IDataBaseFactory dbFactory)
        {
            SetDataBaseFactory(dbFactory);
        }

        #region service

        [XmlIgnore, JsonIgnore]
        protected PurchaseOrderService _purchaseOrderService;
        [XmlIgnore, JsonIgnore]
        public PurchaseOrderService purchaseOrderService
        {
            get
            {
                if (_purchaseOrderService is null)
                    _purchaseOrderService = new PurchaseOrderService(dbFactory);
                return _purchaseOrderService;
            }
        }
         
        [XmlIgnore, JsonIgnore]
        protected PoReceiveService _poReceiveService;
        [XmlIgnore, JsonIgnore]
        public PoReceiveService PoReceiveService
        {
            get
            {
                if (_poReceiveService is null)
                    _poReceiveService = new PoReceiveService(dbFactory);
                return _poReceiveService;
            }
        } 
        #endregion

        #region Add po trans for wms po receive.

        /// <summary>
        /// Add po trans for wms po receive.
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="receiveItems"></param>
        /// <returns></returns>
        public async Task<IList<WMSPoReceivePayload>> AddTransForWMSPoReceiveAsync(PoReceivePayload payload)
        {
            var results = new List<WMSPoReceivePayload>();

            if (!payload.HasWMSPoReceiveItems)
            {
                AddError("WMSPoReceiveItems cannot be empty");
                results.Add(new WMSPoReceivePayload() { Messages = this.Messages });
                return results;
            }
            if (payload.WMSPoReceiveItems.Count(i => i.PoItemUuid.IsZero()) > 0)
            {
                AddError("PoItemUuid cannot be empty");
                results.Add(new WMSPoReceivePayload() { Messages = this.Messages });
                return results;
            }

            var poItemUuids = payload.WMSPoReceiveItems.Select(i => i.PoItemUuid).Distinct().ToList();
            // Get po data list by po item uuid list.
            var mergedPoDataList = await purchaseOrderService.GetMergedPoByPoItemUuidsAsync(payload.MasterAccountNum, payload.ProfileNum, poItemUuids);


            foreach (var mergedPoData in mergedPoDataList)
            {
                if (mergedPoData.PoItems is null || mergedPoData.PoItems.Count == 0) continue;

                var data = GetPoTransData(payload, mergedPoData);

                var success = await PoReceiveService.AddAsync(data);

                results.Add(new WMSPoReceivePayload()
                {
                    Messages = this.Messages,
                    Success = success,
                    PoItemUuidList = data.PoTransactionItems.Select(i => i.PoItemUuid).ToList(),
                    TransUuid = data.PoTransaction.TransUuid,
                });
            }
            return results;
        }

        /// <summary>
        /// Get po transaction from wms po receive items.
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="mergedPoData"></param>
        /// <returns></returns>
        protected PoTransactionData GetPoTransData(PoReceivePayload payload, PurchaseOrderData mergedPoData)
        {
            var header = mergedPoData.PoHeader;

            var data = new PoTransactionData()
            {
                PoTransaction = new PoTransaction()
                {
                    TransUuid = Guid.NewGuid().ToString(),
                    MasterAccountNum = payload.MasterAccountNum,
                    ProfileNum = payload.ProfileNum,
                    VendorCode = header.VendorCode,
                    VendorName = header.VendorName,
                    VendorUuid = header.VendorUuid,
                    PoNum = header.PoNum,
                    PoUuid = header.PoUuid,
                    TransStatus = (int)PoTransStatus.StockReceive
                },
                PurchaseOrderData = mergedPoData,
            };

            data.PoTransactionItems = new List<PoTransactionItems>();
            foreach (var item in mergedPoData.PoItems)//mergedPoData.PoItems only contain wms po receive post poitemuuid.
            {
                var wmsItems = payload.WMSPoReceiveItems.Where(i => i.PoItemUuid == item.PoItemUuid);
                foreach (var wmsItem in wmsItems)
                {
                    var transItem = new PoTransactionItems()
                    {
                        TransItemUuid = Guid.NewGuid().ToString(),
                        PoItemUuid = wmsItem.PoItemUuid,
                        TransQty = wmsItem.Qty,
                        WarehouseCode = wmsItem.WarehouseCode,
                        SKU = wmsItem.SKU,
                        Price = item.Price,
                        Currency = item.Currency,
                        Costable = item.Costable,
                        IsAp = item.IsAp,
                        Taxable = item.Taxable,
                    };
                    //transItem.SetParent(data);
                    data.PoTransactionItems.Add(transItem);
                }

            }
            return data;
        }
        #endregion

        #region DataBase
        [XmlIgnore, JsonIgnore]
        protected IDataBaseFactory _dbFactory;

        [XmlIgnore, JsonIgnore]
        public IDataBaseFactory dbFactory
        {
            get
            {
                if (_dbFactory is null)
                    _dbFactory = DataBaseFactory.CreateDefault();
                return _dbFactory;
            }
        }

        public void SetDataBaseFactory(IDataBaseFactory dbFactory)
        {
            _dbFactory = dbFactory;
        }

        #endregion DataBase

        #region Messages
        protected IList<MessageClass> _messages;
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (_messages is null)
                    _messages = new List<MessageClass>();
                return _messages;
            }
            set { _messages = value; }
        }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             Messages.Add(message, MessageLevel.Info, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Warning, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Error, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Fatal, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Debug, code);

        #endregion Messages
    }
}
