//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.AspNetCore.Http;
using DigitBridge.Base.Common;
using Newtonsoft.Json.Linq;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a PurchaseOrderService.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    public class PoReceiveManager : IPoReceiveManager, IMessage
    {

        public PoReceiveManager() : base() { }

        public PoReceiveManager(IDataBaseFactory dbFactory)
        {
            SetDataBaseFactory(dbFactory);
        }
        protected string _queueConnectionString;
        public PoReceiveManager(IDataBaseFactory dbFactory, string queueConnectionString)
        {
            SetDataBaseFactory(dbFactory);
            _queueConnectionString = queueConnectionString;
        }
        #region service

        [XmlIgnore, JsonIgnore]
        protected EventProcessERPService _eventProcessERPService;
        [XmlIgnore, JsonIgnore]
        public EventProcessERPService eventProcessERPService
        {
            get
            {
                if (_eventProcessERPService is null)
                    _eventProcessERPService = new EventProcessERPService(dbFactory, _queueConnectionString);
                return _eventProcessERPService;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected PurchaseOrderService _purchaseOrderService;
        [XmlIgnore, JsonIgnore]
        public PurchaseOrderService purchaseOrderService
        {
            get
            {
                if (_purchaseOrderService is null)
                    _purchaseOrderService = new PurchaseOrderService(dbFactory);
                return _purchaseOrderService;
            }
        }

        [XmlIgnore, JsonIgnore]
        protected PoReceiveService _poReceiveService;
        [XmlIgnore, JsonIgnore]
        public PoReceiveService PoReceiveService
        {
            get
            {
                if (_poReceiveService is null)
                    _poReceiveService = new PoReceiveService(dbFactory);
                return _poReceiveService;
            }
        }
        #endregion

        #region Add po received to eventprocess and queue

        public async Task<IList<WMSPoReceivePayload>> AddWMSPoReceiveToEventProcessAndQueueAsync(PoReceivePayload payload)
        {
            var results = new List<WMSPoReceivePayload>();
            if (!ValidateReceiveItem(payload))
            {
                results.Add(new WMSPoReceivePayload()
                {
                    Success = false,
                    Messages = this.Messages,
                });
                return results;
            }
            var vendorCodes = payload.WMSPoReceiveItems.Select(i => i.VendorCode).Distinct();

            // loop vendor to send poreceive items to eventprocess table and queue.
            foreach (var vendorCode in vendorCodes)
            {
                var items = payload.WMSPoReceiveItems.Where(i => i.VendorCode == vendorCode);
                var wmsBatchNum = items.Select(i => i.WMSBatchNum).FirstOrDefault();
                var eventProcessERP = new EventProcessERP()
                {
                    MasterAccountNum = payload.MasterAccountNum,
                    ProfileNum = payload.ProfileNum,
                    ProcessData = items.ObjectToString(),
                    ProcessUuid = wmsBatchNum,
                    ERPEventProcessType = (int)EventProcessTypeEnum.PoReceiveFromWMS,
                    ActionStatus = (int)EventProcessActionStatusEnum.Pending,
                };

                // for each shipment, create result object to hold shipment creating result
                var result = new WMSPoReceivePayload()
                {
                    WMSBatchNum = wmsBatchNum,
                    PoItemUuidList = items.Select(i => i.PoItemUuid).ToList(),
                };

                result.Success = await eventProcessERPService.AddEventAndQueueMessageAsync(eventProcessERP);
                result.Messages.Add(eventProcessERPService.Messages);

                results.Add(result);
            }
            return results;
        }

        protected bool ValidateReceiveItem(PoReceivePayload payload)
        {
            var validate = true;
            if (!payload.HasWMSPoReceiveItems)
            {
                AddError("WMSPoReceiveItems cannot be empty");
                validate = false;
            }

            if (payload.WMSPoReceiveItems.Count(i => i.PoUuid.IsZero()) > 0)
            {
                AddError("PoUuid cannot be empty");
                validate = false;
            }

            if (payload.WMSPoReceiveItems.Count(i => i.VendorCode.IsZero()) > 0)
            {
                AddError("VendorCode cannot be empty");
                validate = false;
            }

            if (payload.WMSPoReceiveItems.Count(i => i.WMSBatchNum.IsZero()) > 0)
            {
                AddError("WMSBatchNum cannot be empty");
                validate = false;
            }

            if (payload.WMSPoReceiveItems.Count(i => i.WarehouseCode.IsZero()) > 0)
            {
                AddError("WarehouseCode cannot be empty");
                validate = false;
            }
            if (payload.WMSPoReceiveItems.Count(i => i.SKU.IsZero()) > 0)
            {
                AddError("SKU cannot be empty");
                validate = false;
            }
            return validate;
        }

        #endregion

        #region Add po trans for wms po receive. 

        /// <summary>
        /// create po trans triggered by queue for wms uploaded po receive items 
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="wmsBatchNum"></param>
        /// <returns></returns>
        public async Task<bool> CreatePoTransByQueueTriggerAsync(PoReceivePayload payload, string wmsBatchNum)
        {
            payload.WMSPoReceiveItems = await GetWMSPoReceiveItems(wmsBatchNum);
            if (payload.WMSPoReceiveItems == null)
            {
                AddError($"Data not found,ProcessUuid:{wmsBatchNum}");
                payload.Success = false;
            }
            else
            {
                payload.Success = await AddPoTransAsync(payload);
            }
            if (!payload.Success)
                payload.Messages = this.Messages;
            // update all result back to event process.
            return await UpdateProcessResultAsync(payload, wmsBatchNum);
        }
        /// <summary>
        /// update process result back to  event process 
        /// </summary>
        /// <returns></returns>
        protected async Task<bool> UpdateProcessResultAsync(PoReceivePayload payload, string transUuid)
        {
            var processResult = new ProcessResult()
            {
                EventMessage = payload.HasMessages ? new JObject() { { "message", JArray.FromObject(payload.Messages) } } : null,
                ProcessUuid = transUuid,
                ProcessStatus = payload.Success ? (int)EventProcessProcessStatusEnum.Success : (int)EventProcessProcessStatusEnum.Failed
            };

            var ackPayload = new AcknowledgeProcessPayload()
            {
                MasterAccountNum = payload.MasterAccountNum,
                ProfileNum = payload.ProfileNum,
                EventProcessType = EventProcessTypeEnum.PoReceiveFromWMS,
                ProcessResults = new List<ProcessResult>()
                { processResult }
            };

            return await eventProcessERPService.UpdateProcessStatusAsync(ackPayload);
        }
        /// <summary>
        /// Get wmsPoReceiveItems from event process table.
        /// </summary>
        /// <param name="wmsBatchNum"></param>
        /// <returns></returns>
        protected async Task<IList<WMSPoReceiveItem>> GetWMSPoReceiveItems(string wmsBatchNum)
        {
            eventProcessERPService.List();
            var success = await eventProcessERPService.GetByProcessUuidAsync((int)EventProcessTypeEnum.PoReceiveFromWMS, wmsBatchNum);
            if (!success)
            {
                this.Messages.Add(eventProcessERPService.Messages);
                return null;
            }
            var wmsPoReceiveItems = (eventProcessERPService.Data?.EventProcessERP?.ProcessData).StringToObject<IList<WMSPoReceiveItem>>();
            return wmsPoReceiveItems;
        }

        /// <summary>
        /// Add po trans
        /// </summary>
        /// <param name="payload"></param>
        /// <returns></returns>
        protected async Task<bool> AddPoTransAsync(PoReceivePayload payload)
        {
            var results = new List<WMSPoReceivePayload>();
            if (!ValidateReceiveItem(payload))
            {
                return false;
            }

            var wmsBatchNum = payload.WMSPoReceiveItems.Select(i => i.WMSBatchNum).FirstOrDefault();

            if (await PoReceiveService.ExistWMSBatchNumAsync(wmsBatchNum))
            {
                AddInfo($"Data was transfered,ProcessUuid:{wmsBatchNum}");
                return true;
            }

            var poTransItems = await ConvertWmsReceiveItemsToPoTransItems(payload);

            var poUuids = payload.WMSPoReceiveItems.Select(i => i.PoUuid).Distinct();

            var poHeader = await purchaseOrderService.GetHeader(payload.MasterAccountNum, payload.ProfileNum, poUuids.FirstOrDefault());

            if (poHeader == null)
            {
                AddError($"Data not found. PoUuid:{ poUuids.FirstOrDefault()}");
                return false;
            }

            var poTrans = GetPoTransaction(payload, poHeader, poUuids.Count() > 0, wmsBatchNum);

            var poTransData = new PoTransactionData()
            {
                PoTransaction = poTrans,
                PoTransactionItems = poTransItems,
            };

            return await PoReceiveService.AddAsync(poTransData);
        }

        #region prepare po trans data

        protected async Task<IList<PoTransactionItems>> ConvertWmsReceiveItemsToPoTransItems(PoReceivePayload payload)
        {
            //get poitems 
            var poItemUuids = payload.WMSPoReceiveItems.Select(i => i.PoItemUuid).Distinct().ToList();
            var poItems = await purchaseOrderService.GetItems(payload.MasterAccountNum, payload.ProfileNum, poItemUuids);

            var poTransItems = new List<PoTransactionItems>();
            foreach (var wmsPoReceiveItem in payload.WMSPoReceiveItems)
            {
                var poItem = poItems.Where(i => i.PoItemUuid == wmsPoReceiveItem.PoItemUuid).FirstOrDefault();
                var poTransItem = GetTransactionItems(wmsPoReceiveItem, poItem);
                poTransItems.Add(poTransItem);
            }
            return poTransItems;
        }

        protected PoTransactionItems GetTransactionItems(WMSPoReceiveItem wmsPoReceiveItem, PoItems poItem)
        {
            var poTransItem = new PoTransactionItems()
            {
                TransItemUuid = Guid.NewGuid().ToString(),
                PoUuid = wmsPoReceiveItem.PoUuid,
                PoItemUuid = wmsPoReceiveItem.PoItemUuid,
                TransQty = wmsPoReceiveItem.Qty,
                WarehouseCode = wmsPoReceiveItem.WarehouseCode,
                SKU = wmsPoReceiveItem.SKU,
            };
            if (poItem != null)
            {
                poTransItem.Price = poItem.Price;
                poTransItem.Currency = poItem.Currency;
                poTransItem.Costable = poItem.Costable;
                poTransItem.IsAp = poItem.IsAp;
                poTransItem.Taxable = poItem.Taxable;
            }
            return poTransItem;
        }
        protected PoTransaction GetPoTransaction(PoReceivePayload payload, PoHeader poHeader, bool multiplePo, string wmsBatchNum)
        {
            return new PoTransaction()
            {
                TransUuid = Guid.NewGuid().ToString(),
                MasterAccountNum = payload.MasterAccountNum,
                ProfileNum = payload.ProfileNum,
                VendorUuid = poHeader.VendorUuid,
                VendorName = poHeader.VendorName,
                VendorCode = poHeader.VendorCode,
                PoNum = multiplePo ? string.Empty : poHeader.PoNum,
                PoUuid = multiplePo ? string.Empty : poHeader.PoUuid,
                TransStatus = (int)PoTransStatus.StockReceive,
                WMSBatchNum = wmsBatchNum,
            };
        }

        #endregion

        #endregion

        #region DataBase
        [XmlIgnore, JsonIgnore]
        protected IDataBaseFactory _dbFactory;

        [XmlIgnore, JsonIgnore]
        public IDataBaseFactory dbFactory
        {
            get
            {
                if (_dbFactory is null)
                    _dbFactory = DataBaseFactory.CreateDefault();
                return _dbFactory;
            }
        }

        public void SetDataBaseFactory(IDataBaseFactory dbFactory)
        {
            _dbFactory = dbFactory;
        }

        #endregion DataBase

        #region Messages
        protected IList<MessageClass> _messages;
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (_messages is null)
                    _messages = new List<MessageClass>();
                return _messages;
            }
            set { _messages = value; }
        }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             Messages.Add(message, MessageLevel.Info, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Warning, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Error, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Fatal, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
            Messages.Add(message, MessageLevel.Debug, code);

        #endregion Messages
    }
}
