

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default PoTransactionService Calculator class.
    /// </summary>
    public partial class PoReceiveServiceCalculatorDefault : ICalculator<PoTransactionData>
    {
        protected IDataBaseFactory dbFactory { get; set; }

        public PoReceiveServiceCalculatorDefault(IMessage serviceMessage, IDataBaseFactory dbFactory)
        {
            this.ServiceMessage = serviceMessage;
            this.dbFactory = dbFactory;
        }

        public virtual void PrepareData(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {

        }

        private DateTime now = DateTime.UtcNow;

        public virtual bool SetDefault(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            SetDefaultSummary(data, processingMode);
            SetDefaultDetail(data, processingMode);
            return true;
        }

        public virtual bool SetDefaultSummary(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var sum = data.PoTransaction;
            if (data is null || sum == null)
                return false;

            var poHeader = data.PurchaseOrderData.PoHeader;
            if (sum.TransTime.IsZero()) sum.TransTime = now.TimeOfDay;
            if (sum.TransDate.IsZero())
            {
                sum.TransDate = now.Date;
                sum.TransTime = now.TimeOfDay;
            }
            sum.UpdateDateUtc = now;

            if (processingMode == ProcessingMode.Add)
            {
                //set default tran num  
                if (sum.TransNum.IsZero())
                {
                    using (var tx = new ScopedTransaction(dbFactory))
                    {
                         sum.TransNum = PoTransactionHelper.GetTranSeqNum(sum.PoUuid, sum.ProfileNum.ToInt());
                    }
                }
                //for Add mode, always reset uuid
                sum.TransUuid = Guid.NewGuid().ToString();
                if (sum.VendorUuid.IsZero())
                {
                    sum.VendorUuid = poHeader.VendorUuid;
                    sum.VendorName = poHeader.VendorName;
                    sum.VendorCode = poHeader.VendorCode;
                }
                if (sum.TransDate.IsZero())
                {
                    sum.TransDate = now.Date;
                    sum.TransTime = now.TimeOfDay;
                }

                if (sum.Currency.IsZero()) sum.Currency = poHeader.Currency;
                if (sum.PoNum.IsZero()) sum.PoNum = poHeader.PoNum;
                if (sum.TaxRate.IsZero()) sum.TaxRate = poHeader.TaxRate;
                if (sum.DiscountRate.IsZero()) sum.DiscountRate = poHeader.DiscountRate;
            }

            //Set default for po
            var poData = data.PurchaseOrderData;
            sum.PoUuid = poData.PoHeader.PoUuid;
            
            //sum.DiscountAmount = poData.PoHeader.DiscountAmount;
            //sum.DiscountRate = poData.PoHeader.DiscountRate;
            //sum.TaxableAmount = poData.PoHeader.TaxableAmount;
            //sum.NonTaxableAmount = poData.PoHeader.NonTaxableAmount;
            //sum.ShippingAmount = poData.PoHeader.ShippingAmount;
            //sum.ShippingTaxAmount = poData.PoHeader.ShippingTaxAmount;
            //sum.MiscAmount = poData.PoHeader.MiscAmount;
            //sum.MiscTaxAmount = poData.PoHeader.MiscTaxAmount;
            //sum.ChargeAndAllowanceAmount = poData.PoHeader.ChargeAndAllowanceAmount;

            //sum.SalesAmount = poData.PoHeader.SalesAmount; 

            //sum.BankAccountCode = poData.PoHeader 
            //var customerData = GetCustomerData(data, poData.PoHeader.CustomerCode);
            //if (customerData != null && customerData.Customer != null)
            //{
            //    //sum.BankAccountCode
            //    //sum.BankAccountUuid
            //    //sum.CreditAccount= 
            //    //sum.PaidBy=
            //} 

            //EnterBy
            //UpdateBy 

            return true;
        }

        public virtual bool SetDefaultDetail(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null || data.PoTransactionItems == null || data.PoTransactionItems.Count == 0)
                return false;

            //TODO: add set default for detail list logic
            // This is generated sample code

            foreach (var item in data.PoTransactionItems)
            {
                SetDefault(item, data, processingMode);
            }
            return true;
        }

        //TODO: add set default for detail line logic
        //This is generated sample code
        protected virtual bool SetDefault(PoTransactionItems item, PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            item.UpdateDateUtc = now;
            if (item.ItemDate.IsZero())
            {
                item.ItemDate = now.Date;
                item.ItemTime = now.TimeOfDay;
            }

            if (processingMode == ProcessingMode.Add)
            {
                //for Add mode, always reset uuid
                item.TransItemUuid = Guid.NewGuid().ToString();
            }

            //Set default for invoice
            var poData = data.PurchaseOrderData;
            if (poData != null)
            {
                var poItem = poData.PoItems.FirstOrDefault(i => i.PoItemUuid == item.PoItemUuid);
                if (poItem != null)
                {
                    item.PoUuid = poItem.PoUuid;
                    item.WarehouseUuid = poItem.WarehouseUuid;
                    item.Description = poItem.Description;
                    item.InventoryUuid = item.InventoryUuid;
                    item.Taxable = poItem.Taxable;
                    item.LotNum = item.LotNum;
                    item.Notes = item.Notes;

                    item.ProductUuid = poItem.ProductUuid;
                    item.TaxRate = poItem.TaxRate;
                    item.SKU = poItem.SKU;
                    item.Currency = poItem.Currency;

                    item.Price = poItem.Price;
                    item.DiscountRate = poItem.DiscountRate;
                    //item.ReturnDiscountAmount = invoiceItem.DiscountAmount;// user can input this item.
                    item.Price = poItem.Price;

                    item.ShippingAmount = poItem.ShippingAmount;
                    item.ShippingTaxAmount = poItem.ShippingTaxAmount;
                    item.MiscAmount = poItem.MiscAmount;
                    item.MiscTaxAmount = poItem.MiscTaxAmount;
                    item.ChargeAndAllowanceAmount = poItem.ChargeAndAllowanceAmount;
                }
            }
            return true;
        }

        public virtual bool Calculate(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            PrepareData(data);
            CalculateDetail(data, processingMode);
            CalculateSummary(data, processingMode);
            return true;
        }

        public virtual bool CalculateSummary(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            //TODO: add calculate summary object logic
            //This is generated sample code

            var sum = data.PoTransaction;

            sum.ShippingAmount = sum.ShippingAmount.ToAmount();
            sum.ShippingTaxAmount = sum.ShippingTaxAmount.ToAmount();
            sum.TaxAmount = sum.TaxAmount.ToAmount();
            sum.DiscountAmount = sum.DiscountAmount.ToAmount();
            sum.MiscAmount = sum.MiscAmount.ToAmount();
            sum.TotalAmount = sum.TotalAmount.ToAmount();
            sum.SubTotalAmount = sum.SubTotalAmount.ToAmount();
            sum.ChargeAndAllowanceAmount = sum.ChargeAndAllowanceAmount.ToAmount();
            sum.MiscTaxAmount = sum.MiscTaxAmount.ToRate();
            sum.TaxRate = sum.TaxRate.ToRate();

            return true;
        }

        public virtual bool CalculateDetail(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;
            //TODO: add calculate summary object logic
            //This is generated sample code

            var sum = data.PoTransaction;
            //sum.SubTotalAmount = 0;
            //sum.TaxableAmount = 0;
            //sum.NonTaxableAmount = 0;
            sum.SubTotalAmount = 0;
            sum.TotalAmount = 0;
            sum.TaxAmount = 0;
            sum.DiscountAmount = 0;
            sum.ShippingTaxAmount = 0;
            sum.MiscTaxAmount = 0;
            sum.TaxRate = sum.TaxRate.ToRate();

            foreach (var item in data.PoTransactionItems)
            {
                if (item is null || item.IsEmpty)
                    continue;
                //var inv = GetInventoryData(data,item.ProductUuid);

                CalculateDetail(item, data, processingMode);
                if (item.IsAp)
                {
                    sum.SubTotalAmount += item.ExtAmount;
                }
            }

            return true;
        }

        protected virtual bool CalculateDetail(PoTransactionItems item, PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (item is null || item.IsEmpty)
                return false;

            //var setting = new ERPSetting();
            //var sum = data.InvoiceTransaction;
            ////var prod = data.GetCache<ProductBasic>(ProductId);
            ////var inv = data.GetCache<Inventory>(InventoryId);
            ////var invCost = new ItemCostClass(inv);
            //var invCost = new ItemCostClass();

            //item.Price = item.Price.ToPrice();
            //item.ShippingAmount = item.ShippingAmount.ToAmount();
            //item.MiscAmount = item.MiscAmount.ToAmount();
            //item.ChargeAndAllowanceAmount = item.ChargeAndAllowanceAmount.ToAmount(); 
            //item.StockQty = item.StockQty < 0 ? 0 : item.StockQty.ToQty();
            //item.NonStockQty = item.NonStockQty < 0 ? 0 : item.StockQty.ToQty(); 
            //item.ReceiveQty= item.StockQty + item.NonStockQty // Are they equal.?
            item.TransQty = item.TransQty < 0 ? 0 : item.TransQty.ToQty();

            //item.ExtAmount = item.ExtAmount + item.ReturnDiscountAmount;//TODO

            //// when all item return then return the invoice item discount amount. 
            //if (IsAllItemsReturned())
            //{
            //    item.ExtAmount = item.ExtAmount + item.ReturnDiscountAmount;
            //}
            //else
            //{
            //    // item.ReturnDiscountAmount defalut value is invoice item discount amount.
            //    item.ReturnDiscountAmount = 0;
            //}


            //TODO copy from invoice item  or calculate by percent receivedQty/shipQty
            //if (setting.TaxForShippingAndHandling)
            //{
            //    item.ShippingTaxAmount = (item.ShippingAmount * item.TaxRate).ToAmount();
            //    item.MiscTaxAmount = (item.MiscAmount * item.TaxRate).ToAmount();
            //}
            return true;
        }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

    }

}



