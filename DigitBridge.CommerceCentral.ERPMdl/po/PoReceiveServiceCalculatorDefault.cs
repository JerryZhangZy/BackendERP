

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;

using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a default PoTransactionService Calculator class.
    /// </summary>
    public partial class PoReceiveServiceCalculatorDefault : ICalculator<PoTransactionData>
    {
        protected IDataBaseFactory dbFactory { get; set; }

        public PoReceiveServiceCalculatorDefault(IMessage serviceMessage, IDataBaseFactory dbFactory)
        {
            this.ServiceMessage = serviceMessage;
            this.dbFactory = dbFactory;
        }

        public virtual void PrepareData(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {

        }

        private DateTime now = DateTime.Now;

        public virtual bool SetDefault(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            SetDefaultSummary(data, processingMode);
            //SetDefaultDetail(data, processingMode);
            return true;
        }

        public virtual bool SetDefaultSummary(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            var sum = data.PoTransaction;
            if (data is null || sum == null)
                return false;

            if (sum.TransTime.IsZero()) sum.TransTime = now.TimeOfDay;
            if (sum.TransDate.IsZero())
            {
                sum.TransDate = now.Date;
                sum.TransTime = now.TimeOfDay;
            }
            sum.UpdateDateUtc = now;

            if (processingMode == ProcessingMode.Add)
            {
                //set default tran num  
                if (sum.TransNum.IsZero())
                {
                    using (var tx = new ScopedTransaction(dbFactory))
                    {
                        // sum.TransNum = PoTransactionHelper.GetTranSeqNum(sum.PoNumber, sum.ProfileNum.ToInt());
                    }
                }
                //for Add mode, always reset uuid
                sum.TransUuid = Guid.NewGuid().ToString();
            }

            //Set default for po
            var poData = data.PurchaseOrderData;
            sum.PoUuid = poData.PoHeader.PoUuid;
            
            sum.Currency = poData.PoHeader.Currency; 
            //sum.DiscountAmount = poData.PoHeader.DiscountAmount;
            //sum.DiscountRate = poData.PoHeader.DiscountRate;
            //sum.TaxableAmount = poData.PoHeader.TaxableAmount;
            //sum.NonTaxableAmount = poData.PoHeader.NonTaxableAmount;
            //sum.ShippingAmount = poData.PoHeader.ShippingAmount;
            //sum.ShippingTaxAmount = poData.PoHeader.ShippingTaxAmount;
            //sum.MiscAmount = poData.PoHeader.MiscAmount;
            //sum.MiscTaxAmount = poData.PoHeader.MiscTaxAmount;
            //sum.ChargeAndAllowanceAmount = poData.PoHeader.ChargeAndAllowanceAmount;

            //sum.SalesAmount = poData.PoHeader.SalesAmount; 

            //sum.BankAccountCode = poData.PoHeader 
            //var customerData = GetCustomerData(data, poData.PoHeader.CustomerCode);
            //if (customerData != null && customerData.Customer != null)
            //{
            //    //sum.BankAccountCode
            //    //sum.BankAccountUuid
            //    //sum.CreditAccount= 
            //    //sum.PaidBy=
            //} 

            //EnterBy
            //UpdateBy 

            return true;
        }

        public virtual bool SetDefaultDetail(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            return true;
        }

        //TODO: add set default for detail line logic
        //This is generated sample code
        protected virtual bool SetDefault(PoTransactionItems item, PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            return true;
        }

        public virtual bool Calculate(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            //PrepareData(data);
            //CalculateDetail(data, processingMode);
            CalculateSummary(data, processingMode);
            return true;
        }

        public virtual bool CalculateSummary(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            if (data is null)
                return false;

            //TODO: add calculate summary object logic
            //This is generated sample code


            return true;
        }

        public virtual bool CalculateDetail(PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            return true;
        }

        protected virtual bool CalculateDetail(PoTransactionItems item, PoTransactionData data, ProcessingMode processingMode = ProcessingMode.Edit)
        {
            return true;
        }

        #region message
        [XmlIgnore, JsonIgnore]
        public virtual IList<MessageClass> Messages
        {
            get
            {
                if (ServiceMessage != null)
                    return ServiceMessage.Messages;

                if (_Messages == null)
                    _Messages = new List<MessageClass>();
                return _Messages;
            }
            set
            {
                if (ServiceMessage != null)
                    ServiceMessage.Messages = value;
                else
                    _Messages = value;
            }
        }
        protected IList<MessageClass> _Messages;
        public IMessage ServiceMessage { get; set; }
        public IList<MessageClass> AddInfo(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddInfo(message, code) : Messages.AddInfo(message, code);
        public IList<MessageClass> AddWarning(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddWarning(message, code) : Messages.AddWarning(message, code);
        public IList<MessageClass> AddError(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddError(message, code) : Messages.AddError(message, code);
        public IList<MessageClass> AddFatal(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddFatal(message, code) : Messages.AddFatal(message, code);
        public IList<MessageClass> AddDebug(string message, string code = null) =>
             ServiceMessage != null ? ServiceMessage.AddDebug(message, code) : Messages.AddDebug(message, code);

        #endregion message

    }

}



