

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class InventoryLogService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override InventoryLogService Init()
        {
            base.Init();
            SetDtoMapper(new InventoryLogDataDtoMapperDefault());
            SetCalculator(new InventoryLogServiceCalculatorDefault());
            AddValidator(new InventoryLogServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(InventoryLogDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(InventoryLogDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto).ConfigureAwait(false)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync().ConfigureAwait(false);
        }

        public virtual bool Add(InventoryLogPayload payload)
        {
            if (payload is null || !payload.HasInventoryLog)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.InventoryLog))
                return false;

            // load data from dto
            FromDto(payload.InventoryLog);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(InventoryLogPayload payload)
        {
            if (payload is null || !payload.HasInventoryLog)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload).ConfigureAwait(false)))
                return false;

            if (!(await ValidateAsync(payload.InventoryLog).ConfigureAwait(false)))
                return false;

            // load data from dto
            FromDto(payload.InventoryLog);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync().ConfigureAwait(false);
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InventoryLogDataDto dto)
        {
            if (dto is null || !dto.HasInventoryLog)
                return false;

            if (!Validate(dto))
                return false;

            // set Add mode and clear data
            Edit(dto.InventoryLog.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InventoryLogDataDto dto)
        {
            if (dto is null || !dto.HasInventoryLog)
                return false;

            if (!(await ValidateAsync(dto).ConfigureAwait(false)))
                return false;

            // set Add mode and clear data
            await EditAsync(dto.InventoryLog.RowNum.ToLong()).ConfigureAwait(false);

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InventoryLogPayload payload)
        {
            if (payload is null || !payload.HasInventoryLog || payload.InventoryLog.InventoryLog.RowNum.ToLong() <= 0)
                return false;


            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.InventoryLog))
                return false;

            // set Add mode and clear data
            Edit(payload.InventoryLog.InventoryLog.RowNum.ToLong());

            // load data from dto
            FromDto(payload.InventoryLog);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InventoryLogPayload payload)
        {
            if (payload is null || !payload.HasInventoryLog)
                return false;

            if (!(await ValidateAccountAsync(payload).ConfigureAwait(false)))
                return false;

            if (!(await ValidateAsync(payload.InventoryLog).ConfigureAwait(false)))
                return false;

            // set Add mode and clear data
            await EditAsync(payload.InventoryLog.InventoryLog.RowNum.ToLong()).ConfigureAwait(false);

            // load data from dto
            FromDto(payload.InventoryLog);

            // validate data for Add processing
            if (!(await ValidateAsync().ConfigureAwait(false)))
                return false;

            return await SaveDataAsync();
        }
        public InventoryLogPayload UpdateInventoryLogList(InventoryLogPayload payload)
        {
            if (!payload.HasInventoryLogs)
                return payload;

            var succList = new List<InventoryLogDataDto>();
            var msgList = new List<MessageClass>();
            foreach (var log in payload.InventoryLogs)
            {
                payload.InventoryLog = log;
                if (Update(payload))
                    succList.Add(ToDto());
                else
                    payload.Messages = Messages;
            }
            payload.InventoryLog = null;
            payload.InventoryLogs = succList;
            if (msgList.Count > 0)
                payload.Messages = msgList;
            return payload;
        }
        public IList<long> GetRowNumsByUuids(string logUuid)
        {
            return dbFactory.Db.Fetch<long>($"select RowNum from InventoryLog Where LogUuid='{logUuid}'");
        }
        public InventoryLogPayload DeleteByLogUuid(InventoryLogPayload payload)
        {
            if (!payload.HasInventoryLogUuids)
                return payload;

            var rowNumList = new List<long>();
            foreach (var logUuid in payload.InventoryLogUuids)
            {
                rowNumList.AddRange(GetRowNumsByUuids(logUuid));
            }
            var msgList = new List<MessageClass>();
            foreach (var rowNum in rowNumList)
            {
                Delete();
                if (GetData(rowNum) && DeleteData())
                    payload.InventoryLogs.Add(ToDto());
                else
                    msgList.AddRange(Messages);
            }
            if (msgList.Count > 0)
                payload.Messages = msgList;

            return payload;
        }
        public InventoryLogPayload GetListByUuid(InventoryLogPayload payload)
        {
            if (!payload.HasInventoryLogUuids)
                return payload;

            var rowNumList = new List<long>();
            foreach (var logUuid in payload.InventoryLogUuids)
            {
                rowNumList.AddRange(GetRowNumsByUuids(logUuid));
            }

            foreach (var rowNum in rowNumList)
            {
                //TODO merge
                //if (GetData(rowNum) && ValidatePayload(payload))
                if (GetData(rowNum))
                    payload.InventoryLogs.Add(ToDto());

            }

            return payload;
        }
        public long GetBatchNum()
        {
            return dbFactory.Db.ExecuteScalar<long>("select max(BatchNum) as maxBatchNum from InventoryLog;") + 1;
        }
        public InventoryLogPayload AddList(InventoryLogPayload payload)
        {
            if (!payload.HasInventoryLogs)
                return payload;
            payload.BatchNum = GetBatchNum();
            var succList = new List<InventoryLogDataDto>();
            var msgList = new List<MessageClass>();
            foreach (var log in payload.InventoryLogs)
            {
                payload.InventoryLog = log;
                if (Add(payload))
                    succList.Add(ToDto());
                else
                    msgList.AddRange(Messages);
            }
            payload.InventoryLog = null;
            payload.InventoryLogs = succList;
            if (msgList.Count > 0)
                payload.Messages = msgList;
            return payload; 
        }
    }
}



