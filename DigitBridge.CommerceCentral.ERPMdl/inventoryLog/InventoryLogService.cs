

//-------------------------------------------------------------------------
// This document is generated by T4
// It will only generate once, if you want re-generate it, you need delete this file first.
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.Base.Common;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public partial class InventoryLogService
    {

        /// <summary>
        /// Initiate service objcet, set instance of DtoMapper, Calculator and Validator 
        /// </summary>
        public override InventoryLogService Init()
        {
            base.Init();
            SetDtoMapper(new InventoryLogDataDtoMapperDefault());
            SetCalculator(new InventoryLogServiceCalculatorDefault(this, this.dbFactory));
            AddValidator(new InventoryLogServiceValidatorDefault(this, this.dbFactory));
            return this;
        }


        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual bool Add(InventoryLogDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!Validate(dto))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Add new data from Dto object
        /// </summary>
        public virtual async Task<bool> AddAsync(InventoryLogDataDto dto)
        {
            if (dto is null)
                return false;
            // set Add mode and clear data
            Add();

            if (!(await ValidateAsync(dto)))
                return false;

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public virtual bool Add(InventoryLogPayload payload)
        {
            if (payload is null || !payload.HasInventoryLog)
                return false;

            // set Add mode and clear data
            Add();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.InventoryLog))
                return false;

            // load data from dto
            FromDto(payload.InventoryLog);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        public virtual async Task<bool> AddAsync(InventoryLogPayload payload)
        {
            if (payload is null || !payload.HasInventoryLog)
                return false;

            // set Add mode and clear data
            Add();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.InventoryLog)))
                return false;

            // load data from dto
            FromDto(payload.InventoryLog);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Dto object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InventoryLogDataDto dto)
        {
            if (dto is null || !dto.HasInventoryLog)
                return false;

            //set edit mode before validate
            Edit();

            if (!Validate(dto))
                return false;

            // set Add mode and clear data
            Edit(dto.InventoryLog.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InventoryLogDataDto dto)
        {
            if (dto is null || !dto.HasInventoryLog)
                return false;

            //set edit mode before validate
            Edit();

            if (!(await ValidateAsync(dto)))
                return false;

            // set Add mode and clear data
            await EditAsync(dto.InventoryLog.RowNum.ToLong());

            // load data from dto
            FromDto(dto);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        /// <summary>
        /// Update data from Payload object.
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual bool Update(InventoryLogPayload payload)
        {
            if (payload is null || !payload.HasInventoryLog || payload.InventoryLog.InventoryLog.RowNum.ToLong() <= 0)
                return false;

            //set edit mode before validate
            Edit();

            if (!ValidateAccount(payload))
                return false;

            if (!Validate(payload.InventoryLog))
                return false;

            // set Add mode and clear data
            Edit(payload.InventoryLog.InventoryLog.RowNum.ToLong());

            // load data from dto
            FromDto(payload.InventoryLog);

            // validate data for Add processing
            if (!Validate())
                return false;

            return SaveData();
        }

        /// <summary>
        /// Update data from Dto object
        /// This processing will load data by RowNum of Dto, and then use change data by Dto.
        /// </summary>
        public virtual async Task<bool> UpdateAsync(InventoryLogPayload payload)
        {
            if (payload is null || !payload.HasInventoryLog)
                return false;

            //set edit mode before validate
            Edit();

            if (!(await ValidateAccountAsync(payload)))
                return false;

            if (!(await ValidateAsync(payload.InventoryLog)))
                return false;

            // set Add mode and clear data
            await EditAsync(payload.InventoryLog.InventoryLog.RowNum.ToLong());

            // load data from dto
            FromDto(payload.InventoryLog);

            // validate data for Add processing
            if (!(await ValidateAsync()))
                return false;

            return await SaveDataAsync();
        }

        public InventoryLogPayload UpdateInventoryLogList(InventoryLogPayload payload)
        {
            if (!payload.HasInventoryLogs)
                return payload;

            var succList = new List<InventoryLogDataDto>();
            var msgList = new List<MessageClass>();
            foreach (var log in payload.InventoryLogs)
            {
                payload.InventoryLog = log;
                //Use Default Method Validate and Update
                if (Update(payload))
                    succList.Add(ToDto());
                else
                    msgList.AddRange(Messages);
            }
            //clear temp log;
            payload.InventoryLog = null;
            payload.InventoryLogs = succList;
            payload.Messages = msgList;
            return payload;
        }

        public async Task<InventoryLogPayload> UpdateInventoryLogListAsync(InventoryLogPayload payload)
        {
            if (!payload.HasInventoryLogs)
                return payload;

            var succList = new List<InventoryLogDataDto>();
            var msgList = new List<MessageClass>();
            foreach (var log in payload.InventoryLogs)
            {
                payload.InventoryLog = log;
                //Use Default Method Validate and Update
                if (await UpdateAsync(payload))
                    succList.Add(ToDto());
                else
                    msgList.AddRange(Messages);
            }
            //clear temp log;
            payload.InventoryLog = null;
            payload.InventoryLogs = succList;
            payload.Messages = msgList;
            return payload;
        }

        public InventoryLogPayload DeleteByLogUuid(InventoryLogPayload payload)
        {
            if (!payload.HasLogUuids)
                return payload;

            var rowNumList = new List<long>();
            var msgList = new List<MessageClass>();
            foreach (var logUuid in payload.LogUuids)
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    // add validated rownumlist;
                    rowNumList.AddRange(InventoryLogServiceHelper.GetRowNumsByLogUuid(logUuid, payload.MasterAccountNum, payload.ProfileNum));
                }
            }
            foreach (var rowNum in rowNumList)
            {
                // set deleted mode
                Delete();

                //use default get and delete
                if (GetData(rowNum) && DeleteData())
                    payload.InventoryLogs.Add(ToDto());
                else
                    msgList.AddRange(Messages);
            }
            payload.Messages = msgList;

            return payload;
        }

        public async Task<InventoryLogPayload> DeleteByLogUuidAsync(InventoryLogPayload payload)
        {
            if (!payload.HasLogUuids)
                return payload;

            var rowNumList = new List<long>();
            var msgList = new List<MessageClass>();
            foreach (var logUuid in payload.LogUuids)
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    // add validated rownumlist;
                    rowNumList.AddRange(await InventoryLogServiceHelper.GetRowNumsByLogUuidAsync(logUuid, payload.MasterAccountNum, payload.ProfileNum));
                }
            }
            foreach (var rowNum in rowNumList)
            {
                // set deleted mode
                Delete();

                //use default get and delete
                if (await GetDataAsync(rowNum) &&await DeleteDataAsync())
                    payload.InventoryLogs.Add(ToDto());
                else
                    msgList.AddRange(Messages);
            }
            payload.Messages = msgList;

            return payload;
        }

        public bool GetInventoryLogByInventoryLogUuid(InventoryLogPayload payload, string inventoryLogUuid)
        {
            if (string.IsNullOrEmpty(inventoryLogUuid))
                return false;
            var isValid = true;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                //Validate Account
                isValid = InventoryLogServiceHelper.ExistId(inventoryLogUuid, payload.MasterAccountNum, payload.ProfileNum);
            }
            return isValid&& GetDataById(inventoryLogUuid);
        }
        public async Task<bool> GetInventoryLogByInventoryLogUuidAsync(InventoryLogPayload payload, string inventoryLogUuid)
        {
            if (string.IsNullOrEmpty(inventoryLogUuid))
                return false;
            var isValid = true;
            using (var tx = new ScopedTransaction(dbFactory))
            {
                //Validate Account
                isValid = await InventoryLogServiceHelper.ExistIdAsync(inventoryLogUuid, payload.MasterAccountNum, payload.ProfileNum);
            }
            return isValid&& await GetDataByIdAsync(inventoryLogUuid);
        }

        public InventoryLogPayload GetListByLogUuid(InventoryLogPayload payload)
        {
            if (!payload.HasLogUuids)
                return payload;

            var rowNumList = new List<long>();
            foreach (var logUuid in payload.LogUuids)
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    //Get RowNum and Validate Account
                    rowNumList.AddRange(InventoryLogServiceHelper.GetRowNumsByLogUuid(logUuid,payload.MasterAccountNum,payload.ProfileNum));
                }
            }
            foreach (var rowNum in rowNumList)
            {
                if (GetData(rowNum))
                    payload.InventoryLogs.Add(ToDto());
            }
            return payload;
        }

        public async Task<InventoryLogPayload> GetListByLogUuidAsync(InventoryLogPayload payload)
        {
            if (!payload.HasLogUuids)
                return payload;

            var rowNumList = new List<long>();
            foreach (var logUuid in payload.LogUuids)
            {
                using (var tx = new ScopedTransaction(dbFactory))
                {
                    //Get RowNum and Validate Account
                    rowNumList.AddRange(await InventoryLogServiceHelper.GetRowNumsByLogUuidAsync(logUuid,payload.MasterAccountNum,payload.ProfileNum));
                }
            }
            foreach (var rowNum in rowNumList)
            {
                //used default method get and valid
                if (await GetDataAsync(rowNum))
                    payload.InventoryLogs.Add(ToDto());
            }
            return payload;
        }
        public long GetBatchNum()
        {
            return dbFactory.Db.ExecuteScalar<long>("select max(BatchNum) as maxBatchNum from InventoryLog;") + 1;
        }

        public InventoryLogPayload AddList(InventoryLogPayload payload)
        {
            if (!payload.HasInventoryLogs)
                return payload;
            payload.BatchNum = GetBatchNum();
            var succList = new List<InventoryLogDataDto>();
            var msgList = new List<MessageClass>();
            foreach (var log in payload.InventoryLogs)
            {
                payload.InventoryLog = log;
                //used default method add and validated
                if (Add(payload))
                    succList.Add(ToDto());
                else
                    msgList.AddRange(Messages);
            }
            //clear temp data;
            payload.InventoryLog = null;

            payload.InventoryLogs = succList;
            payload.Messages = msgList;

            return payload;
        }

        public async Task<InventoryLogPayload> AddListAsync(InventoryLogPayload payload)
        {
            if (!payload.HasInventoryLogs)
                return payload;
            payload.BatchNum = GetBatchNum();
            var succList = new List<InventoryLogDataDto>();
            var msgList = new List<MessageClass>();
            foreach (var log in payload.InventoryLogs)
            {
                payload.InventoryLog = log;
                //used default method add and validated
                if (await AddAsync(payload))
                    succList.Add(ToDto());
                else
                    msgList.AddRange(Messages);
            }
            //clear temp data;
            payload.InventoryLog = null;

            payload.InventoryLogs = succList;
            payload.Messages = msgList;

            return payload;
        }
        public async Task<bool> UpdateByInventoryUpdateAsync(InventoryUpdateData data)
        {
            //no data,no header,or no items,return;
            if (data == null || data.InventoryUpdateHeader == null||data.InventoryUpdateItems==null)
                return false;
            var header = data.InventoryUpdateHeader;
            var inventoryUuid = data.InventoryUpdateHeader.InventoryUpdateUuid;
            using (var trx = new ScopedTransaction(dbFactory))
            {
                await InventoryServiceHelper.UpdateInventoryInStockAsync(inventoryUuid, -1);
            }
            //if remove all items or delete inventoryupdate
            if (data.InventoryUpdateItems.Count == 0)
            {
                using (var trx = new ScopedTransaction(dbFactory))
                {
                    await InventoryLogServiceHelper.DeleteInventoryLogsByLogUuidAsync(inventoryUuid);
                }
                return true;
            }
            var detailItems = data.InventoryUpdateItems;
            var batchNum = GetBatchNum();//data.InventoryUpdateHeader.BatchNumber;
            var list = new List<InventoryLog>();
            var saveOrUpdateList = new List<InventoryLog>();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                list = await InventoryLogServiceHelper.GetInventoryLogListByLogUuidAsync(inventoryUuid);
            }
            foreach (var item in detailItems)
            {
                var line = list.FirstOrDefault(r => r.LogItemUuid == item.InventoryUpdateItemsUuid);
                if (line == null)//Update
                {
                    line = new InventoryLog
                    {
                        DatabaseNum = header.DatabaseNum,
                        MasterAccountNum = header.MasterAccountNum,
                        ProfileNum = header.ProfileNum,
                        InventoryLogUuid = Guid.NewGuid().ToString(),
                        LogUuid = inventoryUuid,
                        BatchNum = batchNum,
                        LogNumber = header.BatchNumber,
                        LogItemUuid = item.InventoryUpdateItemsUuid,
                        LogDate = DateTime.Today,
                        LogTime = DateTime.Now.TimeOfDay,
                        LogBy = "",
                        SKU = item.SKU,
                        Description = item.Description,
                        WarehouseCode = item.WarehouseCode,
                        LotNum = item.LotNum,
                        LotInDate = item.LotInDate,
                        LotExpDate = item.LotExpDate,
                        UOM = item.UOM,
                        LogQty = item.UpdateQty,
                        BeforeInstock = item.BeforeInstockQty,
                        EnterBy = ""
                    };
                    switch ((InventoryUpdateType)header.InventoryUpdateType)
                    {
                        case InventoryUpdateType.Adjust:
                            line.LogType = LogType.Adjust.ToString();
                            break;
                        case InventoryUpdateType.Damage:
                            line.LogType = LogType.Damage.ToString();
                            break;
                        case InventoryUpdateType.CycleCount:
                            line.LogType = LogType.CycleCount.ToString();
                            break;
                        case InventoryUpdateType.PhysicalCount:
                            line.LogType = LogType.PhysicalCount.ToString();
                            break;
                    }
                }
                else//Add
                {
                    line.SKU = item.SKU;
                    line.Description = item.Description;
                    line.WarehouseCode = item.WarehouseCode;
                    line.LotNum = item.LotNum;
                    line.LotInDate = item.LotInDate;
                    line.LotExpDate = item.LotExpDate;
                    line.UOM = item.UOM;
                    line.LogQty = item.UpdateQty;
                    line.BeforeInstock = item.BeforeInstockQty;
                }
                saveOrUpdateList.Add(line);
            }
            var suItemsUuid = saveOrUpdateList.Select(r => r.LogItemUuid).ToList();
            var deleteList = list.Where(r => !suItemsUuid.Contains(r.LogItemUuid)).ToList();// new List<InventoryLog>();

            await saveOrUpdateList.SetDataBaseFactory(dbFactory).SaveAsync();

            await deleteList.SetDataBaseFactory(dbFactory).DeleteAsync();
            using (var trx = new ScopedTransaction(dbFactory))
            {
                await InventoryServiceHelper.UpdateInventoryInStockAsync(inventoryUuid, 1);
            }
            return true;
        }

        public Task<bool> UpdateByInvoiceReturnAsync(InvoiceTransactionData data)
        {
            throw new NotImplementedException();
        }

        public Task<bool> UpdateByShipmentAsync(OrderShipmentData data)
        {
            throw new NotImplementedException();
        }

        public async Task<bool> UpdateByWarehouseTransferAsync(WarehouseTransferData data)
        {
            if (data == null || data.WarehouseTransferHeader == null)
                return false;
            var header = data.WarehouseTransferHeader;
            var detailItems = data.WarehouseTransferItems;
            var batchNum = GetBatchNum();//data.InventoryUpdateHeader.BatchNumber;
            var logUuid = data.WarehouseTransferHeader.WarehouseTransferUuid;
            var list = new List<InventoryLog>();
            foreach (var item in detailItems)
            {
                var line = new InventoryLog
                {
                    DatabaseNum = header.DatabaseNum,
                    MasterAccountNum = header.MasterAccountNum,
                    ProfileNum = header.ProfileNum,
                    InventoryLogUuid = Guid.NewGuid().ToString(),
                    LogUuid = logUuid,
                    BatchNum = batchNum,
                    LogNumber = header.BatchNumber,
                    LogItemUuid = $"From_{item.WarehouseTransferItemsUuid}",
                    LogDate = DateTime.Today,
                    LogTime = DateTime.Now.TimeOfDay,
                    LogBy = "",
                    LogType=LogType.TransferFrom.ToString(),
                    SKU = item.SKU,
                    Description = item.Description,
                    WarehouseCode = item.FromWarehouseCode,
                    LotNum = item.LotNum,
                    LotInDate = item.LotInDate,
                    LotExpDate = item.LotExpDate,
                    UOM = item.UOM,
                    LogQty = -item.TransferQty,
                    BeforeInstock = item.FromBeforeInstockPack,
                    EnterBy = ""
                };
                list.Add(line); 
                line = new InventoryLog
                {
                    DatabaseNum = header.DatabaseNum,
                    MasterAccountNum = header.MasterAccountNum,
                    ProfileNum = header.ProfileNum,
                    InventoryLogUuid = Guid.NewGuid().ToString(),
                    LogUuid = logUuid,
                    LogType=LogType.TransferTo.ToString(),
                    BatchNum = batchNum,
                    LogNumber = header.BatchNumber,
                    LogItemUuid = $"To_{item.WarehouseTransferItemsUuid}",
                    LogDate = DateTime.Today,
                    LogTime = DateTime.Now.TimeOfDay,
                    LogBy = "",
                    SKU = item.SKU,
                    Description = item.Description,
                    WarehouseCode = item.ToWarehouseCode,
                    LotNum = item.LotNum,
                    LotInDate = item.LotInDate,
                    LotExpDate = item.LotExpDate,
                    UOM = item.UOM,
                    LogQty = item.TransferQty,
                    BeforeInstock = item.ToBeforeInstockPack,
                    EnterBy = ""
                };
                list.Add(line);
            }
            return await list.SetDataBaseFactory(dbFactory).SaveAsync();
        }
    }
}



