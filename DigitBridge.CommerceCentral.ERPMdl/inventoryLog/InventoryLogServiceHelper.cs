
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Data;
using Microsoft.Data.SqlClient;

using Newtonsoft.Json;

using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.CommerceCentral.ERPDb;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    /// <summary>
    /// Represents a InventoryLogHelper SQL Helper Static Class.
    /// NOTE: This class is generated from a T4 template Once - you you wanr re-generate it, you need delete cs file and generate again
    /// </summary>
    public static class InventoryLogServiceHelper
    {
        public static bool ExistNumber(string number, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND LogUuid = @number
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                number.ToSqlParameter("number")
            );
            return result > 0;
        }

        public static async Task<bool> ExistNumberAsync(string number, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND LogUuid = @number
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                number.ToSqlParameter("number")
            );
            return result > 0;
        }

        public static bool ExistId(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND InventoryLogUuid = @uuid
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                uuid.ToSqlParameter("uuid")
            );
            return result > 0;
        }

        public static async Task<bool> ExistIdAsync(string uuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND InventoryLogUuid = @uuid
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                uuid.ToSqlParameter("uuid")
            );
            return result > 0;
        }

        public static bool ExistRowNum(long rowNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND RowNum= @rowNum
";
            var result = SqlQuery.ExecuteScalar<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                rowNum.ToSqlParameter("rowNum")
            );
            return result > 0;
        }

        public static async Task<bool> ExistRowNumAsync(long rowNum, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT COUNT(1) FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND RowNum= @rowNum
";
            var result = await SqlQuery.ExecuteScalarAsync<int>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                rowNum.ToSqlParameter("rowNum")
            );
            return result > 0;
        }

        public static IList<long> GetRowNumsByLogUuid(string logUuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT RowNum FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND LogUuid = @logUuid
";
            var numList = new List<long>();
            using var reader = SqlQuery.ExecuteCommand(sql, CommandType.Text,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                logUuid.ToSqlParameter("logUuid")
            );
            while (reader.Read())
                numList.Add(reader.GetInt64(0));
            return numList;
        }

        public static async Task<IList<long>> GetRowNumsByLogUuidAsync(string logUuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT RowNum FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND LogUuid = @logUuid
";
            return await SqlQuery.ExecuteAsync(sql,CommandType.Text,
                (long rowNum)=>rowNum,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                logUuid.ToSqlParameter("logUuid")
            );
        }
        public static long GetRowNumByInventoryLogUuid(string logUuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT Top 1 RowNum FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND InventoryLogUuid = @logUuid
";
            var result = SqlQuery.ExecuteScalar<long>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                logUuid.ToSqlParameter("logUuid")
            );
            return result;
        }

        public static List<InventoryLog> GetInventoryLogListByLogUuid(string logUuid)
        {
            var sql = $@"
SELECT * FROM InventoryLog tbl
WHERE LogUuid = @logUuid
";
            return SqlQuery.Query<InventoryLog>(sql, CommandType.Text,
                logUuid.ToSqlParameter("logUuid")).ToList();
        }

        public static async Task<List<InventoryLog>> GetInventoryLogListByLogUuidAsync(string logUuid)
        {
            var sql = $@"
SELECT * FROM InventoryLog tbl
WHERE LogUuid = @logUuid
";
            return (await SqlQuery.QueryAsync<InventoryLog>(sql, CommandType.Text,
                logUuid.ToSqlParameter("logUuid"))).ToList();
        }

        public static async Task<long> GetRowNumByInventoryLogUuidAsync(string inventoryLogUuid, int masterAccountNum, int profileNum)
        {
            var sql = $@"
SELECT Top 1 RowNum FROM InventoryLog tbl
WHERE MasterAccountNum = @masterAccountNum
AND ProfileNum = @profileNum
AND InventoryLogUuid = @inventoryLogUuid
";
            var result = await SqlQuery.ExecuteScalarAsync<long>(sql,
                masterAccountNum.ToSqlParameter("masterAccountNum"),
                profileNum.ToSqlParameter("profileNum"),
                inventoryLogUuid.ToSqlParameter("inventoryLogUuid")
            );
            return result;
        }

        public static void DeleteInventoryLogsByLogUuid(string logUuid)
        {
            var sql = $@"
DELETE FROM InventoryLog
WHERE LogUuid = @logUuid
";
            SqlQuery.ExecuteNonQuery(sql, logUuid.ToSqlParameter("logUuid"));
        }

        public static async Task DeleteInventoryLogsByLogUuidAsync(string logUuid)
        {
            var sql = $@"
DELETE FROM InventoryLog
WHERE LogUuid = @logUuid
";
            await SqlQuery.ExecuteNonQueryAsync(sql, logUuid.ToSqlParameter("logUuid"));
        }
    }
}



