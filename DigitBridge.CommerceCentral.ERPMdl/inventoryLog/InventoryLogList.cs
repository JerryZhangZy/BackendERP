//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DigitBridge.Base.Common;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.ERPDb;
using DigitBridge.CommerceCentral.YoPoco;
using Microsoft.Data.SqlClient;
using Helper = DigitBridge.CommerceCentral.ERPDb.InventoryLogHelper;

namespace DigitBridge.CommerceCentral.ERPMdl
{
    public class InventoryLogList : SqlQueryBuilder<InventoryLogQuery>
    {
        public InventoryLogList(IDataBaseFactory dbFactory) : base(dbFactory)
        {
        }
        public InventoryLogList(IDataBaseFactory dbFactory, InventoryLogQuery queryObject)
            : base(dbFactory, queryObject)
        {
        }
        
        #region override methods

        protected override string GetSQL_select()
        {
            this.SQL_Select = $@"
SELECT 
{Helper.TableAllies}.*
";
            return this.SQL_Select;
        }

        protected override string GetSQL_select_summary()
        {
            this.SQL_SelectSummary = $@"
SELECT  
COUNT(1) as [Count],
SUM(
    CASE WHEN RTRIM(COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0)) > 0 THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as TotalInQty,
SUM(
    CASE WHEN RTRIM(COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0)) < 0 THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as TotalOutQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Invoice') THEN 1 ELSE 0 END
) as InvoiceCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Invoice') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as InvoiceQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('InvoiceReturn') THEN 1 ELSE 0 END
) as InvoiceReturnCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('InvoiceReturn') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as InvoiceReturnQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Shipment') THEN 1 ELSE 0 END
) as ShipmentCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Shipment') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as ShipmentQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Adjust') THEN 1 ELSE 0 END
) as AdjustCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Adjust') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as AdjustQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Damage') THEN 1 ELSE 0 END
) as DamageCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Damage') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as DamageQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Count') THEN 1 ELSE 0 END
) as CountTypeCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Count') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as CountTypeQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('ToWarehouse') THEN 1 ELSE 0 END
) as ToWarehouseCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('ToWarehouse') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as ToWarehouseQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('FromWarehouse') THEN 1 ELSE 0 END
) as FromWarehouseCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('FromWarehouse') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as FromWarehouseQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Assemble') THEN 1 ELSE 0 END
) as AssembleCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Assemble') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as AssembleQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Disassemble') THEN 1 ELSE 0 END
) as DisassembleCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('Disassemble') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as DisassembleQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('POReceive') THEN 1 ELSE 0 END
) as POReceiveCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('POReceive') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as POReceiveQty,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('POReturn') THEN 1 ELSE 0 END
) as POReturnCount,
SUM( 
	CASE WHEN RTRIM(COALESCE({InventoryLogHelper.TableAllies}.LogType, '')) = RTRIM('POReturn') THEN COALESCE(CAST({InventoryLogHelper.TableAllies}.LogQty AS INT), 0) ELSE 0 END
) as POReturnQty
";
            return this.SQL_SelectSummary;
        }

        protected override string GetSQL_from()
        {
            this.SQL_From = $@"
 FROM {Helper.TableName} {Helper.TableAllies} 
";
            return this.SQL_From;
        }

        public override SqlParameter[] GetSqlParameters()
        {
            var paramList = base.GetSqlParameters().ToList();
                        
            //paramList.Add("@SalesOrderStatus".ToEnumParameter<SalesOrderStatus>());
            //paramList.Add("@SalesOrderType".ToEnumParameter<SalesOrderType>());

            return paramList.ToArray();
        }

        #endregion override methods

        public virtual async Task GetInventoryLogSummaryAsync(InventoryLogPayload payload)
        {
            if (payload == null)
                payload = new InventoryLogPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            try
            {
                payload.Success = await ExcuteSummaryJsonAsync(sb);
                if (payload.Success)
                    payload.InventoryLogSummary = sb;
            }
            catch (Exception ex)
            {
                payload.InventoryLogListCount = 0;
                payload.InventoryLogSummary = null;
                AddError(ex.ObjectToString());
                payload.Messages = this.Messages;
            }
        }

        public virtual InventoryLogPayload GetInventoryLogList(InventoryLogPayload payload)
        {
            if (payload == null)
                payload = new InventoryLogPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            var result = false;
            try
            {
                payload.InventoryLogListCount = Count();
                result = ExcuteJson(sb);
                if (result)
                    payload.InventoryLogList = sb;
            }
            catch (Exception ex)
            {
                payload.InventoryLogListCount = 0;
                payload.InventoryLogList = null;
                return payload;
                throw;
            }
            return payload;
        }

        public virtual async Task<InventoryLogPayload> GetInventoryLogListAsync(InventoryLogPayload payload)
        {
            if (payload == null)
                payload = new InventoryLogPayload();

            this.LoadRequestParameter(payload);
            StringBuilder sb = new StringBuilder();
            var result = false;
            try
            {
                payload.InventoryLogListCount = await CountAsync();
                result = await ExcuteJsonAsync(sb);
                if (result)
                    payload.InventoryLogList = sb;
            }
            catch (Exception ex)
            {
                payload.InventoryLogListCount = 0;
                payload.InventoryLogList = null;
                return payload;
                throw;
            }
            return payload;
        }

        public virtual async Task<IList<long>> GetRowNumListAsync(InventoryLogPayload payload)
        {
            if (payload == null)
                payload = new InventoryLogPayload();

            this.LoadRequestParameter(payload);
            var rowNumList = new List<long>();

            var sql = $@"
SELECT distinct {Helper.TableAllies}.RowNum 
{GetSQL_from()} 
{GetSQL_where()}
ORDER BY  {Helper.TableAllies}.RowNum 
OFFSET {payload.FixedSkip} ROWS FETCH NEXT {payload.FixedTop} ROWS ONLY
";
            try
            {
                using (var trs = new ScopedTransaction(dbFactory))
                {
                    rowNumList = await SqlQuery.ExecuteAsync(
                    sql,
                    (long rowNum) => rowNum,
                    GetSqlParameters().ToArray()
                );
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return rowNumList;
        }

        public virtual IList<long> GetRowNumList(InventoryLogPayload payload)
        {
            if (payload == null)
                payload = new InventoryLogPayload();

            this.LoadRequestParameter(payload);
            var rowNumList = new List<long>();
            var sql = $@"
SELECT distinct {Helper.TableAllies}.RowNum 
{GetSQL_from()} 
{GetSQL_where()}
ORDER BY  {Helper.TableAllies}.RowNum 
OFFSET {payload.FixedSkip} ROWS FETCH NEXT {payload.FixedTop} ROWS ONLY
";
            try
            {
                using (var trs = new ScopedTransaction(dbFactory))
                {
                    rowNumList = SqlQuery.Execute(
                    sql,
                    (long rowNum) => rowNum,
                    GetSqlParameters().ToArray()
                );
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return rowNumList;
        }
    }
}
