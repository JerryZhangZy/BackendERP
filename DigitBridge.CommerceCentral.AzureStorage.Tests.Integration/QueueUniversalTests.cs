
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Data.SqlClient;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Bogus;
using Newtonsoft.Json.Linq;
using DigitBridge.CommerceCentral.ERPDb.Tests.Integration;
using DigitBridge.CommerceCentral.AzureStorage;
using Azure.Data.Tables;
using Newtonsoft.Json;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class QueueUniversalTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug TableUniversalTests Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory dataBaseFactory { get; set; }

        private string connString = "UseDevelopmentStorage=true";

        public QueueUniversalTests(TestFixture<StartupTest> fixture) 
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            try
            {
                var Seq = 0;
                dataBaseFactory = DataBaseFactory.CreateDefault(Configuration["dsn"].ToString());
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public void Dispose()
        {
        }

        //[Fact()]
        //public async Task AddInventoryLog_Test()
        //{
        //    var log= InventoryLogTests.GetFakerData().Generate();
        //    var tableUniversal =await TableUniversal<InventoryLog>.CreateAsync(typeof(InventoryLog).Name, connString);
        //    var result= tableUniversal.AddEntityAsync(log, log.UniqueId, log.MasterAccountNum.ToString());
        //    Assert.True(result != null, "succ");
        //}
        [Fact()]
        public async Task AddInventoryLog_Test()
        {
            var logList= InventoryLogTests.GetFakerData().Generate(100);
            var queueUniversal =await QueueUniversal<InventoyLogQueue>.CreateAsync("UniversalTEST", connString);
            foreach(var log in logList)
            {
                await queueUniversal.SendMessageAsync(JsonConvert.SerializeObject(log));
            }
            var newlist = await queueUniversal.ReceiveMessagesAsync(32);
            Assert.True(newlist.Count == 32, "succ");
            foreach(var msg in newlist)
            {
                await queueUniversal.DeleteMessageAsync(msg);
            }
            newlist = await queueUniversal.ReceiveMessagesAsync(32);
            Assert.True(newlist.Count > 0, "succ");
            //getentity = await tableUniversal.GetEntityAsync(log.UniqueId, entity.PartitionKey);
            //Assert.True(getentity == null, "succ");
        }

    }

    public class InventoyLogQueue : InventoryLog, IQueueEntity
    {
        public string MessageId { get; set; }
        public string PopReceipt { get; set; }

    }
}


