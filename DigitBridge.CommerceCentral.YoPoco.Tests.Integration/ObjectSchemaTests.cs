
    

//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Xunit;
using DigitBridge.CommerceCentral.YoPoco;
using DigitBridge.Base.Utility;
using DigitBridge.CommerceCentral.XUnit.Common;
using DigitBridge.CommerceCentral.ERPDb;
using Microsoft.Data.SqlClient;

namespace DigitBridge.CommerceCentral.ERPMdl.Tests.Integration
{
    public partial class ObjectSchemaTests : IDisposable, IClassFixture<TestFixture<StartupTest>>
    {
        protected const string SkipReason = "Debug Helper Function";

        protected TestFixture<StartupTest> Fixture { get; }
        public IConfiguration Configuration { get; }
        public IDataBaseFactory DataBaseFactory { get; set; }

        public ObjectSchemaTests(TestFixture<StartupTest> fixture)
        {
            Fixture = fixture;
            Configuration = fixture.Configuration;

            InitForTest();
        }
        protected void InitForTest()
        {
            var Seq = 0;
            DataBaseFactory = new DataBaseFactory(Configuration["dsn"]);
        }
        public void Dispose()
        {
        }

        [Fact()]
        //[Fact(Skip = SkipReason)]
        public async void Merge_Test()
        {
            var salesOrderHeader = new SalesOrderHeader();
            var salesOrderHeaderInfo = new SalesOrderHeaderInfo();
            var salesOrderHeaderAttributes = new SalesOrderHeaderAttributes();
            var salesOrderItems = new List<SalesOrderItems>() { 
                new SalesOrderItems() { SalesOrderItemsAttributes = new SalesOrderItemsAttributes() }, 
                new SalesOrderItems() { SalesOrderItemsAttributes = new SalesOrderItemsAttributes() }
            };

            var result = true;
            try
            {
                var header = salesOrderHeader.Merge(salesOrderHeader, salesOrderHeaderInfo, salesOrderHeaderAttributes);
                var items = new List<object>();
                foreach (var soItem in salesOrderItems)
                {
                    var item = soItem.Merge(soItem, soItem.SalesOrderItemsAttributes);
                    items.Add(item);
                }

                var headerNames = salesOrderHeader.MergeName(salesOrderHeader, salesOrderHeaderInfo, salesOrderHeaderAttributes);
                var itemsNames = salesOrderItems[0].MergeName(salesOrderItems[0], salesOrderItems[0].SalesOrderItemsAttributes);

            }
            catch (Exception ex)
            {
                throw;
            }

            Assert.True(true, "This is a generated tester, please report any tester bug to team leader.");
        }


    }
}



