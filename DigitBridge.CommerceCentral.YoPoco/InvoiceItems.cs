//-------------------------------------------------------------------------
// This document is generated by T4
// It will overwrite your changes, please keep it as it is
// <copyright company="DigitBridge">
//     Copyright (c) DigitBridge Inc.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------
using DigitBridge.Base.Utility;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;

namespace DigitBridge.CommerceCentral.YoPoco
{
    /// <summary>
    /// Represents a InvoiceItems.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// </summary>
    [Serializable()]
    [ExplicitColumns]
    [TableName("InvoiceItems")]
    [PrimaryKey("RowNum", AutoIncrement = true)]
    [UniqueId("InvoiceItemsId")]
    [DtoName("InvoiceItemsDto")]
    public partial class InvoiceItems : TableRepository<InvoiceItems, long>
    {
        public InvoiceItems() : base() { }
        public InvoiceItems(IDataBaseFactory dbFactory) : base(dbFactory) { }

        #region Fields - Generated 
        [Column("InvoiceItemsId", SqlDbType.VarChar, NotNull = true, IsDefault = true)]
        private string _InvoiceItemsId;

        [Column("InvoiceId", SqlDbType.VarChar, NotNull = true, IsDefault = true)]
        private string _InvoiceId;

        [Column("Seq", SqlDbType.Int, NotNull = true, IsDefault = true)]
        private int _Seq;

        [Column("InvoiceItemType", SqlDbType.Int, IsDefault = true)]
        private int? _InvoiceItemType;

        [Column("InvoiceItemStatus", SqlDbType.Int, IsDefault = true)]
        private int? _InvoiceItemStatus;

        [Column("ItemDate", SqlDbType.Date, NotNull = true)]
        private DateTime _ItemDate;

        [Column("ItemTime", SqlDbType.Time, NotNull = true)]
        private TimeSpan _ItemTime;

        [Column("ShipDate", SqlDbType.Date)]
        private DateTime? _ShipDate;

        [Column("EtaArrivalDate", SqlDbType.Date)]
        private DateTime? _EtaArrivalDate;

        [Column("SKU", SqlDbType.VarChar, NotNull = true)]
        private string _SKU;

        [Column("InventoryId", SqlDbType.VarChar, NotNull = true, IsDefault = true)]
        private string _InventoryId;

        [Column("WarehouseID", SqlDbType.VarChar)]
        private string _WarehouseID;

        [Column("LotNum", SqlDbType.VarChar, NotNull = true)]
        private string _LotNum;

        [Column("Description", SqlDbType.NVarChar, NotNull = true)]
        private string _Description;

        [Column("Notes", SqlDbType.NVarChar, NotNull = true)]
        private string _Notes;

        [Column("Currency", SqlDbType.VarChar)]
        private string _Currency;

        [Column("UOM", SqlDbType.VarChar)]
        private string _UOM;

        [Column("PackType", SqlDbType.VarChar)]
        private string _PackType;

        [Column("PackQty", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _PackQty;

        [Column("OrderPack", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _OrderPack;

        [Column("ShipPack", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _ShipPack;

        [Column("CancelledPack", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _CancelledPack;

        [Column("OrderQty", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _OrderQty;

        [Column("ShipQty", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _ShipQty;

        [Column("CancelledQty", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _CancelledQty;

        [Column("PriceRule", SqlDbType.VarChar, NotNull = true, IsDefault = true)]
        private string _PriceRule;

        [Column("Price", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _Price;

        [Column("DiscountRate", SqlDbType.Decimal, IsDefault = true)]
        private decimal? _DiscountRate;

        [Column("DiscountAmount", SqlDbType.Decimal, IsDefault = true)]
        private decimal? _DiscountAmount;

        [Column("DiscountPrice", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _DiscountPrice;

        [Column("ExtAmount", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _ExtAmount;

        [Column("TaxRate", SqlDbType.Decimal, IsDefault = true)]
        private decimal? _TaxRate;

        [Column("TaxAmount", SqlDbType.Decimal, IsDefault = true)]
        private decimal? _TaxAmount;

        [Column("ShippingAmount", SqlDbType.Decimal, IsDefault = true)]
        private decimal? _ShippingAmount;

        [Column("ShippingTaxAmount", SqlDbType.Decimal, IsDefault = true)]
        private decimal? _ShippingTaxAmount;

        [Column("MiscAmount", SqlDbType.Decimal, IsDefault = true)]
        private decimal? _MiscAmount;

        [Column("MiscTaxAmount", SqlDbType.Decimal, IsDefault = true)]
        private decimal? _MiscTaxAmount;

        [Column("ChargeAndAllowanceAmount", SqlDbType.Decimal, IsDefault = true)]
        private decimal? _ChargeAndAllowanceAmount;

        [Column("ItemTotalAmount", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _ItemTotalAmount;

        [Column("Stockable", SqlDbType.TinyInt, NotNull = true, IsDefault = true)]
        private byte _Stockable;

        [Column("IsAr", SqlDbType.TinyInt, NotNull = true, IsDefault = true)]
        private byte _IsAr;

        [Column("Taxable", SqlDbType.TinyInt, NotNull = true, IsDefault = true)]
        private byte _Taxable;

        [Column("Costable", SqlDbType.TinyInt, NotNull = true, IsDefault = true)]
        private byte _Costable;

        [Column("UnitCost", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _UnitCost;

        [Column("AvgCost", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _AvgCost;

        [Column("LotCost", SqlDbType.Decimal, NotNull = true, IsDefault = true)]
        private decimal _LotCost;

        [Column("LotInDate", SqlDbType.Date)]
        private DateTime? _LotInDate;

        [Column("LotExpDate", SqlDbType.Date)]
        private DateTime? _LotExpDate;

        [Column("EnterDateUtc", SqlDbType.DateTime)]
        private DateTime? _EnterDateUtc;

        [Column("UpdateDateUtc", SqlDbType.DateTime)]
        private DateTime? _UpdateDateUtc;

        [Column("EnterBy", SqlDbType.VarChar, NotNull = true)]
        private string _EnterBy;

        [Column("UpdateBy", SqlDbType.VarChar, NotNull = true)]
        private string _UpdateBy;

        [Column("DigitBridgeGuid", SqlDbType.UniqueIdentifier, NotNull = true, IsDefault = true)]
        private Guid _DigitBridgeGuid;

        #endregion Fields - Generated 

        #region Properties - Generated 
        public override string UniqueId => InvoiceItemsId;
        public virtual string InvoiceItemsId
        {
            get
            {
                return _InvoiceItemsId?.TrimEnd();
            }
            set
            {
                _InvoiceItemsId = value.TruncateTo(50);
            }
        }

        public virtual string InvoiceId
        {
            get
            {
                return _InvoiceId?.TrimEnd();
            }
            set
            {
                _InvoiceId = value.TruncateTo(50);
            }
        }

        public virtual int Seq
        {
            get
            {
                return _Seq;
            }
            set
            {
                _Seq = value;
            }
        }

        public virtual int? InvoiceItemType
        {
            get
            {
                if (!AllowNull && _InvoiceItemType is null)
                    _InvoiceItemType = default(int);
                return _InvoiceItemType;
            }
            set
            {
                if (value != null || AllowNull)
                    _InvoiceItemType = value;
            }
        }

        public virtual int? InvoiceItemStatus
        {
            get
            {
                if (!AllowNull && _InvoiceItemStatus is null)
                    _InvoiceItemStatus = default(int);
                return _InvoiceItemStatus;
            }
            set
            {
                if (value != null || AllowNull)
                    _InvoiceItemStatus = value;
            }
        }

        public virtual DateTime ItemDate
        {
            get
            {
                return _ItemDate;
            }
            set
            {
                _ItemDate = value.Date.ToSqlSafeValue();
            }
        }

        public virtual TimeSpan ItemTime
        {
            get
            {
                return _ItemTime;
            }
            set
            {
                _ItemTime = value.ToSqlSafeValue();
            }
        }

        public virtual DateTime? ShipDate
        {
            get
            {
                if (!AllowNull && _ShipDate is null)
                    _ShipDate = new DateTime().MinValueSql();
                return _ShipDate;
            }
            set
            {
                if (value != null || AllowNull)
                    _ShipDate = (value is null) ? (DateTime?)null : value?.Date.ToSqlSafeValue();
            }
        }

        public virtual DateTime? EtaArrivalDate
        {
            get
            {
                if (!AllowNull && _EtaArrivalDate is null)
                    _EtaArrivalDate = new DateTime().MinValueSql();
                return _EtaArrivalDate;
            }
            set
            {
                if (value != null || AllowNull)
                    _EtaArrivalDate = (value is null) ? (DateTime?)null : value?.Date.ToSqlSafeValue();
            }
        }

        public virtual string SKU
        {
            get
            {
                return _SKU?.TrimEnd();
            }
            set
            {
                _SKU = value.TruncateTo(100);
            }
        }

        public virtual string InventoryId
        {
            get
            {
                return _InventoryId?.TrimEnd();
            }
            set
            {
                _InventoryId = value.TruncateTo(50);
            }
        }

        public virtual string WarehouseID
        {
            get
            {
                if (!AllowNull && _WarehouseID is null)
                    _WarehouseID = String.Empty;
                return _WarehouseID?.TrimEnd();
            }
            set
            {
                if (value != null || AllowNull)
                    _WarehouseID = value.TruncateTo(50);
            }
        }

        public virtual string LotNum
        {
            get
            {
                return _LotNum?.TrimEnd();
            }
            set
            {
                _LotNum = value.TruncateTo(100);
            }
        }

        public virtual string Description
        {
            get
            {
                return _Description?.TrimEnd();
            }
            set
            {
                _Description = value.TruncateTo(200);
            }
        }

        public virtual string Notes
        {
            get
            {
                return _Notes?.TrimEnd();
            }
            set
            {
                _Notes = value.TruncateTo(500);
            }
        }

        public virtual string Currency
        {
            get
            {
                if (!AllowNull && _Currency is null)
                    _Currency = String.Empty;
                return _Currency?.TrimEnd();
            }
            set
            {
                if (value != null || AllowNull)
                    _Currency = value.TruncateTo(10);
            }
        }

        public virtual string UOM
        {
            get
            {
                if (!AllowNull && _UOM is null)
                    _UOM = String.Empty;
                return _UOM?.TrimEnd();
            }
            set
            {
                if (value != null || AllowNull)
                    _UOM = value.TruncateTo(50);
            }
        }

        public virtual string PackType
        {
            get
            {
                if (!AllowNull && _PackType is null)
                    _PackType = String.Empty;
                return _PackType?.TrimEnd();
            }
            set
            {
                if (value != null || AllowNull)
                    _PackType = value.TruncateTo(50);
            }
        }

        public virtual decimal PackQty
        {
            get
            {
                return _PackQty;
            }
            set
            {
                _PackQty = value;
            }
        }

        public virtual decimal OrderPack
        {
            get
            {
                return _OrderPack;
            }
            set
            {
                _OrderPack = value;
            }
        }

        public virtual decimal ShipPack
        {
            get
            {
                return _ShipPack;
            }
            set
            {
                _ShipPack = value;
            }
        }

        public virtual decimal CancelledPack
        {
            get
            {
                return _CancelledPack;
            }
            set
            {
                _CancelledPack = value;
            }
        }

        public virtual decimal OrderQty
        {
            get
            {
                return _OrderQty;
            }
            set
            {
                _OrderQty = value;
            }
        }

        public virtual decimal ShipQty
        {
            get
            {
                return _ShipQty;
            }
            set
            {
                _ShipQty = value;
            }
        }

        public virtual decimal CancelledQty
        {
            get
            {
                return _CancelledQty;
            }
            set
            {
                _CancelledQty = value;
            }
        }

        public virtual string PriceRule
        {
            get
            {
                return _PriceRule?.TrimEnd();
            }
            set
            {
                _PriceRule = value.TruncateTo(50);
            }
        }

        public virtual decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
                _Price = value;
            }
        }

        public virtual decimal? DiscountRate
        {
            get
            {
                if (!AllowNull && _DiscountRate is null)
                    _DiscountRate = default(decimal);
                return _DiscountRate;
            }
            set
            {
                if (value != null || AllowNull)
                    _DiscountRate = value;
            }
        }

        public virtual decimal? DiscountAmount
        {
            get
            {
                if (!AllowNull && _DiscountAmount is null)
                    _DiscountAmount = default(decimal);
                return _DiscountAmount;
            }
            set
            {
                if (value != null || AllowNull)
                    _DiscountAmount = value;
            }
        }

        public virtual decimal DiscountPrice
        {
            get
            {
                return _DiscountPrice;
            }
            set
            {
                _DiscountPrice = value;
            }
        }

        public virtual decimal ExtAmount
        {
            get
            {
                return _ExtAmount;
            }
            set
            {
                _ExtAmount = value;
            }
        }

        public virtual decimal? TaxRate
        {
            get
            {
                if (!AllowNull && _TaxRate is null)
                    _TaxRate = default(decimal);
                return _TaxRate;
            }
            set
            {
                if (value != null || AllowNull)
                    _TaxRate = value;
            }
        }

        public virtual decimal? TaxAmount
        {
            get
            {
                if (!AllowNull && _TaxAmount is null)
                    _TaxAmount = default(decimal);
                return _TaxAmount;
            }
            set
            {
                if (value != null || AllowNull)
                    _TaxAmount = value;
            }
        }

        public virtual decimal? ShippingAmount
        {
            get
            {
                if (!AllowNull && _ShippingAmount is null)
                    _ShippingAmount = default(decimal);
                return _ShippingAmount;
            }
            set
            {
                if (value != null || AllowNull)
                    _ShippingAmount = value;
            }
        }

        public virtual decimal? ShippingTaxAmount
        {
            get
            {
                if (!AllowNull && _ShippingTaxAmount is null)
                    _ShippingTaxAmount = default(decimal);
                return _ShippingTaxAmount;
            }
            set
            {
                if (value != null || AllowNull)
                    _ShippingTaxAmount = value;
            }
        }

        public virtual decimal? MiscAmount
        {
            get
            {
                if (!AllowNull && _MiscAmount is null)
                    _MiscAmount = default(decimal);
                return _MiscAmount;
            }
            set
            {
                if (value != null || AllowNull)
                    _MiscAmount = value;
            }
        }

        public virtual decimal? MiscTaxAmount
        {
            get
            {
                if (!AllowNull && _MiscTaxAmount is null)
                    _MiscTaxAmount = default(decimal);
                return _MiscTaxAmount;
            }
            set
            {
                if (value != null || AllowNull)
                    _MiscTaxAmount = value;
            }
        }

        public virtual decimal? ChargeAndAllowanceAmount
        {
            get
            {
                if (!AllowNull && _ChargeAndAllowanceAmount is null)
                    _ChargeAndAllowanceAmount = default(decimal);
                return _ChargeAndAllowanceAmount;
            }
            set
            {
                if (value != null || AllowNull)
                    _ChargeAndAllowanceAmount = value;
            }
        }

        public virtual decimal ItemTotalAmount
        {
            get
            {
                return _ItemTotalAmount;
            }
            set
            {
                _ItemTotalAmount = value;
            }
        }

        public virtual bool Stockable
        {
            get
            {
                return (_Stockable == 1);
            }
            set
            {
                _Stockable = value ? (byte)1 : (byte)0;
            }
        }

        public virtual bool IsAr
        {
            get
            {
                return (_IsAr == 1);
            }
            set
            {
                _IsAr = value ? (byte)1 : (byte)0;
            }
        }

        public virtual bool Taxable
        {
            get
            {
                return (_Taxable == 1);
            }
            set
            {
                _Taxable = value ? (byte)1 : (byte)0;
            }
        }

        public virtual bool Costable
        {
            get
            {
                return (_Costable == 1);
            }
            set
            {
                _Costable = value ? (byte)1 : (byte)0;
            }
        }

        public virtual decimal UnitCost
        {
            get
            {
                return _UnitCost;
            }
            set
            {
                _UnitCost = value;
            }
        }

        public virtual decimal AvgCost
        {
            get
            {
                return _AvgCost;
            }
            set
            {
                _AvgCost = value;
            }
        }

        public virtual decimal LotCost
        {
            get
            {
                return _LotCost;
            }
            set
            {
                _LotCost = value;
            }
        }

        public virtual DateTime? LotInDate
        {
            get
            {
                if (!AllowNull && _LotInDate is null)
                    _LotInDate = new DateTime().MinValueSql();
                return _LotInDate;
            }
            set
            {
                if (value != null || AllowNull)
                    _LotInDate = (value is null) ? (DateTime?)null : value?.Date.ToSqlSafeValue();
            }
        }

        public virtual DateTime? LotExpDate
        {
            get
            {
                if (!AllowNull && _LotExpDate is null)
                    _LotExpDate = new DateTime().MinValueSql();
                return _LotExpDate;
            }
            set
            {
                if (value != null || AllowNull)
                    _LotExpDate = (value is null) ? (DateTime?)null : value?.Date.ToSqlSafeValue();
            }
        }

        public virtual DateTime? EnterDateUtc
        {
            get
            {
                if (!AllowNull && _EnterDateUtc is null)
                    _EnterDateUtc = new DateTime().MinValueSql();
                return _EnterDateUtc;
            }
            set
            {
                if (value != null || AllowNull)
                    _EnterDateUtc = (value is null) ? (DateTime?)null : value?.Date.ToSqlSafeValue();
            }
        }

        public virtual DateTime? UpdateDateUtc
        {
            get
            {
                if (!AllowNull && _UpdateDateUtc is null)
                    _UpdateDateUtc = new DateTime().MinValueSql();
                return _UpdateDateUtc;
            }
            set
            {
                if (value != null || AllowNull)
                    _UpdateDateUtc = (value is null) ? (DateTime?)null : value?.Date.ToSqlSafeValue();
            }
        }

        public virtual string EnterBy
        {
            get
            {
                return _EnterBy?.TrimEnd();
            }
            set
            {
                _EnterBy = value.TruncateTo(100);
            }
        }

        public virtual string UpdateBy
        {
            get
            {
                return _UpdateBy?.TrimEnd();
            }
            set
            {
                _UpdateBy = value.TruncateTo(100);
            }
        }

        public virtual Guid DigitBridgeGuid
        {
            get
            {
                return _DigitBridgeGuid;
            }
            set
            {
                _DigitBridgeGuid = value;
            }
        }

        #endregion Properties - Generated 
    }
}

